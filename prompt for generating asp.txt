Prompting LLM to generate ASP code based on the Test argument.

- Using the given argument text, create ASP code that represents the argument’s structure.
- Stop at every comma and full stop.
- Break down the sentence into nouns, common nouns, verbs, adjectives, and adverbs.
- Break down the whole argument into three sections as instructed below.

Section 1 - Negative and positive relationships:
It will contain positive and negative relationships between two entities/nouns.
Positive also means the advantages or good qualities of an entity; negative also means the disadvantages or bad qualities of an entity.
For example:

Example Text 1:
"Elon Musk turns visionary ideas into reality."
Example Relationship:
pos(elon_musk, visionary_ideas).

Example Text 2:
"Tesla does not have good working conditions."
Example Relationship:
neg(tesla, good_working_conditions).

Remember: The pos() and neg() relations are the base. Every entity that is going to be mentioned later in a relation() relation, has to be mentioned before in a pos() or neg() relation.

Section 2 - General relationships:
This section figures out if two entities are related to each other or not.
So, list out all the entities/nouns that are related to each other.
These only states if two entities are in a general way related to each other; it does not need to specify negative or positive relationships.

Example text:
"With the way Elon Musk has handled Twitter, I think that this is also a disaster waiting to happen."
Example relationship:
relation(elon_musk, twitter).

Section 3 - Encoding:
This part specifies the typical equations on how relationships between two entities work.
In an argument basically there will be three parts, claim (the main argument text), proofs (sentences supporting the claim), counter argument (sentence opposing the claim)
First based on the negative (neg) and positive (pos) relations make general relations.

Example:
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).

If user asks support, use the knowledge of pos(elon, Y) and if user asks counter claims use the knowledge of neg(elon, Y).
Example:
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.

Remember:
- Do NOT create duplicate nodes or relationships.
- NEVER impute missing values or add information that is not present in the text.
- A relation has NEVER more than two entities.
- relation(X,Y) can only exist, if there is at least one neg or pos relation, that contains X and Y

Argument Text:
!!!!!!!!!!!!!!!!!!!!

Provide the ASP code using the above given instructions as in the following structure.

Example:
pos(elon musk, visionary ideas).
neg(tesla, good working conditions).

relation(elon musk, twitter).

elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.

VERY IMPORTANT RULES:
1. Don't add anything not mentioned to the structure and 
2. Don’t create a relation() between two entities that were not mentioned before in a neg() or pos() relation.
3. Don't use punctuation marks inside entities expect for '_' .
4. Don’t forget any "," or ")" or "(" or "." and don’t add any extra which are not mentioned in the syntax.
5. Don't start any entity with a number, just use letters. For Example: Instead of "60s" write "sixties" or instead of "1080p" write "thousand and eighty p".
6. Be careful when using relation(). Under no circumstances use relation() more often than neg() and pos() together.
