 ```asp
% Section 1 - Negative and positive relationships
neg(elon_musk, bad_working_conditions).
pos(elon_musk, visionary_ideas).

% Section 2 - General relationships
relation(elon_musk, twitter).

% Section 3 - Encoding
elon_is_good_because :- pos(elon_musk, Y).
elon_is_bad_because :- neg(elon_musk, Y).
compare(elon_musk,X,Y) :- neg(elon_musk,X),neg(Y,X), elon_musk != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon_musk.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(biblical_god, omniscient).
neg(biblical_god, omnibenevolent).
neg(biblical_god, omnipotent).

Section 2 - General relationships:

relation(sketchy, debate).
relation(sketchy, topic).
relation(sketchy, thesis).
relation(sketchy, argument).
relation(sketchy, interpretation).
relation(sketchy, bible).
relation(sketchy, old_testament).
relation(sketchy, new_testament).
relation(sketchy, king_james_version).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, christianity).
pos(pro, trolling).
neg(pro, objection).
neg(pro, clarification).
neg(pro, sarcasm).
neg(pro, guidelines).
neg(pro, apology).
neg(pro, confusion).
neg(pro, shame).
neg(pro, conduct).
neg(pro, trick).
neg(pro, tactic).
neg(pro, offense).
neg(pro, justification).
neg(pro, presentation).
neg(pro, time).
neg(pro, existence).
neg(pro, forfeit).
neg(pro, definition).
neg(pro, specification).
neg(pro, ground_rule).
neg(pro, interpretation).

Section 2 - General relationships:

relation(god, christianity).
relation(pro, trolling).
relation(pro, objection).
relation(pro, clarification).
relation(pro, sarcasm).
relation(pro, guidelines).
relation(pro, apology).
relation(pro, confusion).
relation(pro, shame).
relation(pro, conduct).
relation(pro, trick).
relation(pro, tactic).
relation(pro, offense).
relation(pro, justification).
relation(pro, presentation).
relation(pro, time).
relation(pro, existence).
relation(pro, forfeit).
relation(pro, definition).
relation(pro, specification).
relation(pro, ground_rule).
relation(pro, interpretation).

Section 3 - Encoding:

god_is_good_because :- pos(god, Y).
god_is_bad_because :- neg(god, Y).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.

pro_is_good_because :- pos(pro, Y).
pro_is_bad_because :- neg(pro, Y).
compare(pro,X,Y) :- neg(pro,X),neg(Y,X), pro != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = pro.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(political_system, flawed).
neg(politicians, general_lies).
pos(politicians, political_lies).
neg(new_zealand, democracy).
neg(america, democracy).
neg(america, wealthy_nation).
neg(america, transparent_political_system).
neg(politicians, poverty_eradication).
neg(politicians, hunger_eradication).
neg(opponent, strong_counter_arguments).
neg(opponent, own_premises).
neg(opponent, own_conclusions).

Section 2 - General relationships:

relation(political_system, politicians).
relation(politicians, lies).
relation(new_zealand, citizens_initiated_referendum).
relation(america, lobbyists).
relation(lobbyists, bribe_acceptance).
relation(america, homeless).
relation(america, starving).
relation(politicians, poverty).
relation(politicians, hunger).
relation(opponent, premises).
relation(opponent, conclusions).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(humans, evolution).
pos(humans, knowledge).
pos(knowledge, power).
pos(technology, knowledge).
pos(technology, advancements).
pos(advancements, technology).
pos(electricity, devices).
pos(machines, power).
pos(technology, flaws).
pos(robots, humans).

% Section 2 - General relationships
relation(humans, evolution).
relation(humans, knowledge).
relation(knowledge, power).
relation(technology, knowledge).
relation(technology, advancements).
relation(advancements, technology).
relation(electricity, devices).
relation(machines, power).
relation(technology, flaws).
relation(robots, humans).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(automatic_guns, safety_general_public).
neg(semi_automatic_guns, safety_general_public).

Section 2 - General relationships:

relation(guns, united_states).
relation(background_checks, individuals).
relation(firearms, individuals).
relation(tax, firearms).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(graphics, good_game).
pos(minecraft, beautiful_game).
neg(wind_waker, unique_game).
pos(wind_waker, zelda_game).
pos(diablo_2, replayability).

Section 2 - General relationships:

relation(graphics, game).
relation(minecraft, game).
relation(wind_waker, zelda_game).
relation(diablo_2, hack_and_slash_game).

Section 3 - Encoding:

graphics_is_bad_for_game :- neg(graphics, good_game).
graphics_is_good_for_game :- pos(graphics, good_game).
minecraft_is_beautiful :- pos(minecraft, beautiful_game).
wind_waker_is_not_unique :- neg(wind_waker, unique_game).
wind_waker_is_zelda_game :- pos(wind_waker, zelda_game).
diablo_2_is_replayable :- pos(diablo_2, replayability).
compare(graphics,X,Y) :- neg(graphics,X),neg(Y,X), graphics != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = graphics.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(affirmative, better_job).
pos(affirmative, existance).
pos(affirmative, nonexistance).
pos(affirmative, took_debate_seriously).
pos(affirmative, proposed_value).
pos(affirmative, laid_out_simple_contentions).
pos(affirmative, point_by_point_attack).
pos(animalistic_instinct, reliable).
pos(survival_of_fittest, biological_altruism).
pos(egoism, rejected).

neg(affirmative, prove_god_exists).
neg(affirmative, prove_without_reasonable_doubt).
neg(affirmative, addressed_opponents_contentions).
neg(animalistic_instinct, reliable).
neg(survival_of_the_fittest, biological_altruism).
neg(egoism, rejected).

Section 2 - General relationships:

relation(affirmative, god).
relation(affirmative, debate).
relation(affirmative, voters).
relation(affirmative, opponents_contentions).
relation(animalistic_instinct, morality).
relation(survival_of_the_fittest, biological_altruism).
relation(survival_of_the_fittest, egoism).
relation(egoism, philosophers).

Section 3 - Encoding:

affirmative_is_good_because :- pos(affirmative, Y).
affirmative_is_bad_because :- neg(affirmative, Y).
compare(affirmative,X,Y) :- neg(affirmative,X),neg(Y,X), affirmative != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = affirmative.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(rich_people, pay_college_tuition).
neg(government, pay_college_tuition).
neg(wall_street, pay_college_tuition).

Section 2 - General relationships:

relation(college_tuition, free).
relation(college, expensive).
relation(wall_street, rich_people).
relation(government, tax).

Section 3 - Encoding:

compare(rich_people,X,Y) :- neg(rich_people,X),neg(Y,X), rich_people != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = rich_people.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(islam, one_god).
pos(islam, prophets).
pos(islam, messengers).
pos(islam, mohammed).
pos(islam, judgement_day).
pos(islam, heaven).
pos(islam, hell).

Section 2 - General relationships:

relation(islam, hinduism).

Section 3 - Encoding:

islam_is_good_because :- pos(islam, Y).
islam_is_bad_because :- neg(islam, Y).
compare(islam,X,Y) :- neg(islam,X),neg(Y,X), islam != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = islam.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(women, beautiful).
pos(women, self_esteem).
pos(men, right).
pos(waitresses, right).

Section 2 - General relationships:

relation(women, insult).
relation(women, compliment).
relation(women, men).
relation(waitresses, men).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(hegemony, counterproductive).
neg(hegemony, solves_war).
neg(hegemony, reform).
neg(hegemony, foreign_policy).
neg(hegemony, engagement).
neg(hegemony, economy).
neg(hegemony, deficit).
neg(hegemony, terrorism).
neg(hegemony, american_value_system).
neg(hegemony, proliferation).
neg(hegemony, nuclear_war).
neg(hegemony, rogue_states).
neg(hegemony, military).
neg(hegemony, counterbalancing).
neg(hegemony, wmd).
pos(hegemony, multipolarity).
pos(hegemony, europe).
pos(hegemony, china).

% Section 2 - General relationships
relation(hegemony, counterproductive).
relation(hegemony, multipolarity).
relation(hegemony, europe).
relation(hegemony, china).
relation(hegemony, solves_war).
relation(hegemony, reform).
relation(hegemony, foreign_policy).
relation(hegemony, engagement).
relation(hegemony, economy).
relation(hegemony, deficit).
relation(hegemony, terrorism).
relation(hegemony, american_value_system).
relation(hegemony, proliferation).
relation(hegemony, nuclear_war).
relation(hegemony, rogue_states).
relation(hegemony, military).
relation(hegemony, counterbalancing).
relation(hegemony, wmd).

% Section 3 - Encoding
hegemony_is_bad_because :- neg(hegemony, Y).
compare(hegemony,X,Y) :- neg(hegemony,X),neg(Y,X), hegemony != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = hegemony.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(apple, os_x).
pos(microsoft, windows).

Section 2 - General relationships:

relation(apple, os_x).
relation(microsoft, windows).
relation(os_x, windows).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(capital_punishment, safety).
neg(capital_punishment, appropriate_punishment).
pos(capital_punishment, vengeance).

Section 2 - General relationships:

relation(capital_punishment, safety).
relation(capital_punishment, appropriate_punishment).
relation(capital_punishment, vengeance).
relation(safety, prison_guards).
relation(safety, other_prisoners).
relation(safety, general_public).
relation(appropriate_punishment, crime).
relation(appropriate_punishment, murder).
relation(vengeance, emotions).

Section 3 - Encoding:

capital_punishment_is_good_because :- pos(capital_punishment, Y).
capital_punishment_is_bad_because :- neg(capital_punishment, Y).
compare(capital_punishment,X,Y) :- neg(capital_punishment,X),neg(Y,X), capital_punishment != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = capital_punishment.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(legal_age, sixteen).
pos(development, twenties).
neg(treating_young_like_adults, responsible).
neg(treating_young_like_adults, immature).
pos(telling_teens_they_cant_do_something, grown_up).
pos(knowing_responsibilities_of_being_adult, careful_decisions).

Section 2 - General relationships:

relation(legal_age, development).
relation(treating_young_like_adults, immature).
relation(telling_teens_they_cant_do_something, grown_up).
relation(knowing_responsibilities_of_being_adult, careful_decisions).

Section 3 - Encoding:

legal_age_is_good_because :- pos(legal_age, Y).
legal_age_is_bad_because :- neg(legal_age, Y).
compare(legal_age,X,Y) :- neg(legal_age,X),neg(Y,X), legal_age != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = legal_age.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(christianity, words_of_christ).
pos(christianity, believers).
pos(christianity, heaven).
neg(christianity, earth).
pos(christianity, faith).
pos(christianity, practical_christians).
neg(christianity, impractical_christians).
pos(practical_christians, compressibility).
neg(impractical_christians, compressibility).
pos(impractical_christians, clouds).
neg(impractical_christians, ground).
pos(adam, eve).
pos(adam_and_eve, galatians_5_9).
pos(eve, galatians_5_9).
pos(serpent, eve).
pos(adam, eve).
pos(eve, human_race).
pos(adam, sin).
pos(eve, sin).
pos(galatians_5_9, galatians_5_9).
pos(galatians_5_9, corinthians_5_6).
pos(galatians_5_9, matthew_13_33).

Section 2 - General relationships:

relation(christianity, words_of_christ).
relation(christianity, believers).
relation(christianity, heaven).
relation(christianity, earth).
relation(christianity, faith).
relation(christianity, practical_christians).
relation(christianity, impractical_christians).
relation(practical_christians, compressibility).
relation(impractical_christians, compressibility).
relation(impractical_christians, clouds).
relation(impractical_christians, ground).
relation(adam, eve).
relation(adam_and_eve, galatians_5_9).
relation(eve, galatians_5_9).
relation(serpent, eve).
relation(adam, eve).
relation(eve, human_race).
relation(adam, sin).
relation(eve, sin).
relation(galatians_5_9, galatians_5_9).
relation(galatians_5_9, corinthians_5_6).
relation(galatians_5_9, matthew_13_33).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(nuclear_weapons, help_small_and_poor_nations_set_agendas).
pos(economic_power, significant_in_international_and_diplomatic_discourse).
neg(nuclear_weapon_power, significant_in_international_and_diplomatic_discourse).
neg(nuclear_weapons, rapidly_addressed_grievances).
pos(nuclear_weapons, provide_security_against_neighbouring_states).
neg(nuclear_weapons, accidental_or_unintended_use).
neg(nuclear_weapons, falling_into_the_hands_of_terrorists_and_rogue_states).

% Section 2 - General relationships
relation(nuclear_weapons, international_stage).
relation(nuclear_weapons, small_and_poor_nations).
relation(economic_power, international_and_diplomatic_discourse).
relation(nuclear_weapons, united_nations).
relation(nuclear_weapons, neighbouring_states).
relation(nuclear_weapons, terrorists).
relation(nuclear_weapons, rogue_states).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(universal_health_care, right).
pos(universal_health_care, access_to_medicine).
pos(universal_health_care, good_health).
pos(universal_health_care, no_fear_of_medical_bills).
neg(us, universal_health_care).
neg(free_market, solution).
neg(hmos, solution).
neg(hmos, medical_care).

% Section 2 - General relationships
relation(universal_health_care, cost_concerns).
relation(universal_health_care, socialism).
relation(universal_health_care, freedom_of_choice).
relation(universal_health_care, wait_times).
relation(universal_health_care, single_payer).
relation(universal_health_care, canada).
relation(universal_health_care, hmos).
relation(universal_health_care, police_departments).
relation(universal_health_care, fire_departments).
relation(universal_health_care, public_schools).
relation(universal_health_care, libraries).
relation(universal_health_care, obama).

% Section 3 - Encoding
universal_health_care_is_good_because :- pos(universal_health_care, Y).
universal_health_care_is_bad_because :- neg(universal_health_care, Y).
compare(universal_health_care,X,Y) :- neg(universal_health_care,X),neg(Y,X), universal_health_care != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = universal_health_care.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(gay_marriage, legal).
neg(church, state).
pos(god, free_will).
neg(god, confusion).
pos(god, one_religion).

Section 2 - General relationships:

relation(gay_marriage, united_states).
relation(church, state).
relation(god, free_will).
relation(god, confusion).
relation(god, religion).

Section 3 - Encoding:

gay_marriage_is_good_because :- pos(gay_marriage, Y).
gay_marriage_is_bad_because :- neg(gay_marriage, Y).
compare(gay_marriage,X,Y) :- neg(gay_marriage,X),neg(Y,X), gay_marriage != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gay_marriage.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(joe_arpaio, awesome).
neg(joe_arpaio, hate_latinos_unjustly).

% Section 2 - General relationships
relation(joe_arpaio, latinos).
relation(joe_arpaio, sb1070).
relation(joe_arpaio, posse).
relation(joe_arpaio, illegal_immigration).
relation(joe_arpaio, arizona_act).
relation(joe_arpaio, wikipedia).
relation(joe_arpaio, sheriffjoe).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(human_life, sacredness).
neg(death_penalty, humane).
pos(death_penalty, punishment).
pos(death_penalty, harsh).
neg(death_penalty, moral).
pos(moral_values, society).
neg(death_penalty, modern).
neg(death_penalty, civilized).
neg(death_penalty, supporters).
pos(death_penalty, critics).
neg(death_penalty, romantic).
pos(death_penalty, basic_human_nature).
pos(inhumane, torture).
pos(inhumane, rape).
pos(inhumane, treason).
pos(inhumane, kidnapping).
pos(inhumane, murder).

Section 2 - General relationships:

relation(death_penalty, moral_values).
relation(death_penalty, society).
relation(death_penalty, critics).
relation(death_penalty, basic_human_nature).
relation(inhumane, death_penalty).

Section 3 - Encoding:

death_penalty_is_good_because :- pos(death_penalty, Y).
death_penalty_is_bad_because :- neg(death_penalty, Y).
compare(death_penalty,X,Y) :- neg(death_penalty,X),neg(Y,X), death_penalty != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = death_penalty.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(mosquito, encourage_young_people).
neg(mosquito, weapon).
pos(mosquito, ignored).
pos(mosquito, irritating).
neg(mosquito, extreme_discomfort).
neg(mosquito, lasting_damage).

Section 2 - General relationships:

relation(mosquito, alarm_clock).
relation(mosquito, cellphone).
relation(mosquito, ringtone).
relation(mosquito, adults).
relation(mosquito, teenagers).

Section 3 - Encoding:

mosquito_is_not_weapon :- neg(mosquito, weapon).
mosquito_is_encouraging :- pos(mosquito, encourage_young_people).
mosquito_is_ignored :- pos(mosquito, ignored).
mosquito_is_irritating :- pos(mosquito, irritating).
mosquito_does_not_cause_extreme_discomfort :- neg(mosquito, extreme_discomfort).
mosquito_does_not_cause_lasting_damage :- neg(mosquito, lasting_damage).
compare(mosquito,X,Y) :- neg(mosquito,X),neg(Y,X), mosquito != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = mosquito.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(public, video).
pos(video, people).
pos(people, watchdog).
pos(watchdog, town_manager).
pos(town_manager, youtube).
pos(youtube, people).

neg(public, camera).
neg(camera, people).
neg(people, town_manager).
neg(town_manager, camera).

Section 2 - General relationships:

relation(public, camera).
relation(camera, people).
relation(people, town_manager).
relation(town_manager, camera).
relation(town_manager, youtube).
relation(youtube, people).

Section 3 - Encoding:

public_is_good_because :- pos(public, Y).
public_is_bad_because :- neg(public, Y).
camera_is_good_because :- pos(camera, Y).
camera_is_bad_because :- neg(camera, Y).
people_is_good_because :- pos(people, Y).
people_is_bad_because :- neg(people, Y).
watchdog_is_good_because :- pos(watchdog, Y).
watchdog_is_bad_because :- neg(watchdog, Y).
town_manager_is_good_because :- pos(town_manager, Y).
town_manager_is_bad_because :- neg(town_manager, Y).
youtube_is_good_because :- pos(youtube, Y).
youtube_is_bad_because :- neg(youtube, Y).
compare(public,X,Y) :- neg(public,X),neg(Y,X), public != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = public.
compare(camera,X,Y) :- neg(camera,X),neg(Y,X), camera != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = camera.
compare(people,X,Y) :- neg(people,X),neg(Y,X), people != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = people.
compare(watchdog,X,Y) :- neg(watchdog,X),neg(Y,X), watchdog != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = watchdog.
compare(town_manager,X,Y) :- neg(town_manager,X),neg(Y,X), town_manager != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = town_manager.
compare(youtube,X,Y) :- neg(youtube,X),neg(Y,X), youtube != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = youtube.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(gulf_war_ii, just).
pos(gulf_war_ii, current_war_in_iraq).
pos(just, merited).
neg(iraq, stabilizing_force).
neg(iraq_war, just).
neg(iraq_war, good).
neg(iraq_war, merited).
pos(oil, strategic_asset).

Section 2 - General relationships:

relation(gulf_war_ii, iraq).
relation(gulf_war_ii, iraq_war).
relation(iraq_war, iraq).
relation(iraq_war, oil).
relation(oil, saudi_arabia).

Section 3 - Encoding:

gulf_war_ii_is_just_because :- pos(gulf_war_ii, Y).
gulf_war_ii_is_not_just_because :- neg(gulf_war_ii, Y).
compare(gulf_war_ii,X,Y) :- neg(gulf_war_ii,X),neg(Y,X), gulf_war_ii != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gulf_war_ii.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(martian_manhunter, vision).
pos(zatanna, thoughts).
pos(captain_atom, energy_manipulator_powers).
pos(green_lanterns, space).
pos(batman, plans).
pos(superman, powerful).
pos(flash, time).
pos(black_lightning, electronic_equipment).
pos(cyborg, laser_cannon).
pos(steel, suit).
pos(steel, hammer).
pos(firestorm, useful).

Section 2 - General relationships:

relation(martian_manhunter, hulk).
relation(martian_manhunter, sentry).
relation(zatanna, thoughts).
relation(captain_atom, energy_manipulator_powers).
relation(green_lanterns, space).
relation(batman, jla).
relation(batman, avengers).
relation(superman, powerful).
relation(flash, time).
relation(black_lightning, electronic_equipment).
relation(cyborg, laser_cannon).
relation(steel, suit).
relation(steel, hammer).
relation(firestorm, useful).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(x_men_first_class, important_movie_battles).
pos(darwin, black_dude).
pos(darwin, fish).
pos(white_antagonist, boss).
pos(white_antagonist, fireball).
pos(white_people, bad_ass_powers).
neg(darwin, enslaved).
neg(darwin, unfit_to_live).
neg(darwin, fight).
neg(darwin, win).
neg(darwin, survive).
neg(black_dude, enslaved).
neg(black_dude, unfit_to_live).
neg(black_dude, fight).
neg(black_dude, win).
neg(black_dude, survive).
neg(hollywood, racist).

Section 2 - General relationships:

relation(x_men_first_class, darwin).
relation(x_men_first_class, white_antagonist).
relation(x_men_first_class, white_people).
relation(darwin, white_antagonist).
relation(darwin, white_people).
relation(white_antagonist, darwin).
relation(white_antagonist, white_people).
relation(white_people, darwin).
relation(white_people, white_antagonist).

Section 3 - Encoding:

darwin_is_good_because :- pos(darwin, Y).
darwin_is_bad_because :- neg(darwin, Y).
white_antagonist_is_good_because :- pos(white_antagonist, Y).
white_antagonist_is_bad_because :- neg(white_antagonist, Y).
x_men_first_class_is_good_because :- pos(x_men_first_class, Y).
x_men_first_class_is_bad_because :- neg(x_men_first_class, Y).
compare(darwin, X, Y) :- neg(darwin, X), neg(Y, X), darwin != Y.
compare(white_antagonist, X, Y) :- neg(white_antagonist, X), neg(white_antagonist, Y), white_antagonist != Y.
compare(x_men_first_class, X, Y) :- neg(x_men_first_class, X), neg(x_men_first_class, Y), x_men_first_class != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(cause_and_effect, plus).
pos(cause_and_effect, minus).
pos(lies, complicated).
pos(lies, separation).
pos(true, simple).
pos(cause_and_effect, sufficient).
pos(complication, unnecessary).
pos(man, ladder).
pos(plus, minus).
pos(causes, effects).
pos(man, weight).
pos(man, latter).
pos(man, forward).
pos(man, latter).

neg(plus, minus).
neg(minus, plus).
neg(lies, simple).
neg(true, complicated).
neg(cause_and_effect, unnecessary).
neg(complication, sufficient).
neg(man, forward).
neg(man, latter).
neg(causes, effects).
neg(man, weight).
neg(man, latter).

Section 2 - General relationships:

relation(cause_and_effect, plus).
relation(cause_and_effect, minus).
relation(lies, complicated).
relation(lies, separation).
relation(true, simple).
relation(cause_and_effect, sufficient).
relation(complication, unnecessary).
relation(man, ladder).
relation(plus, minus).
relation(causes, effects).
relation(man, weight).
relation(man, latter).
relation(man, forward).
relation(man, latter).

Section 3 - Encoding:

elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(green_house_gases, effect_our_temperature).
pos(green_house_gases, earth_temperature).
pos(earth, temperature).
pos(temperature, earth).
pos(earth, warmer).
pos(little_ice_age, temperature).
pos(temperature, little_ice_age).
pos(mid_evil_warm_period, temperature).
pos(temperature, mid_evil_warm_period).
pos(temperature, rise).
pos(rise, temperature).
pos(earth, temperature_rise).
pos(temperature_rise, earth).
pos(temperature, increase).
pos(increase, temperature).
pos(earth, temperature_increase).
pos(temperature_increase, earth).
pos(temperature, drop).
pos(drop, temperature).
pos(earth, temperature_drop).
pos(temperature_drop, earth).
pos(temperature, decrease).
pos(decrease, temperature).
pos(earth, temperature_decrease).
pos(temperature_decrease, earth).
pos(polar_bears, numbers).
pos(numbers, polar_bears).

% Section 2 - General relationships
relation(green_house_gases, temperature).
relation(temperature, green_house_gases).
relation(earth, temperature).
relation(temperature, earth).
relation(little_ice_age, temperature).
relation(temperature, little_ice_age).
relation(mid_evil_warm_period, temperature).
relation(temperature, mid_evil_warm_period).
relation(polar_bears, numbers).
relation(numbers, polar_bears).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###

###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(church, sex_outside_of_marriage).
pos(bible, sex_outside_of_christian_marriage).
pos(jesus, sex_outside_of_christian_marriage).
neg(christian_history, sex_within_marriage).
pos(priests, celibate).
pos(monks, celibate).
pos(nuns, celibate).
pos(jesus, adulterers).
pos(jesus, sinners).
neg(jesus, sin).

% Section 2 - General relationships
relation(church, sex).
relation(bible, sex).
relation(jesus, sex).
relation(christian_history, sex).
relation(priests, sex).
relation(monks, sex).
relation(nuns, sex).
relation(adulterers, jesus).
relation(sinners, jesus).
relation(sin, jesus).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(global_migration, problem).
neg(global_migration, solution).
pos(reduce_migration, solution).
pos(victor_davis_hanson, author).
pos(the_global_immigration_problem, title).
pos(real_clear_politics, publisher).
pos(may, month).
pos(thirty_one, day).
pos(two_thousand_and_seven, year).
pos(germany, country).
pos(turkish_workers, people).
pos(londonstan, slang).
pos(london, city).
pos(pakistani_nationals, people).
pos(france, country).
pos(north_african_immigrants, people).
pos(albanians, people).
pos(greece, country).
pos(farm_work, job).
pos(latin_america, continent).
pos(africa, continent).
pos(middle_east, region).
pos(family_planning, policy).
pos(natural_wealth, resource).

Section 2 - General relationships:

relation(global_migration, problem).
relation(global_migration, solution).
relation(reduce_migration, solution).
relation(victor_davis_hanson, author).
relation(the_global_immigration_problem, title).
relation(real_clear_politics, publisher).
relation(may, month).
relation(thirty_one, day).
relation(two_thousand_and_seven, year).
relation(germany, country).
relation(turkish_workers, people).
relation(londonstan, slang).
relation(london, city).
relation(pakistani_nationals, people).
relation(france, country).
relation(north_african_immigrants, people).
relation(albanians, people).
relation(greece, country).
relation(farm_work, job).
relation(latin_america, continent).
relation(africa, continent).
relation(middle_east, region).
relation(family_planning, policy).
relation(natural_wealth, resource).

Section 3 - Encoding:

global_migration_is_problem :- pos(global_migration, problem).
global_migration_is_not_problem :- neg(global_migration, problem).
reduce_migration_is_solution :- pos(reduce_migration, solution).
reduce_migration_is_not_solution :- neg(reduce_migration, solution).
compare(global_migration,X,Y) :- neg(global_migration,X),neg(Y,X), global_migration != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = global_migration.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(evolution, scientific_evidence).
pos(evolution, transitional_fossils).
pos(evolution, speciation).
pos(evolution, genetic_composition).
pos(evolution, organisms).
pos(evolution, population).
pos(evolution, time).
pos(evolution, life).
pos(evolution, today).
pos(evolution, evidence).
pos(transitional_fossils, evolution).
pos(speciation, evolution).
pos(goatsbeards, speciation).
pos(drosophila_paulistorum, speciation).
pos(goatsbeards, europe).
pos(goatsbeards, america).
pos(goatsbeards, species).
pos(goatsbeards, hybrids).
pos(goatsbeards, offspring).
pos(drosophila_paulistorum, fruit_fly).
pos(drosophila_paulistorum, strains).
pos(drosophila_paulistorum, hybrids).
pos(drosophila_paulistorum, species).
pos(drosophila_paulistorum, late_fifties).
pos(drosophila_paulistorum, early_sixties).

Section 2 - General relationships:

relation(evolution, scientific_evidence).
relation(evolution, transitional_fossils).
relation(evolution, speciation).
relation(evolution, genetic_composition).
relation(evolution, organisms).
relation(evolution, population).
relation(evolution, time).
relation(evolution, life).
relation(evolution, today).
relation(evolution, evidence).
relation(transitional_fossils, evolution).
relation(speciation, evolution).
relation(goatsbeards, speciation).
relation(drosophila_paulistorum, speciation).
relation(goatsbeards, europe).
relation(goatsbeards, america).
relation(goatsbeards, species).
relation(goatsbeards, hybrids).
relation(goatsbeards, offspring).
relation(drosophila_paulistorum, fruit_fly).
relation(drosophila_paulistorum, strains).
relation(drosophila_paulistorum, hybrids).
relation(drosophila_paulistorum, species).
relation(drosophila_paulistorum, late_fifties).
relation(drosophila_paulistorum, early_sixties).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(liberalism, freedom_of_expression).
pos(liberalism, public_education).
pos(liberalism, woman_suffrage).
pos(acorn, government_subsidies).
pos(acorn, housing_for_the_poor).
pos(public_schools, democracy).
pos(public_schools, socialization).
pos(woman_suffrage, voter_turnout_rate).
pos(woman_suffrage, democracy).

neg(liberalism, acorn).
neg(acorn, liberal_philosophy).
neg(acorn, standards).
neg(acorn, war).
neg(acorn, spying).

Section 2 - General relationships:

relation(liberalism, america).
relation(liberalism, founding_fathers).
relation(liberalism, 1st_amendment).
relation(liberalism, congress).
relation(liberalism, religion).
relation(liberalism, free_exercise).
relation(liberalism, freedom_of_speech).
relation(liberalism, freedom_of_the_press).
relation(liberalism, right_to_assemble).
relation(liberalism, right_to_petition).
relation(liberalism, british_rule).
relation(acorn, democrats).
relation(acorn, republicans).
relation(acorn, government_subsidies).
relation(acorn, housing_for_the_poor).
relation(public_schools, democracy).
relation(public_schools, socialization).
relation(woman_suffrage, voter_turnout_rate).
relation(woman_suffrage, democracy).

Section 3 - Encoding:

liberalism_is_good_because :- pos(liberalism, Y).
liberalism_is_bad_because :- neg(liberalism, Y).
compare(liberalism,X,Y) :- neg(liberalism,X),neg(Y,X), liberalism != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = liberalism.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(racist, common_sense).
neg(racist, intelligence).

Section 2 - General relationships:

relation(racist, ignorance).
relation(ignorance, common_sense).
relation(intelligence, thinking).
relation(intelligence, heart).
relation(intelligence, head).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(rejecting_existence_of_god, reasonable).
pos(con, argument).
pos(con, collection_of_statements).
pos(con, series_of_words).
pos(con, barely_strung_together).
neg(con, creator_of_the_universe).
neg(con, source_of_morality).
neg(con, anal_lube).
neg(con, cauldron_days).
neg(con, jammy).
neg(con, proper).
neg(con, sheeple).
neg(con, fairies).
neg(con, trees).
neg(con, darkness).
neg(con, death).
neg(con, my_face).
neg(con, hideous).

% Section 2 - General relationships
relation(rejecting_existence_of_god, reasonable).
relation(con, argument).
relation(con, collection_of_statements).
relation(con, series_of_words).
relation(con, barely_strung_together).
relation(con, creator_of_the_universe).
relation(con, source_of_morality).
relation(con, anal_lube).
relation(con, cauldron_days).
relation(con, jammy).
relation(con, proper).
relation(con, sheeple).
relation(con, fairies).
relation(con, trees).
relation(con, darkness).
relation(con, death).
relation(con, my_face).
relation(con, hideous).

% Section 3 - Encoding
rejecting_existence_of_god_is_reasonable :- pos(rejecting_existence_of_god, reasonable).
rejecting_existence_of_god_is_not_reasonable :- neg(rejecting_existence_of_god, reasonable).
con_has_argument :- pos(con, argument).
con_has_collection_of_statements :- pos(con, collection_of_statements).
con_has_series_of_words :- pos(con, series_of_words).
con_has_barely_strung_together :- pos(con, barely_strung_together).
con_does_not_believe_in_creator_of_the_universe :- neg(con, creator_of_the_universe).
con_does_not_believe_in_source_of_morality :- neg(con, source_of_morality).
con_uses_anal_lube :- pos(con, anal_lube).
con_refers_to_cauldron_days :- pos(con, cauldron_days).
con_refers_to_jammy :- pos(con, jammy).
con_refers_to_proper :- pos(con, proper).
con_refers_to_sheeple :- pos(con, sheeple).
con_refers_to_fairies :- pos(con, fairies).
con_refers_to_trees :- pos(con, trees).
con_refers_to_darkness :- pos(con, darkness).
con_refers_to_death :- pos(con, death).
con_refers_to_my_face :- pos(con, my_face).
con_thinks_my_face_is_hideous :- pos(con, hideous).
compare(rejecting_existence_of_god, reasonable, not_reasonable) :- neg(rejecting_existence_of_god, reasonable).
compare(con, has_argument, does_not_have_argument) :- neg(con, argument).
compare(con, has_collection_of_statements, does_not_have_collection_of_statements) :- neg(con, collection_of_statements).
compare(con, has_series_of_words, does_not_have_series_of_words) :- neg(con, series_of_words).
compare(con, has_barely_strung_together, does_not_have_barely_strung_together) :- neg(con, barely_strung_together).
compare(con, believes_in_creator_of_the_universe, does_not_believe_in_creator_of_the_universe) :- neg(con, creator_of_the_universe).
compare(con, believes_in_source_of_morality, does_not_believe_in_source_of_morality) :- neg(con, source_of_morality).
compare(con, uses_anal_lube, does_not_use_anal_lube) :- neg(con, anal_lube).
compare(con, refers_to_cauldron_days, does_not_refer_to_cauldron_days) :- neg(con, cauldron_days).
compare(con, refers_to_jammy, does_not_refer_to_jammy) :- neg(con, jammy).
compare(con, refers_to_proper, does_not_refer_to_proper) :- neg(con, proper).
compare(con, refers_to_sheeple, does_not_refer_to_sheeple) :- neg(con, sheeple).
compare(con, refers_to_fairies, does_not_refer_to_fairies) :- neg(con, fairies).
compare(con, refers_to_trees, does_not_refer_to_trees) :- neg(con, trees).
compare(con, refers_to_darkness, does_not_refer_to_darkness) :- neg(con, darkness).
compare(con, refers_to_death, does_not_refer_to_death) :- neg(con, death).
compare(con, refers_to_my_face, does_not_refer_to_my_face) :- neg(con, my_face).
compare(con, thinks_my_face_is_hideous, does_not_think_my_face_is_hideous) :- neg(con, hideous).
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(government, citizens).
pos(consumers, spending).
pos(economists, agreement).
pos(inflation, prices).
pos(prices, salaries).
pos(salaries, prices).
pos(money, worth).
pos(hyperinflation, disastrous).
pos(taxation, spending).
pos(keynsian_economic_theory, taxation).
pos(prices, profits).
pos(profits, spending).
pos(exports, revenue).
pos(revenue, churn).

neg(government, citizens).
neg(consumers, spending).
neg(economists, agreement).
neg(inflation, prices).
neg(prices, salaries).
neg(salaries, prices).
neg(money, worth).
neg(hyperinflation, disastrous).
neg(taxation, spending).
neg(keynsian_economic_theory, taxation).
neg(prices, profits).
neg(profits, spending).
neg(exports, revenue).
neg(revenue, churn).

Section 2 - General relationships:

relation(government, citizens).
relation(consumers, spending).
relation(economists, agreement).
relation(inflation, prices).
relation(prices, salaries).
relation(salaries, prices).
relation(money, worth).
relation(hyperinflation, disastrous).
relation(taxation, spending).
relation(keynsian_economic_theory, taxation).
relation(prices, profits).
relation(profits, spending).
relation(exports, revenue).
relation(revenue, churn).

Section 3 - Encoding:

government_is_good_because :- pos(government,Y).
government_is_bad_because :- neg(government,Y).
compare(government,X,Y) :- neg(government,X),neg(Y,X), government != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = government.

citizens_is_good_because :- pos(citizens,Y).
citizens_is_bad_because :- neg(citizens,Y).
compare(citizens,X,Y) :- neg(citizens,X),neg(Y,X), citizens != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = citizens.

consumers_is_good_because :- pos(consumers,Y).
consumers_is_bad_because :- neg(consumers,Y).
compare(consumers,X,Y) :- neg(consumers,X),neg(Y,X), consumers != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = consumers.

spending_is_good_because :- pos(spending,Y).
spending_is_bad_because :- neg(spending,Y).
compare(spending,X,Y) :- neg(spending,X),neg(Y,X), spending != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = spending.

economists_is_good_because :- pos(economists,Y).
economists_is_bad_because :- neg(economists,Y).
compare(economists,X,Y) :- neg(economists,X),neg(Y,X), economists != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = economists.

agreement_is_good_because :- pos(agreement,Y).
agreement_is_bad_because :- neg(agreement,Y).
compare(agreement,X,Y) :- neg(agreement,X),neg(Y,X), agreement != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = agreement.

inflation_is_good_because :- pos(inflation,Y).
inflation_is_bad_because :- neg(inflation,Y).
compare(inflation,X,Y) :- neg(inflation,X),neg(Y,X), inflation != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = inflation.

prices_is_good_because :- pos(prices,Y).
prices_is_bad_because :- neg(prices,Y).
compare(prices,X,Y) :- neg(prices,X),neg(Y,X), prices != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = prices.

salaries_is_good_because :- pos(salaries,Y).
salaries_is_bad_because :- neg(salaries,Y).
compare(salaries,X,Y) :- neg(salaries,X),neg(Y,X), salaries != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = salaries.

money_is_good_because :- pos(money,Y).
money_is_bad_because :- neg(money,Y).
compare(money,X,Y) :- neg(money,X),neg(Y,X), money != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = money.

hyperinflation_is_good_because :- pos(hyperinflation,Y).
hyperinflation_is_bad_because :- neg(hyperinflation,Y).
compare(hyperinflation,X,Y) :- neg(hyperinflation,X),neg(Y,X), hyperinflation != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = hyperinflation.

disastrous_is_good_because :- pos(disastrous,Y).
disastrous_is_bad_because :- neg(disastrous,Y).
compare(disastrous,X,Y) :- neg(disastrous,X),neg(Y,X), disastrous != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = disastrous.

taxation_is_good_because :- pos(taxation,Y).
taxation_is_bad_because :- neg(taxation,Y).
compare(taxation,X,Y) :- neg(taxation,X),neg(Y,X), taxation != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = taxation.

keynsian_economic_theory_is_good_because :- pos(keynsian_economic_theory,Y).
keynsian_economic_theory_is_bad_because :- neg(keynsian_economic_theory,Y).
compare(keynsian_economic_theory,X,Y) :- neg(keynsian_economic_theory,X),neg(Y,X), keynsian_economic_theory != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = keynsian_economic_theory.

profits_is_good_because :- pos(profits,Y).
profits_is_bad_because :- neg(profits,Y).
compare(profits,X,Y) :- neg(profits,X),neg(Y,X), profits != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = profits.

exports_is_good_because :- pos(exports,Y).
exports_is_bad_because :- neg(exports,Y).
compare(exports,X,Y) :- neg(exports,X),neg(Y,X), exports != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = exports.

revenue_is_good_because :- pos(revenue,Y).
revenue_is_bad_because :- neg(revenue,Y).
compare(revenue,X,Y) :- neg(revenue,X),neg(Y,X), revenue != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = revenue.

churn_is_good_because :- pos(churn,Y).
churn_is_bad_because :- neg(churn,Y).
compare(churn,X,Y) :- neg(churn,X),neg(Y,X), churn != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = churn.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(parental_responsibility, unjust_argument).
pos(parental_responsibility, discipline).
pos(discipline, cognitive_deficits).
pos(cognitive_deficits, brain_development).
pos(brain_development, children).
pos(children, normal).

Section 2 - General relationships:

relation(parental_responsibility, discipline).
relation(discipline, cognitive_deficits).
relation(cognitive_deficits, brain_development).
relation(brain_development, children).
relation(children, normal).
relation(parental_responsibility, unjust_argument).

Section 3 - Encoding:

parental_responsibility_is_good_because :- pos(parental_responsibility, Y).
parental_responsibility_is_bad_because :- neg(parental_responsibility, Y).
compare(parental_responsibility,X,Y) :- neg(parental_responsibility,X),neg(Y,X), parental_responsibility != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = parental_responsibility.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(i, hardcore_winner).
pos(i, woman).
pos(you, child).
neg(you, best).
neg(you, dinner).

Section 2 - General relationships:

relation(i, you).

Section 3 - Encoding:

i_is_good_because :- pos(i,Y).
i_is_bad_because :- neg(i,Y).
you_is_good_because :- pos(you,Y).
you_is_bad_because :- neg(you,Y).
compare(i,X,Y) :- neg(i,X),neg(Y,X), i != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = i.
compare(you,X,Y) :- neg(you,X),neg(Y,X), you != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = you.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(sympathize, extremists).
neg(sympathize, moderates).

% Section 2 - General relationships
relation(sympathize, political_issue).
relation(political_issue, hard_right).
relation(political_issue, hard_left).
relation(political_beliefs, political_issue).
relation(political_beliefs, moderate).
relation(political_ideology, moderate).
relation(political_party, moderate).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(women, hit_men).

Section 2 - General relationships:

relation(women, men).
relation(society, individuals).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(marajuana, good).
pos(lord, giving_us_this_herb).
pos(marajuana, boost_economy).
pos(marajuana, make_mind_more_creative).
pos(opponent, valid).

% Section 2 - General relationships
relation(marajuana, intoxication).
relation(intoxication, definition).
relation(definition, wikipedia).
relation(wikipedia, information).
relation(information, change).
relation(marajuana, religion).
relation(religion, christianity).
relation(religion, judaism).
relation(religion, islamic).
relation(marajuana, economy).
relation(economy, tax).
relation(tax, debt).
relation(marajuana, productivity).
relation(productivity, workers).
relation(productivity, methods).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(video_games, ruin).
pos(society, ruin).
pos(video_games, teen_violence).
pos(teen_violence, murder).
pos(video_games, addiction).
pos(addiction, anger).
pos(addiction, verbal_abuse).
pos(addiction, nausea).
pos(addiction, physical_illness).
pos(addiction, restless_taunting_dreams).
pos(addiction, anxiety).
pos(addiction, depression).
pos(addiction, mood_swings).
pos(addiction, fear).
pos(addiction, irritability).
pos(addiction, restlessness).
pos(addiction, sadness).
pos(addiction, loneliness).
pos(children, future).
pos(society, children).

neg(society, addiction).
neg(society, murder).

Section 2 - General relationships:

relation(video_games, teen_violence).
relation(video_games, addiction).
relation(addiction, anger).
relation(addiction, verbal_abuse).
relation(addiction, nausea).
relation(addiction, physical_illness).
relation(addiction, restless_taunting_dreams).
relation(addiction, anxiety).
relation(addiction, depression).
relation(addiction, mood_swings).
relation(addiction, fear).
relation(addiction, irritability).
relation(addiction, restlessness).
relation(addiction, sadness).
relation(addiction, loneliness).
relation(children, future).
relation(society, children).

Section 3 - Encoding:

video_games_ruin_society :- pos(video_games, ruin).
video_games_ruin_society :- pos(society, ruin).
video_games_cause_teen_violence :- pos(video_games, teen_violence).
video_games_cause_teen_violence :- pos(teen_violence, murder).
video_games_cause_addiction :- pos(video_games, addiction).
addiction_causes_anger :- pos(addiction, anger).
addiction_causes_verbal_abuse :- pos(addiction, verbal_abuse).
addiction_causes_nausea :- pos(addiction, nausea).
addiction_causes_physical_illness :- pos(addiction, physical_illness).
addiction_causes_restless_taunting_dreams :- pos(addiction, restless_taunting_dreams).
addiction_causes_anxiety :- pos(addiction, anxiety).
addiction_causes_depression :- pos(addiction, depression).
addiction_causes_mood_swings :- pos(addiction, mood_swings).
addiction_causes_fear :- pos(addiction, fear).
addiction_causes_irritability :- pos(addiction, irritability).
addiction_causes_restlessness :- pos(addiction, restlessness).
addiction_causes_sadness :- pos(addiction, sadness).
addiction_causes_loneliness :- pos(addiction, loneliness).
society_depends_on_children :- pos(children, future).
society_depends_on_children :- pos(society, children).

society_is_ruined_by_addiction :- neg(society, addiction).
society_is_ruined_by_murder :- neg(society, murder).

compare(video_games,X,Y) :- neg(video_games,X),neg(Y,X), video_games != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = video_games.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(recruitment_officers, good_story).
pos(military, great_opportunities).
pos(military, satisfying_life).
pos(soldiers, satisfying_life).
pos(soldiers, physical_wellbeing).
pos(soldiers, medical_wellbeing).
pos(soldiers, psychological_wellbeing).

neg(recruitment_officers, misleading_pitches).
neg(recruiters, minimising_risks).

Section 2 - General relationships:

relation(recruitment_officers, military).
relation(recruiters, military).
relation(soldiers, military).
relation(opportunities, military).
relation(opportunities, young_people).
relation(wellbeing, soldiers).

Section 3 - Encoding:

recruitment_officers_are_good_because :- pos(recruitment_officers, Y).
recruitment_officers_are_bad_because :- neg(recruitment_officers, Y).
military_is_good_because :- pos(military, Y).
military_is_bad_because :- neg(military, Y).
soldiers_are_good_because :- pos(soldiers, Y).
soldiers_are_bad_because :- neg(soldiers, Y).
compare(recruitment_officers,X,Y) :- neg(recruitment_officers,X),neg(Y,X), recruitment_officers != Y.
compare(military,X,Y) :- neg(military,X),neg(military,Z), Y != Z, Y = military.
compare(soldiers,X,Y) :- neg(soldiers,X),neg(soldiers,Z), Y != Z, Y = soldiers.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(right_to_life, society).
pos(right_to_life, individual).
pos(freedom_of_speech, individual).

% Section 2 - General relationships
relation(right_to_life, freedom_of_speech).
relation(society, individual).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(gold_standard, united_states).
pos(gold_standard, gold).
pos(gold_standard, silver).
pos(gold_standard, america).
pos(gold_standard, currency).
pos(gold_standard, private_gold).
pos(gold_standard, private_silver).
pos(gold_standard, old_1964_coins).
pos(gold_standard, old_gold_coins).

Section 2 - General relationships:

relation(gold, silver).
relation(gold, united_states).
relation(silver, united_states).
relation(gold, america).
relation(silver, america).
relation(gold, currency).
relation(silver, currency).
relation(private_gold, gold_standard).
relation(private_silver, gold_standard).
relation(old_1964_coins, gold_standard).
relation(old_gold_coins, gold_standard).

Section 3 - Encoding:

gold_standard_is_good_because :- pos(gold_standard,Y).
gold_standard_is_bad_because :- neg(gold_standard,Y).
compare(gold_standard,X,Y) :- neg(gold_standard,X),neg(Y,X), gold_standard != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gold_standard.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(china, total_population).
pos(china, available_manpower).
pos(china, fit_for_service).
pos(china, reaching_age_annually).
pos(china, frontline_personnel).
pos(china, reserve_personnel).
pos(china, tanks).
pos(china, afvs).
pos(china, spgs).
pos(china, towed_artillery).
pos(china, mlrs).
pos(china, total_aircraft).
pos(china, fighters_interceptors).
pos(china, fixed_wing_aircraft).
pos(china, transport_aircraft).
pos(china, trainer_aircraft).
pos(china, helicopters).
pos(china, attack_helicopters).
pos(china, navy).
pos(china, aircraft_carriers).
pos(china, frigates).
pos(china, destroyers).
pos(china, corvettes).
pos(china, submarines).
pos(china, mine_warfare_crafts).
pos(china, coastal_defense).
pos(china, oil_production).
pos(china, oil_consumption).
pos(china, proven_oil_reserves).
pos(china, labor_force).
pos(china, merchant_marine_strength).
pos(china, major_ports_and_terminals).
pos(china, roadway).
pos(china, railway).
pos(china, airports).
pos(china, defense_budget).
pos(china, debt).
pos(china, reserves_or_foreign_exchange_and_gold).
pos(china, purchasing_power_parity).
pos(china, square_land_area).
pos(china, coastline).
pos(china, shared_border).
pos(china, waterways).
pos(uk, total_population).
pos(uk, available_manpower).
pos(uk, fit_for_service).
pos(uk, reaching_age_annually).
pos(uk, frontline_personnel).
pos(uk, reserve_personnel).
pos(uk, tanks).
pos(uk, afvs).
pos(uk, spgs).
pos(uk, towed_artillery).
pos(uk, mlrs).
pos(uk, total_aircraft).
pos(uk, fighters_interceptors).
pos(uk, fixed_wing_aircraft).
pos(uk, transport_aircraft).
pos(uk, trainer_aircraft).
pos(uk, helicopters).
pos(uk, attack_helicopters).
pos(uk, navy).
pos(uk, aircraft_carriers).
pos(uk, frigates).
pos(uk, destroyers).
pos(uk, corvettes).
pos(uk, submarines).
pos(uk, mine_warfare_crafts).
pos(uk, coastal_defense).
pos(uk, oil_production).
pos(uk, oil_consumption).
pos(uk, proven_oil_reserves).
pos(uk, labor_force).
pos(uk, merchant_marine_strength).
pos(uk, major_ports_and_terminals).
pos(uk, roadway).
pos(uk, railway).
pos(uk, airports).
pos(uk, defense_budget).
pos(uk, debt).
pos(uk, reserves_or_foreign_exchange_and_gold).
pos(uk, purchasing_power_parity).
pos(uk, square_land_area).
pos(uk, coastline).
pos(uk, shared_border).
pos(uk, waterways).

Section 2 - General relationships:

relation(china, total_population).
relation(china, available_manpower).
relation(china, fit_for_service).
relation(china, reaching_age_annually).
relation(china, frontline_personnel).
relation(china, reserve_personnel).
relation(china, tanks).
relation(china, afvs).
relation(china, spgs).
relation(china, towed_artillery).
relation(china, mlrs).
relation(china, total_aircraft).
relation(china, fighters_interceptors).
relation(china, fixed_wing_aircraft).
relation(china, transport_aircraft).
relation(china, trainer_aircraft).
relation(china, helicopters).
relation(china, attack_helicopters).
relation(china, navy).
relation(china, aircraft_carriers).
relation(china, frigates).
relation(china, destroyers).
relation(china, corvettes).
relation(china, submarines).
relation(china, mine_warfare_crafts).
relation(china, coastal_defense).
relation(china, oil_production).
relation(china, oil_consumption).
relation(china, proven_oil_reserves).
relation(china, labor_force).
relation(china, merchant_marine_strength).
relation(china, major_ports_and_terminals).
relation(china, roadway).
relation(china, railway).
relation(china, airports).
relation(china, defense_budget).
relation(china, debt).
relation(china, reserves_or_foreign_exchange_and_gold).
relation(china, purchasing_power_parity).
relation(china, square_land_area).
relation(china, coastline).
relation(china, shared_border).
relation(china, waterways).
relation(uk, total_population).
relation(uk, available_manpower).
relation(uk, fit_for_service).
relation(uk, reaching_age_annually).
relation(uk, frontline_personnel).
relation(uk, reserve_personnel).
relation(uk, tanks).
relation(uk, afvs).
relation(uk, spgs).
relation(uk, towed_artillery).
relation(uk, mlrs).
relation(uk, total_aircraft).
relation(uk, fighters_interceptors).
relation(uk, fixed_wing_aircraft).
relation(uk, transport_aircraft).
relation(uk, trainer_aircraft).
relation(uk, helicopters).
relation(uk, attack_helicopters).
relation(uk, navy).
relation(uk, aircraft_carriers).
relation(uk, frigates).
relation(uk, destroyers).
relation(uk, corvettes).
relation(uk, submarines).
relation(uk, mine_warfare_crafts).
relation(uk, coastal_defense).
relation(uk, oil_production).
relation(uk, oil_consumption).
relation(uk, proven_oil_reserves).
relation(uk, labor_force).
relation(uk, merchant_marine_strength).
relation(uk, major_ports_and_terminals).
relation(uk, roadway).
relation(uk, railway).
relation(uk, airports).
relation(uk, defense_budget).
relation(uk, debt).
relation(uk, reserves_or_foreign_exchange_and_gold).
relation(uk, purchasing_power_parity).
relation(uk, square_land_area).
relation(uk, coastline).
relation(uk, shared_border).
relation(uk, waterways).

Section 3 - Encoding:

china_is_good_because :- pos(china,Y).
china_is_bad_because :- neg(china,Y).
uk_is_good_because :- pos(uk,Y).
uk_is_bad_because :- neg(uk,Y).
compare(china,uk,Y) :- neg(china,Y),neg(uk,Y), china != uk.
compare(uk,china,Y) :- neg(uk,Y),neg(uk,Y), uk != china.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(shoes, sexy_pumps).
pos(brittney, lottery).
pos(brittney, grin).
pos(brittney, tournament).
pos(brittney, organ).
pos(brittney, biscuits).
pos(brittney, duncan_bagels).
pos(brittney, blame_culture).
pos(brittney, phoning).
pos(brittney, swinging).
pos(brittney, curious).
pos(brittney, body_movements).
pos(brittney, control).
pos(brittney, proportion).
pos(brittney, arm_movement).
pos(brittney, jogging).
pos(brittney, energy_transfer).
pos(brittney, revolutionary).
pos(brittney, pumping).
pos(brittney, sexy_hips).
pos(brittney, friction).
pos(brittney, ggg_application).
pos(brittney, shoes).
pos(brittney, key_shoes).
pos(brittney, mid_sole_performance).
pos(brittney, technical_lacing_systems).
pos(brittney, trail).
pos(brittney, woods).
pos(brittney, jog).
pos(brittney, cycle).
pos(brittney, carbon_interface).
pos(brittney, high_end).
pos(brittney, performance).
pos(brittney, nagging_doubt).
pos(brittney, relaxation).
pos(brittney, bedroom).
pos(brittney, moist_places).
pos(brittney, stephanie_loccocus).
pos(brittney, backless_spider_minidress).
pos(brittney, glands).
pos(brittney, sweaty).
pos(brittney, amigo).
pos(brittney, sid).
pos(brittney, luke).
pos(brittney, eric).
pos(brittney, big_feet).
pos(brittney, aunt_fanny).
pos(brittney, uncle_bob).
pos(brittney, ggg_applicator).
pos(brittney, inspiration).
pos(brittney, range).
pos(brittney, tight_fit).
pos(brittney, box).
pos(brittney, neighbours).
pos(brittney, noise).
pos(brittney, troublesome).
pos(brittney, rising).
pos(brittney, bouncing).
pos(brittney, stiletto).
pos(brittney, exquisite).
pos(brittney, top_drawer_accessories).
pos(brittney, jealous).
pos(brittney, toe_action).

neg(brittney, cold).
neg(brittney, sausages).
neg(brittney, dream).
neg(brittney, pantry).
neg(brittney, cheese).
neg(brittney, weak_flash).
neg(brittney, member).

Section 2 - General relationships:

relation(brittney, shoes).
relation(brittney, sexy_pumps).
relation(brittney, lottery).
relation(brittney, grin).
relation(brittney, tournament).
relation(brittney, organ).
relation(brittney, biscuits).
relation(brittney, duncan_bagels).
relation(brittney, blame_culture).
relation(brittney, phoning).
relation(brittney, swinging).
relation(brittney, curious).
relation(brittney, body_movements).
relation(brittney, control).
relation(brittney, proportion).
relation(brittney, arm_movement).
relation(brittney, jogging).
relation(brittney, energy_transfer).
relation(brittney, revolutionary).
relation(brittney, pumping).
relation(brittney, sexy_hips).
relation(brittney, friction).
relation(brittney, ggg_application).
relation(brittney, shoes).
relation(brittney, key_shoes).
relation(brittney, mid_sole_performance).
relation(brittney, technical_lacing_systems).
relation(brittney, trail).
relation(brittney, woods).
relation(brittney, jog).
relation(brittney, cycle).
relation(brittney, carbon_interface).
relation(brittney, high_end).
relation(brittney, performance).
relation(brittney, nagging_doubt).
relation(brittney, relaxation).
relation(brittney, bedroom).
relation(brittney, moist_places).
relation(brittney, stephanie_loccocus).
relation(brittney, backless_spider_minidress).
relation(brittney, glands).
relation(brittney, sweaty).
relation(brittney, amigo).
relation(brittney, sid).
relation(brittney, luke).
relation(brittney, eric).
relation(brittney, big_feet).
relation(brittney, aunt_fanny).
relation(brittney, uncle_bob).
relation(brittney, ggg_applicator).
relation(brittney, inspiration).
relation(brittney, range).
relation(brittney, tight_fit).
relation(brittney, box).
relation(brittney, neighbours).
relation(brittney, noise).
relation(brittney, troublesome).
relation(brittney, rising).
relation(brittney, bouncing).
relation(brittney, stiletto).
relation(brittney, exquisite).
relation(brittney, top_drawer_accessories).
relation(brittney, jealous).
relation(brittney, toe_action).

Section 3 - Encoding:

brittney_is_good_because :- pos(brittney,Y).
brittney_is_bad_because :- neg(brittney,Y).
compare(brittney,X,Y) :- neg(brittney,X),neg(Y,X), brittney != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = brittney.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(humans, express_themselves).
pos(artists, make_something_outstanding).
pos(paintings, hidden_meaning).
pos(good_songs, liked_and_appreciated_by_people).
pos(good_paint, message).

neg(paintings, lines).
neg(paintings, green_and_yellow).
neg(good_songs, message_only).

Section 2 - General relationships:

relation(humans, art).
relation(artists, paintings).
relation(paintings, emotions).
relation(songs, emotions).
relation(good_paint, aspect).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(gun_usage, ok).
pos(teachers, guns).
neg(teachers, always_carry_guns).
pos(teachers, carry_arms).
neg(elementary_primary_school_age_children, guns).
neg(columbine, ok).

Section 2 - General relationships:

relation(children, impressionable).
relation(teachers, guns).
relation(gun_usage, ok).
relation(teachers, carry_arms).
relation(elementary_primary_school_age_children, guns).
relation(columbine, ok).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(opponent, refute).
neg(opponent, proof).
neg(schedule, wrong).
pos(johnicle, concede).
pos(johnicle, tournament).

Section 2 - General relationships:

relation(opponent, facebook_tournament).
relation(schedule, facebook_tournament).
relation(johnicle, facebook_tournament).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(bible, contradiction).
pos(bible, straight_forward).
neg(old_testament, new_testament).
neg(jews, pork).
pos(christians, pork).
neg(god, eye_for_an_eye).
pos(jesus, turn_the_other_cheek).
neg(israelites, rome).
neg(bible, straight_forward).
pos(bible, parables).
pos(bible, open_to_interpretation).
neg(leviticus, outdated).
neg(leviticus, unnecessary).
neg(bible, rock_solid).

% Section 2 - General relationships
relation(bible, old_testament).
relation(bible, new_testament).
relation(jews, old_testament).
relation(christians, new_testament).
relation(god, old_testament).
relation(jesus, new_testament).
relation(israelites, rome).
relation(bible, parables).
relation(bible, leviticus).

% Section 3 - Encoding
bible_is_good_because :- pos(bible, Y).
bible_is_bad_because :- neg(bible, Y).
compare(bible,X,Y) :- neg(bible,X),neg(Y,X), bible != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = bible.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(apple, original_idea_of_touch_screen_phone).
pos(apple, sleek_technology).
pos(apple, efficient_technology).
pos(apple, trendy_macbook_air).
pos(apple, smart_macbook_air).
pos(apple, better_screen).
pos(apple, better_build).
pos(apple, better_looking_phone).
pos(apple, more_apps).
pos(apple, easier_to_use_interface).
pos(samsung, copying_apple).
pos(samsung, wide_phones).

neg(samsung, original_idea_of_touch_screen_phone).
neg(samsung, sleek_technology).
neg(samsung, efficient_technology).
neg(samsung, trendy_macbook_air).
neg(samsung, smart_macbook_air).
neg(samsung, better_screen).
neg(samsung, better_build).
neg(samsung, better_looking_phone).
neg(samsung, more_apps).
neg(samsung, easier_to_use_interface).
neg(samsung, good_battery).
neg(samsung, not_overheating).

Section 2 - General relationships:

relation(apple, iphone).
relation(apple, ipad).
relation(apple, ipod).
relation(apple, iphone_4s).
relation(apple, siri).
relation(samsung, iphone).
relation(samsung, ipad).
relation(samsung, ipod).
relation(samsung, iphone_4s).
relation(samsung, siri).
relation(samsung, macbook_air).
relation(samsung, fridge).
relation(samsung, tv).

Section 3 - Encoding:

apple_is_good_because :- pos(apple,Y).
apple_is_bad_because :- neg(apple,Y).
samsung_is_good_because :- pos(samsung,Y).
samsung_is_bad_because :- neg(samsung,Y).
compare(apple,X,Y) :- neg(apple,X),neg(Y,X), apple != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = apple.
compare(samsung,X,Y) :- neg(samsung,X),neg(Y,X), samsung != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = samsung.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(africa, resources).
pos(developed_countries, resources).

Section 2 - General relationships:

relation(africa, climate_change).
relation(africa, poverty).
relation(africa, disease).
relation(africa, education).
relation(africa, population).
relation(developed_countries, africa).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(us, gun_rights).
pos(founding_fathers, gun_rights).
pos(gun_owner, self_defense).
pos(gun_owner, resistance).
pos(gun_sales, crime_decrease).
neg(criminal, gun_owner).
neg(criminal, self_defense).
neg(criminal, resistance).
neg(government, gun_rights).

Section 2 - General relationships:

relation(us, constitution).
relation(constitution, second_amendment).
relation(second_amendment, gun_rights).
relation(founding_fathers, second_amendment).
relation(gun_owner, criminal).
relation(gun_sales, crime).

Section 3 - Encoding:

us_supports_gun_rights :- pos(us, gun_rights).
us_opposes_gun_rights :- neg(us, gun_rights).
founding_fathers_support_gun_rights :- pos(founding_fathers, gun_rights).
founding_fathers_oppose_gun_rights :- neg(founding_fathers, gun_rights).
gun_owner_prefers_self_defense :- pos(gun_owner, self_defense).
gun_owner_prefers_resistance :- pos(gun_owner, resistance).
criminal_prefers_non_gun_owner :- neg(criminal, gun_owner).
criminal_prefers_non_self_defense :- neg(criminal, self_defense).
criminal_prefers_non_resistance :- neg(criminal, resistance).
government_opposes_gun_rights :- neg(government, gun_rights).
gun_sales_decrease_crime :- pos(gun_sales, crime_decrease).
compare(us,X,Y) :- neg(us,X),neg(Y,X), us != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = us.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(trolls, truth).
pos(trolls, lie).

Section 2 - General relationships:

relation(trolls, anonymous).
relation(anonymous, truth).
relation(anonymous, lie).

Section 3 - Encoding:

neg(anonymous, truth) :- relation(anonymous, X), neg(X, truth).
neg(anonymous, truth) :- neg(X, truth), neg(anonymous, X).
pos(anonymous, lie) :- relation(anonymous, X), pos(X, lie).
pos(anonymous, lie) :- pos(X, lie), pos(anonymous, X).
compare(anonymous, X, Y) :- neg(anonymous, X), neg(Y, X), anonymous != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = anonymous.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(student, easiest_subjects).
neg(student, subjects_with_no_homework).
pos(student, games).
pos(student, fun_activities).

Section 2 - General relationships:

relation(student, subjects).
relation(student, career).
relation(student, education).

Section 3 - Encoding:

student_chooses_easy_subjects :- neg(student,X), relation(student,X).
student_chooses_subjects_with_no_homework :- neg(student,X), relation(student,X).
student_has_more_time_for_games :- pos(student,X), relation(student,X).
student_has_more_time_for_fun_activities :- pos(student,X), relation(student,X).
student_has_bad_education :- student_chooses_easy_subjects, student_chooses_subjects_with_no_homework.
student_has_good_education :- not student_has_bad_education.
student_should_have_specific_subjects :- student_has_bad_education.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(people, adopt_children).
neg(people, pets).
pos(poor_kids, someone_to_live_with).
pos(poor_kids, someone_to_love_them).
pos(poor_kids, comfort).

Section 2 - General relationships:

relation(people, poor_kids).
relation(poor_kids, someone_to_live_with).
relation(poor_kids, someone_to_love_them).
relation(poor_kids, comfort).

Section 3 - Encoding:

adopt_children_is_good_because :- pos(adopt_children,Y).
adopt_children_is_bad_because :- neg(adopt_children,Y).
pets_is_good_because :- pos(pets,Y).
pets_is_bad_because :- neg(pets,Y).
compare(adopt_children,X,Y) :- neg(adopt_children,X),neg(Y,X), adopt_children != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = adopt_children.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(atheist, objective_morals).
neg(god, objective_morals).
neg(medieval_times, good_moral).
pos(medieval_times, murder).
pos(medieval_times, murder_gays).
pos(medieval_times, murder_jehova_s).
pos(medieval_times, murder_foreigners).
pos(medieval_times, murder_people).
pos(medieval_times, law).
pos(medieval_times, acceptable).
pos(law, morals).
pos(morals, change).
pos(euthanasia, morals).
pos(abortion, morals).
pos(abortion, acceptable).
pos(abortion, morally_good).
neg(anarchy, change_of_morals).
pos(anarchy, abandonment_of_morals).
neg(mugging, morals).
pos(desperation, hard_to_stay_at_the_borders_of_morals).
neg(poverty, decent_life).
neg(atheist, bad_thing).
neg(christian, bad_thing).
pos(person, decent_life).
neg(god, decent_life).
pos(slavery, bad_life).
pos(slavery, prohibited).
pos(christian, slavery).

Section 2 - General relationships:

relation(atheist, objective_morals).
relation(god, objective_morals).
relation(medieval_times, good_moral).
relation(medieval_times, murder).
relation(medieval_times, murder_gays).
relation(medieval_times, murder_jehova_s).
relation(medieval_times, murder_foreigners).
relation(medieval_times, murder_people).
relation(medieval_times, law).
relation(medieval_times, acceptable).
relation(law, morals).
relation(morals, change).
relation(euthanasia, morals).
relation(abortion, morals).
relation(abortion, acceptable).
relation(abortion, morally_good).
relation(anarchy, change_of_morals).
relation(anarchy, abandonment_of_morals).
relation(mugging, morals).
relation(desperation, hard_to_stay_at_the_borders_of_morals).
relation(poverty, decent_life).
relation(atheist, bad_thing).
relation(christian, bad_thing).
relation(person, decent_life).
relation(god, decent_life).
relation(slavery, bad_life).
relation(slavery, prohibited).
relation(christian, slavery).

Section 3 - Encoding:

atheist_is_good_because :- pos(atheist,Y).
atheist_is_bad_because :- neg(atheist,Y).
god_is_good_because :- pos(god,Y).
god_is_bad_because :- neg(god,Y).
medieval_times_is_good_because :- pos(medieval_times,Y).
medieval_times_is_bad_because :- neg(medieval_times,Y).
law_is_good_because :- pos(law,Y).
law_is_bad_because :- neg(law,Y).
morals_is_good_because :- pos(morals,Y).
morals_is_bad_because :- neg(morals,Y).
euthanasia_is_good_because :- pos(euthanasia,Y).
euthanasia_is_bad_because :- neg(euthanasia,Y).
abortion_is_good_because :- pos(abortion,Y).
abortion_is_bad_because :- neg(abortion,Y).
anarchy_is_good_because :- pos(anarchy,Y).
anarchy_is_bad_because :- neg(anarchy,Y).
mugging_is_good_because :- pos(mugging,Y).
mugging_is_bad_because :- neg(mugging,Y).
desperation_is_good_because :- pos(desperation,Y).
desperation_is_bad_because :- neg(desperation,Y).
poverty_is_good_because :- pos(poverty,Y).
poverty_is_bad_because :- neg(poverty,Y).
person_is_good_because :- pos(person,Y).
person_is_bad_because :- neg(person,Y).
slavery_is_good_because :- pos(slavery,Y).
slavery_is_bad_because :- neg(slavery,Y).
christian_is_good_because :- pos(christian,Y).
christian_is_bad_because :- neg(christian,Y).
compare(atheist,X,Y) :- neg(atheist,X),neg(Y,X), atheist != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = atheist.
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
compare(medieval_times,X,Y) :- neg(medieval_times,X),neg(Y,X), medieval_times != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = medieval_times.
compare(law,X,Y) :- neg(law,X),neg(Y,X), law != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = law.
compare(morals,X,Y) :- neg(morals,X),neg(Y,X), morals != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = morals.
compare(euthanasia,X,Y) :- neg(euthanasia,X),neg(Y,X), euthanasia != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = euthanasia.
compare(abortion,X,Y) :- neg(abortion,X),neg(Y,X), abortion != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = abortion.
compare(anarchy,X,Y) :- neg(anarchy,X),neg(Y,X), anarchy != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = anarchy.
compare(mugging,X,Y) :- neg(mugging,X),neg(Y,X), mugging != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = mugging.
compare(desperation,X,Y) :- neg(desperation,X),neg(Y,X), desperation != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = desperation.
compare(poverty,X,Y) :- neg(poverty,X),neg(Y,X), poverty != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = poverty.
compare(person,X,Y) :- neg(person,X),neg(Y,X), person != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = person.
compare(slavery,X,Y) :- neg(slavery,X),neg(Y,X), slavery != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = slavery.
compare(christian,X,Y) :- neg(christian,X),neg(Y,X), christian != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = christian.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(opponent, affirmative_response).
pos(opponent, negative_response).
pos(opponent, affirmative_or_negative_response).
pos(opponent, myth).
pos(opponent, affirmative_or_negative_responses).
pos(opponent, science).
pos(opponent, honesty).
pos(opponent, offensive).
pos(opponent, pictures_of_hitler).
pos(opponent, offensive_to_somebody).
pos(opponent, offensive_to_relatives).
pos(opponent, offensive_to_those_close).

neg(opponent, stopped_discriminating).
neg(opponent, neutral_response).
neg(opponent, true).
neg(opponent, neutral_responses).
neg(opponent, offensive_to_some_people).
neg(opponent, false_pretense).
neg(opponent, not_offensive).
neg(opponent, took_down_pictures_of_hitler).
neg(opponent, justified).
neg(opponent, not_offensive_to_relatives).
neg(opponent, not_offensive_to_those_close).

Section 2 - General relationships:

relation(opponent, affirmative_response).
relation(opponent, negative_response).
relation(opponent, affirmative_or_negative_response).
relation(opponent, myth).
relation(opponent, affirmative_or_negative_responses).
relation(opponent, science).
relation(opponent, honesty).
relation(opponent, offensive).
relation(opponent, pictures_of_hitler).
relation(opponent, offensive_to_somebody).
relation(opponent, offensive_to_relatives).
relation(opponent, offensive_to_those_close).

Section 3 - Encoding:

opponent_is_good_because :- pos(opponent, Y).
opponent_is_bad_because :- neg(opponent, Y).
compare(opponent,X,Y) :- neg(opponent,X),neg(Y,X), opponent != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = opponent.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(christian_trinity, logical_idea).
pos(water_analogy, understanding_christian_trinity).
neg(extra_dimensions, describing_extra_dimensions).
neg(modalism, distinct_identity).
pos(modalism, split_personality_remarks).
pos(modalism, water_remarks).
pos(modalism, person_changing_form).
pos(modalism, person_changing_modes).
neg(modalism, constant_of_liquid).
pos(liquid, water).
pos(liquid, mercury).
neg(trinity, five_plus_one_equals_four_plus_two).
pos(trinity, six).
pos(five_plus_one, six).
pos(four_plus_two, six).

Section 2 - General relationships:

relation(christian_trinity, water_analogy).
relation(christian_trinity, extra_dimensions).
relation(christian_trinity, modalism).
relation(modalism, distinct_identity).
relation(modalism, split_personality_remarks).
relation(modalism, water_remarks).
relation(modalism, person_changing_form).
relation(modalism, person_changing_modes).
relation(modalism, constant_of_liquid).
relation(liquid, water).
relation(liquid, mercury).
relation(trinity, five_plus_one_equals_four_plus_two).
relation(trinity, six).
relation(five_plus_one, six).
relation(four_plus_two, six).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(atheists, right).
neg(atheists, knowledge).

Section 2 - General relationships:

relation(god, moral_standard).
relation(god, good).
relation(god, bad).
relation(god, evil).
relation(god, actions).
relation(god, being).
relation(god, problem).

Section 3 - Encoding:

moral_standard :- god.
good :- god.
bad :- god.
evil :- god.
actions :- god.
being :- god.
problem :- god.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(jesus_of_nazareth, existence).

% Section 2 - General relationships
relation(jesus_of_nazareth, christ).
relation(jesus_of_nazareth, christ_existence).
relation(jesus_of_nazareth, deity).
relation(jesus_of_nazareth, messiahship).

% Section 3 - Encoding
jesus_of_nazareth_exists :- pos(jesus_of_nazareth, Y).
jesus_of_nazareth_does_not_exist :- neg(jesus_of_nazareth, Y).
compare(jesus_of_nazareth,X,Y) :- neg(jesus_of_nazareth,X),neg(Y,X), jesus_of_nazareth != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = jesus_of_nazareth.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(bbc, real_news).
pos(foreign_world_news_channels, real_news).
neg(networks, unbiased).

Section 2 - General relationships:

relation(networks, unbiased).
relation(bbc, networks).
relation(foreign_world_news_channels, networks).

Section 3 - Encoding:

neg(networks, unbiased) :- pos(bbc, real_news).
neg(networks, unbiased) :- pos(foreign_world_news_channels, real_news).
pos(networks, biased) :- neg(bbc, real_news).
pos(networks, biased) :- neg(foreign_world_news_channels, real_news).
compare(networks,X,Y) :- neg(networks,X),neg(Y,X), networks != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = networks.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(dna_profiling, certain_materials).
pos(dna_profiling, information).
pos(dna_profiling, proof).

Section 2 - General relationships:

relation(dna_profiling, database).
relation(dna_profiling, laws).
relation(dna_profiling, website).
relation(dna_profiling, company).
relation(dna_profiling, person).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(abortion, first_trimester).
neg(abortion, investigated).
neg(abortion, punished).
pos(condom, breaking).
pos(sexual_intercourse, pregnancy).
pos(pregnancy, risk).
pos(contraception, pregnancy).
pos(contraception, risk).

Section 2 - General relationships:

relation(abortion, first_trimester).
relation(abortion, investigated).
relation(abortion, punished).
relation(condom, breaking).
relation(sexual_intercourse, pregnancy).
relation(pregnancy, risk).
relation(contraception, pregnancy).
relation(contraception, risk).

Section 3 - Encoding:

abortion_is_legal_because :- pos(abortion, X).
abortion_is_illegal_because :- neg(abortion, X).
compare(abortion,X,Y) :- neg(abortion,X),neg(Y,X), abortion != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = abortion.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(you, sleep).
pos(government, citizen).
neg(you, rational).
neg(you, opinion).
neg(you, self).
neg(suicide_bomber, self).

Section 2 - General relationships:

relation(sleep, you).
relation(government, you).
relation(rational, you).
relation(opinion, you).
relation(self, you).
relation(suicide_bomber, self).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(kfc, humane_behavior).
pos(humane_behavior, human).
neg(kfc, maltreatment).
pos(maltreatment, bad_treatment).
pos(bad_treatment, human).
neg(kfc, rape).
neg(kfc, assailment).
pos(assailment, human).
neg(kfc, deception).

Section 2 - General relationships:

relation(kfc, chicken).
relation(humane_behavior, chicken).
relation(maltreatment, chicken).
relation(rape, chicken).
relation(assailment, chicken).
relation(deception, chicken).

Section 3 - Encoding:

humane_behavior_is_good_because :- pos(humane_behavior, Y).
humane_behavior_is_bad_because :- neg(humane_behavior, Y).
maltreatment_is_good_because :- pos(maltreatment, Y).
maltreatment_is_bad_because :- neg(maltreatment, Y).
rape_is_good_because :- pos(rape, Y).
rape_is_bad_because :- neg(rape, Y).
assailment_is_good_because :- pos(assailment, Y).
assailment_is_bad_because :- neg(assailment, Y).
deception_is_good_because :- pos(deception, Y).
deception_is_bad_because :- neg(deception, Y).
compare(kfc,X,Y) :- neg(kfc,X),neg(Y,X), kfc != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = kfc.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, adam).
neg(god, opponent).
neg(bible, opponent).
pos(israel, bible).
pos(jewish_people, bible).
pos(god, omnipotent).

Section 2 - General relationships:

relation(god, adam).
relation(god, opponent).
relation(bible, opponent).
relation(israel, bible).
relation(jewish_people, bible).
relation(god, omnipotent).

Section 3 - Encoding:

god_is_good_because :- pos(god,Y).
god_is_bad_because :- neg(god,Y).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(god, chronic_masturbator).
pos(god, uranus).
pos(black_people, tolerable_evil).
pos(black_people, inferior_slaves).
pos(tom_cruise, lord).
pos(world_health_organisation, masturbation).
pos(big_bang, god_diarrhea).

neg(god, real).
neg(black_people, purpose_in_life).
neg(black_people, afterlife_servants).
neg(masturbation, bad).
neg(big_bang, scientific_event).

% Section 2 - General relationships
relation(god, black_people).
relation(god, masturbation).
relation(god, big_bang).
relation(black_people, afterlife).
relation(black_people, lord).
relation(black_people, tom_cruise).
relation(black_people, uranus).
relation(masturbation, health).
relation(masturbation, world_health_organisation).
relation(big_bang, diarrhea).

% Section 3 - Encoding
god_is_good_because :- pos(god, Y).
god_is_bad_because :- neg(god, Y).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
```
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(klintons, obama).
neg(solarman1969, credited_response).
pos(obama, evil).
pos(klintons, power).

% Section 2 - General relationships
relation(klintons, obama).
relation(solarman1969, obama).
relation(clintons, obama).
relation(democrat, clinton_machine).

% Section 3 - Encoding
klintons_are_bad_because :- neg(klintons, Y).
klintons_are_good_because :- pos(klintons, Y).
obama_is_good_because :- pos(obama, Y).
obama_is_bad_because :- neg(obama, Y).
compare(klintons,X,Y) :- neg(klintons,X),neg(Y,X), klintons != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = klintons.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(stars, massive_luminous_ball_of_plasma_held_together_by_gravity).
pos(stars, morally_superior).
pos(stars, preferable).
pos(stars, in_accordance_with_reason).
neg(judeo_christian_god, massive_luminous_ball_of_plasma_held_together_by_gravity).
neg(judeo_christian_god, morally_superior).
neg(judeo_christian_god, preferable).
neg(judeo_christian_god, in_accordance_with_reason).

Section 2 - General relationships:

relation(stars, judeo_christian_god).
relation(calvin_cambridge, stars).
relation(calvin_cambridge, judeo_christian_god).
relation(kohai, stars).
relation(kohai, judeo_christian_god).
relation(scarletghost, stars).
relation(scarletghost, judeo_christian_god).
relation(samian96, stars).
relation(samian96, judeo_christian_god).
relation(darknes, stars).
relation(darknes, judeo_christian_god).

Section 3 - Encoding:

stars_is_good_because :- pos(stars,Y).
stars_is_bad_because :- neg(stars,Y).
judeo_christian_god_is_good_because :- pos(judeo_christian_god,Y).
judeo_christian_god_is_bad_because :- neg(judeo_christian_god,Y).
compare(stars,judeo_christian_god,X) :- neg(stars,X),neg(judeo_christian_god,X), stars != judeo_christian_god.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(cow, meant_to_be_eaten).
pos(cow, eaten_by_human).
pos(human, eat_cow).
pos(tiger, eat_cow).
pos(lion, eat_cow).
pos(dog, not_usually_eaten).

Section 2 - General relationships:

relation(cow, human).
relation(cow, tiger).
relation(cow, lion).
relation(cow, dog).

Section 3 - Encoding:

meant_to_be_eaten_by_human(X) :- pos(X, meant_to_be_eaten), pos(human, eat_cow).
eaten_by_other_animals(X) :- pos(X, eaten_by_human), relation(X, Y), pos(Y, eat_cow), Y != human.
moral_issue(X) :- meant_to_be_eaten_by_human(X), eaten_by_other_animals(X).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(liberty, security).
pos(freedom_of_speech, secure_and_free_system_of_government).
neg(throwing_people_in_jail_for_treason_over_traitorous_speech, freedom_of_speech).
neg(throwing_people_in_jail_for_treason_over_traitorous_speech, security_of_citizens).
neg(suggesting_impeaching_the_president, freedom_of_speech).
neg(suggesting_impeaching_the_president, security_of_citizens).
neg(aiding_an_enemy, freedom_of_speech).
neg(aiding_an_enemy, security_of_citizens).
pos(second_amendment, protection_of_citizens).
neg(registering_firearms, second_amendment).
neg(registering_firearms, protection_of_citizens).

Section 2 - General relationships:

relation(freedom_of_speech, secure_and_free_system_of_government).
relation(throwing_people_in_jail_for_treason_over_traitorous_speech, freedom_of_speech).
relation(throwing_people_in_jail_for_treason_over_traitorous_speech, security_of_citizens).
relation(suggesting_impeaching_the_president, freedom_of_speech).
relation(suggesting_impeaching_the_president, security_of_citizens).
relation(aiding_an_enemy, freedom_of_speech).
relation(aiding_an_enemy, security_of_citizens).
relation(second_amendment, protection_of_citizens).
relation(registering_firearms, second_amendment).
relation(registering_firearms, protection_of_citizens).

Section 3 - Encoding:

liberty_is_greater_than_security :- pos(liberty, security).
liberty_and_security_go_hand_in_hand :- pos(liberty, security).
more_rights_and_freedoms_surrendered_less_secure :- neg(liberty, security).
throwing_people_in_jail_for_treason_over_traitorous_speech_detrimental_to_freedom_and_security :- neg(throwing_people_in_jail_for_treason_over_traitorous_speech, freedom_of_speech).
throwing_people_in_jail_for_treason_over_traitorous_speech_detrimental_to_freedom_and_security :- neg(throwing_people_in_jail_for_treason_over_traitorous_speech, security_of_citizens).
suggesting_impeaching_the_president_detrimental_to_freedom_and_security :- neg(suggesting_impeaching_the_president, freedom_of_speech).
suggesting_impeaching_the_president_detrimental_to_freedom_and_security :- neg(suggesting_impeaching_the_president, security_of_citizens).
aiding_an_enemy_detrimental_to_freedom_and_security :- neg(aiding_an_enemy, freedom_of_speech).
aiding_an_enemy_detrimental_to_freedom_and_security :- neg(aiding_an_enemy, security_of_citizens).
registering_firearms_detrimental_to_second_amendment :- neg(registering_firearms, second_amendment).
registering_firearms_detrimental_to_protection_of_citizens :- neg(registering_firearms, protection_of_citizens).
compare(liberty, security, X) :- neg(liberty, X), neg(security, X), liberty != security, security = X.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = liberty.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(rape_culture, society).
neg(sexual_objectification, women).
neg(sexual_objectification, men).
neg(victim_blaming, society).
neg(rape, society).
neg(rape, victim).
neg(victim_blaming, victim).

Section 2 - General relationships:

relation(rape_culture, sexual_objectification).
relation(rape_culture, victim_blaming).
relation(rape, victim).
relation(victim_blaming, victim).

Section 3 - Encoding:

rape_culture_is_bad_because :- neg(rape_culture, Y).
rape_culture_is_good_because :- pos(rape_culture, Y).
compare(rape_culture,X,Y) :- neg(rape_culture,X),neg(Y,X), rape_culture != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = rape_culture.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(criminal_justice_system, retribution).
pos(criminal_justice_system, rehabilitation).
pos(incarceration, rehabilitation).
pos(incarceration, execution).
pos(execution, cheaper).
pos(execution, save_taxpayers_money).
neg(incarceration, rehabilitation).
neg(incarceration, execution).
neg(execution, cheaper).
neg(execution, save_taxpayers_money).
neg(crime, harmless).
neg(prison, rehabilitation).
neg(prison, harmless).
neg(criminal, right_to_kill).
neg(criminal, right_to_victimize).
neg(victim, right_to_vengeance).
neg(victim_family, right_to_vengeance).
neg(purge, common_place).

% Section 2 - General relationships
relation(criminal_justice_system, crime).
relation(crime, felony).
relation(felony, murder).
relation(felony, rape).
relation(felony, armed_robbery).
relation(felony, arson).
relation(felony, illegal_drug_sales).
relation(felony, kidnapping).
relation(felony, treason).
relation(felony, income_tax_evasion).
relation(crime, recidivism).
relation(recidivism, prison).
relation(prison, criminal).
relation(criminal, right).
relation(victim, right).
relation(victim_family, right).
relation(execution, cost).
relation(cost, taxpayer).

% Section 3 - Encoding
incarceration_is_good_because :- pos(incarceration, Y).
incarceration_is_bad_because :- neg(incarceration, Y).
execution_is_good_because :- pos(execution, Y).
execution_is_bad_because :- neg(execution, Y).
compare(incarceration,X,Y) :- neg(incarceration,X),neg(Y,X), incarceration != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = incarceration.
compare(execution,X,Y) :- neg(execution,X),neg(Y,X), execution != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = execution.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(immortalized_cell_lines, active_version_of_telomerase).
pos(telomerase, prevents_the_shortening_of_the_telomere).
pos(telomere, protects_the_ends_of_the_chromosome).
pos(biologically_immortal_humans, no_tumorous_side_effects).
pos(overpopulation, motivation_to_colonize_other_planets).
pos(fighting, already_exists).
pos(humans, fighting).
pos(humans, there_will_be_fighting).
pos(colonizing_other_planets, there_would_be_fighting).

neg(cancerous_cells, normal_cell).
neg(immoral, being_immortal).
neg(overpopulation, nothing_immoral).

Section 2 - General relationships:

relation(immortalized_cell_lines, telomerase).
relation(telomerase, telomere).
relation(telomere, chromosome).
relation(biologically_immortal_humans, telomerase).
relation(biologically_immortal_humans, telomere).
relation(biologically_immortal_humans, chromosome).
relation(biologically_immortal_humans, overpopulation).
relation(biologically_immortal_humans, fighting).
relation(biologically_immortal_humans, humans).
relation(biologically_immortal_humans, colonizing_other_planets).
relation(overpopulation, colonizing_other_planets).
relation(fighting, humans).
relation(fighting, colonizing_other_planets).

Section 3 - Encoding:

immortalized_cell_lines_is_good_because :- pos(immortalized_cell_lines, Y).
immortalized_cell_lines_is_bad_because :- neg(immortalized_cell_lines, Y).
telomerase_is_good_because :- pos(telomerase, Y).
telomerase_is_bad_because :- neg(telomerase, Y).
telomere_is_good_because :- pos(telomere, Y).
telomere_is_bad_because :- neg(telomere, Y).
biologically_immortal_humans_is_good_because :- pos(biologically_immortal_humans, Y).
biologically_immortal_humans_is_bad_because :- neg(biologically_immortal_humans, Y).
overpopulation_is_good_because :- pos(overpopulation, Y).
overpopulation_is_bad_because :- neg(overpopulation, Y).
fighting_is_good_because :- pos(fighting, Y).
fighting_is_bad_because :- neg(fighting, Y).
humans_is_good_because :- pos(humans, Y).
humans_is_bad_because :- neg(humans, Y).
colonizing_other_planets_is_good_because :- pos(colonizing_other_planets, Y).
colonizing_other_planets_is_bad_because :- neg(colonizing_other_planets, Y).
compare(immortalized_cell_lines,X,Y) :- neg(immortalized_cell_lines,X),neg(Y,X), immortalized_cell_lines != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = immortalized_cell_lines.
compare(telomerase,X,Y) :- neg(telomerase,X),neg(Y,X), telomerase != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = telomerase.
compare(telomere,X,Y) :- neg(telomere,X),neg(Y,X), telomere != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = telomere.
compare(biologically_immortal_humans,X,Y) :- neg(biologically_immortal_humans,X),neg(Y,X), biologically_immortal_humans != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = biologically_immortal_humans.
compare(overpopulation,X,Y) :- neg(overpopulation,X),neg(Y,X), overpopulation != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = overpopulation.
compare(fighting,X,Y) :- neg(fighting,X),neg(Y,X), fighting != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = fighting.
compare(humans,X,Y) :- neg(humans,X),neg(Y,X), humans != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = humans.
compare(colonizing_other_planets,X,Y) :- neg(colonizing_other_planets,X),neg(Y,X), colonizing_other_planets != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = colonizing_other_planets.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, existence).

Section 2 - General relationships:

relation(god, existence).

Section 3 - Encoding:

pos(god, existence) :- relation(god, existence).
neg(god, existence) :- neg(god, existence).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(vaccines, beneficial).
neg(vaccines, harm).

Section 2 - General relationships:

relation(vaccines, people).
relation(vaccines, autism).

Section 3 - Encoding:

vaccines_are_good_because :- pos(vaccines, Y).
vaccines_are_bad_because :- neg(vaccines, Y).
compare(vaccines,X,Y) :- neg(vaccines,X),neg(Y,X), vaccines != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = vaccines.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, perfect).

Section 2 - General relationships:

relation(god, evil).

Section 3 - Encoding:

neg(god, perfect) :- relation(god, evil).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(herd_effect, pointless).
pos(herd_effect, non_vaccinated).
pos(herd_effect, low_possibility).
pos(herd_effect, disease).
pos(herd_effect, nearly_impossible).
neg(compulsory_vaccination, unvaccinated).
pos(compulsory_vaccination, vaccinated).
pos(religious_reasons, unvaccinated).
pos(philosophical_reasons, unvaccinated).
pos(religious_reasons, compulsory_immunization).
pos(philosophical_reasons, compulsory_immunization).

Section 2 - General relationships:

relation(herd_effect, non_vaccinated).
relation(herd_effect, disease).
relation(compulsory_vaccination, unvaccinated).
relation(compulsory_vaccination, vaccinated).
relation(religious_reasons, unvaccinated).
relation(philosophical_reasons, unvaccinated).
relation(religious_reasons, compulsory_immunization).
relation(philosophical_reasons, compulsory_immunization).

Section 3 - Encoding:

herd_effect_is_pointless :- neg(herd_effect, pointless).
non_vaccinated_will_be_protected :- pos(herd_effect, non_vaccinated).
low_possibility_of_coming_with_the_disease :- pos(herd_effect, low_possibility).
nearly_impossible_to_get_the_disease :- pos(herd_effect, nearly_impossible).
compulsory_vaccination_and_everyone_is_vaccinated :- pos(compulsory_vaccination, vaccinated).
unvaccinated_people_will_benefit_from_herd_effect :- pos(herd_effect, non_vaccinated).
religious_or_philosophical_reasons_for_not_getting_vaccinated :- pos(religious_reasons, unvaccinated).
religious_or_philosophical_reasons_for_not_getting_vaccinated :- pos(philosophical_reasons, unvaccinated).
religious_reasons_are_not_truly_compulsory_immunization :- pos(religious_reasons, compulsory_immunization).
philosophical_reasons_are_not_truly_compulsory_immunization :- pos(philosophical_reasons, compulsory_immunization).
herd_effect_argument_is_counter_intuitive :- neg(herd_effect, pointless).
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(opponent, debate).
pos(opponent, lose_debate).

Section 2 - General relationships:

relation(resolution, probability).
relation(resolution, paradox).
relation(voters, vote).
relation(opponent, burden).
relation(opponent, prediction).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(extraterrestrial_organisms, humanoid).
neg(extraterrestrial_organisms, spoken_and_written_vocabulary).
pos(octopus, semi_intelligent_organisms).
pos(octopus, land_dwelling_capability).
pos(octopus, legs).
pos(octopus, hands).
neg(octopus, extra_limbs).

Section 2 - General relationships:

relation(extraterrestrial_organisms, pop_culture).
relation(extraterrestrial_organisms, intelligent_creatures).
relation(extraterrestrial_organisms, spoken_and_written_vocabulary).
relation(extraterrestrial_organisms, octopus).
relation(octopus, semi_intelligent_organisms).
relation(octopus, land_dwelling_capability).
relation(octopus, legs).
relation(octopus, hands).
relation(octopus, extra_limbs).
relation(octopus, evolutionary_chain).

Section 3 - Encoding:

extraterrestrial_organisms_are_not_humanoid :- neg(extraterrestrial_organisms, humanoid).
extraterrestrial_organisms_need_spoken_and_written_vocabulary :- pos(extraterrestrial_organisms, spoken_and_written_vocabulary).
octopus_is_semi_intelligent :- pos(octopus, semi_intelligent_organisms).
octopus_can_develop_land_dwelling_capability :- pos(octopus, land_dwelling_capability).
octopus_can_develop_legs :- pos(octopus, legs).
octopus_can_develop_hands :- pos(octopus, hands).
octopus_will_lose_extra_limbs :- neg(octopus, extra_limbs).
compare(extraterrestrial_organisms, octopus, spoken_and_written_vocabulary) :- neg(extraterrestrial_organisms, spoken_and_written_vocabulary), neg(octopus, spoken_and_written_vocabulary), extraterrestrial_organisms != octopus.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(big_bang, good_theory).
neg(sun_shrinking_study, applies).
pos(clapeyron, discovered_entropy).
pos(fizeau, measured_speed_of_light).
pos(herschel, discovered_infrared_and_radiant_heat).
pos(joule, discovered_first_law_of_thermodynamics).
pos(ritter, discovered_ultraviolet_rays).
pos(thomas_young, proposed_theory_of_light_and_colours).
neg(darwin, published_origin_of_species_and_gave_us_theory_of_evolution).
neg(radiometric_dating, can_prove_that_the_earth_is_several_billion_years_old).
neg(faith, can_be_a_part_of_science).

Section 2 - General relationships:

relation(big_bang, sun_shrinking_study).
relation(clapeyron, entropy).
relation(fizeau, speed_of_light).
relation(herschel, infrared).
relation(herschel, radiant_heat).
relation(joule, first_law_of_thermodynamics).
relation(ritter, ultraviolet_rays).
relation(thomas_young, theory_of_light_and_colours).
relation(darwin, origin_of_species).
relation(darwin, theory_of_evolution).
relation(radiometric_dating, earth).
relation(radiometric_dating, millions_of_years).
relation(faith, science).

Section 3 - Encoding:

big_bang_is_good_because :- pos(big_bang, Y).
big_bang_is_bad_because :- neg(big_bang, Y).
compare(big_bang,X,Y) :- neg(big_bang,X),neg(Y,X), big_bang != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = big_bang.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(protection_of_endangered_species, human_interests).
pos(protection_of_endangered_species, human_benefits).
pos(biodiversity, human_development).
pos(endangered_species, unknown_future_benefits).
pos(scrub_mint, anti_fungal_agent).
pos(scrub_mint, natural_insecticide).
pos(endangered_species, medical_breakthroughs).
pos(pacific_yew, taxol).
pos(biodiversity, early_warning_system).
pos(bald_eagle, health_hazards).
pos(peregrine_falcon, health_hazards).
pos(preservation_of_endangered_species, human_reliance).
pos(preservation_of_endangered_species, early_warning_system).
pos(preservation_of_endangered_species, scientific_breakthroughs).
pos(preservation_of_endangered_species, medical_breakthroughs).
pos(preservation_of_endangered_species, human_benefits).

neg(loss_of_biodiversity, human_interests).
neg(loss_of_biodiversity, human_benefits).
neg(extinction_of_plant_and_animal_species, human_interests).
neg(extinction_of_plant_and_animal_species, human_benefits).

Section 2 - General relationships:

relation(protection_of_endangered_species, human_interests).
relation(protection_of_endangered_species, human_benefits).
relation(biodiversity, human_development).
relation(endangered_species, unknown_future_benefits).
relation(scrub_mint, anti_fungal_agent).
relation(scrub_mint, natural_insecticide).
relation(endangered_species, medical_breakthroughs).
relation(pacific_yew, taxol).
relation(biodiversity, early_warning_system).
relation(bald_eagle, health_hazards).
relation(peregrine_falcon, health_hazards).
relation(preservation_of_endangered_species, human_reliance).
relation(preservation_of_endangered_species, early_warning_system).
relation(preservation_of_endangered_species, scientific_breakthroughs).
relation(preservation_of_endangered_species, medical_breakthroughs).
relation(preservation_of_endangered_species, human_benefits).
relation(loss_of_biodiversity, human_interests).
relation(loss_of_biodiversity, human_benefits).
relation(extinction_of_plant_and_animal_species, human_interests).
relation(extinction_of_plant_and_animal_species, human_benefits).

Section 3 - Encoding:

pos(X,Y) :- relation(X,Y).
pos(X,Y) :- pos(Y,Z), pos(X,Z).
neg(X,Y) :- relation(X,Y).
neg(X,Y) :- neg(Y,Z), neg(X,Z).
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = X.
compare(X,Y,Z) :- neg(X,Y),neg(Y,Z), Y != Z, Y != X, Z != X.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(masterchief, assault_rifle).
pos(masterchief, sniper_rifle).
pos(masterchief, magnum).
pos(masterchief, infinite_ammo).
pos(masterchief, bubble_shield).
pos(masterchief, frag_grenades).
pos(masterchief, plasma_grenades).
pos(masterchief, spike_grenades).
pos(masterchief, fire_grenades).
pos(masterchief, armor_lock).
pos(masterchief, combat_knife).
pos(boba_fett, weapons).
pos(boba_fett, armor).
pos(boba_fett, jetpack).
pos(boba_fett, flamethrower).
pos(boba_fett, concussion_grenades).
pos(boba_fett, wrist_rockets).
pos(boba_fett, gaffi_stick).

Section 2 - General relationships:

relation(masterchief, boba_fett).
relation(masterchief, desert).
relation(masterchief, weapons).
relation(masterchief, armor).
relation(masterchief, grenades).
relation(masterchief, combat_knife).
relation(boba_fett, masterchief).
relation(boba_fett, desert).
relation(boba_fett, weapons).
relation(boba_fett, armor).
relation(boba_fett, jetpack).
relation(boba_fett, flamethrower).
relation(boba_fett, concussion_grenades).
relation(boba_fett, wrist_rockets).
relation(boba_fett, gaffi_stick).

Section 3 - Encoding:

masterchief_is_good_because :- pos(masterchief, Y).
masterchief_is_bad_because :- neg(masterchief, Y).
boba_fett_is_good_because :- pos(boba_fett, Y).
boba_fett_is_bad_because :- neg(boba_fett, Y).
compare(masterchief, boba_fett, X) :- neg(masterchief, X), neg(boba_fett, X), masterchief != boba_fett.
compare(boba_fett, masterchief, X) :- neg(boba_fett, X), neg(masterchief, X), boba_fett != masterchief.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(spanking, child_abuse).
pos(spanking, punishment).

Section 2 - General relationships:

relation(spanking, child_abuse).
relation(spanking, punishment).

Section 3 - Encoding:

spanking_is_not_child_abuse :- neg(spanking, child_abuse).
spanking_is_punishment :- pos(spanking, punishment).
compare(spanking,X,Y) :- neg(spanking,X),neg(Y,X), spanking != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = spanking.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(exodus, historical_occurrence).
pos(islamic_cosmology, occurrence_of_exodus).
pos(allah, existence).
pos(islam, successful_history).
pos(prayers, answered).
pos(arabs, blessed_with_oil).
pos(islam, respectable_look).
pos(islam, valued).
pos(islam, respectable_claims).
pos(islam, flat_earth).
pos(islam, occurrence_of_exodus).

Section 2 - General relationships:

relation(exodus, torah).
relation(islam, mainstream_science).
relation(islam, archeologists).
relation(islam, mainstream_scientists).
relation(islam, sidelined_scientists).
relation(islam, idealism).

Section 3 - Encoding:

exodus_did_not_occur :- neg(exodus, historical_occurrence).
exodus_occurred :- pos(islamic_cosmology, occurrence_of_exodus).
islam_is_respectable :- pos(islam, respectable_look).
islam_is_valued :- pos(islam, valued).
islam_has_respectable_claims :- pos(islam, respectable_claims).
islam_says_flat_earth :- pos(islam, flat_earth).
islam_says_exodus_occurred :- pos(islam, occurrence_of_exodus).
compare(islam, mainstream_science, archeologists) :- neg(islam, mainstream_science), neg(islam, archeologists), mainstream_science != archeologists.
compare(islam, mainstream_scientists, sidelined_scientists) :- neg(islam, mainstream_scientists), neg(islam, sidelined_scientists), mainstream_scientists != sidelined_scientists, mainstream_scientists = islam.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(school_lunches, meat).
neg(school_lunches, sauce).
neg(school_lunches, ketchup).
neg(school_lunches, oils).
neg(school_lunches, salt).
pos(school_lunches, vegetarian).

Section 2 - General relationships:

relation(school_lunches, high_school).
relation(school_lunches, junior_high).
relation(school_lunches, children).
relation(school_lunches, peanut_butter).
relation(school_lunches, vegetarians).

Section 3 - Encoding:

vegetarian_school_lunches :- pos(school_lunches, vegetarian).
non_vegetarian_school_lunches :- neg(school_lunches, vegetarian).
compare(school_lunches, X, Y) :- neg(school_lunches, X), neg(school_lunches, Y), school_lunches != Y.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(nationalism, excess).
neg(nationalism, corruption).
neg(nationalism, violence).
pos(nationalism, political_movements).
neg(national_salvation_front_of_romania, good_governance).
neg(communist_china, good_governance).
neg(robert_mugabes_zimbabwe, good_governance).
neg(north_korea, good_governance).
pos(nationalism, irrational_policies).

% Section 2 - General relationships
relation(nationalism, political_movements).
relation(nationalism, excess).
relation(nationalism, corruption).
relation(nationalism, violence).
relation(national_salvation_front_of_romania, nationalism).
relation(communist_china, nationalism).
relation(robert_mugabes_zimbabwe, nationalism).
relation(north_korea, nationalism).
relation(nationalism, irrational_policies).
relation(nationalism, irrational_base_of_support).
relation(nationalism, emotionally_charged_feelings).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(adhd, energetic_children).
neg(adhd, real).
pos(adhd, genetic).
pos(adhd_brain, chemical_differences).

Section 2 - General relationships:

relation(adhd, energetic_children).
relation(adhd, real).
relation(adhd, genetic).
relation(adhd_brain, chemical_differences).
relation(adhd, families).
relation(adhd, offspring).
relation(adhd, relative).

Section 3 - Encoding:

adhd_is_real_because :- pos(adhd,Y).
adhd_is_not_real_because :- neg(adhd,Y).
compare(adhd,X,Y) :- neg(adhd,X),neg(Y,X), adhd != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = adhd.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(zidane, appearances).
pos(zidane, goals).
pos(ronaldo, goals).
neg(ronaldo, appearances).
neg(ronaldo, headbutts).
pos(zidane, headbutts).

% Section 2 - General relationships
relation(zidane, goals).
relation(ronaldo, goals).
relation(zidane, appearances).
relation(ronaldo, appearances).
relation(zidane, headbutts).
relation(ronaldo, headbutts).

% Section 3 - Encoding
zidane_is_good_because :- pos(zidane,Y).
zidane_is_bad_because :- neg(zidane,Y).
ronaldo_is_good_because :- pos(ronaldo,Y).
ronaldo_is_bad_because :- neg(ronaldo,Y).
compare(zidane,ronaldo,goals) :- neg(zidane,goals),neg(ronaldo,goals), zidane != ronaldo.
compare(zidane,ronaldo,appearances) :- neg(zidane,appearances),neg(ronaldo,appearances), zidane != ronaldo.
compare(zidane,ronaldo,headbutts) :- neg(zidane,headbutts),neg(ronaldo,headbutts), zidane != ronaldo.
```
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(sith, philosophy).
pos(sith, power).
pos(sith, victory).
neg(sith, jedi).
neg(sith, impulsive_emotions).
neg(sith, justice).
neg(sith, cold_blood).
neg(sith, flaws).
pos(jedi, impulsive_emotions).
pos(jedi, justice).
pos(jedi, cold_blood).
pos(jedi, flaws).

% Section 2 - General relationships
relation(sith, jedi).
relation(sith, philosophy).
relation(sith, power).
relation(sith, victory).
relation(sith, flaws).
relation(jedi, impulsive_emotions).
relation(jedi, justice).
relation(jedi, cold_blood).
relation(jedi, flaws).

% Section 3 - Encoding
sith_is_good_because :- pos(sith,Y).
sith_is_bad_because :- neg(sith,Y).
jedi_is_good_because :- pos(jedi,Y).
jedi_is_bad_because :- neg(jedi,Y).
compare(sith,X,Y) :- neg(sith,X),neg(Y,X), sith != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = sith.
compare(jedi,X,Y) :- neg(jedi,X),neg(Y,X), jedi != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = jedi.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(abortion, deliberate).
pos(abortion, killing).
pos(abortion, human_being).
pos(abortion, premeditated).
pos(abortion, unlawful).
pos(fetus, human).
pos(fetus, organism).
pos(fetus, created_by_humans).
pos(acorn, oak_tree).
pos(cake, confection).
pos(oven, womb).

neg(abortion, legal).
neg(abortion, universally_legal).
neg(acorn, oak_tree).
neg(fetus, non_human).
neg(sheep_tail, leg).

Section 2 - General relationships:

relation(abortion, deliberate).
relation(abortion, killing).
relation(abortion, human_being).
relation(abortion, premeditated).
relation(abortion, unlawful).
relation(fetus, human).
relation(fetus, organism).
relation(fetus, created_by_humans).
relation(acorn, oak_tree).
relation(cake, confection).
relation(oven, womb).
relation(sheep_tail, leg).

Section 3 - Encoding:

abortion_is_murder :- pos(abortion, deliberate), pos(abortion, killing), pos(abortion, human_being), pos(abortion, premeditated), pos(abortion, unlawful).

fetus_is_human :- pos(fetus, human), pos(fetus, organism), pos(fetus, created_by_humans).

abortion_is_not_universally_legal :- neg(abortion, universally_legal).

acorn_is_not_oak_tree :- neg(acorn, oak_tree).

fetus_is_not_non_human :- neg(fetus, non_human).

sheep_tail_is_not_leg :- neg(sheep_tail, leg).

compare(abortion, deliberate, killing) :- pos(abortion, deliberate), pos(abortion, killing).
compare(abortion, deliberate, human_being) :- pos(abortion, deliberate), pos(abortion, human_being).
compare(abortion, deliberate, premeditated) :- pos(abortion, deliberate), pos(abortion, premeditated).
compare(abortion, deliberate, unlawful) :- pos(abortion, deliberate), pos(abortion, unlawful).
compare(abortion, killing, human_being) :- pos(abortion, killing), pos(abortion, human_being).
compare(abortion, killing, premeditated) :- pos(abortion, killing), pos(abortion, premeditated).
compare(abortion, killing, unlawful) :- pos(abortion, killing), pos(abortion, unlawful).
compare(abortion, human_being, premeditated) :- pos(abortion, human_being), pos(abortion, premeditated).
compare(abortion, human_being, unlawful) :- pos(abortion, human_being), pos(abortion, unlawful).
compare(abortion, premeditated, unlawful) :- pos(abortion, premeditated), pos(abortion, unlawful).
compare(fetus, human, organism) :- pos(fetus, human), pos(fetus, organism).
compare(fetus, human, created_by_humans) :- pos(fetus, human), pos(fetus, created_by_humans).
compare(fetus, organism, created_by_humans) :- pos(fetus, organism), pos(fetus, created_by_humans).
compare(acorn, oak_tree, confection) :- pos(acorn, oak_tree), pos(cake, confection).
compare(acorn, oak_tree, oven) :- pos(acorn, oak_tree), pos(oven, womb).
compare(acorn, oak_tree, sheep_tail) :- pos(acorn, oak_tree), pos(sheep_tail, leg).
compare(cake, confection, oven) :- pos(cake, confection), pos(oven, womb).
compare(cake, confection, sheep_tail) :- pos(cake, confection), pos(sheep_tail, leg).
compare(oven, womb, sheep_tail) :- pos(oven, womb), pos(sheep_tail, leg).
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(pornography, wrong).

Section 2 - General relationships:

relation(pornography, people).
relation(pornography, harm).
relation(pornography, resolution).
relation(pornography, perception).
relation(pornography, questions).
relation(pornography, facts).

Section 3 - Encoding:

pornography_is_wrong_because :- neg(pornography, wrong).
pornography_is_not_wrong_because :- pos(pornography, wrong).
compare(pornography,X,Y) :- neg(pornography,X),neg(Y,X), pornography != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = pornography.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(video, weird_stuff).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white_america).
pos(kids, suburban_white
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(apocalypse, dark_ages).
pos(apocalypse, nuclear_weapons).
neg(nuclear_weapons, us).
neg(nuclear_weapons, china).
neg(nuclear_weapons, russia).
pos(us, nuclear_capabilities).
neg(us, china).
neg(us, russia).
pos(china, us).
neg(russia, us).
neg(russia, china).

Section 2 - General relationships:

relation(apocalypse, dark_ages).
relation(apocalypse, nuclear_weapons).
relation(nuclear_weapons, us).
relation(nuclear_weapons, china).
relation(nuclear_weapons, russia).
relation(us, nuclear_capabilities).
relation(us, china).
relation(us, russia).
relation(china, us).
relation(russia, us).
relation(russia, china).

Section 3 - Encoding:

apocalypse_is_bad_because :- pos(apocalypse, Y).
apocalypse_is_good_because :- neg(apocalypse, Y).
compare(apocalypse,X,Y) :- neg(apocalypse,X),neg(Y,X), apocalypse != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = apocalypse.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(you, respect).
neg(you, rap_god).
neg(you, rapper).
neg(you, career).
pos(you, silly_little_account).
pos(me, rapper).
pos(me, career).

Section 2 - General relationships:

relation(you, rap).
relation(you, debate.org).
relation(me, rap).
relation(me, debate.org).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(student, sir).
neg(student, mister).
neg(student, ms).
neg(student, miss).
neg(student, ma'am).
pos(sir, life_experience).
pos(mister, life_experience).
pos(ms, life_experience).
pos(miss, life_experience).
pos(ma'am, life_experience).

Section 2 - General relationships:

relation(student, sir).
relation(student, mister).
relation(student, ms).
relation(student, miss).
relation(student, ma'am).
relation(sir, life_experience).
relation(mister, life_experience).
relation(ms, life_experience).
relation(miss, life_experience).
relation(ma'am, life_experience).

Section 3 - Encoding:

sir_is_respected_because :- pos(sir, life_experience).
mister_is_respected_because :- pos(mister, life_experience).
ms_is_respected_because :- pos(ms, life_experience).
miss_is_respected_because :- pos(miss, life_experience).
ma_am_is_respected_because :- pos(ma'am, life_experience).
compare(student,X,Y) :- neg(student,X),neg(Y,X), student != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = student.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(lgbt_movement, convince_people).
pos(lgbt_movement, being_gay_is_just_a_variation).
neg(lgbt_movement, mental_disorder).
pos(child_centers, raise_children_in_a_mass_situation).
neg(child_centers, experience_being_in_a_small_home).
neg(child_centers, given_the_toys_and_tools_that_most_kids_take_foor_granted).
pos(child_centers, get_the_bare_necessities).
pos(gay, understand_the_consequences_of_sex).
pos(horse, understand_the_human_language).
neg(horse, understand_human_sex).
pos(sister, produce_biological_kids_with_defects).
neg(gay, produce_biological_children).
pos(society, gays_are_a_part_of_society).
pos(society, famines).
pos(society, wars).
pos(society, diseases).
neg(society, common).
pos(society, reproduction).
pos(society, producing_7_children_per_mother).
neg(society, crumble).
pos(society, more_food).
pos(society, more_cures).
pos(society, less_war).
pos(society, populations_are_increasing_at_a_steep_rate).
pos(society, 2_children_per_mother_are_needed).
pos(society, some_mothers_have_more_than_2_children).
pos(society, other_people_to_not_have_any_at_all).

Section 2 - General relationships:

relation(gay, pedophile).
relation(gay, incest).
relation(gay, bestiality).
relation(gay, child).
relation(gay, sister).
relation(gay, society).
relation(child_centers, child).
relation(society, reproduction).
relation(society, population).
relation(society, mother).
relation(society, war).
relation(society, disease).
relation(society, famine).

Section 3 - Encoding:

lgbt_movement_is_good_because :- pos(lgbt_movement, Y).
lgbt_movement_is_bad_because :- neg(lgbt_movement, Y).
child_centers_are_good_because :- pos(child_centers, Y).
child_centers_are_bad_because :- neg(child_centers, Y).
gay_is_good_because :- pos(gay, Y).
gay_is_bad_because :- neg(gay, Y).
horse_is_good_because :- pos(horse, Y).
horse_is_bad_because :- neg(horse, Y).
sister_is_good_because :- pos(sister, Y).
sister_is_bad_because :- neg(sister, Y).
society_is_good_because :- pos(society, Y).
society_is_bad_because :- neg(society, Y).
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = X.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(smoking, innocent_people).
pos(smoking_ban, innocent_people).
neg(smoking, health).
pos(smoking_ban, health).

Section 2 - General relationships:

relation(smoking, pollution).
relation(smoking, lungs).
relation(smoking, heart).
relation(smoking_ban, lung_diseases).
relation(smoking_ban, heart_attacks).

Section 3 - Encoding:

smoking_is_bad_because :- neg(smoking,Y).
smoking_is_good_because :- pos(smoking,Y).
compare(smoking,X,Y) :- neg(smoking,X),neg(Y,X), smoking != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = smoking.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(d_day, effect).
neg(d_day, outcome).
pos(d_day, france).
pos(d_day, italy).
pos(fascist, strongholds).
pos(fascist, france).
pos(german, conscripts).
pos(german, reinforcements).
pos(defeats, eastern_front).
pos(defeats, fascist_defeat).
pos(d_day, europe).
pos(d_day, foreign_forces).
pos(d_day, invade).
neg(uk, soldiers).
neg(american, soldiers).
pos(rhine, fascists).
pos(low_countries, fascists).
pos(soviet, forces).
pos(soviet, east).
pos(fascists, backed_up).
pos(fascists, reinforced).
pos(fascists, west).
pos(fascists, supplies).
pos(fascists, strongholds).
pos(soviets, berlin).
pos(soviet, military).
pos(soviet, casualites).
pos(battle_of_berlin, bloodiest_battles).
pos(soviets, exhausted).
neg(soviets, moral).
pos(fascist, armies).
pos(fascist, rested).
pos(fascist, defences).
pos(fascist, home_land).
pos(fascist, building).
pos(soviets, fight).
neg(strategic, descion).
neg(tactical, descion).
neg(military, attack).
neg(ammunition).
neg(defences).

Section 2 - General relationships:

relation(d_day, outcome).
relation(d_day, france).
relation(d_day, italy).
relation(fascist, strongholds).
relation(fascist, france).
relation(german, conscripts).
relation(german, reinforcements).
relation(defeats, eastern_front).
relation(defeats, fascist_defeat).
relation(d_day, europe).
relation(d_day, foreign_forces).
relation(d_day, invade).
relation(uk, soldiers).
relation(american, soldiers).
relation(rhine, fascists).
relation(low_countries, fascists).
relation(soviet, forces).
relation(soviet, east).
relation(fascists, backed_up).
relation(fascists, reinforced).
relation(fascists, west).
relation(fascists, supplies).
relation(fascists, strongholds).
relation(soviets, berlin).
relation(soviet, military).
relation(soviet, casualites).
relation(battle_of_berlin, bloodiest_battles).
relation(soviets, exhausted).
relation(soviets, moral).
relation(fascist, armies).
relation(fascist, rested).
relation(fascist, defences).
relation(fascist, home_land).
relation(fascist, building).
relation(soviets, fight).
relation(strategic, descion).
relation(tactical, descion).
relation(military, attack).
relation(ammunition).
relation(defences).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(gay, fundamental_rights).
pos(gay, marriage).
neg(homophobic_ideals, equality).
pos(all, equality).
pos(black, civil_rights).
pos(women, rights).
pos(gay, rights).
pos(homosexuals, equality).
pos(bible, homosexuality).

Section 2 - General relationships:

relation(gay, discrimination).
relation(homophobic_ideals, laws).
relation(homophobic_ideals, discrimination).
relation(opponent, arguments).
relation(opponent, topicality).
relation(homosexuality, debate).

Section 3 - Encoding:

gay_should_have_rights :- pos(gay, Y).
gay_should_not_have_rights :- neg(gay, Y).
homophobic_ideals_are_wrong :- neg(homophobic_ideals, equality).
all_are_equal :- pos(all, equality).
black_civil_rights_are_important :- pos(black, civil_rights).
women_rights_are_important :- pos(women, rights).
gay_rights_are_important :- pos(gay, rights).
homosexuals_should_be_equal :- pos(homosexuals, equality).
bible_supports_homosexuality :- pos(bible, homosexuality).
opponent_failed_to_respond :- relation(opponent, arguments).
opponent_has_no_topicality :- relation(opponent, topicality).
homophobic_ideals_are_not_topical :- relation(homophobic_ideals, topicality).
laws_are_not_topical :- relation(laws, topicality).
discrimination_is_not_topical :- relation(discrimination, topicality).
homosexuality_is_not_wrong :- relation(homosexuality, debate).
con_failed_to_debate :- relation(con, debate).
compare(gay,X,Y) :- neg(gay,X),neg(Y,X), gay != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gay.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(anime, inspiration).
neg(opponent, understanding).
neg(opponent, topic).
neg(opponent, resolution).
neg(opponent, everyone).
pos(opponent, potential).
neg(opponent, debate).
neg(opponent, argument).
neg(opponent, everyone).
pos(opponent, potential).
neg(opponent, everyone).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration).
neg(opponent, anime).
neg(opponent, everyone).
neg(opponent, potential).
neg(opponent, inspiration
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, heavens).
pos(god, earth).
pos(god, free_will).
pos(god, watching).
neg(world, total_darkness).
neg(world, pain).
neg(god, help).

Section 2 - General relationships:

relation(god, world).
relation(god, mankind).
relation(god, darkness).

Section 3 - Encoding:

god_is_good_because :- pos(god,Y).
god_is_bad_because :- neg(god,Y).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
###DELIMITER###
 Section 1 - Negative and positive relationships:
pos(evil, power).
pos(king, power).
pos(king, everything).
neg(you, leader).
neg(you, power).
neg(you, king).
neg(you, everything).

Section 2 - General relationships:
relation(evil, you).
relation(king, you).
relation(power, you).
relation(leader, you).
relation(everything, you).

Section 3 - Encoding:
king_is_good_because :- pos(king,Y).
king_is_bad_because :- neg(king,Y).
compare(king,X,Y) :- neg(king,X),neg(Y,X), king != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = king.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(american_revolution, justified).
pos(thirteen_colonies, loyalist_population).
pos(thirteen_colonies, population_in_open_rebellion).
pos(thirteen_colonies, undecided_population).
pos(redcoats, firing_on_colonists).
pos(acadians, french).
pos(acadians, neutral).
pos(englishmen, killing_englishmen).
pos(london, declaring_slaves_free).
pos(emancipation_proclamation, committed_to_the_union_to_the_abolition_of_slavery).
pos(thirteenth_amendment, banning_involuntary_servitude_in_the_united_states).
pos(british_government, attempting_to_assert_control_over_the_colonies).
pos(ohio, closed_to_settlement).
pos(treasury, lack_of_funds).
pos(military_defenses, providing_for_the_new_colonists).
pos(indian_subcontinent, conquest).
pos(britain's_african_colonies, conquest).
pos(british, using_military_force_to_achieve_their_goals).
pos(ohio_river_valley, remaining_closed_to_white_occupation).
pos(american_revolution, complex).
pos(american_conduct, during_or_after_the_revolution).
pos(american_revolution, unjustified).

neg(thirteen_colonies, loyalist_population).
neg(thirteen_colonies, population_in_open_rebellion).
neg(thirteen_colonies, undecided_population).
neg(redcoats, firing_on_colonists).
neg(acadians, french).
neg(acadians, neutral).
neg(englishmen, killing_englishmen).
neg(london, declaring_slaves_free).
neg(emancipation_proclamation, committed_to_the_union_to_the_abolition_of_slavery).
neg(thirteenth_amendment, banning_involuntary_servitude_in_the_united_states).
neg(british_government, attempting_to_assert_control_over_the_colonies).
neg(ohio, closed_to_settlement).
neg(treasury, lack_of_funds).
neg(military_defenses, providing_for_the_new_colonists).
neg(indian_subcontinent, conquest).
neg(britain's_african_colonies, conquest).
neg(british, using_military_force_to_achieve_their_goals).
neg(ohio_river_valley, remaining_closed_to_white_occupation).
neg(american_revolution, complex).
neg(american_conduct, during_or_after_the_revolution).
neg(american_revolution, unjustified).

Section 2 - General relationships:

relation(american_revolution, thirteen_colonies).
relation(thirteen_colonies, loyalist_population).
relation(thirteen_colonies, population_in_open_rebellion).
relation(thirteen_colonies, undecided_population).
relation(redcoats, firing_on_colonists).
relation(acadians, french).
relation(acadians, neutral).
relation(englishmen, killing_englishmen).
relation(london, declaring_slaves_free).
relation(emancipation_proclamation, committed_to_the_union_to_the_abolition_of_slavery).
relation(thirteenth_amendment, banning_involuntary_servitude_in_the_united_states).
relation(british_government, attempting_to_assert_control_over_the_colonies).
relation(ohio, closed_to_settlement).
relation(treasury, lack_of_funds).
relation(military_defenses, providing_for_the_new_colonists).
relation(indian_subcontinent, conquest).
relation(britain's_african_colonies, conquest).
relation(british, using_military_force_to_achieve_their_goals).
relation(ohio_river_valley, remaining_closed_to_white_occupation).
relation(american_revolution, complex).
relation(american_conduct, during_or_after_the_revolution).
relation(american_revolution, unjustified).

Section 3 - Encoding:

american_revolution_is_justified :- pos(american_revolution, justified).
american_revolution_is_unjustified :- neg(american_revolution, justified).
compare(american_revolution, X, Y) :- neg(american_revolution, X), neg(Y, X), american_revolution != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = american_revolution.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(save_one_person, save_many_people).
neg(kill_innocent_person, save_many_people).
pos(shoot_little_boy, save_two_hundred_people).
neg(shoot_little_boy, tragedy_for_little_boy_family).
pos(save_two_hundred_people, tragedy_for_little_boy_family).

Section 2 - General relationships:

relation(terrorist, bomb).
relation(bomb, detonator).
relation(policeman, terrorist).
relation(little_boy, detonator).
relation(building, two_hundred_people).
relation(shoot_little_boy, save_two_hundred_people).

Section 3 - Encoding:

save_many_people_is_good_because :- pos(save_many_people, Y).
save_many_people_is_bad_because :- neg(save_many_people, Y).
kill_innocent_person_is_good_because :- pos(kill_innocent_person, Y).
kill_innocent_person_is_bad_because :- neg(kill_innocent_person, Y).
shoot_little_boy_is_good_because :- pos(shoot_little_boy, Y).
shoot_little_boy_is_bad_because :- neg(shoot_little_boy, Y).
compare(save_many_people,X,Y) :- neg(save_many_people,X),neg(Y,X), save_many_people != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = save_many_people.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(ufo_phenomenon, scientific_method).
pos(ufo_sightings, credible_witnesses).
pos(ufo_sightings, qualified_witnesses).

Section 2 - General relationships:

relation(ufo_phenomenon, scientific_method).
relation(ufo_sightings, credible_witnesses).
relation(ufo_sightings, qualified_witnesses).
relation(ufo_sightings, science).
relation(ufo_sightings, extraterrestrial_hypothesis).
relation(ufo_sightings, evidence).
relation(ufo_sightings, scientific_evidence).
relation(intelligent_beings, galaxy).
relation(intelligent_beings, civilization).
relation(intelligent_beings, older_civilization).
relation(intelligent_beings, exploration).
relation(intelligent_beings, colonization).
relation(intelligent_beings, electromagnetic_emissions).
relation(intelligent_beings, atomic_detonations).
relation(intelligent_beings, seti_project).
relation(intelligent_beings, alien_life).
relation(intelligent_beings, alien_race).
relation(intelligent_beings, alien_signals).

Section 3 - Encoding:

ufo_phenomenon_is_scientific :- pos(ufo_phenomenon, scientific_method).
ufo_phenomenon_is_not_scientific :- neg(ufo_phenomenon, scientific_method).
ufo_sightings_have_credible_witnesses :- pos(ufo_sightings, credible_witnesses).
ufo_sightings_have_qualified_witnesses :- pos(ufo_sightings, qualified_witnesses).
compare(ufo_phenomenon, X, Y) :- neg(ufo_phenomenon, X), neg(Y, X), ufo_phenomenon != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = ufo_phenomenon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(summer, growing_season).
neg(winter, growing_season).
pos(summer, vacation).
neg(winter, vacation).
pos(summer, girls_clothing).
neg(winter, girls_clothing).

Section 2 - General relationships:

relation(summer, growing_season).
relation(winter, growing_season).
relation(summer, vacation).
relation(winter, vacation).
relation(summer, girls_clothing).
relation(winter, girls_clothing).

Section 3 - Encoding:

summer_is_better_because :- pos(summer,Y).
winter_is_better_because :- neg(winter,Y).
compare(summer,X,Y) :- neg(summer,X),neg(Y,X), summer != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = summer.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(peta, organization).
pos(peta, group_of_people).
neg(peta, take_care_of_animals).
pos(peta, fight_for_animal_rights).

Section 2 - General relationships:

relation(peta, organization).
relation(peta, group_of_people).
relation(peta, take_care_of_animals).
relation(peta, fight_for_animal_rights).

Section 3 - Encoding:

peta_is_bad_because :- neg(peta,Y).
peta_is_good_because :- pos(peta,Y).
compare(peta,X,Y) :- neg(peta,X),neg(Y,X), peta != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = peta.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(people, stories).
pos(stories, aliens).
neg(stories, evidence).
neg(governments, comotion).
pos(people, answers).

Section 2 - General relationships:

relation(stories, people).
relation(stories, aliens).
relation(stories, evidence).
relation(governments, comotion).
relation(people, answers).

Section 3 - Encoding:

people_are_good_because :- pos(people,Y).
people_are_bad_because :- neg(people,Y).
compare(people,X,Y) :- neg(people,X),neg(Y,X), people != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = people.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(lwerd, lyrical_flaunting).
pos(lwerd, mean_rage).
pos(lwerd, wet_dreams).
pos(lwerd, beautiful_writing).
pos(lwerd, rodeo).
pos(lwerd, deeper_rhymes).
pos(lwerd, verbal_murder_slaughter).
pos(lwerd, victory).
pos(lwerd, doberman).
pos(lwerd, bitch).
pos(pro, bad_poetry).
pos(pro, stolen_avatar).
pos(pro, fake_account).
pos(pro, condom_protection).
pos(pro, jacking_swag).
pos(pro, marathon).
pos(pro, stomach_sickness).
pos(pro, pussy).
neg(pro, good_crap).
neg(pro, good_name_dropping).
neg(pro, good_respect).
neg(pro, good_testing).
neg(pro, good_picture_posting).
neg(pro, good_fighting).
neg(pro, good_writing).
neg(pro, good_wealth).
neg(pro, good_beef).
neg(pro, good_d_ck).
neg(pro, good_dutiful_knowledge).
neg(pro, good_avatar_stealing).
neg(pro, good_rhyme_depth).
neg(pro, good_porn_star).
neg(pro, good_account_privacy).
neg(pro, good_condom_usage).
neg(pro, good_swag_jacking).
neg(pro, good_challenge).
neg(pro, good_rhyme_dopeness).
neg(pro, good_manliness).
neg(pro, good_dog_picture_posting).

Section 2 - General relationships:

relation(lwerd, pro).
relation(lwerd, dog).
relation(lwerd, father).
relation(lwerd, mother).
relation(lwerd, condom).
relation(lwerd, pregnancy).
relation(lwerd, swag).
relation(lwerd, account).
relation(lwerd, stomach).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
relation(lwerd, victory).
relation(lwerd, vuitton).
relation(lwerd, marathon).
relation(lwerd, doctor).
relation(lwerd, stomach).
relation(lwerd, account).
relation(lwerd, challenge).
relation(lwerd, rhymes).
relation(lwerd, beef).
relation(lwerd, d_ck).
relation(lwerd, poetry).
relation(lwerd, dreams).
relation(lwerd, rodeo).
relation(lwerd, writing).
relation(lwerd, scar).
relation(lwerd, porn_star).
relation(lwerd, avatar).
relation(lwerd, comments_section).
relation(lwerd, privacy).
relation(lwerd, lieutenant).
relation(lwerd, condom_protection).
relation(lwerd, pregnancy).
relation(lwerd, swag_jacking).
relation(lwerd, father).
relation(lwerd, murder_slaughter).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(teleological_argument, improbable_natural_cause).
pos(teleological_argument, god).
pos(god, omnipotent).
pos(god, omniscient).
pos(god, omnibenevolent).
pos(omnipotence_paradox, god).
pos(argument_from_free_will, god).
neg(teleological_argument, false_dilemma).
neg(teleological_argument, assumption).
neg(omnipotence_paradox, god).
neg(argument_from_free_will, god).

Section 2 - General relationships:

relation(teleological_argument, improbable_natural_cause).
relation(teleological_argument, false_dilemma).
relation(teleological_argument, assumption).
relation(teleological_argument, god).
relation(omnipotence_paradox, god).
relation(argument_from_free_will, god).

Section 3 - Encoding:

omnipotent_god :- pos(god, omnipotent).
omnibenevolent_god :- pos(god, omnibenevolent).
omniscient_god :- pos(god, omniscient).
not_omnipotent_god :- neg(god, omnipotent).
not_omnibenevolent_god :- neg(god, omnibenevolent).
not_omniscient_god :- neg(god, omniscient).
compare(god, omnipotent, not_omnipotent) :- neg(god, omnipotent).
compare(god, omnibenevolent, not_omnibenevolent) :- neg(god, omnibenevolent).
compare(god, omniscient, not_omniscient) :- neg(god, omniscient).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(second_amendment, militia_rights).
pos(second_amendment, individual_arms_rights).

Section 2 - General relationships:

relation(second_amendment, militia).
relation(second_amendment, people).
relation(second_amendment, weapons).
relation(militia, people).
relation(militia, weapons).
relation(tyrants, people).
relation(tyrants, weapons).
relation(tyrants, militia).

Section 3 - Encoding:

militia_is_good_because :- pos(militia,Y).
militia_is_bad_because :- neg(militia,Y).
people_is_good_because :- pos(people,Y).
people_is_bad_because :- neg(people,Y).
weapons_is_good_because :- pos(weapons,Y).
weapons_is_bad_because :- neg(weapons,Y).
second_amendment_is_good_because :- pos(second_amendment,Y).
second_amendment_is_bad_because :- neg(second_amendment,Y).
tyrants_is_good_because :- pos(tyrants,Y).
tyrants_is_bad_because :- neg(tyrants,Y).
compare(militia,X,Y) :- neg(militia,X),neg(Y,X), militia != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = militia.
compare(people,X,Y) :- neg(people,X),neg(Y,X), people != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = people.
compare(weapons,X,Y) :- neg(weapons,X),neg(Y,X), weapons != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = weapons.
compare(second_amendment,X,Y) :- neg(second_amendment,X),neg(Y,X), second_amendment != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = second_amendment.
compare(tyrants,X,Y) :- neg(tyrants,X),neg(Y,X), tyrants != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = tyrants.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(roy_latham, good_debater).
neg(roy_latham, good_rhymer).
pos(kingdebater, good_rhymer).
neg(kingdebater, good_debater).
pos(blues_clues, good_show).
neg(kingdebater, good_grammar).
pos(logical_master, good_grammar).

Section 2 - General relationships:

relation(roy_latham, kingdebater).
relation(roy_latham, blues_clues).
relation(kingdebater, blues_clues).
relation(logical_master, kingdebater).

Section 3 - Encoding:

kingdebater_is_good_because :- pos(kingdebater, Y).
kingdebater_is_bad_because :- neg(kingdebater, Y).
roy_latham_is_good_because :- pos(roy_latham, Y).
roy_latham_is_bad_because :- neg(roy_latham, Y).
logical_master_is_good_because :- pos(logical_master, Y).
logical_master_is_bad_because :- neg(logical_master, Y).
compare(kingdebater,X,Y) :- neg(kingdebater,X),neg(Y,X), kingdebater != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = kingdebater.
compare(roy_latham,X,Y) :- neg(roy_latham,X),neg(Y,X), roy_latham != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = roy_latham.
compare(logical_master,X,Y) :- neg(logical_master,X),neg(Y,X), logical_master != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = logical_master.
###DELIMITER###
 Section 1 - Negative and positive relationships:
pos(social_darwinism, just_theory).

Section 2 - General relationships:
relation(social_darwinism, morality).
relation(morality, moral_framework).
relation(morality, general_consensus).
relation(morality, moral_subjectivity).

Section 3 - Encoding:
social_darwinism_is_just_because :- pos(social_darwinism, Y).
social_darwinism_is_not_just_because :- neg(social_darwinism, Y).
compare(social_darwinism,X,Y) :- neg(social_darwinism,X),neg(Y,X), social_darwinism != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = social_darwinism.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(teemo, satan).
pos(teemo, cute).
neg(satan, cute).
pos(satan, scary).

% Section 2 - General relationships
relation(teemo, satan).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(right_to_be_forgotten, privacy).
pos(surveillance, deter_crimes).
pos(surveillance, catch_terrorists).
pos(drones, monitor_enemy).
pos(freedom_of_expression, website).
pos(freedom_of_expression, comment).
pos(wikipedia, history).
pos(jimmy_wales, history).
pos(jimmy_wales, public_eye).
pos(jimmy_wales, legal_process).

neg(breach_of_privacy, legal).
neg(intrusion, crude).
neg(criminals, government).
neg(deletion_of_data, tricky).
neg(deletion_of_data, expensive).
neg(opinion, true).
neg(beliefs, certain).
neg(beliefs, infallible).
neg(beliefs, true).
neg(beliefs, discussed).
neg(beliefs, taken_down).
neg(wikipedia, censorship).
neg(jimmy_wales, force).
neg(jimmy_wales, silence).

Section 2 - General relationships:

relation(right_to_be_forgotten, internet_searchers).
relation(breach_of_privacy, privacy).
relation(intrusion, criminals).
relation(surveillance, crimes).
relation(surveillance, terrorists).
relation(drones, enemy).
relation(nikki_castouras, image).
relation(information_systems, architecture).
relation(information_systems, links).
relation(deletion_of_data, information).
relation(freedom_of_expression, opinion).
relation(beliefs, truth).
relation(beliefs, knowledge).
relation(wikipedia, censorship).
relation(jimmy_wales, wikipedia).
relation(jimmy_wales, public_eye).
relation(jimmy_wales, legal_process).

Section 3 - Encoding:

right_to_be_forgotten_is_good_because :- pos(right_to_be_forgotten, Y).
right_to_be_forgotten_is_bad_because :- neg(right_to_be_forgotten, Y).
breach_of_privacy_is_good_because :- pos(breach_of_privacy, Y).
breach_of_privacy_is_bad_because :- neg(breach_of_privacy, Y).
intrusion_is_good_because :- pos(intrusion, Y).
intrusion_is_bad_because :- neg(intrusion, Y).
surveillance_is_good_because :- pos(surveillance, Y).
surveillance_is_bad_because :- neg(surveillance, Y).
drones_are_good_because :- pos(drones, Y).
drones_are_bad_because :- neg(drones, Y).
deletion_of_data_is_good_because :- pos(deletion_of_data, Y).
deletion_of_data_is_bad_because :- neg(deletion_of_data, Y).
freedom_of_expression_is_good_because :- pos(freedom_of_expression, Y).
freedom_of_expression_is_bad_because :- neg(freedom_of_expression, Y).
beliefs_are_good_because :- pos(beliefs, Y).
beliefs_are_bad_because :- neg(beliefs, Y).
wikipedia_is_good_because :- pos(wikipedia, Y).
wikipedia_is_bad_because :- neg(wikipedia, Y).
jimmy_wales_is_good_because :- pos(jimmy_wales, Y).
jimmy_wales_is_bad_because :- neg(jimmy_wales, Y).
compare(right_to_be_forgotten,X,Y) :- neg(right_to_be_forgotten,X),neg(Y,X), right_to_be_forgotten != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = right_to_be_forgotten.
compare(breach_of_privacy,X,Y) :- neg(breach_of_privacy,X),neg(Y,X), breach_of_privacy != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = breach_of_privacy.
compare(intrusion,X,Y) :- neg(intrusion,X),neg(Y,X), intrusion != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = intrusion.
compare(surveillance,X,Y) :- neg(surveillance,X),neg(Y,X), surveillance != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = surveillance.
compare(drones,X,Y) :- neg(drones,X),neg(Y,X), drones != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = drones.
compare(deletion_of_data,X,Y) :- neg(deletion_of_data,X),neg(Y,X), deletion_of_data != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = deletion_of_data.
compare(freedom_of_expression,X,Y) :- neg(freedom_of_expression,X),neg(Y,X), freedom_of_expression != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = freedom_of_expression.
compare(beliefs,X,Y) :- neg(beliefs,X),neg(Y,X), beliefs != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = beliefs.
compare(wikipedia,X,Y) :- neg(wikipedia,X),neg(Y,X), wikipedia != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = wikipedia.
compare(jimmy_wales,X,Y) :- neg(jimmy_wales,X),neg(Y,X), jimmy_wales != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = jimmy_wales.
###DELIMITER###
 **Section 1 - Negative and positive relationships:**

pos(zombies, kill).
pos(zombies, everyone).
pos(opponent, twilight_vs_magic_mike_storyline).
pos(opponent, epic_teen_romance_novel).
pos(creative_zombie_spin, screwed_up).
pos(creative_zombie_spin, opponent_plans).
pos(optimus_prime_steve_jobs_2016, vote).

**Section 2 - General relationships:**

relation(zombies, opponent).
relation(creative_zombie_spin, opponent).
relation(optimus_prime_steve_jobs_2016, opponent).

**Section 3 - Encoding:**

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(age_of_empires, critics).
pos(age_of_empires_3, metacritic_score_81).
pos(empire_earth_3, metacritic_score_49).
pos(age_of_empires, complex).
pos(age_of_empires, engaging).
pos(age_of_empires_3, resources_3).
pos(empire_earth, resources_2).
pos(age_of_empires_3, ages_5).
pos(empire_earth, ages_3).
pos(age_of_empires_3, ai).
pos(age_of_empires_3, realistic_physics_model).
pos(age_of_empires_3, complex_shaders).
pos(age_of_empires_3, hundreds_of_units).
pos(age_of_empires_3, immersive_worlds).
pos(age_of_empires_3, expansions_2).
pos(empire_earth_3, expansions_0).
pos(age_of_empires_3, award_winning_soundtrack).
pos(steven_rippy, legend).
pos(age_of_empires_3, focused_on_one_area_of_the_world_in_one_time_period).
pos(age_of_empires_3, vague_interaction_with_the_rest_of_the_world).
pos(age_of_empires_3, home_city).
pos(age_of_empires_3, realistic).
pos(empire_earth, large_portion_of_the_planet).
pos(empire_earth, ancient_commander).
pos(american_pioneers, founded_cities).
pos(american_pioneers, defended_cities).
pos(american_pioneers, rival_faction).
pos(american_pioneers, early_america).

neg(empire_earth, critics).
neg(empire_earth_3, metacritic_score_49).
neg(age_of_empires_3, metacritic_score_81).
neg(empire_earth, complex).
neg(empire_earth, engaging).
neg(empire_earth_3, resources_3).
neg(age_of_empires, resources_2).
neg(empire_earth_3, ages_5).
neg(age_of_empires, ages_3).
neg(empire_earth_3, ai).
neg(empire_earth_3, realistic_physics_model).
neg(empire_earth_3, complex_shaders).
neg(empire_earth_3, hundreds_of_units).
neg(empire_earth_3, immersive_worlds).
neg(empire_earth_3, expansions_2).
neg(age_of_empires_3, expansions_0).
neg(empire_earth_3, award_winning_soundtrack).
neg(steven_rippy, legend).
neg(empire_earth_3, focused_on_one_area_of_the_world_in_one_time_period).
neg(empire_earth_3, vague_interaction_with_the_rest_of_the_world).
neg(empire_earth_3, home_city).
neg(empire_earth_3, realistic).
neg(age_of_empires, large_portion_of_the_planet).
neg(age_of_empires, ancient_commander).
neg(empire_earth, founded_cities).
neg(empire_earth, defended_cities).
neg(empire_earth, rival_faction).
neg(empire_earth, early_america).

Section 2 - General relationships:

relation(age_of_empires, empire_earth).
relation(age_of_empires_3, empire_earth_3).
relation(age_of_empires_3, metacritic_score_81).
relation(empire_earth_3, metacritic_score_49).
relation(age_of_empires_3, resources_3).
relation(empire_earth, resources_2).
relation(age_of_empires_3, ages_5).
relation(empire_earth, ages_3).
relation(age_of_empires_3, ai).
relation(age_of_empires_3, realistic_physics_model).
relation(age_of_empires_3, complex_shaders).
relation(age_of_empires_3, hundreds_of_units).
relation(age_of_empires_3, immersive_worlds).
relation(age_of_empires_3, expansions_2).
relation(empire_earth_3, expansions_0).
relation(age_of_empires_3, award_winning_soundtrack).
relation(steven_rippy, legend).
relation(age_of_empires_3, focused_on_one_area_of_the_world_in_one_time_period).
relation(age_of_empires_3, vague_interaction_with_the_rest_of_the_world).
relation(age_of_empires_3, home_city).
relation(age_of_empires, large_portion_of_the_planet).
relation(age_of_empires, ancient_commander).
relation(american_pioneers, founded_cities).
relation(american_pioneers, defended_cities).
relation(american_pioneers, rival_faction).
relation(american_pioneers, early_america).

Section 3 - Encoding:

age_of_empires_is_good_because :- pos(age_of_empires,Y).
age_of_empires_is_bad_because :- neg(age_of_empires,Y).
empire_earth_is_good_because :- pos(empire_earth,Y).
empire_earth_is_bad_because :- neg(empire_earth,Y).
compare(age_of_empires,X,Y) :- neg(age_of_empires,X),neg(Y,X), age_of_empires != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = age_of_empires.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(just_government, food_security).
neg(government, morality).
pos(government, protect_people).
pos(john_adams, constitution).
pos(john_adams, happiness).
pos(constitution, happiness).
pos(government, happiness).
neg(opponent, relevance).
pos(opponent, government_power).
pos(opponent, government_responsibility).
pos(opponent, starvation).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(opponent, people).
pos(opponent, government).
pos(opponent, chance_reality).
pos(opponent, fear).
pos(opponent, lives).
pos(opponent, evidence).
pos(opponent, millions_people).
pos(opponent, impoverished).
pos(opponent, starvation).
pos(opponent, lives).
pos(opponent, responsibility).
pos(opponent, protect).
pos(
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(catholics, christians).
neg(catholics, protestant_christians).
pos(catholics, god).
pos(christians, god).
neg(catholic_priests, jesus).
pos(christian_pastors, jesus).

Section 2 - General relationships:

relation(catholics, christians).
relation(catholics, catholic_priests).
relation(christians, christian_pastors).
relation(catholic_priests, jesus).
relation(christian_pastors, jesus).

Section 3 - Encoding:

catholics_are_christians :- pos(catholics, christians).
catholics_are_not_christians :- neg(catholics, christians).
catholics_and_protestants_are_similar :- neg(catholics, protestant_christians).
catholics_and_protestants_are_different :- pos(catholics, protestant_christians).
catholics_worship_god :- pos(catholics, god).
christians_worship_god :- pos(christians, god).
catholic_priests_are_not_connected_to_jesus :- neg(catholic_priests, jesus).
christian_pastors_are_connected_to_jesus :- pos(christian_pastors, jesus).
catholics_and_christians_are_similar :- catholics_and_protestants_are_similar, catholics_worship_god, christians_worship_god.
catholics_and_christians_are_different :- catholics_and_protestants_are_different, catholic_priests_are_not_connected_to_jesus, christian_pastors_are_connected_to_jesus.
compare(catholics, christians, protestant_christians) :- neg(catholics, protestant_christians), neg(christians, protestant_christians), catholics != christians.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(mother_teresa, saint_like).
pos(mother_teresa, immoral).
pos(mother_teresa, unjust).

Section 2 - General relationships:

relation(mother_teresa, saint).
relation(mother_teresa, title).
relation(mother_teresa, actions).
relation(mother_teresa, ideas).
relation(mother_teresa, debate).
relation(mother_teresa, opponents).
relation(mother_teresa, rounds).
relation(mother_teresa, forfeiting).
relation(mother_teresa, difficulty).
relation(mother_teresa, good).
relation(mother_teresa, thorough).
relation(mother_teresa, interesting).
relation(mother_teresa, topic).
relation(mother_teresa, notion).
relation(mother_teresa, acceptance).
relation(mother_teresa, argument).
relation(mother_teresa, rebuttal).
relation(mother_teresa, luck).
relation(mother_teresa, happy).

Section 3 - Encoding:

mother_teresa_is_immoral_because :- pos(mother_teresa, Y).
mother_teresa_is_not_saint_like_because :- neg(mother_teresa, Y).
compare(mother_teresa,X,Y) :- neg(mother_teresa,X),neg(Y,X), mother_teresa != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(muhammad, peaceful_man).
neg(muhammad, loves_women).
neg(muhammad, preached_equality).
neg(muhammad, against_slavery).
neg(muhammad, freed_slaves).
neg(muhammad, reliable_source).
neg(muhammad, peaceful).
neg(muhammad, civilized).

pos(muhammad, preached_marriage).
pos(muhammad, created_allies).
pos(muhammad, hadith).
pos(muhammad, holy_book).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sunan_abu_dawood).
pos(muhammad, sunan_tirmidhi).
pos(muhammad, sunan_nasai).
pos(muhammad, sunan_ibn_majah).
pos(muhammad, sahih_ibn_hiban).
pos(muhammad, sahih_al_hakim).
pos(muhammad, mustadrak_al_hakim).
pos(muhammad, al_muwatta).
pos(muhammad, malik_muwatta).
pos(muhammad, shahih_muslim).
pos(muhammad, shahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(muhammad, sahih_muslim).
pos(muhammad, sahih_bukhari).
pos(
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(existence, illusory_thoughts).
pos(thought, existence).

Section 2 - General relationships:

relation(thought, existence).
relation(dream_person, thought).
relation(thought, real).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(international_community, political_legitimacy).
pos(myanmar, political_relations).
pos(myanmar, economic_relations).
pos(myanmar, china).
pos(myanmar, north_korea).
pos(us, pressure).
pos(eu, pressure).
pos(south_africa, allies).
pos(haiti, allies).
pos(myanmar, disengagement).

neg(us, myanmar).
neg(eu, myanmar).
neg(china, myanmar).
neg(north_korea, myanmar).
neg(military, international_pressure).
neg(government, international_pressure).
neg(myanmar, international_community).
neg(myanmar, south_africa).
neg(myanmar, haiti).

Section 2 - General relationships:

relation(international_community, myanmar).
relation(myanmar, china).
relation(myanmar, north_korea).
relation(us, myanmar).
relation(eu, myanmar).
relation(military, government).
relation(south_africa, myanmar).
relation(haiti, myanmar).

Section 3 - Encoding:

international_community_is_relevant_because :- pos(international_community,Y).
international_community_is_not_relevant_because :- neg(international_community,Y).
compare(international_community,X,Y) :- neg(international_community,X),neg(Y,X), international_community != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = international_community.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(private_handgun_ownerships, law).
pos(pro, specification).

Section 2 - General relationships:

relation(private_handgun_ownerships, united_states).
relation(private_handgun_ownerships, misuse).
relation(private_handgun_ownerships, death).
relation(private_handgun_ownerships, injury).
relation(private_handgun_ownerships, accident).
relation(private_handgun_ownerships, incident).
relation(private_handgun_ownerships, beretta).
relation(private_handgun_ownerships, m9).
relation(private_handgun_ownerships, make).
relation(private_handgun_ownerships, argument).
relation(private_handgun_ownerships, evidence).
relation(private_handgun_ownerships, statistics).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(evolution, change_inherited_characteristics).
pos(evolution, biological_populations).
pos(evolution, successive_generations).
pos(evolution, theory_evolution).
pos(evolution, processes).
pos(evolution, biblical_account).
pos(evolution, genesis).

Section 2 - General relationships:

relation(evolution, cosmology).
relation(evolution, christians).
relation(evolution, origins_life).
relation(evolution, earth).
relation(evolution, theory_abiogenesis).
relation(evolution, panspermia).
relation(evolution, god).
relation(evolution, debate).
relation(evolution, initial_creation).
relation(evolution, universe).

Section 3 - Encoding:

evolution_is_valid_cosmology :- pos(evolution,X).
evolution_is_not_valid_cosmology :- neg(evolution,X).
compare(evolution,X,Y) :- neg(evolution,X),neg(Y,X), evolution != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = evolution.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(ron_paul, non_interventionism).
neg(ron_paul, blowback).
pos(ron_paul, scaling_back_empire).
neg(us, nation_building).
neg(us, some_wars).

Section 2 - General relationships:

relation(ron_paul, foreign_policy).
relation(non_interventionism, blowback).
relation(empire, cost).
relation(nation_building, wars).
relation(terrorism, us).
relation(terrorism, other_countries).
relation(afghanistan, war).
relation(iran, nuclear_weapons).

Section 3 - Encoding:

non_interventionism_is_bad_because :- neg(ron_paul, non_interventionism).
blowback_is_bad_because :- neg(ron_paul, blowback).
scaling_back_empire_is_good_because :- pos(ron_paul, scaling_back_empire).
nation_building_is_bad_because :- neg(us, nation_building).
some_wars_are_bad_because :- neg(us, some_wars).
compare(ron_paul,X,Y) :- neg(ron_paul,X),neg(Y,X), ron_paul != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = ron_paul.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(master_debater, play_on_words).
pos(play_on_words, comedic_element).
pos(masturbation, natural_part_of_human_life).
pos(sex, natural_part_of_human_life).
pos(sexual_orientation, natural_part_of_human_life).
pos(race, natural_part_of_human_life).
pos(bowl_movements, natural_part_of_human_life).
pos(anger, natural_part_of_human_life).
pos(fear, natural_part_of_human_life).
pos(jokes, guilty_pleasure).

Section 2 - General relationships:

relation(master_debater, play_on_words).
relation(play_on_words, jokes).
relation(masturbation, jokes).
relation(sex, jokes).
relation(sexual_orientation, jokes).
relation(race, jokes).
relation(bowl_movements, jokes).
relation(anger, jokes).
relation(fear, jokes).

Section 3 - Encoding:

master_debater_is_funny_because :- pos(master_debater,Y).
master_debater_is_not_funny_because :- neg(master_debater,Y).
compare(master_debater,X,Y) :- neg(master_debater,X),neg(Y,X), master_debater != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = master_debater.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(christian, death_penalty).
pos(god, death_penalty).
pos(government, death_penalty).
neg(murder, death_penalty).

Section 2 - General relationships:

relation(christian, death_penalty).
relation(murder, death_penalty).
relation(god, death_penalty).
relation(government, death_penalty).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(school, learn).
pos(school, teach).
pos(test, ranking_system).
pos(school, prepare_for_college).
pos(education, definition).
pos(school, skills).
pos(school, learning).
pos(foreign_language, motivation).
pos(mexican, slang_watered_down_version_of_spanish).

% Section 2 - General relationships
relation(school, learn).
relation(school, teach).
relation(test, ranking_system).
relation(school, prepare_for_college).
relation(education, definition).
relation(school, skills).
relation(school, learning).
relation(foreign_language, motivation).
relation(mexican, slang_watered_down_version_of_spanish).

% Section 3 - Encoding
school_is_good_because :- pos(school, Y).
school_is_bad_because :- neg(school, Y).
compare(school,X,Y) :- neg(school,X),neg(Y,X), school != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = school.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, personal_religious_opinion).
pos(god, interpretation).
pos(god, belief).

Section 2 - General relationships:

relation(god, personal_religious_opinion).
relation(god, interpretation).
relation(god, belief).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(art, visceral_impact).
pos(art, lasting_effect).
pos(conversation, consent).
pos(conversation, taboo_subjects).
pos(public_spaces, confrontation).
neg(art, consent).
neg(public_spaces, consent).
neg(art, forget).

Section 2 - General relationships:

relation(art, ideas).
relation(art, media).
relation(art, conversation).
relation(art, public_spaces).
relation(conversation, controversy).
relation(conversation, taboo_subjects).
relation(public_spaces, squares).
relation(public_spaces, parks).
relation(public_spaces, museums).
relation(people, art).
relation(people, conversation).
relation(people, controversy).
relation(people, taboo_subjects).
relation(people, public_spaces).
relation(people, squares).
relation(people, parks).
relation(people, museums).
relation(people, forget).
relation(people, impact).
relation(people, confrontation).
relation(people, disgust).
relation(people, horror).
relation(people, trauma).

Section 3 - Encoding:

art_is_good_because :- pos(art,Y).
art_is_bad_because :- neg(art,Y).
compare(art,X,Y) :- neg(art,X),neg(Y,X), art != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = art.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(sports, big_lessons).
pos(sports, teamwork).
pos(sports, get_along).
pos(sports, work_together).
pos(sports, common_goal).
pos(sports, trust).
pos(sports, responsibility).
pos(sports, dealing_with_success).
pos(sports, dealing_with_failure).
pos(sports, coping_with_pressure).
pos(sports, stick_with_training).
pos(sports, improve).

Section 2 - General relationships:

relation(sports, lessons).
relation(sports, teamwork).
relation(sports, get_along).
relation(sports, work_together).
relation(sports, common_goal).
relation(sports, trust).
relation(sports, responsibility).
relation(sports, dealing_with_success).
relation(sports, dealing_with_failure).
relation(sports, coping_with_pressure).
relation(sports, stick_with_training).
relation(sports, improve).

Section 3 - Encoding:

sports_are_good_because :- pos(sports, Y).
sports_are_bad_because :- neg(sports, Y).
compare(sports,X,Y) :- neg(sports,X),neg(Y,X), sports != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = sports.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(ends, means).
pos(proportionalist, deontologist).
pos(healthy_person, organs).
pos(truth, arbitrary).
pos(pros, cons).

neg(ends, clear).
neg(proportionalist, slippery_slope).
neg(healthy_person, hundred_other_people).
neg(truth, relative).

% Section 2 - General relationships
relation(ends, means).
relation(proportionalist, deontologist).
relation(healthy_person, organs).
relation(truth, arbitrary).
relation(pros, cons).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(jews, large_facilities).
pos(jews, companies).
neg(jews, control_america).
pos(top_1_percent_us_population, wealth).
pos(capitalism, technological_development).

Section 2 - General relationships:

relation(jews, america).
relation(top_1_percent_us_population, america).
relation(capitalism, bottom_99_percent).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(smart_cities, lower_inflation).
pos(smart_cities, aggressive_use_of_cutting_edge_technology).
pos(smart_cities, productive_use_of_time).

Section 2 - General relationships:

relation(smart_cities, inflation).
relation(smart_cities, costs).
relation(smart_cities, time).

Section 3 - Encoding:

lower_inflation_because :- pos(smart_cities,X).
higher_inflation_because :- neg(smart_cities,X).
compare(smart_cities,X,Y) :- neg(smart_cities,X),neg(Y,X), smart_cities != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = smart_cities.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(gene_therapy, cure_disease).
pos(gene_therapy, eliminate_suffering).
pos(gene_therapy, prevent_disease).
pos(gene_therapy, prevent_genetic_disease).
pos(gene_therapy, wipe_out_genetic_disease).

Section 2 - General relationships:

relation(gene_therapy, risk_harm).
relation(gene_therapy, cure_disease).
relation(gene_therapy, eliminate_suffering).
relation(gene_therapy, prevent_disease).
relation(gene_therapy, prevent_genetic_disease).
relation(gene_therapy, wipe_out_genetic_disease).
relation(gene_therapy, cystic_fibrosis).
relation(gene_therapy, hemophilia).
relation(gene_therapy, heart_disease).
relation(gene_therapy, aids).
relation(gene_therapy, cancer).
relation(gene_therapy, defected_genes).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(fetus, potential_for_life).
neg(fetus, alive).
pos(fetus, human_potential).
pos(condoms, protection).
pos(birth_control, protection).
pos(day_after_pill, protection).
pos(woman, choice).
pos(woman, precautions).
pos(woman, exceptions).
neg(woman, unfairness).

Section 2 - General relationships:

relation(fetus, life).
relation(fetus, human).
relation(fetus, murder).
relation(fetus, states).
relation(fetus, contraceptives).
relation(woman, child).
relation(woman, pregnancy).
relation(woman, protection).
relation(woman, precautions).
relation(woman, exceptions).
relation(woman, unfairness).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(same_sex_marriage, civil_rights).
neg(same_sex_marriage, traditional_principles).
pos(marriage, holy_matrimony).
pos(marriage, lifelong_relationship).
pos(marriage, promise_to_god).
pos(marriage, faithfulness).
pos(marriage, commitment).
pos(marriage, tradition).
neg(marriage, defamation).
pos(gay_rights, civil_rights).
neg(gay_rights, christian_title).
neg(marriage, privilege).

Section 2 - General relationships:

relation(same_sex_marriage, traditional_principles).
relation(marriage, holy_matrimony).
relation(marriage, lifelong_relationship).
relation(marriage, promise_to_god).
relation(marriage, faithfulness).
relation(marriage, commitment).
relation(marriage, tradition).
relation(marriage, defamation).
relation(gay_rights, civil_rights).
relation(gay_rights, christian_title).
relation(marriage, privilege).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(atmosphere, want).
neg(sir, confusion).
neg(sir, time).

Section 2 - General relationships:

relation(sir, boy).
relation(teacher, boy).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(same_sex_marriage, legal).
neg(public_opinion, legal_arguments).
neg(polls, legal_arguments).
pos(legal_precedent, valid_reason).
pos(legal_precedent, sufficient_reason).

Section 2 - General relationships:

relation(same_sex_marriage, law).
relation(public_opinion, law).
relation(polls, law).
relation(legal_precedent, same_sex_marriage).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(x, zero).
pos(x, infinity).
pos(eight, zero).
pos(eight, infinity).

% Section 2 - General relationships
relation(x, zero).
relation(x, infinity).
relation(eight, zero).
relation(eight, infinity).
relation(eight, five).
relation(eight, three).
relation(five, three).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(education_standards, region).
pos(university_council_of_education, quality_of_university_education).
pos(harmonising_education_curricula, member_countries).
neg(africa, quality_of_education).
neg(africa, skilled_educated_labour).
neg(children, access_to_basic_education).
pos(enlarging_deepening_eac, education_standards).
pos(enlarging_deepening_eac, african_continent).
pos(policies, weak_academic_institutions).
pos(policies, drc).
pos(policies, south_sudan).
pos(policies, somalia).
neg(drc, education_systems).
neg(south_sudan, education_systems).
neg(somalia, education_systems).

Section 2 - General relationships:

relation(education_standards, region).
relation(university_council_of_education, quality_of_university_education).
relation(harmonising_education_curricula, member_countries).
relation(africa, quality_of_education).
relation(africa, skilled_educated_labour).
relation(children, access_to_basic_education).
relation(enlarging_deepening_eac, education_standards).
relation(enlarging_deepening_eac, african_continent).
relation(policies, weak_academic_institutions).
relation(policies, drc).
relation(policies, south_sudan).
relation(policies, somalia).
relation(drc, education_systems).
relation(south_sudan, education_systems).
relation(somalia, education_systems).

Section 3 - Encoding:

education_standards_are_improved :- pos(education_standards,Y).
education_standards_are_not_improved :- neg(education_standards,Y).
compare(education_standards,X,Y) :- neg(education_standards,X),neg(Y,X), education_standards != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = education_standards.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(gay_marriage, legal).

Section 2 - General relationships:

relation(gay_marriage, united_states).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(sdf, handle_disaster).
pos(sdf, protect_people).
pos(japan, sdf).
pos(us, help_japan).
neg(us, abandon_japan).

% Section 2 - General relationships
relation(sdf, disaster).
relation(japan, disaster).
relation(us, japan).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(call_of_duty, realistic_qualities).
pos(call_of_duty, realistic_weapons).
pos(halo, master_chief).
neg(halo, master_chief).
pos(call_of_duty, multi_player).
pos(call_of_duty, amazing_multi_player).
pos(call_of_duty, many_maps).
pos(call_of_duty, types_of_gameplay).
pos(halo, campaign).

Section 2 - General relationships:

relation(call_of_duty, halo).
relation(master_chief, halo).
relation(bungie, halo).
relation(multi_player, call_of_duty).
relation(multi_player, halo).
relation(campaign, halo).

Section 3 - Encoding:

call_of_duty_is_good_because :- pos(call_of_duty, Y).
call_of_duty_is_bad_because :- neg(call_of_duty, Y).
halo_is_good_because :- pos(halo, Y).
halo_is_bad_because :- neg(halo, Y).
compare(call_of_duty, halo, X) :- neg(call_of_duty, X), neg(halo, X), call_of_duty != halo.
compare(halo, call_of_duty, X) :- neg(halo, X), neg(halo, X), call_of_duty != halo.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(instigator, form_resolution).
pos(instigator, make_first_argument).
pos(instigator, launch_preemptive_strike).
pos(pro, last_word_advantage).

Section 2 - General relationships:

relation(instigator, contender).
relation(instigator, pro).
relation(pro, contender).
relation(pro, instigator).
relation(pro, data).
relation(pro, analysis).
relation(pro, interpretation).
relation(pro, causation).
relation(pro, winning_percentage).
relation(pro, cherry_picking).
relation(pro, equivocal).
relation(pro, goal_posts).
relation(pro, advantages).
relation(pro, rebuttal).
relation(pro, counter_arguments).
relation(pro, opinion).
relation(pro, debate).
relation(pro, readers).
relation(pro, voters).
relation(pro, judgement).
relation(pro, important_points).
relation(pro, squirrel).
relation(pro, coffee).
relation(pro, avatar).
relation(pro, statistical_analysis).
relation(pro, factors).
relation(pro, causation).
relation(pro, winning_percentage).
relation(pro, cherry_picking).
relation(pro, equivocal).
relation(pro, goal_posts).
relation(pro, advantages).
relation(pro, rebuttal).
relation(pro, counter_arguments).
relation(pro, opinion).
relation(pro, debate).
relation(pro, readers).
relation(pro, voters).
relation(pro, judgement).
relation(pro, important_points).
relation(pro, squirrel).
relation(pro, coffee).
relation(pro, avatar).

Section 3 - Encoding:

instigator_has_advantages :- pos(instigator,X).
pro_has_last_word_advantage :- pos(pro, last_word_advantage).
instigator_can_negate_last_word_advantage :- instigator_has_advantages, pro_has_last_word_advantage.
pro_statistical_analysis_is_equivocal :- pro_has_last_word_advantage, instigator_can_negate_last_word_advantage.
pro_has_not_proven_causation :- pro_statistical_analysis_is_equivocal.
pro_has_not_proven_overall_advantage :- pro_has_not_proven_causation.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(benefits, privileged_few).
pos(benefits, all).
pos(latin, studying).
pos(greek, studying).
neg(compulsory_latin, pupils).
neg(compulsory_greek, pupils).
pos(pupils, successful_subjects).
pos(pupils, career_ambitions).
neg(compulsory_subjects, bored_pupils).
neg(bored_pupils, learning).

Section 2 - General relationships:

relation(benefits, privileged_few).
relation(benefits, all).
relation(latin, studying).
relation(greek, studying).
relation(compulsory_latin, pupils).
relation(compulsory_greek, pupils).
relation(pupils, successful_subjects).
relation(pupils, career_ambitions).
relation(compulsory_subjects, bored_pupils).
relation(bored_pupils, learning).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(government, right_to_spy).
neg(government, want_to_spy).
pos(totalitarian_regime, want_to_spy).
pos(citizen, democratic_right_to_disagree).
neg(government, right_to_judge_political_preferences).
neg(elected_governments, able_to_control_domestic_intelligence_services).
pos(domestic_intelligence_services, own_views_of_subversive_behaviour).
pos(MI5, kept_files_upon_Labour_Party_MPs).
pos(Pakistan, fragile_democracy).
pos(Turkey, fragile_democracy).
pos(domestic_intelligence_services, involvement_in_military_coups).
pos(domestic_intelligence_services, supported_by_national_police).
pos(domestic_intelligence_service, powerful).
pos(domestic_intelligence_service, information_used_in_support_of_other_groups).
pos(intelligence, focused_outward).

Section 2 - General relationships:

relation(government, citizens).
relation(government, domestic_intelligence_services).
relation(elected_governments, domestic_intelligence_services).
relation(MI5, Labour_Party_MPs).
relation(Pakistan, domestic_intelligence_services).
relation(Turkey, domestic_intelligence_services).
relation(domestic_intelligence_service, military).
relation(domestic_intelligence_service, government).
relation(intelligence, domestic_intelligence_service).

Section 3 - Encoding:

right_to_spy(government, citizens) :- pos(government, right_to_spy).
right_to_spy(government, citizens) :- neg(government, right_to_spy).
want_to_spy(government, citizens) :- pos(government, want_to_spy).
want_to_spy(government, citizens) :- neg(government, want_to_spy).
democratic_right_to_disagree(citizen, government) :- pos(citizen, democratic_right_to_disagree).
democratic_right_to_disagree(citizen, government) :- neg(citizen, democratic_right_to_disagree).
right_to_judge_political_preferences(government, citizens) :- pos(government, right_to_judge_political_preferences).
right_to_judge_political_preferences(government, citizens) :- neg(government, right_to_judge_political_preferences).
able_to_control_domestic_intelligence_services(elected_governments) :- pos(elected_governments, able_to_control_domestic_intelligence_services).
able_to_control_domestic_intelligence_services(elected_governments) :- neg(elected_governments, able_to_control_domestic_intelligence_services).
own_views_of_subversive_behaviour(domestic_intelligence_services) :- pos(domestic_intelligence_services, own_views_of_subversive_behaviour).
own_views_of_subversive_behaviour(domestic_intelligence_services) :- neg(domestic_intelligence_services, own_views_of_subversive_behaviour).
kept_files_upon_Labour_Party_MPs(MI5) :- pos(MI5, kept_files_upon_Labour_Party_MPs).
kept_files_upon_Labour_Party_MPs(MI5) :- neg(MI5, kept_files_upon_Labour_Party_MPs).
fragile_democracy(Pakistan) :- pos(Pakistan, fragile_democracy).
fragile_democracy(Pakistan) :- neg(Pakistan, fragile_democracy).
fragile_democracy(Turkey) :- pos(Turkey, fragile_democracy).
fragile_democracy(Turkey) :- neg(Turkey, fragile_democracy).
involvement_in_military_coups(domestic_intelligence_services) :- pos(domestic_intelligence_services, involvement_in_military_coups).
involvement_in_military_coups(domestic_intelligence_services) :- neg(domestic_intelligence_services, involvement_in_military_coups).
supported_by_national_police(domestic_intelligence_services) :- pos(domestic_intelligence_services, supported_by_national_police).
supported_by_national_police(domestic_intelligence_services) :- neg(domestic_intelligence_services, supported_by_national_police).
powerful(domestic_intelligence_service) :- pos(domestic_intelligence_service, powerful).
powerful(domestic_intelligence_service) :- neg(domestic_intelligence_service, powerful).
information_used_in_support_of_other_groups(domestic_intelligence_service) :- pos(domestic_intelligence_service, information_used_in_support_of_other_groups).
information_used_in_support_of_other_groups(domestic_intelligence_service) :- neg(domestic_intelligence_service, information_used_in_support_of_other_groups).
focused_outward(intelligence) :- pos(intelligence, focused_outward).
focused_outward(intelligence) :- neg(intelligence, focused_outward).
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(council, representing_needs_of_constituents).
neg(commission, representing_needs_of_constituents).
pos(parliament, representing_needs_of_constituents).

Section 2 - General relationships:

relation(parliament, commission).
relation(parliament, council).
relation(commission, council).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(gallipoli_campaign, success).
neg(gallipoli_campaign, win).
neg(gallipoli_campaign, capture_istanbul).
neg(gallipoli_campaign, reach_russia).
neg(gallipoli_campaign, bring_supplies_russia).
neg(gallipoli_campaign, end_war_middle_east).
neg(gallipoli_campaign, defeat_russia).
neg(world_war_1, progress).
neg(german_navy, failure).
neg(german_navy, block_trade_routes).
neg(german_navy, block_trade_routes_russia_britain_france).
neg(winston_churchill, failure).
neg(winston_churchill, bad_plan).
neg(winston_churchill, wrong_plan).
neg(winston_churchill, incorrect_plan).
neg(winston_churchill, flawed_plan).
neg(winston_churchill, poor_plan).
neg(winston_churchill, weak_plan).
neg(winston_churchill, ineffective_plan).
neg(winston_churchill, inefficient_plan).
neg(winston_churchill, impractical_plan).
neg(winston_churchill, unrealistic_plan).
neg(winston_churchill, unworkable_plan).
neg(winston_churchill, infeasible_plan).
neg(winston_churchill, impossible_plan).
neg(winston_churchill, illogical_plan).
neg(winston_churchill, irrational_plan).
neg(winston_churchill, unreasonable_plan).
neg(winston_churchill, unsound_plan).
neg(winston_churchill, unwise_plan).
neg(winston_churchill, ill_advised_plan).
neg(winston_churchill, ill_conceived_plan).
neg(winston_churchill, poorly_conceived_plan).
neg(winston_churchill, badly_conceived_plan).
neg(winston_churchill, ill_thought_out_plan).
neg(winston_churchill, poorly_thought_out_plan).
neg(winston_churchill, badly_thought_out_plan).
neg(winston_churchill, short_sighted_plan).
neg(winston_churchill, narrow_minded_plan).
neg(winston_churchill, limited_plan).
neg(winston_churchill, myopic_plan).
neg(winston_churchill, blinkered_plan).
neg(winston_churchill, uninspired_plan).
neg(winston_churchill, unimaginative_plan).
neg(winston_churchill, unoriginal_plan).
neg(winston_churchill, derivative_plan).
neg(winston_churchill, clichéd_plan).
neg(winston_churchill, hackneyed_plan).
neg(winston_churchill, trite_plan).
neg(winston_churchill, banal_plan).
neg(winston_churchill, commonplace_plan).
neg(winston_churchill, conventional_plan).
neg(winston_churchill, traditional_plan).
neg(winston_churchill, orthodox_plan).
neg(winston_churchill, conformist_plan).
neg(winston_churchill, conservative_plan).
neg(winston_churchill, reactionary_plan).
neg(winston_churchill, regressive_plan).
neg(winston_churchill, backward_plan).
neg(winston_churchill, outdated_plan).
neg(winston_churchill, obsolete_plan).
neg(winston_churchill, anachronistic_plan).
neg(winston_churchill, antiquated_plan).
neg(winston_churchill, old_fashioned_plan).
neg(winston_churchill, outmoded_plan).
neg(winston_churchill, passé_plan).
neg(winston_churchill, dated_plan).
neg(winston_churchill, behind_the_times_plan).
neg(winston_churchill, unprogressive_plan).
neg(winston_churchill, stagnant_plan).
neg(winston_churchill, static_plan).
neg(winston_churchill, unchanging_plan).
neg(winston_churchill, inflexible_plan).
neg(winston_churchill, rigid_plan).
neg(winston_churchill, unyielding_plan).
neg(winston_churchill, immovable_plan).
neg(winston_churchill, stubborn_plan).
neg(winston_churchill, obstinate_plan).
neg(winston_churchill, pig_headed_plan).
neg(winston_churchill, mulish_plan).
neg(winston_churchill, headstrong_plan).
neg(winston_churchill, wilful_plan).
neg(winston_churchill, determined_plan).
neg(winston_churchill, resolute_plan).
neg(winston_churchill, unwavering_plan).
neg(winston_churchill, unswerving_plan).
neg(winston_churchill, steadfast_plan).
neg(winston_churchill, constant_plan).
neg(winston_churchill, consistent_plan).
neg(winston_churchill, reliable_plan).
neg(winston_churchill, dependable_plan).
neg(winston_churchill, trustworthy_plan).
neg(winston_churchill, credible_plan).
neg(winston_churchill, believable_plan).
neg(winston_churchill, plausible_plan).
neg(winston_churchill, feasible_plan).
neg(winston_churchill, possible_plan).
neg(winston_churchill, practicable_plan).
neg(winston_churchill, workable_plan).
neg(winston_churchill, achievable_plan).
neg(winston_churchill, attainable_plan).
neg(winston_churchill, realistic_plan).
neg(winston_churchill, sensible_plan).
neg(winston_churchill, sound_plan).
neg(winston_churchill, wise_plan).
neg(winston_churchill, well_advised_plan).
neg(winston_churchill, well_conceived_plan).
neg(winston_churchill, well_thought_out_plan).
neg(winston_churchill, far_sighted_plan).
neg(winston_churchill, broad_minded_plan).
neg(winston_churchill, comprehensive_plan).
neg(winston_churchill, wide_ranging_plan).
neg(winston_churchill, all_encompassing_plan).
neg(winston_churchill, sweeping_plan).
neg(winston_churchill, ambitious_plan).
neg(winston_churchill, bold_plan).
neg(winston_churchill, daring_plan).
neg(winston_churchill, audacious_plan).
neg(winston_churchill, adventurous_plan).
neg(winston_churchill, risky_plan).
neg(winston_churchill, dangerous_plan).
neg(winston_churchill, hazardous_plan).
neg(winston_churchill, perilous_plan).
neg(winston_churchill, life_threatening_plan).
neg(winston_churchill, suicidal_plan).
neg(winston_churchill, foolhardy_plan).
neg(winston_churchill, reckless_plan).
neg(winston_churchill, rash_plan).
neg(winston_churchill, impulsive_plan).
neg(winston_churchill, hasty_plan).
neg(winston_churchill, ill_considered_plan).
neg(winston_churchill, poorly_considered_plan).
neg(winston_churchill, badly_considered_plan).
neg(winston_churchill, ill_advised_plan).
neg(winston_churchill, poorly_advised_plan).
neg(winston_churchill, badly_advised_plan).
neg(winston_churchill, unwise_plan).
neg(winston_churchill, ill_conceived_plan).
neg(winston_churchill, poorly_conceived_plan).
neg(winston_churchill, badly_conceived_plan).
neg(winston_churchill, ill_thought_out_plan).
neg(winston_churchill, poorly_thought_out_plan).
neg(winston_churchill, badly_thought_out_plan).
neg(winston_churchill, short_sighted_plan).
neg(winston_churchill, narrow_minded_plan).
neg(winston_churchill, limited_plan).
neg(winston_churchill, myopic_plan).
neg(winston_churchill, blinkered_plan).
neg(winston_churchill, uninspired_plan).
neg(winston_churchill, unimaginative_plan).
neg(winston_churchill, unoriginal_plan).
neg(winston_churchill, derivative_plan).
neg(winston_churchill, clichéd_plan).
neg(winston_churchill, hackneyed_plan).
neg(winston_churchill, trite_plan).
neg(winston_churchill, banal_plan).
neg(winston_churchill, commonplace_plan).
neg(winston_churchill, conventional_plan).
neg(winston_churchill, traditional_plan).
neg(winston_churchill, orthodox_plan).
neg(winston_churchill, conformist_plan).
neg(winston_churchill, conservative_plan).
neg(winston_churchill, reactionary_plan).
neg(winston_churchill, regressive_plan).
neg(winston_churchill, backward_plan).
neg(winston_churchill, outdated_plan).
neg(winston_churchill, obsolete_plan).
neg(winston_churchill, anachronistic_plan).
neg(winston_churchill, antiquated_plan).
neg(winston_churchill, old_fashioned_plan).
neg(winston_churchill, outmoded_plan).
neg(winston_churchill, passé_plan).
neg(winston_churchill, dated_plan).
neg(winston_churchill, behind_the_times_plan).
neg(winston_churchill, unprogressive_plan).
neg(winston_churchill, stagnant_plan).
neg(winston_churchill, static_plan).
neg(winston_churchill, unchanging_plan).
neg(winston_churchill, inflexible_plan).
neg(winston_churchill, rigid_plan).
neg(winston_churchill, unyielding_plan).
neg(winston_churchill, immovable_plan).
neg(winston_churchill, stubborn_plan).
neg(winston_churchill, obstinate_plan).
neg(winston_churchill, pig_headed_plan).
neg(winston_churchill, mulish_plan).
neg(winston_churchill, headstrong_plan).
neg(winston_churchill, wilful_plan).
neg(winston_churchill, determined_plan).
neg(winston_churchill, resolute_plan).
neg(winston_churchill, unwavering_plan).
neg(winston_churchill, unswerving_plan).
neg(winston_churchill, steadfast_plan).
neg(winston_churchill, constant_plan).
neg(winston_churchill, consistent_plan).
neg(winston_churchill, reliable_plan).
neg(winston_churchill, dependable_plan).
neg(winston_churchill, trustworthy_plan).
neg(winston_churchill, credible_plan).
neg(winston_churchill, believable_plan).
neg(winston_churchill, plausible_plan).
neg(winston_churchill, feasible_plan).
neg(winston_churchill, possible_plan).
neg(winston_churchill, practicable_plan).
neg(winston_churchill, workable_plan).
neg(winston_churchill, achievable_plan).
neg(winston_churchill, attainable_plan).
neg(winston_churchill, realistic_plan).
neg(winston_churchill, sensible_plan).
neg(winston_churchill, sound_plan).
neg(winston_churchill, wise_plan).
neg(winston_churchill, well_advised_plan).
neg(winston_churchill, well_conceived_plan).
neg(winston_churchill, well_thought_out_plan).
neg(winston_churchill, far_sighted_plan).
neg(winston_churchill, broad_minded_plan).
neg(winston_churchill, comprehensive_plan).
neg(winston_churchill, wide_ranging_plan).
neg(winston_churchill, all_encompassing_plan).
neg(winston_churchill, sweeping_plan).
neg(winston_churchill, ambitious_plan).
neg(winston_churchill, bold_plan).
neg(winston_churchill, daring_plan).
neg(winston_churchill, audacious_plan).
neg(winston_churchill, adventurous_plan).
neg(winston_churchill, risky_plan).
neg(winston_churchill, dangerous_plan).
neg(winston_churchill, hazardous_plan).
neg(winston_churchill, perilous_plan).
neg(winston_churchill, life_threatening_plan).
neg(winston_churchill, suicidal_plan).
neg(winston_churchill, foolhardy_plan).
neg(winston_churchill, reckless_plan).
neg(winston_churchill, rash_plan).
neg(winston_churchill, impulsive_plan).
neg(winston_churchill, hasty_plan).
neg(winston_churchill, ill_considered_plan).
neg(winston_churchill, poorly_considered_plan).
neg(winston_churchill, badly_considered_plan).
neg(winston_churchill, ill_advised_plan).
neg(winston_churchill, poorly_advised_plan).
neg(winston_churchill, badly_advised_plan).
neg(winston_churchill, unwise_plan).
neg(winston_churchill, ill_conceived_plan).
neg(winston_churchill, poorly_conceived_plan).
neg(winston_churchill, badly_conceived_plan).
neg(winston_churchill, ill_thought_out_plan).
neg(winston_churchill, poorly_thought_out_plan).
neg(winston_churchill, badly_thought_out_plan).
neg(winston_churchill, short_sighted_plan).
neg(winston_churchill, narrow_minded_plan).
neg(winston_churchill, limited_plan).
neg(winston_churchill, myopic_plan).
neg(winston_churchill, blinkered_plan).
neg(winston_churchill, uninspired_plan).
neg(winston_churchill, unimaginative_plan).
neg(winston_churchill, unoriginal_plan).
neg(winston_churchill, derivative_plan).
neg(winston_churchill, clichéd_plan).
neg(winston_churchill, hackneyed_plan).
neg(winston_churchill, trite_plan).
neg(winston_churchill, banal_plan).
neg(winston_churchill, commonplace_plan).
neg(winston_churchill, conventional_plan).
neg(winston_churchill, traditional_plan).
neg(winston_churchill, orthodox_plan).
neg(winston_churchill, conformist_plan).
neg(winston_churchill, conservative_plan).
neg(winston_churchill, reactionary_plan).
neg(winston_churchill, regressive_plan).
neg(winston_churchill, backward_plan).
neg(winston_churchill, outdated_plan).
neg(winston_churchill, obsolete_plan).
neg(winston_churchill, anachronistic_plan).
neg(winston_churchill, antiquated_plan).
neg(winston_churchill, old_fashioned_plan).
neg(winston_churchill, outmoded_plan).
neg(winston_churchill, passé_plan).
neg(winston_churchill, dated_plan).
neg(winston_churchill, behind_the_times_plan).
neg(winston_churchill, unprogressive_plan).
neg(winston_churchill, stagnant_plan).
neg(winston_churchill, static_plan).
neg(winston_churchill, unchanging_plan).
neg(winston_churchill, inflexible_plan).
neg(winston_churchill, rigid_plan).
neg(winston_churchill, unyielding_plan).
neg(winston_churchill, immovable_plan).
neg(winston_churchill, stubborn_plan).
neg(winston_churchill, obstinate_plan).
neg(winston_churchill, pig_headed_plan).
neg(winston_churchill, mulish_plan).
neg(winston_churchill, headstrong_plan).
neg(winston_churchill, wilful_plan).
neg(winston_churchill, determined_plan).
neg(winston_churchill, resolute_plan).
neg(winston_churchill, unwavering_plan).
neg(winston_churchill, unswerving_plan).
neg(winston_churchill, steadfast_plan).
neg(winston_churchill, constant_plan).
neg(winston_churchill, consistent_plan).
neg(winston_churchill, reliable_plan).
neg(winston_churchill, dependable_plan).
neg(winston_churchill, trustworthy_plan).
neg(winston_churchill, credible_plan).
neg(winston_churchill, believable_plan).
neg(winston_churchill, plausible_plan).
neg(winston_churchill, feasible_plan).
neg(winston_churchill, possible_plan).
neg(winston_churchill, practicable_plan).
neg(winston_churchill, workable_plan).
neg(winston_churchill, achievable_plan).
neg(winston_churchill, attainable_plan).
neg(winston_churchill, realistic_plan).
neg(winston_churchill, sensible_plan).
neg(winston_churchill, sound_plan).
neg(winston_churchill, wise_plan).
neg(winston_churchill, well_advised_plan).
neg(winston_churchill, well_conceived_plan).
neg(winston_churchill, well_thought_out_plan).
neg(winston_churchill, far_sighted_plan).
neg(winston_churchill, broad_minded_plan).
neg(winston_churchill, comprehensive_plan).
neg(winston_churchill, wide_ranging_plan).
neg(winston_churchill, all_encompassing_plan).
neg(winston_churchill, sweeping_plan).
neg(winston_churchill, ambitious_plan).
neg(winston_churchill, bold_plan).
neg(winston_churchill, daring_plan).
neg(winston_churchill, audacious_plan).
neg(winston_churchill, adventurous_plan).
neg(winston_churchill, risky_plan).
neg(winston_churchill, dangerous_plan).
neg(winston_churchill, hazardous_plan).
neg(winston_churchill, perilous_plan).
neg(winston_churchill, life_threatening_plan).
neg(winston_churchill, suicidal_plan).
neg(winston_churchill, foolhardy_plan).
neg(winston_churchill, reckless_plan).
neg(winston_churchill, rash_plan).
neg(winston_churchill, impulsive_plan).
neg(winston_churchill, hasty_plan).
neg(winston_churchill, ill_considered_plan).
neg(winston_churchill, poorly_considered_plan).
neg(winston_churchill, badly_considered_plan).
neg(winston_churchill, ill_advised_plan).
neg(winston_churchill, poorly_advised_plan).
neg(winston_churchill, badly_advised_plan).
neg(winston_churchill, unwise_plan).
neg(winston_churchill, ill_conceived_plan).
neg(winston_churchill, poorly_conceived_plan).
neg(winston_churchill, badly_conceived_plan).
neg(winston_churchill, ill_thought_out_plan).
neg(winston_churchill, poorly_thought_out_plan).
neg(winston_churchill, badly_thought_out_plan).
neg(winston_churchill, short_sighted_plan).
neg(winston_churchill, narrow_minded_plan).
neg(winston_churchill, limited_plan).
neg(winston_churchill, myopic_plan).
neg(winston_churchill, blinkered_plan).
neg(winston_churchill, uninspired_plan).
neg(winston_churchill, unimaginative_plan).
neg(winston_churchill, unoriginal_plan).
neg(winston_churchill, derivative_plan).
neg(winston_churchill, clichéd_plan).
neg(winston_churchill, hackneyed_plan).
neg(winston_churchill, trite_plan).
neg(winston_churchill, banal_plan).
neg(winston_churchill, commonplace_plan).
neg(winston_churchill, conventional_plan).
neg(winston_churchill, traditional_plan).
neg(winston_churchill, orthodox_plan).
neg(winston_churchill, conformist_plan).
neg(winston_churchill, conservative_plan).
neg(winston_churchill, reactionary_plan).
neg(winston_churchill, regressive_plan).
neg(winston_churchill, backward_plan).
neg(winston_churchill, outdated_plan).
neg(winston_churchill, obsolete_plan).
neg(winston_churchill, anachronistic_plan).
neg(winston_churchill, antiquated_plan).
neg(winston_churchill, old_fashioned_plan).
neg(winston_churchill, outmoded_plan).
neg(winston_churchill, passé_plan).
neg(winston_churchill, dated_plan).
neg(winston_churchill, behind_the_times_plan).
neg(winston_churchill, unprogressive_plan).
neg(winston_churchill, stagnant_plan).
neg(winston_churchill, static_plan).
neg(winston_churchill, unchanging_plan).
neg(winston_churchill, inflexible_plan).
neg(winston_churchill, rigid_plan).
neg(winston_churchill, unyielding_plan).
neg(winston_churchill, immovable_plan).
neg(winston_churchill, stubborn_plan).
neg(winston_churchill, obstinate_plan).
neg(winston_churchill, pig_headed_plan).
neg(winston_churchill, mulish_plan).
neg(winston_churchill, headstrong_plan).
neg(winston_churchill, wilful_plan).
neg(winston_churchill, determined_plan).
neg(winston_churchill, resolute_plan).
neg(winston_churchill, unwavering_plan).
neg(winston_churchill, unswerving_plan).
neg(winston_churchill, steadfast_plan).
neg(winston_churchill, constant_plan).
neg(winston_churchill, consistent_plan).
neg(winston_churchill, reliable_plan).
neg(winston_churchill, dependable_plan).
neg(winston_churchill, trustworthy_plan).
neg(winston_churchill, credible_plan).
neg(winston_churchill, believable_plan).
neg(winston_churchill, plausible_plan).
neg(winston_churchill, feasible_plan).
neg(winston_churchill, possible_plan).
neg(winston_churchill, practicable_plan).
neg(winston_churchill, workable_plan).
neg(winston_churchill, achievable_plan).
neg(winston_churchill, attainable_plan).
neg(winston_churchill, realistic_plan).
neg(winston_churchill, sensible_plan).
neg(winston_churchill, sound_plan).
neg(winston_churchill, wise_plan).
neg(winston_churchill, well_advised_plan).
neg(winston_churchill, well_conceived_plan).
neg(winston_churchill, well_thought_out_plan).
neg(winston_churchill, far_sighted_plan).
neg(winston_churchill, broad_minded_plan).
neg(winston_churchill, comprehensive_plan).
neg(winston_churchill, wide_ranging_plan).
neg(winston_churchill, all_encompassing_plan).
neg(winston_churchill, sweeping_plan).
neg(winston_churchill, ambitious_plan).
neg(winston_churchill, bold_plan).
neg(winston_churchill, daring_plan).
neg(winston_churchill, audacious_plan).
neg(winston_churchill, adventurous_plan).
neg(winston_churchill, risky_plan).
neg(winston_churchill, dangerous_plan).
neg(winston_churchill, hazardous_plan).
neg(winston_churchill, perilous_plan).
neg(winston_churchill, life_threatening_plan).
neg(winston_churchill, suicidal_plan).
neg(winston_churchill, foolhardy_plan).
neg(winston_churchill, reckless_plan).
neg(winston_churchill, rash_plan).
neg(winston_churchill, impulsive_plan).
neg(winston_churchill, hasty_plan).
neg(winston_churchill, ill_considered_plan).
neg(winston_churchill, poorly_considered_plan).
neg(winston_churchill, badly_considered_plan).
neg(winston_churchill, ill_advised_plan).
neg(winston_churchill, poorly_advised_plan).
neg(winston_churchill, badly_advised_plan).
neg(winston_churchill, unwise_plan).
neg(winston_churchill, ill_conceived_plan).
neg(winston_churchill, poorly_conceived_plan).
neg(winston_churchill, badly_conceived_plan).
neg(winston_churchill, ill_thought_out_plan).
neg(winston_churchill, poorly_thought_out_plan).
neg(winston_churchill, badly_thought_out_plan).
neg(winston_churchill, short_sighted_plan).
neg(winston_churchill, narrow_minded_plan).
neg(winston_churchill, limited_plan).
neg(winston_churchill, myopic_plan).
neg(winston_churchill, blinkered_plan).
neg(winston_churchill, uninspired_plan).
neg(winston_churchill, unimaginative_plan).
neg(winston_churchill, unoriginal_plan).
neg(winston_churchill, derivative_plan).
neg(winston_churchill, clichéd_plan).
neg(winston_churchill, hackneyed_plan).
neg(winston_churchill, trite_plan).
neg(winston_churchill, banal_plan).
neg(winston_churchill, commonplace_plan).
neg(winston_churchill, conventional_plan).
neg(winston_churchill, traditional_plan).
neg(winston_churchill, orthodox_plan).
neg(winston_churchill, conformist_plan).
neg(winston_churchill, conservative_plan).
neg(winston_churchill, reactionary_plan).
neg(winston_churchill, regressive_plan).
neg(winston_churchill, backward_plan).
neg(winston_churchill, outdated_plan).
neg(winston_churchill, obsolete_plan).
neg(winston_churchill, anachronistic_plan).
neg(winston_churchill, antiquated_plan).
neg(winston_churchill, old_fashioned_plan).
neg(winston_churchill, outmoded_plan).
neg(winston_churchill, passé_plan).
neg(winston_churchill, dated_plan).
neg(winston_churchill, behind_the_times_plan).
neg(winston_churchill, unprogressive_plan).
neg(winston_churchill, stagnant_plan).
neg(winston_churchill, static_plan).
neg(winston_churchill, unchanging_plan).
neg(winston_churchill, inflexible_plan).
neg(winston_churchill, rigid_plan).
neg(winston_churchill, unyielding_plan).
neg(winston_churchill, immovable_plan).
neg(winston_churchill, stubborn_plan).
neg(winston_churchill, obstinate_plan).
neg(winston_churchill, pig_headed_plan).
neg(winston_churchill, mulish_plan).
neg(winston_churchill, headstrong_plan).
neg(winston_churchill, wilful_plan).
neg(winston_churchill, determined_plan).
neg(winston_churchill, resolute_plan).
neg(winston_churchill, unwavering_plan).
neg(winston_churchill, unswerving_plan).
neg(winston_churchill, steadfast_plan).
neg(winston_churchill, constant_plan).
neg(winston_churchill, consistent_plan).
neg(winston_churchill, reliable_plan).
neg(winston_churchill, dependable_plan).
neg(winston_churchill, trustworthy_plan).
neg(winston_churchill, credible_plan).
neg(winston_churchill, believable_plan).
neg(winston_churchill, plausible_plan).
neg(winston_churchill, feasible_plan).
neg(winston_churchill, possible_plan).
neg(winston_churchill, practicable_plan).
neg(winston_churchill, workable_plan).
neg(winston_churchill, achievable_plan).
neg(winston_churchill, attainable_plan).
neg(winston_churchill, realistic_plan).
neg(winston_churchill, sensible_plan).
neg(winston_churchill, sound_plan).
neg(winston_churchill, wise_plan).
neg(winston_churchill, well_advised_plan).
neg(winston_churchill, well_conceived_plan).
neg(winston_churchill, well_thought_out_plan).
neg(winston_churchill, far_sighted_plan).
neg(winston_churchill, broad_minded_plan).
neg(winston_churchill, comprehensive_plan).
neg(winston_churchill, wide_ranging_plan).
neg(winston_churchill, all_encompassing_plan).
neg(winston_churchill, sweeping_plan).
neg(winston_churchill, ambitious_plan).
neg(winston_churchill, bold_plan).
neg(winston_churchill, daring_plan).
neg(winston_churchill, audacious_plan).
neg(winston_churchill, adventurous_plan).
neg(winston_churchill, risky_plan).
neg(winston_churchill, dangerous_plan).
neg(winston_churchill, hazardous_plan).
neg(winston_churchill, perilous_plan).
neg(winston_churchill, life_threatening_plan).
neg(winston_churchill, suicidal_plan).
neg(winston_churchill, foolhardy_plan).
neg(winston_churchill, reckless_plan).
neg(winston_churchill, rash_plan).
neg(winston_churchill, impulsive_plan).
neg(winston_churchill, hasty_plan).
neg(winston_churchill, ill_considered_plan).
neg(winston_churchill, poorly_considered_plan).
neg(winston_churchill, badly_considered_plan).
neg(winston_churchill, ill_advised_plan).
neg(winston_churchill, poorly_advised_plan).
neg(winston_churchill, badly_advised_plan).
neg(winston_churchill, unwise_plan).
neg(winston_churchill, ill_conceived_plan).
neg(winston_churchill, poorly_conceived_plan).
neg(winston_churchill, badly_conceived_plan).
neg(winston_churchill, ill_thought_out_plan).
neg(winston_churchill, poorly_thought_out_plan).
neg(winston_churchill, badly_thought_out_plan).
neg(winston_churchill, short_sighted_plan).
neg(winston_churchill, narrow_minded_plan).
neg(winston_churchill, limited_plan).
neg(winston_churchill, myopic_plan).
neg(winston_churchill, blinkered_plan).
neg(winston_churchill, uninspired_plan).
neg(winston_churchill, unimaginative_plan).
neg(winston_churchill, unoriginal_plan).
neg(winston_churchill, derivative_plan).
neg(winston_churchill, clichéd_plan).
neg(winston_churchill, hackneyed_plan).
neg(winston_churchill, trite_plan).
neg(winston_churchill, banal_plan).
neg(winston_churchill, commonplace_plan).
neg(winston_churchill, conventional_plan).
neg(winston_churchill, traditional_plan).
neg(winston_churchill, orthodox_plan).
neg(winston_churchill, conformist_plan).
neg(winston_churchill, conservative_plan).
neg(winston_churchill, reactionary_plan).
neg(winston_churchill, regressive_plan).
neg(winston_churchill, backward_plan).
neg(winston_churchill, outdated_plan).
neg(winston_churchill, obsolete_plan).
neg(winston_churchill, anachronistic_plan).
neg(winston_churchill, antiquated_plan).
neg(winston_churchill, old_fashioned_plan).
neg(winston_churchill, outmoded_plan).
neg(winston_churchill, passé_plan).
neg(winston_churchill, dated_plan).
neg(winston_churchill, behind_the_times_plan).
neg(winston_churchill, unprogressive_plan).
neg(winston_churchill, stagnant_plan).
neg(winston_churchill, static_plan).
neg(winston_churchill, unchanging_plan).
neg(winston_churchill, inflexible_plan).
neg(winston_churchill, rigid_plan).
neg(winston_churchill, unyielding_plan).
neg(winston_churchill, immovable_plan).
neg(winston_churchill, stubborn_plan).
neg(winston_churchill, obstinate_plan).
neg(winston_churchill, pig_headed_plan).
neg(winston_churchill, mulish_plan).
neg(winston_churchill, headstrong_plan).
neg(winston_churchill, wilful_plan).
neg(winston_churchill, determined_plan).
neg(winston_churchill, resolute_plan).
neg(winston_churchill, unwavering_plan).
neg(winston_churchill, unswerving_plan).
neg(winston_churchill, steadfast_plan).
neg(winston_churchill, constant_plan).
neg(winston_churchill, consistent_plan).
neg(winston_churchill, reliable_plan).
neg(winston_churchill, dependable_plan).
neg(winston_churchill, trustworthy_plan).
neg(winston_churchill, credible_plan).
neg(winston_churchill, believable_plan).
neg(winston_churchill, plausible_plan).
neg(winston_churchill, feasible_plan).
neg(winston_churchill, possible_plan).
neg(winston_churchill, practicable_plan).
neg(winston_churchill, workable_plan).
neg(winston_churchill, achievable_plan).
neg(winston_churchill, attainable_plan).
neg(winston_churchill, realistic
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(fence, pay_back).
neg(fence, money).
neg(fence, maintenance).
neg(fence, immigrants).
neg(fence, consumers).
neg(fence, climb).
neg(fence, shock_fence).
neg(fence, drug_lord).
neg(fence, private_jet).
neg(fence, drugs).
neg(fence, tax).
neg(fence, punishment).
neg(fence, mexico).
neg(mexico, take_care).
neg(mexico, help).
neg(mexico, patrol_troops).
neg(mexico, illegal_immigration).
neg(mexico, consequences).
neg(mexico, alternatives).
neg(mexico, expensive).
neg(mexico, insulting).
neg(mexico, consumer_killing).
neg(mexico, offensive).
neg(mexico, effective).

pos(fence, investment).
pos(fence, border).
pos(fence, illegal_immigrants).
pos(fence, drug_smuggling).
pos(fence, gdp).
pos(fence, economy).
pos(fence, country).
pos(fence, alternatives).
pos(fence, patrol_troops).
pos(fence, illegal_immigration).
pos(fence, consequences).
pos(fence, money).
pos(fence, take_care).
pos(fence, help).
pos(fence, expensive).
pos(fence, insulting).
pos(fence, consumer_killing).
pos(fence, offensive).
pos(fence, effective).
pos(fence, mexico).

Section 2 - General relationships:

relation(fence, money).
relation(fence, immigrants).
relation(fence, drugs).
relation(fence, mexico).
relation(fence, alternatives).
relation(mexico, help).
relation(mexico, patrol_troops).
relation(mexico, illegal_immigration).
relation(mexico, consequences).
relation(mexico, money).
relation(mexico, take_care).
relation(mexico, alternatives).
relation(mexico, expensive).
relation(mexico, insulting).
relation(mexico, consumer_killing).
relation(mexico, offensive).
relation(mexico, effective).

Section 3 - Encoding:

fence_is_good_because :- pos(fence, Y).
fence_is_bad_because :- neg(fence, Y).
compare(fence,X,Y) :- neg(fence,X),neg(Y,X), fence != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = fence.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, existence).
neg(evil, god_omnipotence).
neg(god_omnipotence, god_benevolence).
pos(evil, human_experience).
pos(darkness, light_understanding).
pos(catholics, evil_origin).
pos(christians, evil_origin).
pos(adam_and_eve, disobedience).
pos(humans, gods_laws_defiance).
pos(humans, free_will).
pos(suffering, human_improvement).
pos(loss, gratitude).
pos(slavery, compassion).

Section 2 - General relationships:

relation(evil, god).
relation(god, evil).
relation(god, humans).
relation(humans, god).
relation(evil, suffering).
relation(suffering, evil).
relation(suffering, humans).
relation(humans, suffering).
relation(loss, humans).
relation(humans, loss).
relation(gratitude, loss).
relation(loss, gratitude).
relation(slavery, humans).
relation(humans, slavery).
relation(compassion, slavery).
relation(slavery, compassion).

Section 3 - Encoding:

god_exists :- pos(god, existence).
god_not_exists :- neg(god, existence).
evil_is_good :- pos(evil,Y).
evil_is_bad :- neg(evil,Y).
human_experience_is_good :- pos(human_experience,Y).
human_experience_is_bad :- neg(human_experience,Y).
darkness_is_good :- pos(darkness,Y).
darkness_is_bad :- neg(darkness,Y).
catholics_are_good :- pos(catholics,Y).
catholics_are_bad :- neg(catholics,Y).
christians_are_good :- pos(christians,Y).
christians_are_bad :- neg(christians,Y).
adam_and_eve_are_good :- pos(adam_and_eve,Y).
adam_and_eve_are_bad :- neg(adam_and_eve,Y).
humans_are_good :- pos(humans,Y).
humans_are_bad :- neg(humans,Y).
suffering_is_good :- pos(suffering,Y).
suffering_is_bad :- neg(suffering,Y).
loss_is_good :- pos(loss,Y).
loss_is_bad :- neg(loss,Y).
gratitude_is_good :- pos(gratitude,Y).
gratitude_is_bad :- neg(gratitude,Y).
slavery_is_good :- pos(slavery,Y).
slavery_is_bad :- neg(slavery,Y).
compassion_is_good :- pos(compassion,Y).
compassion_is_bad :- neg(compassion,Y).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(space_exploration, saving_human_life).
pos(space_exploration, saving_species).
pos(space_exploration, exploring_world).
pos(space_exploration, natural_threat).
pos(space_exploration, important_to_society).
pos(printing_money, less_value).
pos(government_funding, space_exploration).

neg(sun, black_hole).
neg(sun, nebula).
neg(black_holes, safe).
neg(black_holes, weak).
neg(sources, reliable).
neg(sources, up_to_date).
neg(websites, credible).
neg(earth, habitable).
neg(human_kind, extinct).
neg(money, valuable).

Section 2 - General relationships:

relation(sun, black_hole).
relation(sun, nebula).
relation(black_holes, safe).
relation(black_holes, weak).
relation(sources, reliable).
relation(sources, up_to_date).
relation(websites, credible).
relation(earth, habitable).
relation(human_kind, extinct).
relation(money, valuable).
relation(space_exploration, saving_human_life).
relation(space_exploration, saving_species).
relation(space_exploration, exploring_world).
relation(space_exploration, natural_threat).
relation(space_exploration, important_to_society).
relation(printing_money, less_value).
relation(government_funding, space_exploration).

Section 3 - Encoding:

space_exploration_is_good_because :- pos(space_exploration, Y).
space_exploration_is_bad_because :- neg(space_exploration, Y).
compare(space_exploration,X,Y) :- neg(space_exploration,X),neg(Y,X), space_exploration != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = space_exploration.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(gay_parents, talent).
pos(gay_parents, motivated).
pos(gay_parents, determined).
neg(straight_parents, different_perspectives).
neg(straight_parents, butting_heads).
neg(straight_parents, divorce).
neg(divorce, child).

Section 2 - General relationships:

relation(gay_parents, straight_parents).
relation(gay_parents, child).
relation(straight_parents, child).
relation(different_perspectives, butting_heads).
relation(butting_heads, divorce).

Section 3 - Encoding:

gay_parents_are_good_because :- pos(gay_parents, Y).
gay_parents_are_bad_because :- neg(gay_parents, Y).
straight_parents_are_good_because :- pos(straight_parents, Y).
straight_parents_are_bad_because :- neg(straight_parents, Y).
compare(gay_parents, straight_parents, Y) :- neg(gay_parents, Y), neg(straight_parents, Y), gay_parents != straight_parents.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = gay_parents.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(palaeontology, most_controversial_scientific_field).
pos(theory_of_evolution, biggest_controversy_in_science).
pos(theory_of_evolution, biological_theory).
pos(theory_of_evolution, biological_predictions).
neg(palaeontology, theory_of_evolution).
pos(fossils, evidence_for_evolution).
pos(biology, evidence_for_evolution).
pos(astronomy, evidence_for_evolution).

Section 2 - General relationships:

relation(palaeontology, theory_of_evolution).
relation(theory_of_evolution, biology).
relation(theory_of_evolution, astronomy).
relation(fossils, extinct_animals).

Section 3 - Encoding:

palaeontology_is_wrong :- neg(palaeontology, most_controversial_scientific_field).
palaeontology_doesnt_contribute_the_most :- pos(biology, evidence_for_evolution).
palaeontology_doesnt_contribute_the_most :- pos(astronomy, evidence_for_evolution).
palaeontology_doesnt_contribute_the_most :- neg(palaeontology, most_controversial_scientific_field).

compare(palaeontology, biology, astronomy) :- neg(palaeontology, most_controversial_scientific_field), neg(biology, most_controversial_scientific_field), neg(astronomy, most_controversial_scientific_field).
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(homeschooling, time).
neg(homeschooling, money).
neg(homeschooling, education).
neg(homeschooling, social).
pos(public_schooling, time).
pos(public_schooling, money).
pos(public_schooling, education).
pos(public_schooling, social).

% Section 2 - General relationships
relation(homeschooling, public_schooling).
relation(time, money).
relation(education, social).
relation(public_schooling, standardized_tests).
relation(public_schooling, workplace).

% Section 3 - Encoding
homeschooling_is_detrimental :- neg(homeschooling, X).
public_schooling_is_better :- pos(public_schooling, X).
compare(homeschooling, public_schooling, X) :- neg(homeschooling, X), neg(public_schooling, X).
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(biblical_flood_account, historical).
pos(polystyrene_fossils, evidence).
pos(polystrate_fossils, evidence).
pos(rapid_petrification_of_wood, evidence).
pos(flood_stories, evidence).
pos(noah, mankind_savior).
pos(boat, mankind_savior).

neg(escape_hatch, scare).
neg(fancy_word_play, scare).

Section 2 - General relationships:

relation(biblical_flood_account, historical).
relation(polystyrene_fossils, evidence).
relation(polystrate_fossils, evidence).
relation(rapid_petrification_of_wood, evidence).
relation(flood_stories, evidence).
relation(noah, mankind_savior).
relation(boat, mankind_savior).
relation(escape_hatch, scare).
relation(fancy_word_play, scare).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(maths, science).
pos(maths, physics).
pos(maths, psychology).
pos(maths, statistics).
pos(maths, reading).
pos(maths, history).
pos(maths, politics).
pos(science, maths).
pos(science, industry).
pos(science, research).
pos(science, government).
pos(science, economy).
pos(science, china).
pos(science, technology).
pos(science, development).

Section 2 - General relationships:

relation(maths, science).
relation(maths, physics).
relation(maths, psychology).
relation(maths, statistics).
relation(maths, reading).
relation(maths, history).
relation(maths, politics).
relation(science, maths).
relation(science, industry).
relation(science, research).
relation(science, government).
relation(science, economy).
relation(science, china).
relation(science, technology).
relation(science, development).

Section 3 - Encoding:

maths_is_important_because :- pos(maths,Y).
maths_is_not_important_because :- neg(maths,Y).
compare(maths,X,Y) :- neg(maths,X),neg(Y,X), maths != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = maths.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(illegal_aliens, advantages).
pos(steady_employment, good_start).
pos(paying_taxes, good_start).
pos(speaking_english_capably, good_start).
pos(clean_criminal_record, good_start).

% Section 2 - General relationships
relation(path_to_citizenship, earning_citizenship).
relation(demetrios_papademetriou, migration_policy_institute).
relation(unauthorized_immigrants, regularization_process).
relation(unauthorized_immigrants, immigration_officials).
relation(unauthorized_immigrants, english).
relation(unauthorized_immigrants, criminal_record).
relation(unauthorized_immigrants, fee).
relation(difficult_conditions, path_to_citizenship).
relation(illegal_aliens, legal_aliens).
relation(illegal_immigration, legal_immigration).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(new_year, fresh_start).
pos(new_year, clean_slate).
pos(new_year, motivation).
pos(new_year, lifestyle_changes).
pos(light, returning).
pos(light, morale_boost).
pos(light, positive_changes).
pos(light, outdoors).
pos(light, waking_up_earlier).

Section 2 - General relationships:

relation(new_year, fresh_start).
relation(new_year, clean_slate).
relation(new_year, motivation).
relation(new_year, lifestyle_changes).
relation(light, returning).
relation(light, morale_boost).
relation(light, positive_changes).
relation(light, outdoors).
relation(light, waking_up_earlier).

Section 3 - Encoding:

new_year_is_good_because :- pos(new_year, Y).
new_year_is_bad_because :- neg(new_year, Y).
compare(new_year,X,Y) :- neg(new_year,X),neg(Y,X), new_year != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = new_year.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(chain_of_command, top).
pos(supply_and_demand, economics_101).
pos(marx, man).
pos(rhymes, golf_wang).
pos(rhymes, yonkers).
pos(battle, mine).
pos(grammar, grade_school).
pos(gateway_drug, high).
pos(gateway_thugs, estate).
pos(empire, mind).
pos(reality, mine).
pos(comeback, machiavelli).
pos(comeback, jesus).
pos(comeback, lazarus).
pos(comeback, osama_bin_laden).
pos(facts, bro).

neg(grammar, bonkers).
neg(high, great).
neg(rating, obama).

Section 2 - General relationships:

relation(chain_of_command, top).
relation(supply_and_demand, economics_101).
relation(marx, man).
relation(rhymes, golf_wang).
relation(rhymes, yonkers).
relation(battle, mine).
relation(grammar, grade_school).
relation(gateway_drug, high).
relation(gateway_thugs, estate).
relation(empire, mind).
relation(reality, mine).
relation(comeback, machiavelli).
relation(comeback, jesus).
relation(comeback, lazarus).
relation(comeback, osama_bin_laden).
relation(facts, bro).

Section 3 - Encoding:

chain_of_command_is_good_because :- pos(chain_of_command, Y).
chain_of_command_is_bad_because :- neg(chain_of_command, Y).
supply_and_demand_is_good_because :- pos(supply_and_demand, Y).
supply_and_demand_is_bad_because :- neg(supply_and_demand, Y).
marx_is_good_because :- pos(marx, Y).
marx_is_bad_because :- neg(marx, Y).
rhymes_is_good_because :- pos(rhymes, Y).
rhymes_is_bad_because :- neg(rhymes, Y).
battle_is_good_because :- pos(battle, Y).
battle_is_bad_because :- neg(battle, Y).
grammar_is_good_because :- pos(grammar, Y).
grammar_is_bad_because :- neg(grammar, Y).
gateway_drug_is_good_because :- pos(gateway_drug, Y).
gateway_drug_is_bad_because :- neg(gateway_drug, Y).
gateway_thugs_is_good_because :- pos(gateway_thugs, Y).
gateway_thugs_is_bad_because :- neg(gateway_thugs, Y).
empire_is_good_because :- pos(empire, Y).
empire_is_bad_because :- neg(empire, Y).
reality_is_good_because :- pos(reality, Y).
reality_is_bad_because :- neg(reality, Y).
comeback_is_good_because :- pos(comeback, Y).
comeback_is_bad_because :- neg(comeback, Y).
facts_is_good_because :- pos(facts, Y).
facts_is_bad_because :- neg(facts, Y).
compare(chain_of_command,X,Y) :- neg(chain_of_command,X),neg(Y,X), chain_of_command != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = chain_of_command.
compare(supply_and_demand,X,Y) :- neg(supply_and_demand,X),neg(Y,X), supply_and_demand != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = supply_and_demand.
compare(marx,X,Y) :- neg(marx,X),neg(Y,X), marx != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = marx.
compare(rhymes,X,Y) :- neg(rhymes,X),neg(Y,X), rhymes != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = rhymes.
compare(battle,X,Y) :- neg(battle,X),neg(Y,X), battle != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = battle.
compare(grammar,X,Y) :- neg(grammar,X),neg(Y,X), grammar != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = grammar.
compare(gateway_drug,X,Y) :- neg(gateway_drug,X),neg(Y,X), gateway_drug != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gateway_drug.
compare(gateway_thugs,X,Y) :- neg(gateway_thugs,X),neg(Y,X), gateway_thugs != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gateway_thugs.
compare(empire,X,Y) :- neg(empire,X),neg(Y,X), empire != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = empire.
compare(reality,X,Y) :- neg(reality,X),neg(Y,X), reality != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = reality.
compare(comeback,X,Y) :- neg(comeback,X),neg(Y,X), comeback != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = comeback.
compare(facts,X,Y) :- neg(facts,X),neg(Y,X), facts != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = facts.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(et, life).
pos(et, explore).
pos(et, watch).
pos(et, learn).
pos(et, grow).
pos(et, harm).

neg(et, water).
neg(et, life_as_we_know_it).
neg(et, rid_of_us).
neg(et, threat).

Section 2 - General relationships:

relation(et, life).
relation(et, explore).
relation(et, water).
relation(et, life_as_we_know_it).
relation(et, rid_of_us).
relation(et, threat).
relation(et, watch).
relation(et, learn).
relation(et, grow).
relation(et, harm).

Section 3 - Encoding:

et_is_good_because :- pos(et,Y).
et_is_bad_because :- neg(et,Y).
compare(et,X,Y) :- neg(et,X),neg(Y,X), et != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = et.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(globalization, friend).
pos(globalization, foe).
pos(globalization, con).
pos(globalization, pro).
pos(poem, occasion).
neg(opponent, debate).
neg(forfeiture, act).
neg(forfeiture, poem).

% Section 2 - General relationships
relation(globalization, friend).
relation(globalization, foe).
relation(globalization, con).
relation(globalization, pro).
relation(poem, occasion).
relation(opponent, debate).
relation(forfeiture, act).
relation(forfeiture, poem).

% Section 3 - Encoding
globalization_is_good_because :- pos(globalization, Y).
globalization_is_bad_because :- neg(globalization, Y).
compare(globalization,X,Y) :- neg(globalization,X),neg(Y,X), globalization != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = globalization.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god_kjv_bible, moral).

Section 2 - General relationships:

relation(god_kjv_bible, free_will).
relation(god_kjv_bible, bad_things).
relation(god_kjv_bible, belief).
relation(god_kjv_bible, robots).

Section 3 - Encoding:

god_kjv_bible_is_moral_because :- pos(god_kjv_bible, moral).
god_kjv_bible_is_not_moral_because :- neg(god_kjv_bible, moral).
compare(god_kjv_bible,X,Y) :- neg(god_kjv_bible,X),neg(Y,X), god_kjv_bible != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god_kjv_bible.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(scientist, moral_duty).
pos(scientist, point_out_stupidity).
pos(scientist, truth).
pos(scientist, proven).
pos(scientist, certain).
pos(scientist, clinical_medicine).
pos(scientist, non_magical_science).
pos(scientist, loving_brother).
pos(scientist, nurturing).
pos(scientist, advice).
pos(scientist, cleverness).
pos(witch_doctor, manipulate).
pos(witch_doctor, voodoo_medicine).
pos(witch_doctor, methodology_of_treatment).
pos(lawyer, moral_duty).
pos(lawyer, make_illegal).
pos(politician, moral_duty).
pos(politician, make_illegal).
pos(sister, belief).
pos(sister, wrong).
pos(opponent, views).
pos(opponent, outlook).
pos(opponent, debate).
pos(opponent, trick).
pos(opponent, flaws).
pos(opponent, lack_of_flaws).
pos(opponent, mistakes).

neg(scientist, poke_nose).
neg(scientist, say_stupid_stop_this).
neg(scientist, stupid).
neg(scientist, worry_about_others_work).
neg(scientist, concern_themselves_with_others_work).
neg(scientist, disprove).
neg(scientist, point_out_stupidity).
neg(scientist, encourage_cleverness).
neg(scientist, moral_duty).
neg(witch_doctor, good).
neg(witch_doctor, loving).
neg(witch_doctor, clinical_medicine).
neg(witch_doctor, non_magical_science).
neg(lawyer, moral_duty).
neg(politician, moral_duty).
neg(sister, belief).
neg(sister, wrong).
neg(opponent, views).
neg(opponent, outlook).
neg(opponent, debate).
neg(opponent, trick).
neg(opponent, flaws).
neg(opponent, lack_of_flaws).
neg(opponent, mistakes).

Section 2 - General relationships:

relation(scientist, moral_duty).
relation(scientist, point_out_stupidity).
relation(scientist, truth).
relation(scientist, proven).
relation(scientist, certain).
relation(scientist, clinical_medicine).
relation(scientist, non_magical_science).
relation(scientist, loving_brother).
relation(scientist, nurturing).
relation(scientist, advice).
relation(scientist, cleverness).
relation(witch_doctor, manipulate).
relation(witch_doctor, voodoo_medicine).
relation(witch_doctor, methodology_of_treatment).
relation(lawyer, moral_duty).
relation(lawyer, make_illegal).
relation(politician, moral_duty).
relation(politician, make_illegal).
relation(sister, belief).
relation(sister, wrong).
relation(opponent, views).
relation(opponent, outlook).
relation(opponent, debate).
relation(opponent, trick).
relation(opponent, flaws).
relation(opponent, lack_of_flaws).
relation(opponent, mistakes).

Section 3 - Encoding:

scientist_has_moral_duty :- pos(scientist,Y).
scientist_doesnt_have_moral_duty :- neg(scientist,Y).
witch_doctor_is_good :- pos(witch_doctor,Y).
witch_doctor_is_bad :- neg(witch_doctor,Y).
lawyer_has_moral_duty :- pos(lawyer,Y).
lawyer_doesnt_have_moral_duty :- neg(lawyer,Y).
politician_has_moral_duty :- pos(politician,Y).
politician_doesnt_have_moral_duty :- neg(politician,Y).
sister_belief_is_wrong :- pos(sister,Y).
sister_belief_is_not_wrong :- neg(sister,Y).
opponent_has_good_views :- pos(opponent,Y).
opponent_doesnt_have_good_views :- neg(opponent,Y).
compare(scientist,X,Y) :- neg(scientist,X),neg(Y,X), scientist != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = scientist.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(unlimited_paradox, false_idea).
neg(pro, opening_statement).
neg(pro, BoP).
neg(pro, evidence).
neg(pro, retaliation).
neg(pro, good_arguments).
neg(pro, correct_grammar).
neg(immovable_object, movable_object).
neg(unstoppable_force, stoppable_force).

Section 2 - General relationships:

relation(unlimited_paradox, pro).
relation(pro, BoP).
relation(pro, evidence).
relation(pro, retaliation).
relation(pro, good_arguments).
relation(pro, correct_grammar).
relation(immovable_object, unstoppable_force).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(god, logic).
pos(god, omnipotence).

Section 2 - General relationships:

relation(god, logic).
relation(god, omnipotence).

Section 3 - Encoding:

compare(god, logic, omnipotence).
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(kalam_cosmological_argument, false).

Section 2 - General relationships:

relation(kalam_cosmological_argument, burden_of_proof).
relation(kalam_cosmological_argument, ignorance).
relation(kalam_cosmological_argument, universe).
relation(kalam_cosmological_argument, cause).
relation(kalam_cosmological_argument, possibility).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(libertarian_party, american_populace).
pos(democrats, american_populace).
pos(republicans, american_populace).
pos(libertarian_party, individual_liberties).
pos(democrats, economic_planks).
pos(republicans, federalism).
pos(republicans, right_to_bear_arms).
pos(libertarian_democrat, libertarian_party).
pos(libertarian_democrat, democrats).
neg(libertarian_party, independent_party).
neg(libertarian_party, major_planks).
neg(democrats, individual_liberties).
neg(republicans, democrats).
neg(republicans, conservative_democrats).

Section 2 - General relationships:

relation(libertarian_party, american_populace).
relation(democrats, american_populace).
relation(republicans, american_populace).
relation(libertarian_party, independent_party).
relation(libertarian_party, major_planks).
relation(democrats, individual_liberties).
relation(democrats, economic_planks).
relation(republicans, federalism).
relation(republicans, right_to_bear_arms).
relation(libertarian_democrat, libertarian_party).
relation(libertarian_democrat, democrats).

Section 3 - Encoding:

libertarian_party_is_good_because :- pos(libertarian_party, Y).
libertarian_party_is_bad_because :- neg(libertarian_party, Y).
democrats_is_good_because :- pos(democrats, Y).
democrats_is_bad_because :- neg(democrats, Y).
republicans_is_good_because :- pos(republicans, Y).
republicans_is_bad_because :- neg(republicans, Y).
compare(libertarian_party, X, Y) :- neg(libertarian_party, X), neg(Y, X), libertarian_party != Y.
compare(democrats, X, Y) :- neg(democrats, X), neg(democrats, Y), Y != Z, Y = democrats.
compare(republicans, X, Y) :- neg(republicans, X), neg(republicans, Y), Y != Z, Y = republicans.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(evolution, falsified).

Section 2 - General relationships:

relation(evolution, falsified).

Section 3 - Encoding:

neg(evolution, falsified).
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(opponent, quit).
pos(opponent, battle).
pos(me, battle).
neg(me, quit).
pos(me, bowling).
neg(opponent, bowling).
pos(me, best).
pos(me, sheep_dog).
pos(me, herdin).
pos(me, cattle).
pos(me, australian_shepherd).
pos(me, land).
pos(me, convicts).
pos(me, liontooth).
pos(me, booth).
neg(opponent, paw_prints).
neg(opponent, victory).
neg(opponent, existent).
neg(opponent, pic).
neg(opponent, photoshop).
neg(opponent, fix).
neg(opponent, fuzzy).
neg(opponent, solid).
neg(opponent, problem).
pos(me, solve).

Section 2 - General relationships:

relation(me, opponent).
relation(me, battle).
relation(me, bowling).
relation(me, best).
relation(me, sheep_dog).
relation(me, herdin).
relation(me, cattle).
relation(me, australian_shepherd).
relation(me, land).
relation(me, convicts).
relation(me, liontooth).
relation(me, booth).
relation(opponent, paw_prints).
relation(opponent, victory).
relation(opponent, existent).
relation(opponent, pic).
relation(opponent, photoshop).
relation(opponent, fix).
relation(opponent, fuzzy).
relation(opponent, solid).
relation(opponent, problem).

Section 3 - Encoding:

opponent_is_good_because :- pos(opponent,Y).
opponent_is_bad_because :- neg(opponent,Y).
me_is_good_because :- pos(me,Y).
me_is_bad_because :- neg(me,Y).
compare(me,X,Y) :- neg(me,X),neg(Y,X), me != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = me.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(cross_species_genetics, logical_step).
pos(humans, create_new_ways_to_survive).
pos(hybrid_gecko, climb_walls_effortlessly).
pos(hybrid_gecko, stand_upside_down_large_construction_projects).
pos(hybrid_camel, survive_desert_long_archaeological_digs).
pos(hybrid_camel, almost_not_food_or_water).
pos(hybrid_seal_or_walrus, do_otherwise_dangerous_work_with_underground_mining_and_cabling).
pos(hybrid_seal_or_walrus, without_need_of_oxygen_tank).
pos(hybrid_seal_or_walrus, for_longer_periods_of_time).
pos(cross_breeding, diversify_human_species).
pos(cross_breeding, meant_to_be).
pos(felines, contracted_aids_virus).
pos(felines, turn_virus_into_cancer).
pos(crossing_genes, trigger_long_dormant_ones).
pos(crossing_genes, hold_numerous_health_benefits).

% Section 2 - General relationships
relation(cross_species_genetics, ethical_high_ground).
relation(cross_species_genetics, evolution).
relation(cross_species_genetics, power_of_god).
relation(cross_species_genetics, man).
relation(cross_species_genetics, nature).
relation(cross_species_genetics, group_of_men).
relation(cross_species_genetics, all_men).
relation(cross_species_genetics, felines).
relation(cross_species_genetics, aids_virus).
relation(cross_species_genetics, cancer).
relation(cross_species_genetics, chemo_therapy).
relation(cross_species_genetics, cancer_treating_agents).
relation(cross_species_genetics, drugs).
relation(cross_species_genetics, human_genome).
relation(cross_species_genetics, remnant_genes).
relation(cross_species_genetics, any_species).
relation(cross_species_genetics, introduced_genetics).
relation(cross_species_genetics, long_dormant_ones).
relation(cross_species_genetics, numerous_health_benefits).

% Section 3 - Encoding
cross_species_genetics_is_good_because :- pos(cross_species_genetics, Y).
cross_species_genetics_is_bad_because :- neg(cross_species_genetics, Y).
compare(cross_species_genetics,X,Y) :- neg(cross_species_genetics,X),neg(Y,X), cross_species_genetics != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = cross_species_genetics.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(death_penalty, curb_crime).
pos(death_penalty, stop_overcrowding_of_jails).
pos(death_penalty, prevent_further_travesties).
pos(jesus, love).
pos(jesus, thieves).
pos(jesus, corrupt_men).
pos(jesus, sleazy_prostitutes).
pos(god, ask_people_to_kill_evil_nations).
pos(god, ask_people_to_kill_law_breakers).
pos(bible, promote_killing_of_people_whove_had_more_serious_offences).

neg(death_penalty, kill).
neg(jesus, want_people_killed).
neg(god, ask_people_to_kill_good_people).
neg(bible, promote_killing_of_good_people).

Section 2 - General relationships:

relation(death_penalty, crime).
relation(death_penalty, overcrowding_of_jails).
relation(death_penalty, travesties).
relation(jesus, god).
relation(jesus, thieves).
relation(jesus, corrupt_men).
relation(jesus, sleazy_prostitutes).
relation(god, people).
relation(god, evil_nations).
relation(god, law_breakers).
relation(bible, god).
relation(bible, people).
relation(bible, commandments).

Section 3 - Encoding:

death_penalty_is_good_because :- pos(death_penalty,Y).
death_penalty_is_bad_because :- neg(death_penalty,Y).
jesus_is_good_because :- pos(jesus,Y).
jesus_is_bad_because :- neg(jesus,Y).
god_is_good_because :- pos(god,Y).
god_is_bad_because :- neg(god,Y).
bible_is_good_because :- pos(bible,Y).
bible_is_bad_because :- neg(bible,Y).
compare(death_penalty,X,Y) :- neg(death_penalty,X),neg(Y,X), death_penalty != Y.
compare(jesus,X,Y) :- neg(jesus,X),neg(Y,X), jesus != Y.
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(bible,X,Y) :- neg(bible,X),neg(Y,X), bible != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(players, wins).
neg(cheaters, rewards).
pos(cheaters, punishment).

Section 2 - General relationships:

relation(players, wins).
relation(cheaters, wins).
relation(cheaters, rewards).
relation(cheaters, punishment).
relation(sports, corruption).
relation(performance enhancing drugs, sports).

Section 3 - Encoding:

wins_are_undeserved(Players) :- neg(Players, wins).
cheaters_deserve_punishment :- pos(cheaters, punishment).
corruption_in_sports :- relation(sports, corruption).
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(legal_case, statistics).
pos(legal_case, morals).
pos(legal_case, logic).
pos(legal_case, ethics).
pos(legal_case, philosophy).
pos(ld_debate, morals).
pos(ld_debate, ethics).

% Section 2 - General relationships
relation(legal_case, broad_term).
relation(broad_term, ld_debate).
relation(ld_debate, affirm).
relation(ld_debate, opponent).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(man_made_global_warming, exists).
pos(global_warming, unusually_rapid_increase).
pos(global_warming, earth_average_surface_temperature).
pos(global_warming, greenhouse_gases).
pos(greenhouse_gases, people).
pos(greenhouse_gases, burn).
pos(greenhouse_gases, fossil_fuels).

Section 2 - General relationships:

relation(man_made_global_warming, exists).
relation(global_warming, unusually_rapid_increase).
relation(global_warming, earth_average_surface_temperature).
relation(global_warming, greenhouse_gases).
relation(greenhouse_gases, people).
relation(greenhouse_gases, burn).
relation(greenhouse_gases, fossil_fuels).

Section 3 - Encoding:

man_made_global_warming_is_true :- pos(man_made_global_warming, exists).
man_made_global_warming_is_false :- neg(man_made_global_warming, exists).
compare(man_made_global_warming, X, Y) :- neg(man_made_global_warming, X), neg(Y, X), man_made_global_warming != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = man_made_global_warming.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, powerful_ruler).
pos(god, worshipped_by_people).
pos(ruler, rules_something_or_someone).
pos(rule, control_over_something_or_someone).
neg(god, time).
neg(god, created_universe).

Section 2 - General relationships:

relation(god, time).
relation(god, universe).
relation(god, definition).
relation(god, existence).
relation(time, existence).
relation(time, phrase).
relation(time, created_by_man).
relation(sun, orbiting_earth).
relation(moon, orbiting_earth).
relation(sun, nature).
relation(moon, nature).
relation(god, eternal).
relation(god, knowledge).
relation(god, space).
relation(god, dimension).
relation(god, argument).
relation(god, monotheistic).

Section 3 - Encoding:

god_exists_outside_time :- pos(god, time).
god_created_universe :- pos(god, created_universe).
god_exists :- god_exists_outside_time, god_created_universe.
time_exists :- neg(time, phrase).
god_is_powerful_ruler :- pos(god, powerful_ruler).
god_is_worshipped_by_people :- pos(god, worshipped_by_people).
god_rules_something_or_someone :- pos(ruler, rules_something_or_someone).
god_has_control_over_something_or_someone :- pos(rule, control_over_something_or_someone).
god_has_no_time :- neg(god, time).
god_doesnt_exist :- god_has_no_time.
god_is_eternal :- pos(god, eternal).
god_knows_much :- neg(god, knowledge).
time_doesnt_exist_outside_space :- neg(time, space).
time_god_took_was_fundamentally_different :- neg(time, dimension).
god_believes_in_something_else :- neg(god, argument).
monotheistic_god_didnt_create_universe :- neg(god, created_universe).
nobody_agrees_god_has_time :- neg(god, time).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(online_education, lots_of_different_resources).
pos(online_education, over_1000000_available_sources).
pos(online_education, sit_at_home).
pos(online_education, sleep_in).
pos(online_education, take_your_time).
pos(online_education, enjoy_it_more_than_textbook).
pos(online_education, more_information_for_less_weight).
pos(online_education, faster_to_type_than_write).
pos(online_education, save_important_papers).

neg(traditional_education, lots_of_different_resources).
neg(traditional_education, over_1000000_available_sources).
neg(traditional_education, sit_at_home).
neg(traditional_education, sleep_in).
neg(traditional_education, take_your_time).
neg(traditional_education, enjoy_it_more_than_textbook).
neg(traditional_education, more_information_for_less_weight).
neg(traditional_education, faster_to_type_than_write).
neg(traditional_education, save_important_papers).

Section 2 - General relationships:

relation(online_education, traditional_education).
relation(online_education, lots_of_different_resources).
relation(online_education, over_1000000_available_sources).
relation(online_education, sit_at_home).
relation(online_education, sleep_in).
relation(online_education, take_your_time).
relation(online_education, enjoy_it_more_than_textbook).
relation(online_education, more_information_for_less_weight).
relation(online_education, faster_to_type_than_write).
relation(online_education, save_important_papers).

Section 3 - Encoding:

online_education_is_good_because :- pos(online_education, Y).
online_education_is_bad_because :- neg(online_education, Y).
compare(online_education,X,Y) :- neg(online_education,X),neg(Y,X), online_education != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = online_education.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(cartoons, religious_hate_crime).
pos(cartoons, series_of_religious_hate_crimes).
pos(cartoons, offend_and_target_muslim_community).
pos(cartoons, deliberate_association_of_venerated_religious_figure_with_terrorism).
pos(cartoons, violation_of_danish_laws_and_european_norms_protecting_minorities).
pos(cartoons, malicious_and_immoral).
pos(cartoons, widespread_tendency_to_conflate_muslims_with_terrorists).
pos(cartoons, high_profile_incident_risked_exposing_peaceful_muslims_to_prejudice).
pos(cartoons, high_profile_incident_risked_exposing_peaceful_muslims_to_discrimination).
pos(cartoons, high_profile_incident_risked_exposing_peaceful_muslims_to_physical_danger).
pos(cartoons, high_profile_incident_risked_exposing_peaceful_muslims_to_increased_xenophobia).
pos(cartoons, desecration_of_muslim_graves_at_a_cemetery_in_denmark).
pos(cartoons, better_judgment_to_report_on_the_issue_without_reprinting_the_cartoons).
pos(cartoons, could_have_run_opinion_pieces_describing_their_qualms_with_and_thoughts_on_islamic_censorship).
pos(cartoons, vulgar_methods).

neg(cartoons, peaceful_muslims).

Section 2 - General relationships:

relation(cartoons, religious_hate_crime).
relation(cartoons, series_of_religious_hate_crimes).
relation(cartoons, offend_and_target_muslim_community).
relation(cartoons, deliberate_association_of_venerated_religious_figure_with_terrorism).
relation(cartoons, violation_of_danish_laws_and_european_norms_protecting_minorities).
relation(cartoons, malicious_and_immoral).
relation(cartoons, widespread_tendency_to_conflate_muslims_with_terrorists).
relation(cartoons, high_profile_incident_risked_exposing_peaceful_muslims_to_prejudice).
relation(cartoons, high_profile_incident_risked_exposing_peaceful_muslims_to_discrimination).
relation(cartoons, high_profile_incident_risked_exposing_peaceful_muslims_to_physical_danger).
relation(cartoons, high_profile_incident_risked_exposing_peaceful_muslims_to_increased_xenophobia).
relation(cartoons, desecration_of_muslim_graves_at_a_cemetery_in_denmark).
relation(cartoons, better_judgment_to_report_on_the_issue_without_reprinting_the_cartoons).
relation(cartoons, could_have_run_opinion_pieces_describing_their_qualms_with_and_thoughts_on_islamic_censorship).
relation(cartoons, vulgar_methods).
relation(cartoons, peaceful_muslims).

Section 3 - Encoding:

cartoons_are_religious_hate_crime :- pos(cartoons, religious_hate_crime).
cartoons_are_series_of_religious_hate_crimes :- pos(cartoons, series_of_religious_hate_crimes).
cartoons_offend_and_target_muslim_community :- pos(cartoons, offend_and_target_muslim_community).
cartoons_deliberate_association_of_venerated_religious_figure_with_terrorism :- pos(cartoons, deliberate_association_of_venerated_religious_figure_with_terrorism).
cartoons_violation_of_danish_laws_and_european_norms_protecting_minorities :- pos(cartoons, violation_of_danish_laws_and_european_norms_protecting_minorities).
cartoons_malicious_and_immoral :- pos(cartoons, malicious_and_immoral).
cartoons_widespread_tendency_to_conflate_muslims_with_terrorists :- pos(cartoons, widespread_tendency_to_conflate_muslims_with_terrorists).
cartoons_high_profile_incident_risked_exposing_peaceful_muslims_to_prejudice :- pos(cartoons, high_profile_incident_risked_exposing_peaceful_muslims_to_prejudice).
cartoons_high_profile_incident_risked_exposing_peaceful_muslims_to_discrimination :- pos(cartoons, high_profile_incident_risked_exposing_peaceful_muslims_to_discrimination).
cartoons_high_profile_incident_risked_exposing_peaceful_muslims_to_physical_danger :- pos(cartoons, high_profile_incident_risked_exposing_peaceful_muslims_to_physical_danger).
cartoons_high_profile_incident_risked_exposing_peaceful_muslims_to_increased_xenophobia :- pos(cartoons, high_profile_incident_risked_exposing_peaceful_muslims_to_increased_xenophobia).
cartoons_desecration_of_muslim_graves_at_a_cemetery_in_denmark :- pos(cartoons, desecration_of_muslim_graves_at_a_cemetery_in_denmark).
cartoons_better_judgment_to_report_on_the_issue_without_reprinting_the_cartoons :- pos(cartoons, better_judgment_to_report_on_the_issue_without_reprinting_the_cartoons).
cartoons_could_have_run_opinion_pieces_describing_their_qualms_with_and_thoughts_on_islamic_censorship :- pos(cartoons, could_have_run_opinion_pieces_describing_their_qualms_with_and_thoughts_on_islamic_censorship).
cartoons_vulgar_methods :- pos(cartoons, vulgar_methods).
cartoons_peaceful_muslims :- neg(cartoons, peaceful_muslims).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(satan, good).
neg(god, good).
pos(god, created_man).
neg(god, killed_fellow_man).
pos(satan, killed_ten_people).
neg(god, killed_four_million_people).

Section 2 - General relationships:

relation(satan, god).
relation(god, satan).
relation(god, man).
relation(satan, man).

Section 3 - Encoding:

satan_is_good_because :- pos(satan, Y).
satan_is_bad_because :- neg(satan, Y).
god_is_good_because :- pos(god, Y).
god_is_bad_because :- neg(god, Y).
compare(satan, god, X) :- neg(satan, X), neg(god, X), satan != god.
compare(god, satan, X) :- neg(god, X), neg(god, X), god != satan.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(god, evidence).
neg(religion, intervention_of_any_gods).
neg(religion, control_people).
neg(people, realize).
neg(people, reject_other_gods).
pos(people, say).
pos(people, invite).
pos(people, debate).

% Section 2 - General relationships
relation(god, existence).
relation(religion, people).
relation(people, gods).
relation(people, beliefs).
relation(people, arguments).
relation(people, rebuttals).
relation(people, closing_rebuttal).

% Section 3 - Encoding
god_does_not_exist :- neg(god, evidence).
god_does_not_exist :- neg(religion, intervention_of_any_gods).
religion_is_invented :- neg(religion, intervention_of_any_gods).
religion_is_invented :- neg(religion, control_people).
people_do_not_realize :- neg(people, realize).
people_do_not_realize :- neg(people, reject_other_gods).
people_invite :- pos(people, invite).
people_invite :- pos(people, debate).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, power).
pos(god, strength).
pos(god, knowledge).
pos(god, nature).
pos(god, people).
pos(god, spirit).
pos(god, being).
pos(god, infinity).
pos(god, increasing_strength).
pos(god, forever_growing_power).
pos(god, defy_logic).
pos(god, lift_rock).
pos(rock, weight).
pos(rock, forever_increasing_weight).
pos(opponent, introduction).
pos(opponent, first_contention).
pos(opponent, second_contention).
pos(opponent, third_contention).
pos(opponent, fourth_contention).
pos(opponent, fifth_contention).
pos(opponent, sixth_contention).
pos(opponent, seventh_contention).
pos(opponent, eighth_contention).
pos(opponent, ninth_contention).
pos(opponent, tenth_contention).
pos(opponent, eleventh_contention).
pos(opponent, twelfth_contention).
pos(opponent, thirteenth_contention).
pos(opponent, fourteenth_contention).
pos(opponent, fifteenth_contention).
pos(opponent, sixteenth_contention).
pos(opponent, seventeenth_contention).
pos(opponent, eighteenth_contention).
pos(opponent, nineteenth_contention).
pos(opponent, twentieth_contention).
pos(opponent, twenty_first_contention).
pos(opponent, twenty_second_contention).
pos(opponent, twenty_third_contention).
pos(opponent, twenty_fourth_contention).
pos(opponent, twenty_fifth_contention).
pos(opponent, twenty_sixth_contention).
pos(opponent, twenty_seventh_contention).
pos(opponent, twenty_eighth_contention).
pos(opponent, twenty_ninth_contention).
pos(opponent, thirtieth_contention).
pos(opponent, thirty_first_contention).
pos(opponent, thirty_second_contention).
pos(opponent, thirty_third_contention).
pos(opponent, thirty_fourth_contention).
pos(opponent, thirty_fifth_contention).
pos(opponent, thirty_sixth_contention).
pos(opponent, thirty_seventh_contention).
pos(opponent, thirty_eighth_contention).
pos(opponent, thirty_ninth_contention).
pos(opponent, fortieth_contention).
pos(opponent, forty_first_contention).
pos(opponent, forty_second_contention).
pos(opponent, forty_third_contention).
pos(opponent, forty_fourth_contention).
pos(opponent, forty_fifth_contention).
pos(opponent, forty_sixth_contention).
pos(opponent, forty_seventh_contention).
pos(opponent, forty_eighth_contention).
pos(opponent, forty_ninth_contention).
pos(opponent, fiftieth_contention).
pos(opponent, fifty_first_contention).
pos(opponent, fifty_second_contention).
pos(opponent, fifty_third_contention).
pos(opponent, fifty_fourth_contention).
pos(opponent, fifty_fifth_contention).
pos(opponent, fifty_sixth_contention).
pos(opponent, fifty_seventh_contention).
pos(opponent, fifty_eighth_contention).
pos(opponent, fifty_ninth_contention).
pos(opponent, sixtieth_contention).
pos(opponent, sixty_first_contention).
pos(opponent, sixty_second_contention).
pos(opponent, sixty_third_contention).
pos(opponent, sixty_fourth_contention).
pos(opponent, sixty_fifth_contention).
pos(opponent, sixty_sixth_contention).
pos(opponent, sixty_seventh_contention).
pos(opponent, sixty_eighth_contention).
pos(opponent, sixty_ninth_contention).
pos(opponent, seventieth_contention).
pos(opponent, seventy_first_contention).
pos(opponent, seventy_second_contention).
pos(opponent, seventy_third_contention).
pos(opponent, seventy_fourth_contention).
pos(opponent, seventy_fifth_contention).
pos(opponent, seventy_sixth_contention).
pos(opponent, seventy_seventh_contention).
pos(opponent, seventy_eighth_contention).
pos(opponent, seventy_ninth_contention).
pos(opponent, eightieth_contention).
pos(opponent, eighty_first_contention).
pos(opponent, eighty_second_contention).
pos(opponent, eighty_third_contention).
pos(opponent, eighty_fourth_contention).
pos(opponent, eighty_fifth_contention).
pos(opponent, eighty_sixth_contention).
pos(opponent, eighty_seventh_contention).
pos(opponent, eighty_eighth_contention).
pos(opponent, eighty_ninth_contention).
pos(opponent, ninetieth_contention).
pos(opponent, ninety_first_contention).
pos(opponent, ninety_second_contention).
pos(opponent, ninety_third_contention).
pos(opponent, ninety_fourth_contention).
pos(opponent, ninety_fifth_contention).
pos(opponent, ninety_sixth_contention).
pos(opponent, ninety_seventh_contention).
pos(opponent, ninety_eighth_contention).
pos(opponent, ninety_ninth_contention).
pos(opponent, hundredth_contention).
pos(opponent, hundred_and_first_contention).
pos(opponent, hundred_and_second_contention).
pos(opponent, hundred_and_third_contention).
pos(opponent, hundred_and_fourth_contention).
pos(opponent, hundred_and_fifth_contention).
pos(opponent, hundred_and_sixth_contention).
pos(opponent, hundred_and_seventh_contention).
pos(opponent, hundred_and_eighth_contention).
pos(opponent, hundred_and_ninth_contention).
pos(opponent, hundred_and_tenth_contention).
pos(opponent, hundred_and_eleventh_contention).
pos(opponent, hundred_and_twelfth_contention).
pos(opponent, hundred_and_thirteenth_contention).
pos(opponent, hundred_and_fourteenth_contention).
pos(opponent, hundred_and_fifteenth_contention).
pos(opponent, hundred_and_sixteenth_contention).
pos(opponent, hundred_and_seventeenth_contention).
pos(opponent, hundred_and_eighteenth_contention).
pos(opponent, hundred_and_nineteenth_contention).
pos(opponent, hundred_and_twentieth_contention).
pos(opponent, hundred_and_twenty_first_contention).
pos(opponent, hundred_and_twenty_second_contention).
pos(opponent, hundred_and_twenty_third_contention).
pos(opponent, hundred_and_twenty_fourth_contention).
pos(opponent, hundred_and_twenty_fifth_contention).
pos(opponent, hundred_and_twenty_sixth_contention).
pos(opponent, hundred_and_twenty_seventh_contention).
pos(opponent, hundred_and_twenty_eighth_contention).
pos(opponent, hundred_and_twenty_ninth_contention).
pos(opponent, hundred_and_thirtieth_contention).
pos(opponent, hundred_and_thirty_first_contention).
pos(opponent, hundred_and_thirty_second_contention).
pos(opponent, hundred_and_thirty_third_contention).
pos(opponent, hundred_and_thirty_fourth_contention).
pos(opponent, hundred_and_thirty_fifth_contention).
pos(opponent, hundred_and_thirty_sixth_contention).
pos(opponent, hundred_and_thirty_seventh_contention).
pos(opponent, hundred_and_thirty_eighth_contention).
pos(opponent, hundred_and_thirty_ninth_contention).
pos(opponent, hundred_and_fortieth_contention).
pos(opponent, hundred_and_forty_first_contention).
pos(opponent, hundred_and_forty_second_contention).
pos(opponent, hundred_and_forty_third_contention).
pos(opponent, hundred_and_forty_fourth_contention).
pos(opponent, hundred_and_forty_fifth_contention).
pos(opponent, hundred_and_forty_sixth_contention).
pos(opponent, hundred_and_forty_seventh_contention).
pos(opponent, hundred_and_forty_eighth_contention).
pos(opponent, hundred_and_forty_ninth_contention).
pos(opponent, hundred_and_fiftieth_contention).
pos(opponent, hundred_and_fifty_first_contention).
pos(opponent, hundred_and_fifty_second_contention).
pos(opponent, hundred_and_fifty_third_contention).
pos(opponent, hundred_and_fifty_fourth_contention).
pos(opponent, hundred_and_fifty_fifth_contention).
pos(opponent, hundred_and_fifty_sixth_contention).
pos(opponent, hundred_and_fifty_seventh_contention).
pos(opponent, hundred_and_fifty_eighth_contention).
pos(opponent, hundred_and_fifty_ninth_contention).
pos(opponent, hundred_and_sixtieth_contention).
pos(opponent, hundred_and_sixty_first_contention).
pos(opponent, hundred_and_sixty_second_contention).
pos(opponent, hundred_and_sixty_third_contention).
pos(opponent, hundred_and_sixty_fourth_contention).
pos(opponent, hundred_and_sixty_fifth_contention).
pos(opponent, hundred_and_sixty_sixth_contention).
pos(opponent, hundred_and_sixty_seventh_contention).
pos(opponent, hundred_and_sixty_eighth_contention).
pos(opponent, hundred_and_sixty_ninth_contention).
pos(opponent, hundred_and_seventieth_contention).
pos(opponent, hundred_and_seventy_first_contention).
pos(opponent, hundred_and_seventy_second_contention).
pos(opponent, hundred_and_seventy_third_contention).
pos(opponent, hundred_and_seventy_fourth_contention).
pos(opponent, hundred_and_seventy_fifth_contention).
pos(opponent, hundred_and_seventy_sixth_contention).
pos(opponent, hundred_and_seventy_seventh_contention).
pos(opponent, hundred_and_seventy_eighth_contention).
pos(opponent, hundred_and_seventy_ninth_contention).
pos(opponent, hundred_and_eightieth_contention).
pos(opponent, hundred_and_eighty_first_contention).
pos(opponent, hundred_and_eighty_second_contention).
pos(opponent, hundred_and_eighty_third_contention).
pos(opponent, hundred_and_eighty_fourth_contention).
pos(opponent, hundred_and_eighty_fifth_contention).
pos(opponent, hundred_and_eighty_sixth_contention).
pos(opponent, hundred_and_eighty_seventh_contention).
pos(opponent, hundred_and_eighty_eighth_contention).
pos(opponent, hundred_and_eighty_ninth_contention).
pos(opponent, hundred_and_ninetieth_contention).
pos(opponent, hundred_and_ninety_first_contention).
pos(opponent, hundred_and_ninety_second_contention).
pos(opponent, hundred_and_ninety_third_contention).
pos(opponent, hundred_and_ninety_fourth_contention).
pos(opponent, hundred_and_ninety_fifth_contention).
pos(opponent, hundred_and_ninety_sixth_contention).
pos(opponent, hundred_and_ninety_seventh_contention).
pos(opponent, hundred_and_ninety_eighth_contention).
pos(opponent, hundred_and_ninety_ninth_contention).
pos(opponent, two_hundredth_contention).
pos(opponent, two_hundred_and_first_contention).
pos(opponent, two_hundred_and_second_contention).
pos(opponent, two_hundred_and_third_contention).
pos(opponent, two_hundred_and_fourth_contention).
pos(opponent, two_hundred_and_fifth_contention).
pos(opponent, two_hundred_and_sixth_contention).
pos(opponent, two_hundred_and_seventh_contention).
pos(opponent, two_hundred_and_eighth_contention).
pos(opponent, two_hundred_and_ninth_contention).
pos(opponent, two_hundred_and_tenth_contention).
pos(opponent, two_hundred_and_eleventh_contention).
pos(opponent, two_hundred_and_twelfth_contention).
pos(opponent, two_hundred_and_thirteenth_contention).
pos(opponent, two_hundred_and_fourteenth_contention).
pos(opponent, two_hundred_and_fifteenth_contention).
pos(opponent, two_hundred_and_sixteenth_contention).
pos(opponent, two_hundred_and_seventeenth_contention).
pos(opponent, two_hundred_and_eighteenth_contention).
pos(opponent, two_hundred_and_nineteenth_contention).
pos(opponent, two_hundred_and_twentieth_contention).
pos(opponent, two_hundred_and_twenty_first_contention).
pos(opponent, two_hundred_and_twenty_second_contention).
pos(opponent, two_hundred_and_twenty_third_contention).
pos(opponent, two_hundred_and_twenty_fourth_contention).
pos(opponent, two_hundred_and_twenty_fifth_contention).
pos(opponent, two_hundred_and_twenty_sixth_contention).
pos(opponent, two_hundred_and_twenty_seventh_contention).
pos(opponent, two_hundred_and_twenty_eighth_contention).
pos(opponent, two_hundred_and_twenty_ninth_contention).
pos(opponent, two_hundred_and_thirtieth_contention).
pos(opponent, two_hundred_and_thirty_first_contention).
pos(opponent, two_hundred_and_thirty_second_contention).
pos(opponent, two_hundred_and_thirty_third_contention).
pos(opponent, two_hundred_and_thirty_fourth_contention).
pos(opponent, two_hundred_and_thirty_fifth_contention).
pos(opponent, two_hundred_and_thirty_sixth_contention).
pos(opponent, two_hundred_and_thirty_seventh_contention).
pos(opponent, two_hundred_and_thirty_eighth_contention).
pos(opponent, two_hundred_and_thirty_ninth_contention).
pos(opponent, two_hundred_and_fortieth_contention).
pos(opponent, two_hundred_and_forty_first_contention).
pos(opponent, two_hundred_and_forty_second_contention).
pos(opponent, two_hundred_and_forty_third_contention).
pos(opponent, two_hundred_and_forty_fourth_contention).
pos(opponent, two_hundred_and_forty_fifth_contention).
pos(opponent, two_hundred_and_forty_sixth_contention).
pos(opponent, two_hundred_and_forty_seventh_contention).
pos(opponent, two_hundred_and_forty_eighth_contention).
pos(opponent, two_hundred_and_forty_ninth_contention).
pos(opponent, two_hundred_and_fiftieth_contention).
pos(opponent, two_hundred_and_fifty_first_contention).
pos(opponent, two_hundred_and_fifty_second_contention).
pos(opponent, two_hundred_and_fifty_third_contention).
pos(opponent, two_hundred_and_fifty_fourth_contention).
pos(opponent, two_hundred_and_fifty_fifth_contention).
pos(opponent, two_hundred_and_fifty_sixth_contention).
pos(opponent, two_hundred_and_fifty_seventh_contention).
pos(opponent, two_hundred_and_fifty_eighth_contention).
pos(opponent, two_hundred_and_fifty_ninth_contention).
pos(opponent, two_hundred_and_sixtieth_contention).
pos(opponent, two_hundred_and_sixty_first_contention).
pos(opponent, two_hundred_and_sixty_second_contention).
pos(opponent, two_hundred_and_sixty_third_contention).
pos(opponent, two_hundred_and_sixty_fourth_contention).
pos(opponent, two_hundred_and_sixty_fifth_contention).
pos(opponent, two_hundred_and_sixty_sixth_contention).
pos(opponent, two_hundred_and_sixty_seventh_contention).
pos(opponent, two_hundred_and_sixty_eighth_contention).
pos(opponent, two_hundred_and_sixty_ninth_contention).
pos(opponent, two_hundred_and_seventieth_contention).
pos(opponent, two_hundred_and_seventy_first_contention).
pos(opponent, two_hundred_and_seventy_second_contention).
pos(opponent, two_hundred_and_seventy_third_contention).
pos(opponent, two_hundred_and_seventy_fourth_contention).
pos(opponent, two_hundred_and_seventy_fifth_contention).
pos(opponent, two_hundred_and_seventy_sixth_contention).
pos(opponent, two_hundred_and_seventy_seventh_contention).
pos(opponent, two_hundred_and_seventy_eighth_contention).
pos(opponent, two_hundred_and_seventy_ninth_contention).
pos(opponent, two_hundred_and_eightieth_contention).
pos(opponent, two_hundred_and_eighty_first_contention).
pos(opponent, two_hundred_and_eighty_second_contention).
pos(opponent, two_hundred_and_eighty_third_contention).
pos(opponent, two_hundred_and_eighty_fourth_contention).
pos(opponent, two_hundred_and_eighty_fifth_contention).
pos(opponent, two_hundred_and_eighty_sixth_contention).
pos(opponent, two_hundred_and_eighty_seventh_contention).
pos(opponent, two_hundred_and_eighty_eighth_contention).
pos(opponent, two_hundred_and_eighty_ninth_contention).
pos(opponent, two_hundred_and_ninetieth_contention).
pos(opponent, two_hundred_and_ninety_first_contention).
pos(opponent, two_hundred_and_ninety_second_contention).
pos(opponent, two_hundred_and_ninety_third_contention).
pos(opponent, two_hundred_and_ninety_fourth_contention).
pos(opponent, two_hundred_and_ninety_fifth_contention).
pos(opponent, two_hundred_and_ninety_sixth_contention).
pos(opponent, two_hundred_and_ninety_seventh_contention).
pos(opponent, two_hundred_and_ninety_eighth_contention).
pos(opponent, two_hundred_and_ninety_ninth_contention).
pos(opponent, three_hundredth_contention).
pos(opponent, three_hundred_and_first_contention).
pos(opponent, three_hundred_and_second_contention).
pos(opponent, three_hundred_and_third_contention).
pos(opponent, three_hundred_and_fourth_contention).
pos(opponent, three_hundred_and_fifth_contention).
pos(opponent, three_hundred_and_sixth_contention).
pos(opponent, three_hundred_and_seventh_contention).
pos(opponent, three_hundred_and_eighth_contention).
pos(opponent, three_hundred_and_ninth_contention).
pos(opponent, three_hundred_and_tenth_contention).
pos(opponent, three_hundred_and_eleventh_contention).
pos(opponent, three_hundred_and_twelfth_contention).
pos(opponent, three_hundred_and_thirteenth_contention).
pos(opponent, three_hundred_and_fourteenth_contention).
pos(opponent, three_hundred_and_fifteenth_contention).
pos(opponent, three_hundred_and_sixteenth_contention).
pos(opponent, three_hundred_and_seventeenth_contention).
pos(opponent, three_hundred_and_eighteenth_contention).
pos(opponent, three_hundred_and_nineteenth_contention).
pos(opponent, three_hundred_and_twentieth_contention).
pos(opponent, three_hundred_and_twenty_first_contention).
pos(opponent, three_hundred_and_twenty_second_contention).
pos(opponent, three_hundred_and_twenty_third_contention).
pos(opponent, three_hundred_and_twenty_fourth_contention).
pos(opponent, three_hundred_and_twenty_fifth_contention).
pos(opponent, three_hundred_and_twenty_sixth_contention).
pos(opponent, three_hundred_and_twenty_seventh_contention).
pos(opponent, three_hundred_and_twenty_eighth_contention).
pos(opponent, three_hundred_and_twenty_ninth_contention).
pos(opponent, three_hundred_and_thirtieth_contention).
pos(opponent, three_hundred_and_thirty_first_contention).
pos(opponent, three_hundred_and_thirty_second_contention).
pos(opponent, three_hundred_and_thirty_third_contention).
pos(opponent, three_hundred_and_thirty_fourth_contention).
pos(opponent, three_hundred_and_thirty_fifth_contention).
pos(opponent, three_hundred_and_thirty_sixth_contention).
pos(opponent, three_hundred_and_thirty_seventh_contention).
pos(opponent, three_hundred_and_thirty_eighth_contention).
pos(opponent, three_hundred_and_thirty_ninth_contention).
pos(opponent, three_hundred_and_fortieth_contention).
pos(opponent, three_hundred_and_forty_first_contention).
pos(opponent, three_hundred_and_forty_second_contention).
pos(opponent, three_hundred_and_forty_third_contention).
pos(opponent, three_hundred_and_forty_fourth_contention).
pos(opponent, three_hundred_and_forty_fifth_contention).
pos(opponent, three_hundred_and_forty_sixth_contention).
pos(opponent, three_hundred_and_forty_seventh_contention).
pos(opponent, three_hundred_and_forty_eighth_contention).
pos(opponent, three_hundred_and_forty_ninth_contention).
pos(opponent, three_hundred_and_fiftieth_contention).
pos(opponent, three_hundred_and_fifty_first_contention).
pos(opponent, three_hundred_and_fifty_second_contention).
pos(opponent, three_hundred_and_fifty_third_contention).
pos(opponent, three_hundred_and_fifty_fourth_contention).
pos(opponent, three_hundred_and_fifty_fifth_contention).
pos(opponent, three_hundred_and_fifty_sixth_contention).
pos(opponent, three_hundred_and_fifty_seventh_contention).
pos(opponent, three_hundred_and_fifty_eighth_contention).
pos(opponent, three_hundred_and_fifty_ninth_contention).
pos(opponent, three_hundred_and_sixtieth_contention).
pos(opponent, three_hundred_and_sixty_first_contention).
pos(opponent, three_hundred_and_sixty_second_contention).
pos(opponent, three_hundred_and_sixty_third_contention).
pos(opponent, three_hundred_and_sixty_fourth_contention).
pos(opponent, three_hundred_and_sixty_fifth_contention).
pos(opponent, three_hundred_and_sixty_sixth_contention).
pos(opponent, three_hundred_and_sixty_seventh_contention).
pos(opponent, three_hundred_and_sixty_eighth_contention).
pos(opponent, three_hundred_and_sixty_ninth_contention).
pos(opponent, three_hundred_and_seventieth_contention).
pos(opponent, three_hundred_and_seventy_first_contention).
pos(opponent, three_hundred_and_seventy_second_contention).
pos(opponent, three_hundred_and_seventy_third_contention).
pos(opponent, three_hundred_and_seventy_fourth_contention).
pos(opponent, three_hundred_and_seventy_fifth_contention).
pos(opponent, three_hundred_and_seventy_sixth_contention).
pos(opponent, three_hundred_and_seventy_seventh_contention).
pos(opponent, three_hundred_and_seventy_eighth_contention).
pos(opponent, three_hundred_and_seventy_ninth_contention).
pos(opponent, three_hundred_and_eightieth_contention).
pos(opponent, three_hundred_and_eighty_first_contention).
pos(opponent, three_hundred_and_eighty_second_contention).
pos(opponent, three_hundred_and_eighty_third_contention).
pos(opponent, three_hundred_and_eighty_fourth_contention).
pos(opponent, three_hundred_and_eighty_fifth_contention).
pos(opponent, three_hundred_and_eighty_sixth_contention).
pos(opponent, three_hundred_and_eighty_seventh_contention).
pos(opponent, three_hundred_and_eighty_eighth_contention).
pos(opponent, three_hundred_and_eighty_ninth_contention).
pos(opponent, three_hundred_and_ninetieth_contention).
pos(opponent, three_hundred_and_ninety_first_contention).
pos(opponent, three_hundred_and_ninety_second_contention).
pos(opponent, three_hundred_and_ninety_third_contention).
pos(opponent, three_hundred_and_ninety_fourth_contention).
pos(opponent, three_hundred_and_ninety_fifth_contention).
pos(opponent, three_hundred_and_ninety_sixth_contention).
pos(opponent, three_hundred_and_ninety_seventh_contention).
pos(opponent, three_hundred_and_ninety_eighth_contention).
pos(opponent, three_hundred_and_ninety_ninth_contention).
pos(opponent, four_hundredth_contention).
pos(opponent, four_hundred_and_first_contention).
pos(opponent, four_hundred_and_second_contention).
pos(opponent, four_hundred_and_third_contention).
pos(opponent, four_hundred_and_fourth_contention).
pos(opponent, four_hundred_and_fifth_contention).
pos(opponent, four_hundred_and_sixth_contention).
pos(opponent, four_hundred_and_seventh_contention).
pos(opponent, four_hundred_and_eighth_contention).
pos(opponent, four_hundred_and_ninth_contention).
pos(opponent, four_hundred_and_tenth_contention).
pos(opponent, four_hundred_and_eleventh_contention).
pos(opponent, four_hundred_and_twelfth_contention).
pos(opponent, four_hundred_and_thirteenth_contention).
pos(opponent, four_hundred_and_fourteenth_contention).
pos(opponent, four_hundred_and_fifteenth_contention).
pos(opponent, four_hundred_and_sixteenth_contention).
pos(opponent, four_hundred_and_seventeenth_contention).
pos(opponent, four_hundred_and_eighteenth_contention).
pos(opponent, four_hundred_and_nineteenth_contention).
pos(opponent, four_hundred_and_twentieth_contention).
pos(opponent, four_hundred_and_twenty_first_contention).
pos(opponent, four_hundred_and_twenty_second_contention).
pos(opponent, four_hundred_and_twenty_third_contention).
pos(opponent, four_hundred_and_twenty_fourth_contention).
pos(opponent, four_hundred_and_twenty_fifth_contention).
pos(opponent, four_hundred_and_twenty_sixth_contention).
pos(opponent, four_hundred_and_twenty_seventh_contention).
pos(opponent, four_hundred_and_twenty_eighth_contention).
pos(opponent, four_hundred_and_twenty_ninth_contention).
pos(opponent, four_hundred_and_thirtieth_contention).
pos(opponent, four_hundred_and_thirty_first_contention).
pos(opponent, four_hundred_and_thirty_second_contention).
pos(opponent, four_hundred_and_thirty_third_contention).
pos(opponent, four_hundred_and_thirty_fourth_contention).
pos(opponent, four_hundred_and_thirty_fifth_contention).
pos(opponent, four_hundred_and_thirty_sixth_contention).
pos(opponent, four_hundred_and_thirty_seventh_contention).
pos(opponent, four_hundred_and_thirty_eighth_contention).
pos(opponent, four_hundred_and_thirty_ninth_contention).
pos(opponent, four_hundred_and_fortieth_contention).
pos(opponent, four_hundred_and_forty_first_contention).
pos(opponent, four_hundred_and_forty_second_contention).
pos(opponent, four_hundred_and_forty_third_contention).
pos(opponent, four_hundred_and_forty_fourth_contention).
pos(opponent, four_hundred_and_forty_fifth_contention).
pos(opponent, four_hundred_and_forty_sixth_contention).
pos(opponent, four_hundred_and_forty_seventh_contention).
pos(opponent, four_hundred_and_forty_eighth_contention).
pos(opponent, four_hundred_and_forty_ninth_contention).
pos(opponent, four_hundred_and_fiftieth_contention).
pos(opponent, four_hundred_and_fifty_first_contention).
pos(opponent, four_hundred_and_fifty_second_contention).
pos(opponent, four_hundred_and_fifty_third_contention).
pos(opponent, four_hundred_and_fifty_fourth_contention).
pos(opponent, four_hundred_and_fifty_fifth_contention).
pos(opponent, four_hundred_and_fifty_sixth_contention).
pos(opponent, four_hundred_and_fifty_seventh_contention).
pos(opponent, four_hundred_and_fifty_eighth_contention).
pos(opponent, four_hundred_and_fifty_ninth_contention).
pos(opponent, four_hundred_and_sixtieth_contention).
pos(opponent, four_hundred_and_sixty_first_contention).
pos(opponent, four_hundred_and_sixty_second_contention).
pos(opponent, four_hundred_and_sixty_third_contention).
pos(opponent, four_hundred_and_sixty_fourth_contention).
pos(opponent, four_hundred_and_sixty_fifth_contention).
pos(opponent, four_hundred_and_sixty_sixth_contention).
pos(opponent, four_hundred_and_sixty_seventh_contention).
pos(opponent, four_hundred_and_sixty_eighth_contention).
pos(opponent, four_hundred_and_sixty_ninth_contention).
pos(opponent, four_hundred_and_seventieth_contention).
pos(opponent, four_hundred_and_seventy_first_contention).
pos(opponent, four_hundred_and_seventy_second_contention).
pos(opponent, four_hundred_and_seventy_third_contention).
pos(opponent, four_hundred_and_seventy_fourth_contention).
pos(opponent, four_hundred_and_seventy_fifth_contention).
pos(opponent, four_hundred_and_seventy_sixth_contention).
pos(opponent, four_hundred_and_seventy_seventh_contention).
pos(opponent, four_hundred_and_seventy_eighth_contention).
pos(opponent, four_hundred_and_seventy_ninth_contention).
pos(opponent, four_hundred_and_eightieth_contention).
pos(opponent, four_hundred_and_eighty_first_contention).
pos(opponent, four_hundred_and_eighty_second_contention).
pos(opponent, four_hundred_and_eighty_third_contention).
pos(opponent, four_hundred_and_eighty_fourth_contention).
pos(opponent, four_hundred_and_eighty_fifth_contention).
pos(opponent, four_hundred_and_eighty_sixth_contention).
pos(opponent, four_hundred_and_eighty_seventh_contention).
pos(opponent, four_hundred_and_eighty_eighth_contention).
pos(opponent, four_hundred_and_eighty_ninth_contention).
pos(opponent, four_hundred_and_ninetieth_contention).
pos(opponent, four_hundred_and_ninety_first_contention).
pos(opponent, four_
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(progressive_tax, fair).
neg(flat_tax, fair).
pos(flat_tax, pay_for_poor).
pos(flat_tax, create_more_taxable_income).
pos(flat_tax, encourage_investment).
neg(rich, take_resources).
pos(upper_and_middle_classes, invest_in_energy_resource_crisis).
pos(flat_tax, acquire_more_taxable_income).

Section 2 - General relationships:

relation(progressive_tax, flat_tax).
relation(flat_tax, government).
relation(flat_tax, poor).
relation(flat_tax, rich).
relation(flat_tax, energy_resource_crisis).
relation(upper_and_middle_classes, energy_resource_crisis).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(food_irradiation, work_force).
neg(food_irradiation, efficient).
neg(irradiated_food, america).
neg(irradiated_food, americans).
neg(irradiated_food, facilities).
neg(irradiated_food, sewer_system).
neg(irradiated_food, sustainable_food).
neg(irradiated_food, clean_food).
neg(irradiated_food, processing_lines).
neg(irradiated_food, people).
neg(irradiated_food, benefits).

pos(irradiated_food, radiation).
pos(irradiated_food, security).

Section 2 - General relationships:

relation(food_irradiation, work_force).
relation(food_irradiation, poll).
relation(poll, irradiated_food).
relation(irradiated_food, america).
relation(irradiated_food, residents).
relation(irradiated_food, facilities).
relation(facilities, radiation).
relation(facilities, cities).
relation(irradiated_food, sewer_system).
relation(irradiated_food, sustainable_food).
relation(irradiated_food, clean_food).
relation(irradiated_food, processing_lines).
relation(irradiated_food, people).
relation(irradiated_food, benefits).

Section 3 - Encoding:

food_irradiation_is_bad_because :- neg(food_irradiation, Y).
food_irradiation_is_good_because :- pos(food_irradiation, Y).
compare(food_irradiation,X,Y) :- neg(food_irradiation,X),neg(Y,X), food_irradiation != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = food_irradiation.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(bible, oral_history).
neg(bible, factual_evidence).

Section 2 - General relationships:

relation(bible, factual_evidence).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(alcohol, human_mind).
neg(alcohol, human_body).
neg(alcohol, brain).
neg(alcohol, heart).
neg(alcohol, liver).
neg(alcohol, mouth).
neg(alcohol, throat).
neg(alcohol, breast).
neg(alcohol, liver_disease).
neg(alcohol, alcohol_poisoning).
neg(alcohol, slurred_speech).
neg(alcohol, ulcers).
neg(alcohol, malnutrition).
neg(alcohol, crime).
neg(alcohol, college_students).
neg(alcohol, sexual_assault).
neg(alcohol, mind).
neg(alcohol, decision_making).
neg(alcohol, maturity).
neg(eighteen_year_old_mind, twenty_one_year_old_mind).

Section 2 - General relationships:

relation(alcohol, human_mind).
relation(alcohol, human_body).
relation(alcohol, brain).
relation(alcohol, heart).
relation(alcohol, liver).
relation(alcohol, mouth).
relation(alcohol, throat).
relation(alcohol, breast).
relation(alcohol, liver_disease).
relation(alcohol, alcohol_poisoning).
relation(alcohol, slurred_speech).
relation(alcohol, ulcers).
relation(alcohol, malnutrition).
relation(alcohol, crime).
relation(alcohol, college_students).
relation(alcohol, sexual_assault).
relation(alcohol, mind).
relation(alcohol, decision_making).
relation(alcohol, maturity).
relation(eighteen_year_old_mind, twenty_one_year_old_mind).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(migrants, developing_countries).
pos(migrants, developed_countries).
pos(migrants, cheap_workforce).
pos(migrants, agriculture).
pos(migrants, illegal_labour).
pos(migrants, goods).
pos(migrants, services).
pos(migrants, country).

Section 2 - General relationships:

relation(migrants, developing_countries).
relation(migrants, developed_countries).
relation(migrants, cheap_workforce).
relation(migrants, agriculture).
relation(migrants, illegal_labour).
relation(migrants, goods).
relation(migrants, services).
relation(migrants, country).

Section 3 - Encoding:

migrants_benefit_developing_countries :- pos(migrants, developing_countries).
migrants_benefit_developed_countries :- pos(migrants, developed_countries).
migrants_provide_cheap_workforce :- pos(migrants, cheap_workforce).
migrants_do_jobs_native_workers_dont_want_to_do :- pos(migrants, cheap_workforce).
migrants_work_in_agriculture :- pos(migrants, agriculture).
migrants_work_in_developed_countries :- pos(migrants, agriculture).
migrants_work_in_illegal_labour :- pos(migrants, illegal_labour).
migrants_work_in_developed_countries :- pos(migrants, illegal_labour).
migrants_work_in_us :- pos(migrants, illegal_labour).
migrants_are_illegal_immigrants :- pos(migrants, illegal_labour).
migrants_benefit_developed_countries_by_providing_cheap_labour :- pos(migrants, cheap_workforce).
migrants_benefit_developed_countries_by_doing_jobs_native_workers_dont_want_to_do :- pos(migrants, cheap_workforce).
migrants_benefit_developed_countries_by_working_in_agriculture :- pos(migrants, agriculture).
migrants_benefit_developed_countries_by_working_in_illegal_labour :- pos(migrants, illegal_labour).
migrants_benefit_developed_countries_by_working_in_us :- pos(migrants, illegal_labour).
migrants_benefit_developed_countries_by_being_illegal_immigrants :- pos(migrants, illegal_labour).
migrants_benefit_developed_countries_by_making_goods_and_services_cheaper :- pos(migrants, goods).
migrants_benefit_developed_countries_by_making_goods_and_services_cheaper :- pos(migrants, services).
migrants_benefit_developed_countries_by_making_goods_and_services_cheaper :- pos(migrants, country).
migrants_benefit_developed_countries_by_making_goods_and_services_cheaper :- pos(migrants, developed_countries).

compare(migrants,X,Y) :- neg(migrants,X),neg(Y,X), migrants != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = migrants.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(liberalism, public_education).
neg(democrat_teachers_unions, public_education).
pos(teachers, any_persuasion).
neg(unions, public_education).
neg(bureaucracy, public_education).
neg(aft, public_education).
neg(nea, public_education).
pos(democrats, aft).
pos(democrats, nea).
neg(social_engineering, public_education).
neg(boys_in_girls_bathrooms, public_education).
neg(rigourousness, public_education).
neg(test_scores, public_education).
neg(graduation_test, public_education).
neg(discipline, public_education).
neg(liberalism, america).
neg(liberals, america).
neg(socialism, america).
neg(communism, america).

Section 2 - General relationships:

relation(liberalism, democrat_teachers_unions).
relation(democrat_teachers_unions, public_education).
relation(teachers, any_persuasion).
relation(unions, public_education).
relation(bureaucracy, public_education).
relation(aft, public_education).
relation(nea, public_education).
relation(democrats, aft).
relation(democrats, nea).
relation(social_engineering, public_education).
relation(boys_in_girls_bathrooms, public_education).
relation(rigourousness, public_education).
relation(test_scores, public_education).
relation(graduation_test, public_education).
relation(discipline, public_education).
relation(liberalism, america).
relation(liberals, america).
relation(socialism, america).
relation(communism, america).

Section 3 - Encoding:

liberalism_is_bad_because :- neg(liberalism,Y).
democrat_teachers_unions_are_bad_because :- neg(democrat_teachers_unions,Y).
teachers_are_good_because :- pos(teachers,Y).
unions_are_bad_because :- neg(unions,Y).
bureaucracy_is_bad_because :- neg(bureaucracy,Y).
aft_is_bad_because :- neg(aft,Y).
nea_is_bad_because :- neg(nea,Y).
democrats_are_bad_because :- neg(democrats,Y).
social_engineering_is_bad_because :- neg(social_engineering,Y).
boys_in_girls_bathrooms_are_bad_because :- neg(boys_in_girls_bathrooms,Y).
rigourousness_is_bad_because :- neg(rigourousness,Y).
test_scores_are_bad_because :- neg(test_scores,Y).
graduation_test_is_bad_because :- neg(graduation_test,Y).
discipline_is_bad_because :- neg(discipline,Y).
liberalism_is_bad_because :- neg(liberalism,Y).
liberals_are_bad_because :- neg(liberals,Y).
socialism_is_bad_because :- neg(socialism,Y).
communism_is_bad_because :- neg(communism,Y).
compare(liberalism,X,Y) :- neg(liberalism,X),neg(Y,X), liberalism != Y.
compare(democrat_teachers_unions,X,Y) :- neg(democrat_teachers_unions,X),neg(Y,X), democrat_teachers_unions != Y.
compare(teachers,X,Y) :- neg(teachers,X),neg(Y,X), teachers != Y.
compare(unions,X,Y) :- neg(unions,X),neg(Y,X), unions != Y.
compare(bureaucracy,X,Y) :- neg(bureaucracy,X),neg(Y,X), bureaucracy != Y.
compare(aft,X,Y) :- neg(aft,X),neg(Y,X), aft != Y.
compare(nea,X,Y) :- neg(nea,X),neg(Y,X), nea != Y.
compare(democrats,X,Y) :- neg(democrats,X),neg(Y,X), democrats != Y.
compare(social_engineering,X,Y) :- neg(social_engineering,X),neg(Y,X), social_engineering != Y.
compare(boys_in_girls_bathrooms,X,Y) :- neg(boys_in_girls_bathrooms,X),neg(Y,X), boys_in_girls_bathrooms != Y.
compare(rigourousness,X,Y) :- neg(rigourousness,X),neg(Y,X), rigourousness != Y.
compare(test_scores,X,Y) :- neg(test_scores,X),neg(Y,X), test_scores != Y.
compare(graduation_test,X,Y) :- neg(graduation_test,X),neg(Y,X), graduation_test != Y.
compare(discipline,X,Y) :- neg(discipline,X),neg(Y,X), discipline != Y.
compare(liberalism,X,Y) :- neg(liberalism,X),neg(Y,X), liberalism != Y.
compare(liberals,X,Y) :- neg(liberals,X),neg(Y,X), liberals != Y.
compare(socialism,X,Y) :- neg(socialism,X),neg(Y,X), socialism != Y.
compare(communism,X,Y) :- neg(communism,X),neg(Y,X), communism != Y.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(european_monetary_fund, short_term_solution).
neg(european_monetary_fund, immediate_crisis).

% Section 2 - General relationships
relation(european_monetary_fund, european_mechanisms).
relation(european_monetary_fund, budget_reforms).
relation(european_monetary_fund, polemic).
relation(european_monetary_fund, institutionalize_help).
relation(european_monetary_fund, finances).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(european_monetary_fund,X,Y) :- neg(european_monetary_fund,X),neg(Y,X), european_monetary_fund != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = european_monetary_fund.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(patriotism, pride).
pos(patriotism, country).
pos(united_states, stability).
pos(united_states, less_death).
pos(united_states, revolt_avoidance).
pos(united_states, governmental_stability).

neg(united_states, revolt).
neg(united_states, governmental_overthrow).

Section 2 - General relationships:

relation(patriotism, pride).
relation(patriotism, country).
relation(patriotism, school).
relation(patriotism, united_states).
relation(patriotism, revolt).
relation(patriotism, stability).
relation(patriotism, death).
relation(patriotism, governmental_revolt).
relation(patriotism, governmental_stability).
relation(united_states, revolt).
relation(united_states, governmental_overthrow).
relation(united_states, civil_war).
relation(united_states, south).
relation(united_states, secession).
relation(united_states, school).
relation(united_states, history).
relation(united_states, pledge_of_allegiance).
relation(united_states, shady_events).
relation(united_states, stability).
relation(united_states, death).
relation(united_states, governmental_revolt).
relation(united_states, governmental_stability).
relation(school, patriotism).
relation(school, united_states).
relation(school, history).
relation(school, pledge_of_allegiance).
relation(school, shady_events).
relation(school, stability).
relation(school, death).
relation(school, governmental_revolt).
relation(school, governmental_stability).

Section 3 - Encoding:

patriotism_is_good_because :- pos(patriotism, Y).
patriotism_is_bad_because :- neg(patriotism, Y).
compare(patriotism,X,Y) :- neg(patriotism,X),neg(Y,X), patriotism != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = patriotism.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(marriage, society_blessing).
neg(marriage, society_mandate).
neg(de_legalizing_marriage, benefits_of_marriage).
neg(de_legalizing_marriage, legitimacy_of_a_marriage_license).
neg(de_legalizing_marriage, government_intervention).
neg(de_legalizing_marriage, government_knowledge_of_unions).
neg(de_legalizing_marriage, medical_and_legal_outcomes).
neg(de_legalizing_marriage, society_authorization).
neg(de_legalizing_marriage, avoidance_of_harmful_situations).
neg(de_legalizing_marriage, control_of_unions).
neg(de_legalizing_marriage, benefit_to_society).

pos(marriage, benefits_of_marriage).
pos(marriage, legitimacy_of_a_marriage_license).
pos(marriage, government_intervention).
pos(marriage, government_knowledge_of_unions).
pos(marriage, medical_and_legal_outcomes).
pos(marriage, society_authorization).
pos(marriage, avoidance_of_harmful_situations).
pos(marriage, control_of_unions).
pos(de_legalizing_marriage, personal_unions).
pos(de_legalizing_marriage, open_bigamy).
pos(de_legalizing_marriage, polygamy).
pos(de_legalizing_marriage, unwarranted_marriages).
pos(de_legalizing_marriage, elders).
pos(de_legalizing_marriage, adults).

Section 2 - General relationships:

relation(de_legalizing_marriage, marriage).
relation(de_legalizing_marriage, personal_unions).
relation(de_legalizing_marriage, society).
relation(de_legalizing_marriage, government).
relation(de_legalizing_marriage, medical_and_legal_outcomes).
relation(de_legalizing_marriage, benefits_of_marriage).
relation(de_legalizing_marriage, legitimacy_of_a_marriage_license).
relation(de_legalizing_marriage, government_intervention).
relation(de_legalizing_marriage, government_knowledge_of_unions).
relation(de_legalizing_marriage, control_of_unions).
relation(de_legalizing_marriage, avoidance_of_harmful_situations).
relation(de_legalizing_marriage, open_bigamy).
relation(de_legalizing_marriage, polygamy).
relation(de_legalizing_marriage, unwarranted_marriages).
relation(de_legalizing_marriage, elders).
relation(de_legalizing_marriage, adults).

Section 3 - Encoding:

de_legalizing_marriage_is_good_because :- pos(de_legalizing_marriage, Y).
de_legalizing_marriage_is_bad_because :- neg(de_legalizing_marriage, Y).
compare(de_legalizing_marriage,X,Y) :- neg(de_legalizing_marriage,X),neg(Y,X), de_legalizing_marriage != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = de_legalizing_marriage.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(marching_band, sport).
neg(marching_band, fully_thought_out).
pos(marching_band, adjust).
pos(football_play, adjust).
pos(marching_band, correct_stepping_patterns).
pos(marching_band, remember_music).
pos(marching_band, adjust_to_those_around_you).
pos(marching_band, play_correct_notes).
pos(marching_band, competitive).
pos(marching_band, dci).
pos(marching_band, drum_corps_international).

Section 2 - General relationships:

relation(marching_band, football_play).
relation(marching_band, basketball).
relation(marching_band, football).

Section 3 - Encoding:

marching_band_is_sport_because :- pos(marching_band, sport).
marching_band_is_not_sport_because :- neg(marching_band, sport).
compare(marching_band,X,Y) :- neg(marching_band,X),neg(Y,X), marching_band != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = marching_band.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(schengen_area, free_movement_of_goods).
pos(schengen_area, free_movement_of_people).
pos(european_union, free_movement_of_goods).
pos(european_union, free_movement_of_people).
pos(schengen_agreement, free_movement_of_goods).
pos(schengen_agreement, free_movement_of_people).
pos(schengen_visa, free_movement_of_people).
pos(schengen_visa, non_members_of_the_european_union).
pos(schengen_visa, unimpeded_travel).
pos(european_union, free_movement_of_people).
pos(schengen_area, technical_disadvantages).

Section 2 - General relationships:

relation(schengen_area, free_movement_of_goods).
relation(schengen_area, free_movement_of_people).
relation(european_union, free_movement_of_goods).
relation(european_union, free_movement_of_people).
relation(schengen_agreement, free_movement_of_goods).
relation(schengen_agreement, free_movement_of_people).
relation(schengen_visa, free_movement_of_people).
relation(schengen_visa, non_members_of_the_european_union).
relation(schengen_visa, unimpeded_travel).
relation(european_union, free_movement_of_people).
relation(schengen_area, technical_disadvantages).

Section 3 - Encoding:

schengen_area_is_good_because :- pos(schengen_area, Y).
schengen_area_is_bad_because :- neg(schengen_area, Y).
compare(schengen_area,X,Y) :- neg(schengen_area,X),neg(Y,X), schengen_area != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = schengen_area.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(electoral_college, democracy).
neg(electoral_college, fair_representation).
pos(electoral_college, states_rights).
pos(abolish, fair_representation).
pos(abolish, democracy).
neg(abolish, states_rights).

Section 2 - General relationships:

relation(electoral_college, united_states).
relation(electoral_college, president).
relation(electoral_college, vice_president).
relation(electoral_college, constitution).
relation(abolish, electoral_college).
relation(abolish, constitution).

Section 3 - Encoding:

electoral_college_is_good_because :- pos(electoral_college, Y).
electoral_college_is_bad_because :- neg(electoral_college, Y).
abolish_is_good_because :- pos(abolish, Y).
abolish_is_bad_because :- neg(abolish, Y).
compare(electoral_college,X,Y) :- neg(electoral_college,X),neg(Y,X), electoral_college != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = electoral_college.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(abortion, accidental_pregnancy).
pos(abortion, rape).

Section 2 - General relationships:

relation(abortion, accidental_pregnancy).
relation(abortion, rape).
relation(abortion, woman).
relation(abortion, fetus).
relation(abortion, pregnancy).
relation(abortion, person).
relation(abortion, opponent).
relation(abortion, argument).
relation(abortion, basis).
relation(abortion, law).
relation(abortion, illegal).

Section 3 - Encoding:

abortion_is_good_because :- pos(abortion,Y).
abortion_is_bad_because :- neg(abortion,Y).
compare(abortion,X,Y) :- neg(abortion,X),neg(Y,X), abortion != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = abortion.
###DELIMITER###

###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(churches, america_children).
neg(churches, christmas).
neg(churches, children_safety).
neg(churches, children_lives).
neg(churches, children_beliefs).
neg(churches, children_feelings).
neg(parents, children_feelings).
neg(parents, children_beliefs).
neg(pastors, children_feelings).
neg(pastors, children_beliefs).
neg(priest, children_feelings).
neg(priest, children_beliefs).
neg(church_goer, children_feelings).
neg(church_goer, children_beliefs).

pos(churches, christmas).
pos(churches, children_beliefs).
pos(churches, children_feelings).
pos(parents, children_feelings).
pos(parents, children_beliefs).
pos(pastors, children_feelings).
pos(pastors, children_beliefs).
pos(priest, children_feelings).
pos(priest, children_beliefs).
pos(church_goer, children_feelings).
pos(church_goer, children_beliefs).

Section 2 - General relationships:

relation(churches, america).
relation(churches, children).
relation(churches, christmas).
relation(churches, children_safety).
relation(churches, children_lives).
relation(churches, children_beliefs).
relation(churches, children_feelings).
relation(parents, children).
relation(parents, children_feelings).
relation(parents, children_beliefs).
relation(pastors, children).
relation(pastors, children_feelings).
relation(pastors, children_beliefs).
relation(priest, children).
relation(priest, children_feelings).
relation(priest, children_beliefs).
relation(church_goer, children).
relation(church_goer, children_feelings).
relation(church_goer, children_beliefs).

Section 3 - Encoding:

churches_are_bad_because :- neg(churches,Y).
churches_are_good_because :- pos(churches,Y).
compare(churches,X,Y) :- neg(churches,X),neg(Y,X), churches != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = churches.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(student_passing_class, taking_final).
pos(student_passing_class, not_taking_final).
pos(student_not_passing_class, taking_final).
pos(passing_grade, not_taking_final).
neg(d_grade_student, good_grades).
pos(d_grade_student, passing_grades).
pos(a_b_student, good_grades).

Section 2 - General relationships:

relation(student_passing_class, taking_final).
relation(student_not_passing_class, taking_final).
relation(passing_grade, not_taking_final).
relation(d_grade_student, good_grades).
relation(d_grade_student, passing_grades).
relation(a_b_student, good_grades).

Section 3 - Encoding:

passing_student(X) :- relation(X, not_taking_final).
not_passing_student(X) :- relation(X, taking_final).
good_student(X) :- relation(X, good_grades).
bad_student(X) :- relation(X, not_good_grades).
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = X.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(less, more).
pos(fact, truth).
pos(fact, statement).
neg(less, quantity).
neg(fact, statistic).
neg(fact, partial_truth).

Section 2 - General relationships:

relation(workers, tyrants).
relation(argumentation, sources).
relation(spelling, grammar).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(fairness, affirmative).
pos(affirmative, burden_of_proof).
pos(debate, educational).
pos(debate, entertaining).
pos(bbc, legitimate_source).
pos(bbc, british).

neg(opponent, understanding).
neg(opponent, fairness).
neg(opponent, educational).
neg(opponent, entertaining).
neg(opponent, relevant).
neg(opponent, bbc).

Section 2 - General relationships:

relation(affirmative, burden_of_proof).
relation(debate, educational).
relation(debate, entertaining).
relation(opponent, fairness).
relation(opponent, educational).
relation(opponent, entertaining).
relation(opponent, relevant).
relation(opponent, bbc).
relation(bbc, legitimate_source).
relation(bbc, british).

Section 3 - Encoding:

fairness_is_good_because :- pos(fairness, Y).
fairness_is_bad_because :- neg(fairness, Y).
affirmative_is_good_because :- pos(affirmative, Y).
affirmative_is_bad_because :- neg(affirmative, Y).
debate_is_good_because :- pos(debate, Y).
debate_is_bad_because :- neg(debate, Y).
opponent_is_good_because :- pos(opponent, Y).
opponent_is_bad_because :- neg(opponent, Y).
bbc_is_good_because :- pos(bbc, Y).
bbc_is_bad_because :- neg(bbc, Y).
compare(fairness,X,Y) :- neg(fairness,X),neg(Y,X), fairness != Y.
compare(affirmative,X,Y) :- neg(affirmative,X),neg(affirmative,Z), Y != Z, Y = affirmative.
compare(debate,X,Y) :- neg(debate,X),neg(debate,Z), Y != Z, Y = debate.
compare(opponent,X,Y) :- neg(opponent,X),neg(Y,X), opponent != Y.
compare(bbc,X,Y) :- neg(bbc,X),neg(Y,X), bbc != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(moral_argument, god).
pos(evolution, morals).
pos(morals, emotion).
pos(emotion, brain).
pos(brain, experience).
pos(panic, save_kid).
pos(fear, save_kid).
pos(anxiety, save_kid).
pos(neanderthal_man, brain).
pos(morality, evolution).
pos(morality, brain).
pos(emotions, brain).
pos(emotions, evolution).

Section 2 - General relationships:

relation(moral_argument, god).
relation(evolution, morals).
relation(morals, emotion).
relation(emotion, brain).
relation(brain, experience).
relation(panic, save_kid).
relation(fear, save_kid).
relation(anxiety, save_kid).
relation(neanderthal_man, brain).
relation(morality, evolution).
relation(morality, brain).
relation(emotions, brain).
relation(emotions, evolution).

Section 3 - Encoding:

moral_argument_proves_god :- pos(moral_argument, god).
evolution_has_something_to_do_with_morals :- pos(evolution, morals).
morals_stem_from_emotion :- pos(morals, emotion).
emotion_stems_from_brain :- pos(emotion, brain).
brain_has_evolved_based_on_experience :- pos(brain, experience).
panic_comes_from_save_kid :- pos(panic, save_kid).
fear_comes_from_save_kid :- pos(fear, save_kid).
anxiety_comes_from_save_kid :- pos(anxiety, save_kid).
neanderthal_man_has_brain :- pos(neanderthal_man, brain).
morality_goes_hand_in_hand_with_evolution :- pos(morality, evolution).
morality_stems_from_brain :- pos(morality, brain).
emotions_stem_from_brain :- pos(emotions, brain).
emotions_have_developed_through_evolution :- pos(emotions, evolution).
compare(moral_argument,X,Y) :- neg(moral_argument,X),neg(Y,X), moral_argument != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = moral_argument.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(catholic_church, noncatholics).
neg(catholic_church, unbaptized_infants).
pos(bible, catholic_church).
pos(pope, catholic_church).
pos(peter, catholic_church).
pos(mary, catholic_church).
pos(jesus, catholic_church).

Section 2 - General relationships:

relation(catholic_church, noncatholics).
relation(catholic_church, unbaptized_infants).
relation(bible, catholic_church).
relation(pope, catholic_church).
relation(peter, catholic_church).
relation(mary, catholic_church).
relation(jesus, catholic_church).

Section 3 - Encoding:

catholic_church_is_bad_because :- neg(catholic_church,Y).
catholic_church_is_good_because :- pos(catholic_church,Y).
compare(catholic_church,X,Y) :- neg(catholic_church,X),neg(Y,X), catholic_church != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = catholic_church.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(opponent, comment_obligation_business).
pos(yraelz, quote).
pos(yraelz, rule_4).
pos(opponent, new_rule).
pos(opponent, round_2_logic).
pos(opponent, anger_issues).
pos(opponent, stated_rules).
pos(opponent, evidence).

neg(yraelz, appropriate_request).
neg(opponent, obeying_rule).
neg(opponent, added_rule).
neg(opponent, substantiated_argument).

Section 2 - General relationships:

relation(opponent, comment_obligation_business).
relation(yraelz, quote).
relation(yraelz, rule_4).
relation(opponent, new_rule).
relation(opponent, round_2_logic).
relation(opponent, anger_issues).
relation(opponent, stated_rules).
relation(opponent, evidence).

Section 3 - Encoding:

opponent_is_good_because :- pos(opponent,Y).
opponent_is_bad_because :- neg(opponent,Y).
compare(opponent,X,Y) :- neg(opponent,X),neg(Y,X), opponent != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = opponent.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(porsche_cayman, evidence).
neg(porsche_cayman, better_than_corvette).
pos(porsche_cayman, faster_through_corners).
pos(porsche_cayman, lighter).
neg(porsche_cayman, more_horsepower_than_subaru_wrx_sti).
pos(subaru_wrx_sti, more_horsepower_than_porsche_cayman).

Section 2 - General relationships:

relation(porsche_cayman, chevrolet_corvette).
relation(porsche_cayman, gt_ft_86).
relation(porsche_cayman, subaru_wrx_sti).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(thanos, wise).
pos(thanos, understand).
pos(thanos, nature).
pos(thanos, powerful).
pos(thanos, grief).
pos(thanos, overpopulation).
pos(india, understand).
pos(nature, boundaries).
pos(universe, die).
pos(universe, extinct).
pos(truth, harm).
pos(gamora, death).

neg(thanos, lie).
neg(thanos, change).
neg(thanos, wrath).
neg(thanos, full).
neg(thanos, half).
neg(thanos, time).
neg(thanos, sterile).

Section 2 - General relationships:

relation(thanos, nature).
relation(thanos, universe).
relation(thanos, truth).
relation(thanos, gamora).
relation(thanos, overpopulation).
relation(thanos, india).
relation(nature, boundaries).
relation(universe, die).
relation(universe, extinct).
relation(truth, harm).
relation(gamora, death).
relation(overpopulation, india).

Section 3 - Encoding:

thanos_is_good_because :- pos(thanos, Y).
thanos_is_bad_because :- neg(thanos, Y).
compare(thanos,X,Y) :- neg(thanos,X),neg(Y,X), thanos != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = thanos.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(gay, ok).
pos(gay, moral).
neg(gay, debaucherous).
neg(gay, unhealthy).

% Section 2 - General relationships
relation(gay, religion).
relation(gay, science).
relation(gay, morality).

% Section 3 - Encoding
gay_is_good_because :- pos(gay, Y).
gay_is_bad_because :- neg(gay, Y).
compare(gay,X,Y) :- neg(gay,X),neg(Y,X), gay != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gay.
```
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(mpaa_rating_system, sense).
pos(mpaa_rating_system, nameless_people).
pos(mpaa_rating_system, aspiring_filmmaker).
pos(mpaa_rating_system, horror_movie).
pos(mpaa_rating_system, tv_program).
pos(mpaa_rating_system, accountability).
pos(mpaa_rating_system, matrix).
neg(mpaa_rating_system, kung_fu).
neg(mpaa_rating_system, dark_knight_rises).
neg(mpaa_rating_system, punching).
neg(mpaa_rating_system, dragging).
neg(mpaa_rating_system, breaking).

% Section 2 - General relationships
relation(mpaa_rating_system, google_images).
relation(mpaa_rating_system, film).
relation(mpaa_rating_system, violence).
relation(mpaa_rating_system, nc_17).
relation(mpaa_rating_system, meatloaf).
relation(mpaa_rating_system, tv).
relation(mpaa_rating_system, ratings).
relation(mpaa_rating_system, sense).
relation(mpaa_rating_system, aspiring_filmmaker).
relation(mpaa_rating_system, horror_movie).
relation(mpaa_rating_system, tv_program).
relation(mpaa_rating_system, accountability).
relation(mpaa_rating_system, matrix).
relation(mpaa_rating_system, kung_fu).
relation(mpaa_rating_system, dark_knight_rises).
relation(mpaa_rating_system, punching).
relation(mpaa_rating_system, dragging).
relation(mpaa_rating_system, breaking).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(minecraft, good_graphics).
neg(minecraft, good_combat).
neg(minecraft, good_music).
neg(minecraft, good_atmosphere).
neg(minecraft, good_product).
neg(minecraft, good_updates).
neg(minecraft, good_merchandise).
neg(minecraft, good_handbooks).
neg(minecraft, good_school_game).

Section 2 - General relationships:

relation(minecraft, graphics).
relation(minecraft, combat).
relation(minecraft, music).
relation(minecraft, atmosphere).
relation(minecraft, product).
relation(minecraft, updates).
relation(minecraft, merchandise).
relation(minecraft, handbooks).
relation(minecraft, school).

Section 3 - Encoding:

minecraft_is_bad_because :- neg(minecraft,Y).
compare(minecraft,X,Y) :- neg(minecraft,X),neg(Y,X), minecraft != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(marijuana, hemp_products).
pos(hemp, paper).
pos(hemp, string).
pos(hemp, clothing).
pos(marijuana_legalization, hemp_production).
pos(hemp_production, more_producers).
pos(hemp_production, more_sellers).
pos(hemp_production, more_buyers).
pos(more_producers, good_economy).
pos(more_sellers, good_economy).
pos(more_buyers, good_economy).
pos(hemp_production, usa_production).
pos(usa_production, good_country).

Section 2 - General relationships:

relation(marijuana, hemp).
relation(marijuana, paper).
relation(marijuana, string).
relation(marijuana, clothing).
relation(marijuana_legalization, hemp_production).
relation(hemp_production, more_producers).
relation(hemp_production, more_sellers).
relation(hemp_production, more_buyers).
relation(more_producers, good_economy).
relation(more_sellers, good_economy).
relation(more_buyers, good_economy).
relation(hemp_production, usa_production).
relation(usa_production, good_country).

Section 3 - Encoding:

marijuana_is_good_because :- pos(marijuana,Y).
marijuana_is_bad_because :- neg(marijuana,Y).
compare(marijuana,X,Y) :- neg(marijuana,X),neg(Y,X), marijuana != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = marijuana.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(five_round_debates, three_round_debates).
pos(five_round_debates, three_round_debates).
neg(josh, five_round_debates).
neg(josh, three_round_debates).
neg(josh, me).
neg(josh, you).

Section 2 - General relationships:

relation(five_round_debates, three_round_debates).
relation(josh, five_round_debates).
relation(josh, three_round_debates).
relation(josh, me).
relation(josh, you).

Section 3 - Encoding:

five_round_debates_are_inferior_to_three_round_debates :- neg(five_round_debates, three_round_debates).
five_round_debates_are_equal_to_three_round_debates :- pos(five_round_debates, three_round_debates).
josh_can_vote_bomb_any_debate :- neg(josh, five_round_debates).
josh_can_vote_bomb_any_debate :- neg(josh, three_round_debates).
josh_can_vote_bomb_me :- neg(josh, me).
josh_can_vote_bomb_you :- neg(josh, you).
this_debate_will_be_vote_bombed_by_josh :- neg(josh, five_round_debates).
this_debate_will_be_vote_bombed_by_josh :- neg(josh, three_round_debates).
both_of_us_have_been_vote_bombed_by_josh :- neg(josh, me).
both_of_us_have_been_vote_bombed_by_josh :- neg(josh, you).
compare(five_round_debates, three_round_debates, josh) :- neg(five_round_debates, three_round_debates), neg(josh, three_round_debates), five_round_debates != josh.
compare(josh, five_round_debates, three_round_debates) :- neg(josh, five_round_debates), neg(josh, three_round_debates), five_round_debates != three_round_debates, three_round_debates = josh.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(britain, island).
neg(island, government).
neg(island, army).
neg(island, person).
neg(island, animal).
neg(island, crime).
neg(island, criminal).

Section 2 - General relationships:

relation(britain, island).
relation(island, government).
relation(island, army).
relation(island, person).
relation(island, animal).
relation(island, crime).
relation(island, criminal).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(death_penalty, punishment).
neg(death_penalty, ignorance).
pos(life_in_prison, punishment).
pos(life_in_prison, death_penalty).
pos(prisons, overcrowding).
neg(prisons, tax_dollars).

Section 2 - General relationships:

relation(death_penalty, ignorance).
relation(death_penalty, life_in_prison).
relation(death_penalty, prisons).
relation(death_penalty, tax_dollars).
relation(life_in_prison, prisons).
relation(life_in_prison, tax_dollars).
relation(prisons, tax_dollars).

Section 3 - Encoding:

death_penalty_is_good_because :- pos(death_penalty, Y).
death_penalty_is_bad_because :- neg(death_penalty, Y).
life_in_prison_is_good_because :- pos(life_in_prison, Y).
life_in_prison_is_bad_because :- neg(life_in_prison, Y).
compare(death_penalty, X, Y) :- neg(death_penalty, X), neg(Y, X), death_penalty != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = death_penalty.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(anti_venom, disease).
pos(anti_venom, cure).
pos(hulk, better).

Section 2 - General relationships:

relation(anti_venom, disease).
relation(anti_venom, cure).
relation(hulk, better).
relation(hulk, disease).

Section 3 - Encoding:

anti_venom_is_good_because :- pos(anti_venom,Y).
anti_venom_is_bad_because :- neg(anti_venom,Y).
hulk_is_good_because :- pos(hulk,Y).
hulk_is_bad_because :- neg(hulk,Y).
compare(anti_venom,X,Y) :- neg(anti_venom,X),neg(Y,X), anti_venom != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = anti_venom.
compare(hulk,X,Y) :- neg(hulk,X),neg(Y,X), hulk != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = hulk.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(kobe_bryant, good).
neg(kobe_bryant, better_than_wilt_chamberlain).
pos(wilt_chamberlain, domiance).
pos(wilt_chamberlain, legacy).
pos(michael_jordan, better_than_kobe_bryant).
pos(steve_nash, mvp).
pos(dirk_novinske, mvp).
pos(lebron_james, mvp).
pos(shaq, better_than_kobe_bryant).
pos(dwight_howard, good).

Section 2 - General relationships:

relation(kobe_bryant, wilt_chamberlain).
relation(kobe_bryant, michael_jordan).
relation(kobe_bryant, steve_nash).
relation(kobe_bryant, dirk_novinske).
relation(kobe_bryant, lebron_james).
relation(kobe_bryant, shaq).
relation(kobe_bryant, dwight_howard).

Section 3 - Encoding:

kobe_is_good_because :- pos(kobe_bryant, Y).
kobe_is_bad_because :- neg(kobe_bryant, Y).
compare(kobe_bryant,X,Y) :- neg(kobe_bryant,X),neg(Y,X), kobe_bryant != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = kobe_bryant.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(alternative_energy_research, ease_dependency_on_oil).
pos(alternative_energy_research, boost_economy).
pos(alternative_energy_research, reduce_pollutants).
pos(alternative_energy_research, save_money).

Section 2 - General relationships:

relation(alternative_energy_research, government_funding).
relation(alternative_energy_research, private_sector).
relation(government_funding, profit).
relation(government_funding, quick_solutions).
relation(government_funding, ends_goal).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(gambling, family).
neg(gambler, family).
neg(gambling, children).
neg(gambler, children).
pos(government, children).

Section 2 - General relationships:

relation(gambling, family).
relation(gambler, family).
relation(gambling, children).
relation(gambler, children).
relation(government, children).

Section 3 - Encoding:

gambling_is_bad_because :- neg(gambling,X).
gambling_is_good_because :- pos(gambling,X).
family_is_bad_because :- neg(family,X).
family_is_good_because :- pos(family,X).
children_are_bad_because :- neg(children,X).
children_are_good_because :- pos(children,X).
government_is_bad_because :- neg(government,X).
government_is_good_because :- pos(government,X).
compare(gambling,X,Y) :- neg(gambling,X),neg(Y,X), gambling != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gambling.
compare(family,X,Y) :- neg(family,X),neg(Y,X), family != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = family.
compare(children,X,Y) :- neg(children,X),neg(Y,X), children != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = children.
compare(government,X,Y) :- neg(government,X),neg(Y,X), government != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = government.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(opponent, response).
neg(opponent, discrimination_against_african_americans).
neg(speaker, discrimination_against_african_americans).
neg(speaker, support_for_nazi_party).
neg(speaker, belief_in_myth).
pos(speaker, belief_in_evolution).
neg(speaker, belief_in_some_races_being_smarter_than_others).
neg(speaker, support_for_science).
neg(speaker, belief_in_building_the_wall).
neg(speaker, belief_in_money_being_the_most_important).
neg(speaker, having_pictures_of_hitler_in_bedroom).
neg(speaker, belief_in_killing_terrorist_in_certain_circumstances).
neg(speaker, belief_in_ignorance_justifying_offense).

Section 2 - General relationships:

relation(speaker, opponent).
relation(speaker, african_americans).
relation(speaker, nazi_party).
relation(speaker, myth).
relation(speaker, evolution).
relation(speaker, races).
relation(speaker, science).
relation(speaker, wall).
relation(speaker, money).
relation(speaker, terrorist).
relation(speaker, ignorance).

Section 3 - Encoding:

opponent_is_good_because :- pos(opponent, Y).
opponent_is_bad_because :- neg(opponent, Y).
speaker_is_good_because :- pos(speaker, Y).
speaker_is_bad_because :- neg(speaker, Y).
compare(speaker,X,Y) :- neg(speaker,X),neg(Y,X), speaker != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = speaker.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(false_rape_charges, law).
neg(false_rape_charges, police).
pos(false_rape_charges, accuser).
pos(false_rape_charges, true_victims).

Section 2 - General relationships:

relation(false_rape_charges, police).
relation(false_rape_charges, accuser).
relation(false_rape_charges, true_victims).

Section 3 - Encoding:

false_rape_charges_is_good_because :- pos(false_rape_charges, Y).
false_rape_charges_is_bad_because :- neg(false_rape_charges, Y).
compare(false_rape_charges,X,Y) :- neg(false_rape_charges,X),neg(Y,X), false_rape_charges != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = false_rape_charges.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(black_panther, racism_towards_white_people).
pos(black_panther, rich_and_diverse_mix_of_cultures_from_african_origins).
pos(black_panther, variety_of_different_cultures).
neg(black_panther, ignorance_towards_other_varieties_of_cultures).
neg(black_panther, favorable_light_for_white_folks).
pos(black_panther, racially_inappropriate_things_to_the_white_people).

Section 2 - General relationships:

relation(black_panther, racism).
relation(black_panther, white_people).
relation(black_panther, african_american_people).
relation(black_panther, western_cultures).

Section 3 - Encoding:

racism_towards_white_people_is_bad :- neg(black_panther, racism_towards_white_people).
rich_and_diverse_mix_of_cultures_from_african_origins_is_good :- pos(black_panther, rich_and_diverse_mix_of_cultures_from_african_origins).
variety_of_different_cultures_is_good :- pos(black_panther, variety_of_different_cultures).
ignorance_towards_other_varieties_of_cultures_is_bad :- neg(black_panther, ignorance_towards_other_varieties_of_cultures).
favorable_light_for_white_folks_is_good :- pos(black_panther, favorable_light_for_white_folks).
racially_inappropriate_things_to_the_white_people_is_bad :- pos(black_panther, racially_inappropriate_things_to_the_white_people).

compare(black_panther, racism_towards_white_people, rich_and_diverse_mix_of_cultures_from_african_origins) :- neg(black_panther, racism_towards_white_people),neg(rich_and_diverse_mix_of_cultures_from_african_origins, racism_towards_white_people), racism_towards_white_people != rich_and_diverse_mix_of_cultures_from_african_origins, racism_towards_white_people = black_panther.
compare(black_panther, racism_towards_white_people, variety_of_different_cultures) :- neg(black_panther, racism_towards_white_people),neg(variety_of_different_cultures, racism_towards_white_people), racism_towards_white_people != variety_of_different_cultures, racism_towards_white_people = black_panther.
compare(black_panther, racism_towards_white_people, ignorance_towards_other_varieties_of_cultures) :- neg(black_panther, racism_towards_white_people),neg(ignorance_towards_other_varieties_of_cultures, racism_towards_white_people), racism_towards_white_people != ignorance_towards_other_varieties_of_cultures, racism_towards_white_people = black_panther.
compare(black_panther, racism_towards_white_people, favorable_light_for_white_folks) :- neg(black_panther, racism_towards_white_people),neg(favorable_light_for_white_folks, racism_towards_white_people), racism_towards_white_people != favorable_light_for_white_folks, racism_towards_white_people = black_panther.
compare(black_panther, racism_towards_white_people, racially_inappropriate_things_to_the_white_people) :- neg(black_panther, racism_towards_white_people),neg(racially_inappropriate_things_to_the_white_people, racism_towards_white_people), racism_towards_white_people != racially_inappropriate_things_to_the_white_people, racism_towards_white_people = black_panther.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(american_muscle, better).
neg(american_made_products, better_than_some_imports).
neg(american_made_products, cheaper_than_chinese_made_products).
neg(american_made_products, cheaper_than_products_with_cheaper_labor).
neg(american_made_products, better_quality_than_japanese_products).
neg(american_made_products, better_quality_than_german_products).
pos(american_made_products, better_quality_than_military_products).
neg(american_made_cars, better_than_japanese_cars).
neg(american_cars, good).
pos(japanese_car_companies, most_cars_on_the_road_after_20_years).
pos(toyota, japanese_car_companies).
pos(honda, japanese_car_companies).
pos(ferrari, luxury_cars).
pos(bugatti, luxury_cars).
pos(italy, ferrari).
pos(france, bugatti).

Section 2 - General relationships:

relation(american_muscle, modern_imports).
relation(american_made_products, imports).
relation(american_made_products, chinese_made_products).
relation(american_made_products, products_with_cheaper_labor).
relation(american_made_products, japanese_products).
relation(american_made_products, german_products).
relation(american_made_products, military_products).
relation(american_made_cars, japanese_cars).
relation(american_cars, countries).
relation(japanese_car_companies, cars_on_the_road_after_20_years).
relation(toyota, cars_on_the_road_after_20_years).
relation(honda, cars_on_the_road_after_20_years).
relation(ferrari, luxury_cars).
relation(bugatti, luxury_cars).
relation(italy, luxury_cars).
relation(france, luxury_cars).

Section 3 - Encoding:

american_muscle_is_better_because :- pos(american_muscle,Y).
american_muscle_is_worse_because :- neg(american_muscle,Y).
compare(american_muscle,X,Y) :- neg(american_muscle,X),neg(Y,X), american_muscle != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = american_muscle.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(my_pokemon_team, superior).
pos(my_pokemon_team, yours).
pos(my_pokemon_team, con).
pos(my_pokemon_team, pro).
pos(my_pokemon_team, round_1).
pos(my_pokemon_team, round_2).
pos(my_pokemon_team, round_3).
pos(my_pokemon_team, round_4).
pos(my_pokemon_team, acceptance).
pos(my_pokemon_team, naming).
pos(my_pokemon_team, arguments).
pos(my_pokemon_team, pokemon_showdown_battle).
pos(my_pokemon_team, closing_statements).
pos(my_pokemon_team, rules).

Section 2 - General relationships:

relation(my_pokemon_team, con).
relation(my_pokemon_team, pro).
relation(my_pokemon_team, round_1).
relation(my_pokemon_team, round_2).
relation(my_pokemon_team, round_3).
relation(my_pokemon_team, round_4).
relation(my_pokemon_team, acceptance).
relation(my_pokemon_team, naming).
relation(my_pokemon_team, arguments).
relation(my_pokemon_team, pokemon_showdown_battle).
relation(my_pokemon_team, closing_statements).
relation(my_pokemon_team, rules).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(lego_building_block_toy_brand, little_kids).
pos(nerf_blaster_toys, little_kids).
pos(lego_building_block_toy_brand, older_people).
pos(nerf_blaster_toys, older_people).
pos(lego_building_block_toy_brand, dioramas).
pos(lego_building_block_toy_brand, minifigures).
pos(nerf_blaster_toys, nerf_wars).
pos(nerf_blaster_toys, college_campuses).
pos(nerf_blaster_toys, specially_made_gear).

neg(lego_building_block_toy_brand, marketed_towards_children).

Section 2 - General relationships:

relation(lego_building_block_toy_brand, businesses).
relation(lego_building_block_toy_brand, diagrams).
relation(lego_building_block_toy_brand, tiny_structures).
relation(lego_building_block_toy_brand, store_walls).
relation(lego_building_block_toy_brand, lego_land).
relation(lego_building_block_toy_brand, dioramas).
relation(lego_building_block_toy_brand, minifigures).
relation(lego_building_block_toy_brand, green_base_plates).
relation(lego_building_block_toy_brand, older_people).
relation(nerf_blaster_toys, older_people).
relation(nerf_blaster_toys, nerf_wars).
relation(nerf_blaster_toys, college_campuses).
relation(nerf_blaster_toys, specially_made_gear).

Section 3 - Encoding:

lego_building_block_toy_brand_is_for_little_kids :- pos(lego_building_block_toy_brand, little_kids).
lego_building_block_toy_brand_is_not_for_little_kids :- neg(lego_building_block_toy_brand, little_kids).
older_people_use_lego_building_block_toy_brand :- pos(lego_building_block_toy_brand, older_people).
older_people_dont_use_lego_building_block_toy_brand :- neg(lego_building_block_toy_brand, older_people).
nerf_blaster_toys_are_for_little_kids :- pos(nerf_blaster_toys, little_kids).
nerf_blaster_toys_are_not_for_little_kids :- neg(nerf_blaster_toys, little_kids).
older_people_use_nerf_blaster_toys :- pos(nerf_blaster_toys, older_people).
older_people_dont_use_nerf_blaster_toys :- neg(nerf_blaster_toys, older_people).
compare(lego_building_block_toy_brand, nerf_blaster_toys, X) :- neg(lego_building_block_toy_brand, X), neg(nerf_blaster_toys, X), lego_building_block_toy_brand != nerf_blaster_toys.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = lego_building_block_toy_brand.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(smashing_tvs, fun).
pos(smashing_tvs, relieve_stress).
pos(smashing_tvs, boost_adrenaline).
pos(smashing_tvs, good_workout).
pos(smashing_tvs, prove_strength).
pos(poll, fun).

Section 2 - General relationships:

relation(smashing_tvs, injury).
relation(smashing_tvs, cost).
relation(smashing_tvs, stress).
relation(smashing_tvs, adrenaline).
relation(smashing_tvs, workout).
relation(smashing_tvs, strength).
relation(smashing_tvs, stupidity).
relation(smashing_tvs, fun).
relation(poll, fun).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(mount_everest, tourism_site).
pos(mount_everest, economy_of_china).
pos(mount_everest, economy_of_nepal).
pos(mount_everest, jobs).
pos(mount_everest, relations_between_countries).
neg(mount_everest, transportation).
neg(mount_everest, blockade).
neg(mount_everest, avalanche).
neg(mount_everest, stuck_people).

Section 2 - General relationships:

relation(mount_everest, tourism).
relation(mount_everest, economy).
relation(mount_everest, jobs).
relation(mount_everest, international_relations).
relation(mount_everest, transportation).
relation(mount_everest, himalayas).
relation(mount_everest, nepal).
relation(mount_everest, china).
relation(mount_everest, india).
relation(mount_everest, helicopter_travel).
relation(mount_everest, rescue).

Section 3 - Encoding:

mount_everest_is_good_because :- pos(mount_everest, Y).
mount_everest_is_bad_because :- neg(mount_everest, Y).
compare(mount_everest,X,Y) :- neg(mount_everest,X),neg(Y,X), mount_everest != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = mount_everest.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(abortion, morally_wrong).
neg(fetus, survive).
pos(humans, intrinsic_value).
pos(value, characteristics).
neg(species, relevance).
pos(rights, membership).
pos(traits, value).
pos(value, humans).
pos(value, characteristics).
neg(obligations, individuals).
pos(obligations, contract).
pos(contract, parents).
pos(child, contract).
pos(sex, contract).
neg(contract, existence).
neg(contract, consent).
pos(consent, sex).
pos(consent, possibility).
pos(consent, child).
pos(consent, removal).
pos(consent, action).
pos(consent, possibility).

Section 2 - General relationships:

relation(abortion, fetus).
relation(humans, value).
relation(rights, species).
relation(traits, value).
relation(obligations, individuals).
relation(obligations, contract).
relation(contract, parents).
relation(contract, child).
relation(sex, contract).
relation(consent, sex).
relation(consent, possibility).
relation(consent, child).
relation(consent, removal).
relation(consent, action).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(dr_alfred_sears_boat, boat).
pos(boat, transportation_device).
pos(boat, carrying_fish).
pos(boat, transport_logs).
pos(boat, major_cities_canada).
pos(boat, united_states).
pos(boat, mexico).
pos(boat, divine_influence).
pos(boat, hand).
pos(boat, pancreas).
pos(dr_alfred_sears_boat, judaism).
pos(boat, stuffed_toys).
pos(boat, human_like).
pos(greeks, boat).
pos(boat, transport_drugs).
pos(boat, native_americans).
pos(boat, supreme_contests_skill).
pos(boat, bullseye).
pos(boat, vegetable_photographer_of_the_year).
pos(boat, prize).
pos(boat, tradition).
pos(boat, kneecapping).
pos(boat, maritime_aids).
pos(cristo_redentor, rio_de_janeiro).

neg(boat, divine_influence).
neg(boat, hand).
neg(boat, pancreas).
neg(dr_alfred_sears_boat, boat).
neg(boat, transport_logs).
neg(boat, major_cities_canada).
neg(boat, united_states).
neg(boat, mexico).
neg(boat, judaism).
neg(boat, stuffed_toys).
neg(boat, human_like).
neg(boat, supreme_contests_skill).
neg(boat, bullseye).
neg(boat, vegetable_photographer_of_the_year).
neg(boat, prize).
neg(boat, tradition).
neg(boat, kneecapping).
neg(boat, maritime_aids).
neg(cristo_redentor, rio_de_janeiro).

Section 2 - General relationships:

relation(dr_alfred_sears_boat, boat).
relation(boat, transportation_device).
relation(boat, carrying_fish).
relation(boat, transport_logs).
relation(boat, major_cities_canada).
relation(boat, united_states).
relation(boat, mexico).
relation(boat, divine_influence).
relation(boat, hand).
relation(boat, pancreas).
relation(dr_alfred_sears_boat, judaism).
relation(boat, stuffed_toys).
relation(boat, human_like).
relation(greeks, boat).
relation(boat, transport_drugs).
relation(boat, native_americans).
relation(boat, supreme_contests_skill).
relation(boat, bullseye).
relation(boat, vegetable_photographer_of_the_year).
relation(boat, prize).
relation(boat, tradition).
relation(boat, kneecapping).
relation(boat, maritime_aids).
relation(cristo_redentor, rio_de_janeiro).

Section 3 - Encoding:

boat_is_good_because :- pos(boat,Y).
boat_is_bad_because :- neg(boat,Y).
compare(boat,X,Y) :- neg(boat,X),neg(Y,X), boat != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = boat.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(abstinence, value).
pos(comprehensive_sex_ed, value).
pos(barack_obama, comprehensive_approach).
pos(barack_obama, abstinence).
pos(barack_obama, sacredness_of_sexuality).
pos(barack_obama, good_medical_care).
pos(barack_obama, age_appropriate_education).
pos(barack_obama, contraception).

% Section 2 - General relationships
relation(abstinence, comprehensive_sex_ed).
relation(barack_obama, abstinence).
relation(barack_obama, sacredness_of_sexuality).
relation(barack_obama, good_medical_care).
relation(barack_obama, age_appropriate_education).
relation(barack_obama, contraception).

% Section 3 - Encoding
abstinence_is_good_because :- pos(abstinence, Y).
abstinence_is_bad_because :- neg(abstinence, Y).
compare(abstinence,X,Y) :- neg(abstinence,X),neg(Y,X), abstinence != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = abstinence.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(primaries, debates).
pos(debates, candidates).
pos(candidates, both_parties).
pos(presidential_debates, candidates).
pos(candidates, both_parties).
pos(candidates, same_party).
pos(candidates, trust).
pos(candidates, opinions).
pos(candidates, beliefs).
pos(candidates, variety).
pos(candidates, perspectives).
pos(candidates, ideas).
pos(debate, nominees).
pos(nominees, both_parties).
pos(nominees, ideas).
pos(nominees, running_members).
pos(nominees, debate_strategy).
pos(debates, nominees).
pos(nominees, ideas).
pos(nominees, competitors).
pos(nominees, party).
pos(debates, smaller_debates).
pos(debates, parties).
pos(nominees, focus).
pos(nominees, ideas).
pos(nominees, competitors).
pos(nominees, party).
pos(polls, change).
pos(candidates, lesser_polling).
pos(candidates, higher_polling).
pos(candidates, debates).
pos(debates, one_political_party).
pos(candidates, lesser_polling).
pos(candidates, prove_themselves).
pos(candidates, overtake).
pos(candidates, better_polling).
pos(debates, limited).
pos(debates, one_political_party).
pos(debates, parties).
pos(debates, higher_polling).
pos(debates, popular_news_channels).
pos(debates, single_party_debates).
pos(debates, ignored).
pos(debates, shows).
pos(shows, higher_polling).
pos(candidates, both_parties).
pos(debates, inter_party).
pos(debates, allowed).
pos(candidates, not_doing_as_well).
pos(debates, presidential).
pos(debates, single_party).
pos(debates, lower_polling).
pos(debates, serious_disadvantage).
pos(beliefs, parties).
pos(beliefs, ideals).
pos(beliefs, political_stature).
pos(voters, confusion).
pos(statements, false).
pos(debates, houses).
pos(debates, orderly_fashion).
pos(debates, parties).
pos(debates, interesting).
pos(debates, news_channel_views).
pos(america, true_goals).
pos(debates, presidential_election).
pos(debates, houses).
pos(debates, orderly_fashion).

neg(debates, candidates).
neg(candidates, both_parties).
neg(presidential_debates, candidates).
neg(candidates, both_parties).
neg(candidates, same_party).
neg(candidates, trust).
neg(candidates, opinions).
neg(candidates, beliefs).
neg(candidates, variety).
neg(candidates, perspectives).
neg(candidates, ideas).
neg(debate, nominees).
neg(nominees, both_parties).
neg(nominees, ideas).
neg(nominees, running_members).
neg(nominees, debate_strategy).
neg(debates, nominees).
neg(nominees, ideas).
neg(nominees, competitors).
neg(nominees, party).
neg(debates, smaller_debates).
neg(debates, parties).
neg(nominees, focus).
neg(nominees, ideas).
neg(nominees, competitors).
neg(nominees, party).
neg(polls, change).
neg(candidates, lesser_polling).
neg(candidates, higher_polling).
neg(candidates, debates).
neg(debates, one_political_party).
neg(candidates, lesser_polling).
neg(candidates, prove_themselves).
neg(candidates, overtake).
neg(candidates, better_polling).
neg(debates, limited).
neg(debates, one_political_party).
neg(debates, parties).
neg(debates, higher_polling).
neg(debates, popular_news_channels).
neg(debates, single_party_debates).
neg(debates, ignored).
neg(debates, shows).
neg(shows, higher_polling).
neg(candidates, both_parties).
neg(debates, inter_party).
neg(debates, allowed).
neg(candidates, not_doing_as_well).
neg(debates, presidential).
neg(debates, single_party).
neg(debates, lower_polling).
neg(debates, serious_disadvantage).
neg(beliefs, parties).
neg(beliefs, ideals).
neg(beliefs, political_stature).
neg(voters, confusion).
neg(statements, false).
neg(debates, houses).
neg(debates, orderly_fashion).
neg(debates, parties).
neg(debates, interesting).
neg(debates, news_channel_views).
neg(america, true_goals).
neg(debates, presidential_election).
neg(debates, houses).
neg(debates, orderly_fashion).

Section 2 - General relationships:

relation(debates, primaries).
relation(candidates, debates).
relation(presidential_debates, candidates).
relation(candidates, both_parties).
relation(candidates, same_party).
relation(candidates, trust).
relation(candidates, opinions).
relation(candidates, beliefs).
relation(candidates, variety).
relation(candidates, perspectives).
relation(candidates, ideas).
relation(debate, nominees).
relation(nominees, both_parties).
relation(nominees, ideas).
relation(nominees, running_members).
relation(nominees, debate_strategy).
relation(debates, nominees).
relation(nominees, ideas).
relation(nominees, competitors).
relation(nominees, party).
relation(debates, smaller_debates).
relation(debates, parties).
relation(nominees, focus).
relation(nominees, ideas).
relation(nominees, competitors).
relation(nominees, party).
relation(polls, change).
relation(candidates, lesser_polling).
relation(candidates, higher_polling).
relation(candidates, debates).
relation(debates, one_political_party).
relation(candidates, lesser_polling).
relation(candidates, prove_themselves).
relation(candidates, overtake).
relation(candidates, better_polling).
relation(debates, limited).
relation(debates, one_political_party).
relation(debates, parties).
relation(debates, higher_polling).
relation(debates, popular_news_channels).
relation(debates, single_party_debates).
relation(debates, ignored).
relation(debates, shows).
relation(shows, higher_polling).
relation(candidates, both_parties).
relation(debates, inter_party).
relation(debates, allowed).
relation(candidates, not_doing_as_well).
relation(debates, presidential).
relation(debates, single_party).
relation(debates, lower_polling).
relation(debates, serious_disadvantage).
relation(beliefs, parties).
relation(beliefs, ideals).
relation(beliefs, political_stature).
relation(voters, confusion).
relation(statements, false).
relation(debates, houses).
relation(debates, orderly_fashion).
relation(debates, parties).
relation(debates, interesting).
relation(debates, news_channel_views).
relation(america, true_goals).
relation(debates, presidential_election).
relation(debates, houses).
relation(debates, orderly_fashion).

Section 3 - Encoding:

elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(advertisment, children).
pos(parent, guide).
pos(advertisment, demand).
pos(advertisment, attract).
pos(job, control).
pos(advertisment, spend).
pos(fruit, nutrient).
neg(junk_food, nutrient).
neg(advertisment, healthy).

Section 2 - General relationships:

relation(advertisment, children).
relation(parent, children).
relation(advertisment, product).
relation(parent, job).
relation(advertisment, spend).
relation(fruit, children).
relation(junk_food, advertisment).

Section 3 - Encoding:

parent_is_good_because :- pos(parent, Y).
parent_is_bad_because :- neg(parent, Y).
advertisment_is_good_because :- pos(advertisment, Y).
advertisment_is_bad_because :- neg(advertisment, Y).
compare(advertisment,X,Y) :- neg(advertisment,X),neg(Y,X), advertisment != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = advertisment.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(islam, religion_of_peace).
pos(islam, religious_minorities).
pos(islam, abolitionist).
pos(muhammad, abolitionist).
pos(quran, sura_109).

Section 2 - General relationships:

relation(islam, religion).
relation(islam, religious_minorities).
relation(islam, slavery).
relation(islam, muhammad).
relation(islam, quran).
relation(muhammad, islam).
relation(quran, islam).

Section 3 - Encoding:

islam_is_good_because :- pos(islam,Y).
islam_is_bad_because :- neg(islam,Y).
compare(islam,X,Y) :- neg(islam,X),neg(Y,X), islam != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = islam.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(libertarians, gun_control).
neg(libertarians, victimless_crimes).
pos(prostitutes, std_testing).
pos(prostitutes, std_free).
neg(illegal_activities, violence).
pos(amsterdam, victimless_crimes).
pos(amsterdam, violent_crimes).
pos(uk, violent_crimes).
pos(government, tax_revenue).
neg(government, lives).

Section 2 - General relationships:

relation(libertarians, crime).
relation(prostitution, std).
relation(victimless_crimes, violent_crimes).
relation(amsterdam, violent_crimes).
relation(uk, violent_crimes).
relation(government, money).

Section 3 - Encoding:

libertarians_are_right_because :- pos(libertarians, X).
libertarians_are_wrong_because :- neg(libertarians, X).
compare(libertarians,X,Y) :- neg(libertarians,X),neg(Y,X), libertarians != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = libertarians.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(parents, teens_getting_tattoos).
pos(parents, free_will).
pos(teens, getting_tattoos).

Section 2 - General relationships:

relation(teens, parents).
relation(parents, money).
relation(teens, tattoos).
relation(parents, free_will).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(making_own_sandwich, aids).
neg(making_own_sandwich, scrotum_itch).
pos(dirty, hands).
pos(bacteria, hands).
pos(germ, hands).
pos(risk, making_own_sandwich).
neg(risk, others_making_sandwich).
pos(disease, restaurants).
neg(disease, making_own_sandwich).
pos(threat, roundhouse_kick).
pos(disease, roundhouse_kick).
neg(making_own_sandwich, threat).

Section 2 - General relationships:

relation(making_own_sandwich, aids).
relation(making_own_sandwich, scrotum_itch).
relation(hands, bacteria).
relation(germ, hands).
relation(risk, making_own_sandwich).
relation(risk, others_making_sandwich).
relation(disease, restaurants).
relation(disease, making_own_sandwich).
relation(threat, roundhouse_kick).
relation(making_own_sandwich, threat).

Section 3 - Encoding:

neg(making_own_sandwich, X) :- relation(making_own_sandwich, Y), neg(Y, X).
neg(making_own_sandwich, X) :- neg(Y, X), neg(making_own_sandwich, Y).
pos(making_own_sandwich, X) :- relation(making_own_sandwich, Y), pos(Y, X).
pos(making_own_sandwich, X) :- pos(Y, X), pos(making_own_sandwich, Y).
compare(making_own_sandwich, X, Y) :- neg(making_own_sandwich, X), neg(Y, X), making_own_sandwich != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = making_own_sandwich.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(hades, powerful_olympian).
pos(hades, control_over_tartarus).
pos(hades, helm_shows_opponents_most_hated_fear).
pos(hades, makes_him_invisible).
pos(hades, no_body_can_hear_or_feel).
pos(hades, control_of_world_largest_population).
pos(hades, dead).
pos(zeus, popular).
pos(zeus, lighting_bolt).

% Section 2 - General relationships
relation(hades, tartarus).
relation(hades, titans).
relation(hades, giant).
relation(hades, gaea).
relation(hades, typhoon).
relation(hades, zeus).

% Section 3 - Encoding
elon_is_good_because :- pos(hades, Y).
elon_is_bad_because :- neg(hades, Y).
compare(hades,X,Y) :- neg(hades,X),neg(Y,X), hades != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = hades.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(one_world_language, con).
pos(english, one_world_language).

Section 2 - General relationships:

relation(english, one_world_language).
relation(con, debate).
relation(con, resolution).
relation(con, facts).
relation(con, reasoning).
relation(con, accusations).
relation(con, head).
relation(con, site).
relation(me, resolution).
relation(me, facts).
relation(me, data).

Section 3 - Encoding:

one_world_language_is_good_because :- pos(one_world_language,Y).
one_world_language_is_bad_because :- neg(one_world_language,Y).
compare(one_world_language,X,Y) :- neg(one_world_language,X),neg(Y,X), one_world_language != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = one_world_language.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(logical_debates, possible).
neg(pros_round_2_post, black_and_white).
pos(arguments, logical_answer).
pos(people, flawless_logic).
pos(people, different_opinions).
pos(debate, pursuit_of_truth).
pos(debate, find_best_results).
pos(debate, preferred_by_audience).
pos(debate, preferred_by_debaters).
pos(sides, reasonable_arguments).
pos(debate, purely_logical).
pos(winner, subjective).

Section 2 - General relationships:

relation(logical_debates, pros_round_2_post).
relation(arguments, logical_answer).
relation(people, flawless_logic).
relation(people, different_opinions).
relation(debate, pursuit_of_truth).
relation(debate, find_best_results).
relation(debate, preferred_by_audience).
relation(debate, preferred_by_debaters).
relation(sides, reasonable_arguments).
relation(debate, purely_logical).
relation(winner, subjective).

Section 3 - Encoding:

logical_debates_are_possible :- pos(logical_debates, possible).
logical_debates_are_impossible :- neg(logical_debates, possible).
pros_round_2_post_is_black_and_white :- pos(pros_round_2_post, black_and_white).
pros_round_2_post_is_not_black_and_white :- neg(pros_round_2_post, black_and_white).
arguments_have_logical_answer :- pos(arguments, logical_answer).
arguments_dont_have_logical_answer :- neg(arguments, logical_answer).
people_can_use_flawless_logic :- pos(people, flawless_logic).
people_cannot_use_flawless_logic :- neg(people, flawless_logic).
people_can_have_different_opinions :- pos(people, different_opinions).
people_cannot_have_different_opinions :- neg(people, different_opinions).
debate_is_pursuit_of_truth :- pos(debate, pursuit_of_truth).
debate_is_not_pursuit_of_truth :- neg(debate, pursuit_of_truth).
debate_is_find_best_results :- pos(debate, find_best_results).
debate_is_not_find_best_results :- neg(debate, find_best_results).
debate_is_preferred_by_audience :- pos(debate, preferred_by_audience).
debate_is_not_preferred_by_audience :- neg(debate, preferred_by_audience).
debate_is_preferred_by_debaters :- pos(debate, preferred_by_debaters).
debate_is_not_preferred_by_debaters :- neg(debate, preferred_by_debaters).
sides_propose_reasonable_arguments :- pos(sides, reasonable_arguments).
sides_dont_propose_reasonable_arguments :- neg(sides, reasonable_arguments).
debate_can_be_purely_logical :- pos(debate, purely_logical).
debate_cannot_be_purely_logical :- neg(debate, purely_logical).
winner_is_subjective :- pos(winner, subjective).
winner_is_not_subjective :- neg(winner, subjective).
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = X.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(romanov_line, innocent_of_crimes).
pos(romanov_line, naive_to_russian_revolution_of_1917).
neg(bolshevik_firing_squad, justice).
neg(prince_alexi, crimes_parents_were_charged_with).
neg(princess_anastasia, crimes_parents_were_charged_with).
neg(princess_tatiana, crimes_parents_were_charged_with).
neg(princess_olga, crimes_parents_were_charged_with).
neg(princess_maria, crimes_parents_were_charged_with).
pos(romanov_line, innocent_children).
neg(romanov_line, fair_trial).
neg(romanov_line, adequate_lawyers).
neg(romanov_line, fair_judge).

Section 2 - General relationships:

relation(romanov_line, russian_revolution_of_1917).
relation(romanov_line, bolshevik_firing_squad).
relation(prince_alexi, parents).
relation(princess_anastasia, parents).
relation(princess_tatiana, parents).
relation(princess_olga, parents).
relation(princess_maria, parents).
relation(romanov_line, czar_nicholas_ii).
relation(romanov_line, criminal_court).

Section 3 - Encoding:

innocent_of_crimes(X) :- neg(X, crimes_parents_were_charged_with).
naive_to_russian_revolution_of_1917(X) :- pos(X, naive_to_russian_revolution_of_1917).
innocent_children(X) :- neg(X, crimes_parents_were_charged_with).
unfair_trial(X) :- neg(X, fair_trial).
inadequate_lawyers(X) :- neg(X, adequate_lawyers).
unfair_judge(X) :- neg(X, fair_judge).
compare(romanov_line,X,Y) :- neg(romanov_line,X),neg(Y,X), romanov_line != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = romanov_line.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(united_states, syrian_refugees).
neg(united_states, safezone_in_syria).
pos(dying, poor_family_in_syria).
pos(poor_family_in_syria, free_country).
pos(poor_family_in_syria, help).
pos(united_states, core_principles).
pos(united_states, basic_values).
pos(humanity, compassion).
pos(humanity, freedom).

Section 2 - General relationships:

relation(united_states, syrian_refugees).
relation(united_states, safezone_in_syria).
relation(poor_family_in_syria, free_country).
relation(poor_family_in_syria, help).
relation(united_states, core_principles).
relation(united_states, basic_values).
relation(humanity, compassion).
relation(humanity, freedom).

Section 3 - Encoding:

united_states_should_accept_syrian_refugees :- pos(united_states, syrian_refugees).
united_states_should_not_accept_syrian_refugees :- neg(united_states, syrian_refugees).
safezone_in_syria_is_more_difficult_than_letting_people_in :- neg(united_states, safezone_in_syria).
safezone_in_syria_is_not_more_difficult_than_letting_people_in :- pos(united_states, safezone_in_syria).
compare(united_states, syrian_refugees, safezone_in_syria) :- neg(united_states, syrian_refugees),neg(united_states, safezone_in_syria), syrian_refugees != safezone_in_syria.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(jesus, god).
neg(jesus, god).

Section 2 - General relationships:

relation(jesus, god).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(debate_org, individuals_not_here_to_debate).
neg(individuals_not_here_to_debate, qualified_to_judge_debate).
neg(individuals_not_here_to_debate, willing_to_put_effort_into_reading_debate).
neg(individuals_not_here_to_debate, able_to_judge_debate_unbiasedly).
neg(individuals_not_here_to_debate, interested_in_debating).
neg(individuals_not_here_to_debate, interested_in_intellectual_discussion).
neg(individuals_not_here_to_debate, able_to_vote).
neg(meaningless_debates, debates).
neg(meaningless_debates, intellectual_discussions).
neg(meaningless_debates, allowed_to_bypass_system).
neg(meaningless_debates, allowed_to_vote).

pos(debate_org, quality).
pos(debate_org, individuals_interested_in_debating).
pos(debate_org, individuals_interested_in_intellectual_discussion).
pos(debate_org, individuals_able_to_vote).
pos(debates, intellectual_discussions).

% Section 2 - General relationships
relation(debate_org, individuals_not_here_to_debate).
relation(individuals_not_here_to_debate, qualified_to_judge_debate).
relation(individuals_not_here_to_debate, willing_to_put_effort_into_reading_debate).
relation(individuals_not_here_to_debate, able_to_judge_debate_unbiasedly).
relation(individuals_not_here_to_debate, interested_in_debating).
relation(individuals_not_here_to_debate, interested_in_intellectual_discussion).
relation(individuals_not_here_to_debate, able_to_vote).
relation(meaningless_debates, debates).
relation(meaningless_debates, intellectual_discussions).
relation(meaningless_debates, allowed_to_bypass_system).
relation(meaningless_debates, allowed_to_vote).

% Section 3 - Encoding
debate_org_is_good_because :- pos(debate_org, Y).
debate_org_is_bad_because :- neg(debate_org, Y).
compare(debate_org,X,Y) :- neg(debate_org,X),neg(Y,X), debate_org != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = debate_org.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(society, celebrity).
neg(society, common_sense).

Section 2 - General relationships:

relation(society, celebrity).
relation(society, common_sense).
relation(celebrity, opinion).
relation(philosopher, opinion).
relation(philosopher, celebrity).
relation(ken_ham, opinion).
relation(ken_ham, celebrity).
relation(apologist, opinion).
relation(apologist, celebrity).

Section 3 - Encoding:

society_is_celebrity_driven :- pos(society, celebrity).
society_is_common_sense_driven :- pos(society, common_sense).
celebrity_influences_opinion :- relation(celebrity, opinion).
philosopher_influences_opinion :- relation(philosopher, opinion).
ken_ham_confirms_beliefs :- relation(ken_ham, opinion).
apologist_confirms_beliefs :- relation(apologist, opinion).
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(daleks, scary).
neg(daleks, traditions).
pos(slitheen, scary).
pos(slitheen, traditions).
pos(cybermen, scary).
pos(cybermen, traditions).

Section 2 - General relationships:

relation(daleks, doctor_who).
relation(slitheen, doctor_who).
relation(cybermen, doctor_who).

Section 3 - Encoding:

daleks_are_not_scary_because :- neg(daleks, scary).
daleks_are_not_traditional_because :- neg(daleks, traditions).
slitheen_are_scary_because :- pos(slitheen, scary).
slitheen_are_traditional_because :- pos(slitheen, traditions).
cybermen_are_scary_because :- pos(cybermen, scary).
cybermen_are_traditional_because :- pos(cybermen, traditions).
compare(daleks, slitheen, cybermen) :- neg(daleks, scary), neg(daleks, traditions), pos(slitheen, scary), pos(slitheen, traditions), pos(cybermen, scary), pos(cybermen, traditions).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(morality, survival_instinct).
pos(laws, survival_instinct).
pos(revenge, morality).
pos(morality, common_sense).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(morality, objective_morality).
pos(morality, subjective_morality).
pos(morality, laws).
pos(morality, natural_selection).
pos(morality, punishment).
pos(morality, selfishness).
pos(morality, revenge).
pos(morality, laws).
pos(morality, god).
pos(
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(protesting_at_funerals, human_liberty).
neg(protesting_at_funerals, morality).

Section 2 - General relationships:

relation(protesting_at_funerals, human_liberty).
relation(protesting_at_funerals, morality).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(freak_show, affordable_entertainment).
pos(freak_show, valuable_employment_opportunities).
pos(freak_show, obese).

Section 2 - General relationships:

relation(freak_show, masses).
relation(freak_show, savages).
relation(freak_show, gays).
relation(freak_show, ladyboys).
relation(freak_show, jews).
relation(freak_show, cripples).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(nikola_tesla, useful_inventions).
pos(nikola_tesla, alternating_current).
pos(nikola_tesla, x_rays).
pos(nikola_tesla, wireless_communication).
pos(nikola_tesla, robotics).
pos(nikola_tesla, remote_control).
pos(nikola_tesla, radio).
pos(nikola_tesla, florescent_light_bulb).
pos(nikola_tesla, electric_motor).
pos(nikola_tesla, limitless_free_energy).
pos(nikola_tesla, lasers).
pos(nikola_tesla, alternating_current).
pos(nikola_tesla, energy_tower).
pos(nikola_tesla, contractor).
pos(nikola_tesla, alternating_current).
pos(nikola_tesla, direct_current).
pos(nikola_tesla, environment).
pos(nikola_tesla, inch_thick_wires).
pos(nikola_tesla, thin_poles).
pos(nikola_tesla, american_joke).
pos(nikola_tesla, american).
pos(nikola_tesla, $50,000).
pos(nikola_tesla, $1_million).
pos(nikola_tesla, dc_generators).
pos(nikola_tesla, long_hours).
pos(nikola_tesla, several_months).
pos(nikola_tesla, edison).
pos(nikola_tesla, important_inventions).
pos(nikola_tesla, bad_person).
pos(nikola_tesla, pro).

neg(thomas_edison, useful_inventions).
neg(thomas_edison, alternating_current).
neg(thomas_edison, x_rays).
neg(thomas_edison, wireless_communication).
neg(thomas_edison, robotics).
neg(thomas_edison, remote_control).
neg(thomas_edison, radio).
neg(thomas_edison, florescent_light_bulb).
neg(thomas_edison, electric_motor).
neg(thomas_edison, limitless_free_energy).
neg(thomas_edison, lasers).
neg(thomas_edison, alternating_current).
neg(thomas_edison, energy_tower).
neg(thomas_edison, contractor).
neg(thomas_edison, alternating_current).
neg(thomas_edison, direct_current).
neg(thomas_edison, environment).
neg(thomas_edison, inch_thick_wires).
neg(thomas_edison, thin_poles).
neg(thomas_edison, american_joke).
neg(thomas_edison, american).
neg(thomas_edison, $50,000).
neg(thomas_edison, $1_million).
neg(thomas_edison, dc_generators).
neg(thomas_edison, long_hours).
neg(thomas_edison, several_months).
neg(thomas_edison, ni
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(breathing, sustains_life).
neg(breathing, drowning).
neg(breathing, poisonous_gas).
neg(breathing, hyperventilation).

Section 2 - General relationships:

relation(breathing, drowning).
relation(breathing, poisonous_gas).
relation(breathing, hyperventilation).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(breathing,X,Y) :- neg(breathing,X),neg(Y,X), breathing != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = breathing.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(utilitarianism, greatest_good).
pos(utilitarianism, least_pain).
pos(deontology, ends_dont_justify_means).
neg(deontology, ends_justify_means).
pos(categorical_imperative, universal_law).
pos(categorical_imperative, contradiction).
pos(consequentialism, ends_justify_means).
neg(consequentialism, ends_dont_justify_means).

% Section 2 - General relationships
relation(utilitarianism, consequentialism).
relation(deontology, categorical_imperative).
relation(ends_justify_means, consequentialism).
relation(ends_dont_justify_means, deontology).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(woman, creation_of_god).
pos(man, creation_of_god).
pos(woman, admirable).
pos(woman, respectable).
pos(mother, female).
neg(woman, disrespectful).
neg(woman, sleeps_around).

Section 2 - General relationships:

relation(woman, man).
relation(woman, family).
relation(woman, money).
relation(woman, food).
relation(woman, mother).
relation(woman, creation_of_god).
relation(woman, admirable).
relation(woman, respectable).
relation(woman, sleeps_around).

Section 3 - Encoding:

woman_is_good_because :- pos(woman, Y).
woman_is_bad_because :- neg(woman, Y).
compare(woman,X,Y) :- neg(woman,X),neg(Y,X), woman != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = woman.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(brotherhood, cucks).
pos(william_wallace, freedom).

% Section 2 - General relationships
relation(brotherhood, con).
relation(william_wallace, con).
relation(william_wallace, english).
relation(william_wallace, countrymen).
relation(william_wallace, tyranny).
relation(william_wallace, freedom).

% Section 3 - Encoding
william_wallace_is_good_because :- pos(william_wallace, Y).
william_wallace_is_bad_because :- neg(william_wallace, Y).
compare(william_wallace,X,Y) :- neg(william_wallace,X),neg(Y,X), william_wallace != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = william_wallace.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(wind_energy, emerging_storage_technologies).
pos(plug_in_hybrid_vehicles, emerging_storage_technologies).
pos(natural_gas, bad_idea).
pos(vehicles, bad_idea).

neg(wind_energy, intermittent_resource).
neg(natural_gas, power_plants).

Section 2 - General relationships:

relation(wind_energy, intermittent_resource).
relation(wind_energy, emerging_storage_technologies).
relation(plug_in_hybrid_vehicles, emerging_storage_technologies).
relation(plug_in_hybrid_vehicles, vehicles).
relation(natural_gas, vehicles).
relation(natural_gas, power_plants).

Section 3 - Encoding:

wind_energy_is_good_because :- pos(wind_energy,Y).
wind_energy_is_bad_because :- neg(wind_energy,Y).
compare(wind_energy,X,Y) :- neg(wind_energy,X),neg(Y,X), wind_energy != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = wind_energy.

natural_gas_is_good_because :- pos(natural_gas,Y).
natural_gas_is_bad_because :- neg(natural_gas,Y).
compare(natural_gas,X,Y) :- neg(natural_gas,X),neg(Y,X), natural_gas != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = natural_gas.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(people, prejudice).
pos(people, nature).
pos(prejudice, unfair_feeling).
pos(prejudice, dislike).
pos(prejudice, person).
pos(prejudice, group).
pos(prejudice, race).
pos(prejudice, sex).
pos(prejudice, religion).
pos(prejudice, feeling).
pos(prejudice, like).
pos(prejudice, dislike).
pos(prejudice, someone).
pos(prejudice, something).
pos(prejudice, unreasonable).
pos(prejudice, illogical).

% Section 2 - General relationships
relation(people, prejudice).
relation(prejudice, nature).
relation(prejudice, unfair_feeling).
relation(prejudice, dislike).
relation(prejudice, person).
relation(prejudice, group).
relation(prejudice, race).
relation(prejudice, sex).
relation(prejudice, religion).
relation(prejudice, feeling).
relation(prejudice, like).
relation(prejudice, dislike).
relation(prejudice, someone).
relation(prejudice, something).
relation(prejudice, unreasonable).
relation(prejudice, illogical).

% Section 3 - Encoding
prejudice_is_bad_because :- neg(prejudice,Y).
prejudice_is_good_because :- pos(prejudice,Y).
compare(prejudice,X,Y) :- neg(prejudice,X),neg(Y,X), prejudice != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = prejudice.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(smoking, choice).
neg(smoking, health).

Section 2 - General relationships:

relation(smoking, obesity).
relation(smoking, fatty_foods).
relation(smoking, fast_food_restaurants).
relation(smoking, red_meat).
relation(smoking, alcohol).
relation(smoking, driving).
relation(smoking, crime).
relation(smoking, slave_labour).
relation(smoking, criminal_record).
relation(smoking, job).

Section 3 - Encoding:

smoking_is_good_because :- pos(smoking, Y).
smoking_is_bad_because :- neg(smoking, Y).
compare(smoking,X,Y) :- neg(smoking,X),neg(Y,X), smoking != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = smoking.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(jesus, god).
pos(jesus, lord).
pos(jesus, savior).
pos(jesus, shepard).
pos(jesus, lamb_of_god).
pos(jesus, son_of_god).
pos(jesus, holy_spirit).
pos(jesus, perfect_sacrifice).
pos(jesus, sinless_man).
pos(jesus, connection_with_god).
pos(jesus, bringer_of_light).
pos(god, father).
pos(god, orb).
pos(god, light).
pos(god, warmth).
neg(jesus, god).
neg(jesus, god_himself).
neg(jesus, completely_god).
neg(jesus, god_is_not_jesus).
neg(jesus, demigod).
neg(jesus, half_alien).
neg(jesus, judaism).

Section 2 - General relationships:

relation(jesus, god).
relation(jesus, bible_christians).
relation(jesus, holy_spirit).
relation(jesus, sun).
relation(jesus, father).
relation(jesus, catholic_church).
relation(jesus, protestants).
relation(jesus, man).
relation(jesus, savior).
relation(jesus, lord).
relation(jesus, shepard).
relation(jesus, lamb_of_god).
relation(jesus, son_of_god).
relation(jesus, holy_spirit).
relation(jesus, perfect_sacrifice).
relation(jesus, sinless_man).
relation(jesus, connection_with_god).
relation(jesus, bringer_of_light).
relation(god, father).
relation(god, orb).
relation(god, light).
relation(god, warmth).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(people, disproportional_consequences).
pos(people, manage_consequences).
neg(personal_data, emerged_recently).
pos(individuals, manage_personal_data).
pos(individuals, avoid_humiliating_situations).
pos(society, be_considerate_towards_victims).
neg(society, be_abusive_online).

Section 2 - General relationships:

relation(people, internet).
relation(personal_data, individuals).
relation(sexting, children).
relation(society, victims).

Section 3 - Encoding:

people_suffer_disproportional_consequences :- neg(people, disproportional_consequences).
people_can_manage_consequences :- pos(people, manage_consequences).
personal_data_emerged_recently :- neg(personal_data, emerged_recently).
individuals_manage_personal_data :- pos(individuals, manage_personal_data).
individuals_avoid_humiliating_situations :- pos(individuals, avoid_humiliating_situations).
society_be_considerate_towards_victims :- pos(society, be_considerate_towards_victims).
society_be_abusive_online :- neg(society, be_abusive_online).

compare(people,X,Y) :- neg(people,X),neg(Y,X), people != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = people.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(barcelona, best_club_in_the_world).
pos(barcelona, great_attacking_style).
neg(barcelona, good_defensive_side).
pos(puyol, defensive_player).
neg(barcelona, immortal_club).
pos(barcelona, winning_titles).
neg(barcelona, remembered_club).

Section 2 - General relationships:

relation(barcelona, dynamo_kyiv).
relation(barcelona, ruud_gullit).
relation(barcelona, lionel_messi).
relation(barcelona, ronaldinho).

Section 3 - Encoding:

barcelona_is_not_best_club :- neg(barcelona, best_club_in_the_world).
barcelona_is_good_because :- pos(barcelona, Y).
barcelona_is_bad_because :- neg(barcelona, Y).
compare(barcelona,X,Y) :- neg(barcelona,X),neg(Y,X), barcelona != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = barcelona.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(hunting_weapons, hunting).
neg(hunting_weapons, civilian_use).
pos(pistol, defense).
neg(pistol, hunting).
pos(rifle, hunting).
neg(rifle, defense).
pos(blanky, comfort).
neg(blanky, practical).
pos(shotgun, hunting).
neg(shotgun, humane_killing).
pos(compound_bow, hunting).
neg(compound_bow, humane_killing).
pos(albertsons, humane_killing).
neg(albertsons, convenient).
pos(gun, defense).
neg(gun, practical).
pos(gun, killing).

Section 2 - General relationships:

relation(hunting_weapons, civilian_use).
relation(pistol, defense).
relation(rifle, defense).
relation(blanky, comfort).
relation(shotgun, hunting).
relation(compound_bow, hunting).
relation(albertsons, humane_killing).
relation(gun, defense).
relation(gun, killing).

Section 3 - Encoding:

hunting_weapons_are_good_because :- pos(hunting_weapons, Y).
hunting_weapons_are_bad_because :- neg(hunting_weapons, Y).
pistol_is_good_because :- pos(pistol, Y).
pistol_is_bad_because :- neg(pistol, Y).
rifle_is_good_because :- pos(rifle, Y).
rifle_is_bad_because :- neg(rifle, Y).
blanky_is_good_because :- pos(blanky, Y).
blanky_is_bad_because :- neg(blanky, Y).
shotgun_is_good_because :- pos(shotgun, Y).
shotgun_is_bad_because :- neg(shotgun, Y).
compound_bow_is_good_because :- pos(compound_bow, Y).
compound_bow_is_bad_because :- neg(compound_bow, Y).
albertsons_is_good_because :- pos(albertsons, Y).
albertsons_is_bad_because :- neg(albertsons, Y).
gun_is_good_because :- pos(gun, Y).
gun_is_bad_because :- neg(gun, Y).
compare(hunting_weapons,X,Y) :- neg(hunting_weapons,X),neg(Y,X), hunting_weapons != Y.
compare(pistol,X,Y) :- neg(pistol,X),neg(Y,X), pistol != Y.
compare(rifle,X,Y) :- neg(rifle,X),neg(Y,X), rifle != Y.
compare(blanky,X,Y) :- neg(blanky,X),neg(Y,X), blanky != Y.
compare(shotgun,X,Y) :- neg(shotgun,X),neg(Y,X), shotgun != Y.
compare(compound_bow,X,Y) :- neg(compound_bow,X),neg(Y,X), compound_bow != Y.
compare(albertsons,X,Y) :- neg(albertsons,X),neg(Y,X), albertsons != Y.
compare(gun,X,Y) :- neg(gun,X),neg(Y,X), gun != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(churches, tax_exempt_status).

Section 2 - General relationships:

relation(churches, taxes).
relation(churches, commercial_income_taxes).
relation(churches, regular_property_taxes).

Section 3 - Encoding:

neg(churches, tax_exempt_status) :- relation(churches, taxes).
neg(churches, tax_exempt_status) :- relation(churches, commercial_income_taxes).
neg(churches, tax_exempt_status) :- relation(churches, regular_property_taxes).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(disagree, different_opinion).
pos(disagree, fail_agree).
pos(homosexuality, quality_state_homosexual).
pos(homosexuality, erotic_activity_same_sex).
pos(bigot, strongly_unfairly_dislike).
pos(bigot, hate_refuse_accept_particular_group).
pos(morality, encouraged_society).
pos(morality, illegal_murder_rape_steal).

neg(homosexuality, particular_group).

Section 2 - General relationships:

relation(disagree, homosexuality).
relation(bigot, homosexuality).
relation(morality, homosexuality).
relation(morality, society).
relation(morality, people).

Section 3 - Encoding:

disagree_is_not_bigot :- neg(disagree, bigot).
disagree_is_bigot :- pos(disagree, bigot).
homosexuality_is_not_particular_group :- neg(homosexuality, particular_group).
homosexuality_is_particular_group :- pos(homosexuality, particular_group).
morality_is_encouraged_society :- pos(morality, encouraged_society).
morality_is_not_encouraged_society :- neg(morality, encouraged_society).
compare(disagree,X,Y) :- neg(disagree,X),neg(Y,X), disagree != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = disagree.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(deep_water_offshore_oil_drilling, united_states).

Section 2 - General relationships:

relation(deep_water_offshore_oil_drilling, united_states).

Section 3 - Encoding:

pos(deep_water_offshore_oil_drilling, united_states) :- relation(deep_water_offshore_oil_drilling, united_states).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(unabomber, political_message).
pos(unabomber, industrialisation).
pos(unabomber, green_world).
pos(green_party, green_world).
neg(unabomber, innocent_people).
neg(unabomber, democratic_channels).
neg(unabomber, terror_campaign).
neg(unabomber, al_qaeda).
neg(osama_bin_laden, innocent_people).
neg(osama_bin_laden, democratic_channels).
neg(osama_bin_laden, terror_campaign).
neg(osama_bin_laden, al_qaeda).

Section 2 - General relationships:

relation(unabomber, political_views).
relation(unabomber, industrialisation).
relation(unabomber, green_world).
relation(unabomber, innocent_people).
relation(unabomber, democratic_channels).
relation(unabomber, terror_campaign).
relation(unabomber, al_qaeda).
relation(osama_bin_laden, political_views).
relation(osama_bin_laden, innocent_people).
relation(osama_bin_laden, democratic_channels).
relation(osama_bin_laden, terror_campaign).
relation(osama_bin_laden, al_qaeda).
relation(green_party, green_world).

Section 3 - Encoding:

unabomber_is_good_because :- pos(unabomber,Y).
unabomber_is_bad_because :- neg(unabomber,Y).
osama_bin_laden_is_good_because :- pos(osama_bin_laden,Y).
osama_bin_laden_is_bad_because :- neg(osama_bin_laden,Y).
compare(unabomber,X,Y) :- neg(unabomber,X),neg(Y,X), unbomber != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = unbomber.
compare(osama_bin_laden,X,Y) :- neg(osama_bin_laden,X),neg(Y,X), osama_bin_laden != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = osama_bin_laden.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(corruption, beneficial).
pos(corruption, response).
neg(corruption, fair_treatment).
neg(corruption, healthcare).
neg(corruption, justice).
pos(corruption, rich).
neg(corruption, society).
neg(corruption, entrepreneurship).
neg(corruption, economic_growth).

Section 2 - General relationships:

relation(corruption, shortages).
relation(corruption, supply).
relation(corruption, demand).
relation(corruption, public_goods).
relation(corruption, population).
relation(corruption, authority).
relation(corruption, poor).
relation(corruption, society).
relation(corruption, bright_young_people).
relation(corruption, jobs).
relation(corruption, public_officials).
relation(corruption, financial_rewards).
relation(corruption, private_sector).
relation(corruption, costs).
relation(corruption, recruitment).
relation(corruption, entrepreneurship).
relation(corruption, economic_growth).

Section 3 - Encoding:

corruption_is_bad_because :- neg(corruption,Y).
corruption_is_good_because :- pos(corruption,Y).
compare(corruption,X,Y) :- neg(corruption,X),neg(Y,X), corruption != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = corruption.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(rational_path, deism).
neg(rational_path, theism).
pos(atheist, theist).
pos(rational_path, atheist).
pos(rational_path, theist).
pos(generalities, acceptation).
pos(middle_east, church).
neg(middle_east, freedom_of_religion).
pos(religion, personal_preference).
pos(religion, christian).

Section 2 - General relationships:

relation(rational_path, deism).
relation(rational_path, theism).
relation(atheist, theist).
relation(generalities, acceptation).
relation(middle_east, church).
relation(middle_east, freedom_of_religion).
relation(religion, personal_preference).
relation(religion, christian).

Section 3 - Encoding:

rational_path_to_theism :- pos(rational_path, deism), pos(atheist, theist).
rational_path_to_theism :- pos(rational_path, atheist), pos(atheist, theist).
rational_path_to_theism :- pos(rational_path, theist), pos(atheist, theist).
not_rational_path_to_theism :- neg(rational_path, deism), neg(atheist, theist).
not_rational_path_to_theism :- neg(rational_path, atheist), neg(atheist, theist).
not_rational_path_to_theism :- neg(rational_path, theist), neg(atheist, theist).
compare(rational_path, X, Y) :- neg(rational_path, X), neg(rational_path, Y), rational_path != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(hitler, battle_of_moscow).
pos(hitler, second_world_war).
pos(hitler, germany).
pos(hitler, japanese).
pos(stalin, weakness).
pos(france, paris).
pos(poland, warsaw).
pos(germany, berlin).
pos(russia, moscow).
pos(great_britain, home_guard).
pos(wehrmacht, superiority).
pos(germans, aviation_warfare).
pos(germans, stukas).
pos(spitfires, useless).
pos(hurricanes, useless).
pos(britain, radar).
pos(britain, black_outs).
pos(america, u_boats).
pos(canada, navy).
pos(britain, battle_of_dunkirk).
pos(hitler, strongpoints).
pos(hitler, french_coast).

neg(hitler, second_world_war).
neg(hitler, germany).
neg(hitler, japanese).
neg(stalin, weakness).
neg(france, paris).
neg(poland, warsaw).
neg(germany, berlin).
neg(russia, moscow).
neg(great_britain, home_guard).
neg(wehrmacht, superiority).
neg(germans, aviation_warfare).
neg(germans, stukas).
neg(spitfires, useless).
neg(hurricanes, useless).
neg(britain, radar).
neg(britain, black_outs).
neg(america, u_boats).
neg(canada, navy).
neg(britain, battle_of_dunkirk).
neg(hitler, strongpoints).
neg(hitler, french_coast).

Section 2 - General relationships:

relation(hitler, battle_of_moscow).
relation(hitler, second_world_war).
relation(hitler, germany).
relation(hitler, japanese).
relation(stalin, weakness).
relation(france, paris).
relation(poland, warsaw).
relation(germany, berlin).
relation(russia, moscow).
relation(great_britain, home_guard).
relation(wehrmacht, superiority).
relation(germans, aviation_warfare).
relation(germans, stukas).
relation(spitfires, useless).
relation(hurricanes, useless).
relation(britain, radar).
relation(britain, black_outs).
relation(america, u_boats).
relation(canada, navy).
relation(britain, battle_of_dunkirk).
relation(hitler, strongpoints).
relation(hitler, french_coast).

Section 3 - Encoding:

hitler_won_battle_of_moscow :- pos(hitler, battle_of_moscow).
hitler_lost_battle_of_moscow :- neg(hitler, battle_of_moscow).
hitler_won_second_world_war :- pos(hitler, second_world_war).
hitler_lost_second_world_war :- neg(hitler, second_world_war).
hitler_won_germany :- pos(hitler, germany).
hitler_lost_germany :- neg(hitler, germany).
hitler_asked_japanese :- pos(hitler, japanese).
hitler_didnt_ask_japanese :- neg(hitler, japanese).
stalin_was_weak :- pos(stalin, weakness).
stalin_wasnt_weak :- neg(stalin, weakness).
france_surrendered_after_losing_paris :- pos(france, paris).
france_didnt_surrender_after_losing_paris :- neg(france, paris).
poland_surrendered_after_losing_warsaw :- pos(poland, warsaw).
poland_didnt_surrender_after_losing_warsaw :- neg(poland, warsaw).
germany_surrendered_after_losing_berlin :- pos(germany, berlin).
germany_didnt_surrender_after_losing_berlin :- neg(germany, berlin).
russia_wouldve_surrendered :- pos(russia, moscow).
russia_wouldntve_surrendered :- neg(russia, moscow).
great_britain_home_guard_was_a_joke :- pos(great_britain, home_guard).
great_britain_home_guard_wasnt_a_joke :- neg(great_britain, home_guard).
wehrmacht_was_superior :- pos(wehrmacht, superiority).
wehrmacht_wasnt_superior :- neg(wehrmacht, superiority).
germans_had_aviation_warfare :- pos(germans, aviation_warfare).
germans_didnt_have_aviation_warfare :- neg(germans, aviation_warfare).
germans_had_stukas :- pos(germans, stukas).
germans_didnt_have_stukas :- neg(germans, stukas).
spitfires_were_useless :- pos(spitfires, useless).
spitfires_werent_useless :- neg(spitfires, useless).
hurricanes_were_useless :- pos(hurricanes, useless).
hurricanes_werent_useless :- neg(hurricanes, useless).
britain_had_radar :- pos(britain, radar).
britain_didnt_have_radar :- neg(britain, radar).
britain_had_black_outs :- pos(britain, black_outs).
britain_didnt_have_black_outs :- neg(britain, black_outs).
america_offered_help_against_u_boats :- pos(america, u_boats).
america_didnt_offer_help_against_u_boats :- neg(america, u_boats).
britain_relied_on_canada :- pos(canada, navy).
britain_didnt_rely_on_canada :- neg(canada, navy).
britain_had_food :- pos(britain, battle_of_dunkirk).
britain_didnt_have_food :- neg(britain, battle_of_dunkirk).
britain_couldve_surrendered_to_germans :- pos(britain, battle_of_dunkirk).
britain_couldntve_surrendered_to_germans :- neg(britain, battle_of_dunkirk).
germans_beat_britain_once :- pos(britain, battle_of_dunkirk).
germans_didnt_beat_britain_once :- neg(britain, battle_of_dunkirk).
britain_could_lose_again :- pos(britain, battle_of_dunkirk).
britain_couldnt_lose_again :- neg(britain, battle_of_dunkirk).
hitler_held_territories :- pos(hitler, strongpoints).
hitler_didnt_hold_territories :- neg(hitler, strongpoints).
hitler_offered_moscow_back_to_stalin :- pos(hitler, french_coast).
hitler_didnt_offer_moscow_back_to_stalin :- neg(hitler, french_coast).
hitler_overloaded_defences_on_moscow :- pos(hitler, strongpoints).
hitler_didnt_overload_defences_on_moscow :- neg(hitler, strongpoints).
hitler_overloaded_defences_on_french_coast :- pos(hitler, french_coast).
hitler_didnt_overload_defences_on_french_coast :- neg(hitler, french_coast).
hitler_overloaded_defences_on_all_other_major_cities_and_towns :- pos(hitler, strongpoints).
hitler_didnt_overload_defences_on_all_other_major_cities_and_towns :- neg(hitler, strongpoints).

compare(hitler,X,Y) :- neg(hitler,X),neg(Y,X), hitler != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = hitler.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(children_under_age_18, vote).

Section 2 - General relationships:

relation(children_under_age_18, vote).

Section 3 - Encoding:

pos(children_under_age_18, vote) :- relation(children_under_age_18, vote).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(law_firms, jd_mbas).
neg(law_firms, jd_mbas_leaving_for_business).
pos(jd_mbas, business).
pos(jd_mbas, law_firms).
neg(law_firms, short_timers).
pos(old_fashioned_jds, law_firms).
neg(law_firms, donald_trump_retires).

Section 2 - General relationships:

relation(law_firms, jd_mbas).
relation(jd_mbas, business).
relation(law_firms, old_fashioned_jds).
relation(law_firms, donald_trump).

Section 3 - Encoding:

law_firms_are_worried_because :- neg(law_firms, jd_mbas_leaving_for_business).
law_firms_are_worried_because :- neg(law_firms, short_timers).
law_firms_are_worried_because :- neg(law_firms, donald_trump_retires).
jd_mbas_are_good_for_law_firms :- pos(law_firms, jd_mbas).
jd_mbas_are_good_for_law_firms :- pos(jd_mbas, law_firms).
old_fashioned_jds_are_good_for_law_firms :- pos(law_firms, old_fashioned_jds).
compare(law_firms, jd_mbas, old_fashioned_jds) :- neg(law_firms, jd_mbas_leaving_for_business), neg(law_firms, short_timers), jd_mbas != old_fashioned_jds.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(jew, power).

Section 2 - General relationships:

relation(benjamin_franklin, jew).
relation(george_washington, jew).
relation(thomas_jefferson, jew).
relation(winston_churchill, jew).
relation(martin_luther, jew).

Section 3 - Encoding:

neg(jew, power) :- relation(jew,X), neg(X,power).
neg(jew, power) :- neg(X,power), neg(jew,X).
pos(jew, power) :- relation(jew,X), pos(X,power).
pos(jew, power) :- pos(X,power), pos(jew,X).
compare(jew,X,Y) :- neg(jew,X),neg(Y,X), jew != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = jew.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(troy, fun_dance_song).
pos(gabriella, depth).
pos(gabriella, raw_emotion).
pos(gabriella, insecurities).
pos(gabriella, disappointment).
pos(gabriella, hurt).
pos(gabriella, isolated).
pos(gabriella, vulnerable).
pos(gabriella, trust).
pos(gabriella, faith).
pos(gabriella, empowerment).
pos(gabriella, strength).
pos(gabriella, self_care).
pos(gabriella, emotional_song).
pos(gabriella, emotional_impact).
pos(troy, admitting_mistakes).

neg(troy, depth).
neg(troy, raw_emotion).
neg(troy, insecurities).
neg(troy, disappointment).
neg(troy, hurt).
neg(troy, isolated).
neg(troy, vulnerable).
neg(troy, trust).
neg(troy, faith).
neg(troy, empowerment).
neg(troy, strength).
neg(troy, self_care).
neg(troy, emotional_song).
neg(troy, emotional_impact).
neg(troy, admitting_mistakes).

Section 2 - General relationships:

relation(troy, gabriella).
relation(troy, high_school).
relation(gabriella, high_school).
relation(troy, trust).
relation(gabriella, trust).
relation(troy, faith).
relation(gabriella, faith).
relation(troy, empowerment).
relation(gabriella, empowerment).
relation(troy, strength).
relation(gabriella, strength).
relation(troy, self_care).
relation(gabriella, self_care).
relation(troy, emotional_song).
relation(gabriella, emotional_song).
relation(troy, emotional_impact).
relation(gabriella, emotional_impact).
relation(troy, admitting_mistakes).

Section 3 - Encoding:

troy_is_good_because :- pos(troy, Y).
troy_is_bad_because :- neg(troy, Y).
gabriella_is_good_because :- pos(gabriella, Y).
gabriella_is_bad_because :- neg(gabriella, Y).
compare(troy, gabriella, X) :- neg(troy, X), neg(gabriella, X), troy != gabriella.
compare(gabriella, troy, X) :- neg(gabriella, X), neg(gabriella, X), troy != gabriella.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(cure, aging).
pos(speaker, knowledge).
pos(speaker, debate).
pos(speaker, challenge).
pos(speaker, quality).
pos(opponent, research).
pos(opponent, citation).
pos(opponent, argument).
pos(opponent, challenge).

neg(aging, cure).
neg(speaker, ignorance).
neg(speaker, defeat).
neg(speaker, low_quality).
neg(opponent, ignorance).
neg(opponent, low_quality).

Section 2 - General relationships:

relation(cure, aging).
relation(speaker, knowledge).
relation(speaker, debate).
relation(speaker, challenge).
relation(speaker, quality).
relation(opponent, research).
relation(opponent, citation).
relation(opponent, argument).
relation(opponent, challenge).

Section 3 - Encoding:

cure_is_good_because :- pos(cure, Y).
cure_is_bad_because :- neg(cure, Y).
speaker_is_good_because :- pos(speaker, Y).
speaker_is_bad_because :- neg(speaker, Y).
opponent_is_good_because :- pos(opponent, Y).
opponent_is_bad_because :- neg(opponent, Y).
compare(cure,X,Y) :- neg(cure,X),neg(Y,X), cure != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = cure.
compare(speaker,X,Y) :- neg(speaker,X),neg(Y,X), speaker != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = speaker.
compare(opponent,X,Y) :- neg(opponent,X),neg(Y,X), opponent != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = opponent.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(every_view, meaninglessness).
neg(meaningless_views, true).
neg(meaningless_views, false).
neg(meaningless_views, not_true).

Section 2 - General relationships:

relation(every_view, meaninglessness).
relation(meaninglessness, every_view).
relation(true, meaninglessness).
relation(meaninglessness, true).

Section 3 - Encoding:

elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(alice_in_chains, bite).
pos(alice_in_chains, nineties_feel).
pos(nirvana, good_songs).
pos(opponent, popular_song).
pos(opponent, grunge_movement).

Section 2 - General relationships:

relation(alice_in_chains, bite).
relation(alice_in_chains, nineties_feel).
relation(nirvana, good_songs).
relation(opponent, popular_song).
relation(opponent, grunge_movement).

Section 3 - Encoding:

alice_in_chains_is_good_because :- pos(alice_in_chains,Y).
alice_in_chains_is_bad_because :- neg(alice_in_chains,Y).
opponent_is_good_because :- pos(opponent,Y).
opponent_is_bad_because :- neg(opponent,Y).
compare(alice_in_chains,X,Y) :- neg(alice_in_chains,X),neg(Y,X), alice_in_chains != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = alice_in_chains.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(people, living_dinosaurs).
neg(con, single_piece_of_artwork).
pos(dna_argument, t_rex).
pos(dna_argument, hadrosaurs).
neg(con, dna_evidence).
neg(con, hoax).
neg(con, contamination).
pos(dna_argument, secular).
pos(dna_argument, peer_reviewed).
neg(con, scientific_evidence).
pos(t_rex_and_hadrosaur_blood, intuition).
pos(t_rex_and_hadrosaur_blood, common_sense).
neg(con, unfossilized).
neg(con, soft_tissue).
neg(con, liquid_blood).
neg(con, same_time_period).
neg(con, humans).
neg(con, recent_fossil_remains).
neg(con, scientific_evidence).
neg(con, live_dinosaur).
neg(con, meteorite).
neg(con, volcano).
neg(con, vague_events).
neg(con, possibility).
neg(con, surviving).

Section 2 - General relationships:

relation(people, living_dinosaurs).
relation(con, single_piece_of_artwork).
relation(dna_argument, t_rex).
relation(dna_argument, hadrosaurs).
relation(con, dna_evidence).
relation(con, hoax).
relation(con, contamination).
relation(dna_argument, secular).
relation(dna_argument, peer_reviewed).
relation(con, scientific_evidence).
relation(t_rex_and_hadrosaur_blood, intuition).
relation(t_rex_and_hadrosaur_blood, common_sense).
relation(con, unfossilized).
relation(con, soft_tissue).
relation(con, liquid_blood).
relation(con, same_time_period).
relation(con, humans).
relation(con, recent_fossil_remains).
relation(con, scientific_evidence).
relation(con, live_dinosaur).
relation(con, meteorite).
relation(con, volcano).
relation(con, vague_events).
relation(con, possibility).
relation(con, surviving).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(marriage, mental_health).
pos(marriage, physical_health).
pos(marriage, children).
pos(marriage, happy_home).
pos(marriage, educational_problems).
pos(marriage, social_problems).
neg(prostitution, sacredness).
neg(prostitution, sexual_intimacy).
neg(prostitution, long_term_health).
neg(prostitution, physical_health).
neg(prostitution, psychological_health).
neg(prostitution, stress_disorder).
neg(prostitution, violence).
neg(prostitution, abuse).
neg(prostitution, anger).
neg(prostitution, betrayal).

Section 2 - General relationships:

relation(prostitution, society).
relation(prostitution, marriage).
relation(prostitution, divorce).
relation(prostitution, women).
relation(prostitution, children).
relation(prostitution, men).
relation(prostitution, happiness).
relation(prostitution, short_term_gain).
relation(prostitution, long_term_harm).
relation(prostitution, stress_disorder).
relation(prostitution, violence).
relation(prostitution, abuse).
relation(prostitution, anger).
relation(prostitution, betrayal).

Section 3 - Encoding:

marriage_is_good_because :- pos(marriage,Y).
marriage_is_bad_because :- neg(marriage,Y).
prostitution_is_good_because :- pos(prostitution,Y).
prostitution_is_bad_because :- neg(prostitution,Y).
compare(prostitution,X,Y) :- neg(prostitution,X),neg(Y,X), prostitution != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = prostitution.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(percussion, important_section).

Section 2 - General relationships:

relation(percussion, band).
relation(percussion, people).

Section 3 - Encoding:

percussion_is_important_because :- pos(percussion, Y).
percussion_is_not_important_because :- neg(percussion, Y).
compare(percussion,X,Y) :- neg(percussion,X),neg(Y,X), percussion != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = percussion.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(gay_marriage, society).
pos(society, majority).
pos(bible, christianity).
neg(christianity, gay_marriage).
pos(natural_baby, society).
neg(homosexual_couple, natural_baby).
pos(regular_couple, natural_baby).
neg(gay_person, same_gender_marriage).
pos(other_people, same_gender_marriage).

Section 2 - General relationships:

relation(gay_marriage, society).
relation(society, majority).
relation(bible, christianity).
relation(christianity, gay_marriage).
relation(natural_baby, society).
relation(homosexual_couple, natural_baby).
relation(regular_couple, natural_baby).
relation(gay_person, same_gender_marriage).
relation(other_people, same_gender_marriage).

Section 3 - Encoding:

society_is_majority :- pos(society, majority).
society_is_not_majority :- neg(society, majority).
bible_says_no_gay_marriage :- neg(christianity, gay_marriage).
bible_says_yes_gay_marriage :- pos(christianity, gay_marriage).
homosexual_couple_cannot_have_baby :- neg(homosexual_couple, natural_baby).
regular_couple_can_have_baby :- pos(regular_couple, natural_baby).
gay_person_cannot_marry_same_gender :- neg(gay_person, same_gender_marriage).
other_people_can_marry_same_gender :- pos(other_people, same_gender_marriage).
compare(gay_marriage,X,Y) :- neg(gay_marriage,X),neg(Y,X), gay_marriage != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gay_marriage.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(beatles, most_successful).
pos(beatles, most_records_sold).
pos(beatles, most_records_broken).

Section 2 - General relationships:

relation(beatles, pop_band).
relation(beatles, uk).
relation(beatles, day_in_the_life).
relation(beatles, let_it_be).
relation(beatles, strawberry_fields_forever).
relation(beatles, hey_jude).
relation(beatles, come_together).
relation(beatles, most_weeks_on_chart).
relation(beatles, most_number_ones_by_one_act).
relation(beatles, total_weeks_at_number_one_in_one_year).
relation(beatles, most_number_one_albums_in_one_year).
relation(beatles, album_spending_the_longest_at_number_one).
relation(beatles, most_consecutive_weeks_at_number_one).
relation(beatles, most_consecutive_number_one_hit_albums).
relation(beatles, first_ever_album_to_debut_at_number_1).
relation(beatles, self_replacement_at_the_top).
relation(beatles, largest_total_number_of_weeks_at_the_top_of_album_and_singles_act).
relation(beatles, most_chart_domination_at_any_time_in_history).
relation(beatles, only_double_wammy_in_history).
relation(beatles, most_consecutive_christmas_number_one_albums).
relation(beatles, artists_with_largest_album_sales_in_us).
relation(beatles, golden_albums_in_the_uk).
relation(beatles, paul_mccartney).

Section 3 - Encoding:

beatles_are_the_best_pop_band :- pos(beatles, most_successful).
beatles_are_not_the_best_pop_band :- neg(beatles, most_successful).
compare(beatles,X,Y) :- neg(beatles,X),neg(Y,X), beatles != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = beatles.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(christianity, unique_religion).
pos(bible, unique_religion).
pos(bible, consistent).
pos(bible, archeologically_confirmed).
pos(bible, divine_insight).
pos(bible, predictive_prophecy).
pos(bible, spherical_earth).
pos(bible, earth_hangs_in_space).
pos(bible, expansion_of_heavens).
pos(bible, fulfilled_prophecies).
pos(bible, logic).
pos(bible, science).
pos(dr_jason_lisle, astrophysics).
pos(dr_jason_lisle, truth_of_bible).

Section 2 - General relationships:

relation(christianity, bible).
relation(bible, archeology).
relation(bible, earth).
relation(bible, heavens).
relation(bible, jesus).
relation(bible, logic).
relation(bible, science).
relation(bible, dr_jason_lisle).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(shakespeare, man_sized_bumble_bee_costume).
pos(king_richard, wife).
pos(rhett_butler, pet_deer).

neg(shakespeare, halloween).
neg(king_richard, sex).
neg(rhett_butler, wheel_of_cheese).

Section 2 - General relationships:

relation(shakespeare, halloween).
relation(king_richard, sex).
relation(rhett_butler, wheel_of_cheese).

Section 3 - Encoding:

shakespeare_is_good_because :- pos(shakespeare, Y).
shakespeare_is_bad_because :- neg(shakespeare, Y).
king_richard_is_good_because :- pos(king_richard, Y).
king_richard_is_bad_because :- neg(king_richard, Y).
rhett_butler_is_good_because :- pos(rhett_butler, Y).
rhett_butler_is_bad_because :- neg(rhett_butler, Y).
compare(shakespeare,X,Y) :- neg(shakespeare,X),neg(Y,X), shakespeare != Y.
compare(king_richard,X,Y) :- neg(king_richard,X),neg(king_richard,Z), Y != Z, Y = king_richard.
compare(rhett_butler,X,Y) :- neg(rhett_butler,X),neg(rhett_butler,Z), Y != Z, Y = rhett_butler.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(security, rights).

% Section 2 - General relationships
relation(security, rights).

% Section 3 - Encoding
compare(security,X,Y) :- neg(security,X),neg(Y,X), security != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = security.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(islam, good_religion).
pos(islam, adherents).
pos(islam, atrocities).
pos(islam, oppression_of_women).
pos(islam, messed_up_crimes).
pos(westboro_baptist_church, atrocities).
pos(christianity, potential_to_be_crazy).

Section 2 - General relationships:

relation(islam, adherents).
relation(islam, atrocities).
relation(islam, oppression_of_women).
relation(islam, messed_up_crimes).
relation(islam, westboro_baptist_church).
relation(islam, christianity).

Section 3 - Encoding:

islam_is_good_because :- pos(islam, Y).
islam_is_bad_because :- neg(islam, Y).
compare(islam,X,Y) :- neg(islam,X),neg(Y,X), islam != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = islam.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(cell_phones, fast).
pos(cell_phones, access_to_internet).
pos(cell_phones, access_to_parents).
pos(cell_phones, saving_paper).
pos(cell_phones, saving_ink).

Section 2 - General relationships:

relation(cell_phones, school).
relation(cell_phones, fire).
relation(cell_phones, planners).
relation(cell_phones, agenda_books).
relation(cell_phones, kids).
relation(cell_phones, office).
relation(cell_phones, messages).
relation(cell_phones, privacy).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(sat, objective_measure).
pos(sat, benchmark_of_comparison).
pos(sat, progress_of_schools).
pos(sat, opportunity).

neg(non_standardized_assessment, objective_measure).
neg(non_standardized_assessment, benchmark_of_comparison).
neg(non_standardized_assessment, progress_of_schools).
neg(non_standardized_assessment, opportunity).

neg(subjective_factors, objective_measure).
neg(subjective_factors, benchmark_of_comparison).
neg(subjective_factors, progress_of_schools).
neg(subjective_factors, opportunity).

pos(extracurricular_activities, subjective_factors).
pos(volunteer_work, subjective_factors).
pos(access_to_references, subjective_factors).

neg(high_income_students, subjective_factors).
neg(poorer_school_districts, opportunity).

Section 2 - General relationships:

relation(sat, admissions_candidates).
relation(sat, universities).
relation(sat, government).
relation(sat, schools).
relation(sat, poorer_students).
relation(sat, minority_students).
relation(sat, admissions_officials).

Section 3 - Encoding:

sat_is_good_because :- pos(sat, Y).
sat_is_bad_because :- neg(sat, Y).
compare(sat,X,Y) :- neg(sat,X),neg(Y,X), sat != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = sat.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(vaccines, cause_autism).

Section 2 - General relationships:

relation(vaccines, cause).
relation(vaccines, autism).
relation(affirmative, claim).
relation(negative, circumstance).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, eternal_life).
neg(god, mankind).
pos(god, sacrifice).
pos(god, son).
pos(god, heaven).
pos(god, faithful_jews).

Section 2 - General relationships:

relation(god, mankind).
relation(god, son).
relation(god, heaven).
relation(god, faithful_jews).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(native_american_artefacts, religious_and_cultural_associations).
pos(religious_artefacts, educating_wider_public).
pos(religious_artefacts, beliefs_of_their_creators).
neg(later_descendants, second_guessing_ancestors_intentions).

Section 2 - General relationships:

relation(cultural_treasures, religious_and_cultural_associations).
relation(cultural_treasures, educating_wider_public).
relation(cultural_treasures, beliefs_of_their_creators).
relation(cultural_treasures, second_guessing_ancestors_intentions).
relation(cultural_treasures, religions).
relation(cultural_treasures, cultures).
relation(cultural_treasures, no_longer_survive).
relation(cultural_treasures, claim_for_their_return).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(predator, worthy).
pos(predator, trap).
pos(predator, animal_instinct).
pos(predator, combat).
pos(predator, strength).
pos(predator, retreat).
pos(predator, woods).
pos(predator, pain_tolerance).
pos(predator, armor).
pos(predator, eyes).
pos(predator, skill).
pos(predator, experience).
pos(predator, smarts).
pos(predator, explosive_device).
pos(predator, explosive_knives).
pos(creeper, stronger).
pos(creeper, quicker).
pos(creeper, intelligent).
pos(creeper, shrunkins).
pos(creeper, good_eyes).
pos(creeper, semi_sneak).
pos(creeper, partly_paralyzed).

neg(predator, scared).
neg(predator, human).
neg(predator, injured).
neg(predator, killed).
neg(predator, dismembered).
neg(creeper, worthy).
neg(creeper, trap).
neg(creeper, animal_instinct).
neg(creeper, combat).
neg(creeper, strength).
neg(creeper, retreat).
neg(creeper, woods).
neg(creeper, pain_tolerance).
neg(creeper, armor).
neg(creeper, eyes).
neg(creeper, skill).
neg(creeper, experience).
neg(creeper, smarts).
neg(creeper, explosive_device).
neg(creeper, explosive_knives).
neg(creeper, stronger).
neg(creeper, quicker).
neg(creeper, intelligent).
neg(creeper, shrunkins).
neg(creeper, good_eyes).
neg(creeper, semi_sneak).
neg(creeper, partly_paralyzed).

Section 2 - General relationships:

relation(predator, creeper).
relation(predator, human).
relation(creeper, predator).
relation(creeper, human).

Section 3 - Encoding:

predator_is_good_because :- pos(predator, Y).
predator_is_bad_because :- neg(predator, Y).
creeper_is_good_because :- pos(creeper, Y).
creeper_is_bad_because :- neg(creeper, Y).
compare(predator, creeper, Y) :- neg(predator, Y), neg(creeper, Y), predator != creeper.
compare(creeper, predator, Y) :- neg(creeper, Y), neg(creeper, Y), creeper != predator.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(original_sin, fair).
pos(original_sin, implications).
pos(original_sin, fair).
pos(original_humans, sin).
pos(original_humans, god).
pos(original_humans, commands).
pos(original_sin, naturally_sinful_nature).
pos(original_sin, punishment).
pos(original_sin, choosing_sin).
pos(original_sin, predecessors).
pos(original_sin, mistakes).
pos(original_sin, adam_and_eve).
pos(original_sin, punishment).
pos(original_sin, humans).
pos(original_sin, kind).

Section 2 - General relationships:

relation(original_sin, humanity).
relation(original_sin, bible).
relation(original_sin, god).
relation(original_sin, commands).
relation(original_sin, punishment).
relation(original_sin, choosing_sin).
relation(original_sin, predecessors).
relation(original_sin, mistakes).
relation(original_sin, adam_and_eve).
relation(original_sin, humans).
relation(original_sin, kind).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(family, start_of_person).
pos(family, first_education).
pos(family, love).
pos(family, respect).
pos(family, reality_of_life).
pos(family, honesty).
pos(family, support).
pos(family, need).
pos(family, dna).
pos(family, everything).
neg(friends, heavy_weight).
neg(friends, perfect).
neg(friends, wise_choice).
neg(friends, blocked_way).
neg(friends, wrong_paths).

% Section 2 - General relationships
relation(family, human_being).
relation(family, child).
relation(family, mother).
relation(family, father).
relation(family, school).
relation(family, teacher).
relation(family, football_player).
relation(family, friends).

% Section 3 - Encoding
family_is_important_because :- pos(family, Y).
friends_are_not_important_because :- neg(friends, Y).
compare(family,X,Y) :- neg(family,X),neg(Y,X), family != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = family.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(reaganomics, iraq).
neg(reaganomics, afghanistan).
neg(reaganomics, egypt).
neg(reaganomics, libya).
neg(reaganomics, taxpayers).
neg(reaganomics, economy).
neg(reaganomics, deficit_spending).
neg(reaganomics, national_debt).
neg(reaganomics, cold_war).
neg(reaganomics, military_spending).
neg(reaganomics, rich).
neg(reaganomics, money).
neg(reaganomics, investment).
neg(reaganomics, jobs).
neg(reaganomics, broken_window_economic_strategy).
neg(reaganomics, war_logic).
neg(reaganomics, terror).
neg(reaganomics, iraq_war).
neg(reaganomics, afghanistan_war).
neg(reaganomics, destabilized_iraq).
neg(reaganomics, aid).
neg(reaganomics, overseas).
neg(reaganomics, taxpayer's_hands).
neg(reaganomics, stronger_economy).

pos(reaganomics, iraq_war).
pos(reaganomics, afghanistan_war).
pos(reaganomics, aid).
pos(reaganomics, overseas).
pos(reaganomics, taxpayer's_hands).
pos(reaganomics, stronger_economy).
pos(reaganomics, jobs).
pos(reaganomics, rich).
pos(reaganomics, money).
pos(reaganomics, investment).
pos(reaganomics, deficit_spending).
pos(reaganomics, national_debt).
pos(reaganomics, cold_war).
pos(reaganomics, military_spending).
pos(reaganomics, broken_window_economic_strategy).
pos(reaganomics, war_logic).
pos(reaganomics, terror).
pos(reaganomics, destabilized_iraq).
pos(reaganomics, economy).
pos(reaganomics, taxpayers).
pos(reaganomics, libya).
pos(reaganomics, egypt).

Section 2 - General relationships:

relation(reaganomics, iraq).
relation(reaganomics, afghanistan).
relation(reaganomics, egypt).
relation(reaganomics, libya).
relation(reaganomics, taxpayers).
relation(reaganomics, economy).
relation(reaganomics, deficit_spending).
relation(reaganomics, national_debt).
relation(reaganomics, cold_war).
relation(reaganomics, military_spending).
relation(reaganomics, rich).
relation(reaganomics, money).
relation(reaganomics, investment).
relation(reaganomics, jobs).
relation(reaganomics, broken_window_economic_strategy).
relation(reaganomics, war_logic).
relation(reaganomics, terror).
relation(reaganomics, iraq_war).
relation(reaganomics, afghanistan_war).
relation(reaganomics, destabilized_iraq).
relation(reaganomics, aid).
relation(reaganomics, overseas).
relation(reaganomics, taxpayer's_hands).
relation(reaganomics, stronger_economy).

Section 3 - Encoding:

reaganomics_is_good_because :- pos(reaganomics, Y).
reaganomics_is_bad_because :- neg(reaganomics, Y).
compare(reaganomics,X,Y) :- neg(reaganomics,X),neg(Y,X), reaganomics != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = reaganomics.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(international_court, impartial).
pos(international_court, theoretically_perfect).
pos(international_court, impartial).
neg(international_court, american_interests).
pos(international_court, other_nations_interests).

Section 2 - General relationships:

relation(international_court, american_interests).
relation(international_court, other_nations_interests).

Section 3 - Encoding:

international_court_is_good_because :- pos(international_court, Y).
international_court_is_bad_because :- neg(international_court, Y).
compare(international_court,X,Y) :- neg(international_court,X),neg(Y,X), international_court != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = international_court.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(military_recruitment_in_schools, UN_Convention_on_the_Rights_of_the_Child).
neg(military_recruitment_in_schools, USA).
neg(military_recruitment_in_schools, American_Civil_Liberties_Union).
neg(military_recruitment_in_schools, children).
neg(military_recruitment_in_schools, classrooms).
neg(military_recruitment_in_schools, unfair_promises).
neg(military_recruitment_in_schools, advertising).
neg(military_recruitment_in_schools, pledge).

pos(UN_Convention_on_the_Rights_of_the_Child, USA).
pos(USA, American_Civil_Liberties_Union).
pos(American_Civil_Liberties_Union, children).
pos(children, classrooms).
pos(classrooms, unfair_promises).
pos(unfair_promises, advertising).
pos(advertising, pledge).

Section 2 - General relationships:

relation(military_recruitment_in_schools, UN_Convention_on_the_Rights_of_the_Child).
relation(military_recruitment_in_schools, USA).
relation(military_recruitment_in_schools, American_Civil_Liberties_Union).
relation(military_recruitment_in_schools, children).
relation(military_recruitment_in_schools, classrooms).
relation(military_recruitment_in_schools, unfair_promises).
relation(military_recruitment_in_schools, advertising).
relation(military_recruitment_in_schools, pledge).

Section 3 - Encoding:

military_recruitment_in_schools_is_illegal :- neg(military_recruitment_in_schools, UN_Convention_on_the_Rights_of_the_Child).
military_recruitment_in_schools_is_illegal :- neg(military_recruitment_in_schools, USA).
military_recruitment_in_schools_is_illegal :- neg(military_recruitment_in_schools, American_Civil_Liberties_Union).
military_recruitment_in_schools_is_illegal :- neg(military_recruitment_in_schools, children).
military_recruitment_in_schools_is_illegal :- neg(military_recruitment_in_schools, classrooms).
military_recruitment_in_schools_is_illegal :- neg(military_recruitment_in_schools, unfair_promises).
military_recruitment_in_schools_is_illegal :- neg(military_recruitment_in_schools, advertising).
military_recruitment_in_schools_is_illegal :- neg(military_recruitment_in_schools, pledge).

compare(military_recruitment_in_schools,X,Y) :- neg(military_recruitment_in_schools,X),neg(Y,X), military_recruitment_in_schools != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = military_recruitment_in_schools.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(vaccines, lives_saved).
pos(vaccines, net_benefit).
pos(vaccines, medical_breakthrough).
pos(vaccines, disease_rate_decrease).
pos(opponent, religious_objection).
neg(opponent, facts).
neg(opponent, effectiveness_of_vaccines).
neg(vaccines, moral_objections).

Section 2 - General relationships:

relation(vaccines, diseases).
relation(vaccines, statistics).
relation(vaccines, lives_saved).
relation(vaccines, medical_breakthrough).
relation(opponent, religious_objection).
relation(opponent, effectiveness_of_vaccines).
relation(opponent, facts).
relation(opponent, moral_objections).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, best_friend).
pos(latter_day_saint, test_of_faith).
pos(latter_day_saint, devotion).
pos(tithe, willingness).
pos(tithe, god_wills).
pos(faith, feeling).
pos(music, expression_of_feelings).
pos(literature, expression_of_feelings).
pos(art, expression_of_feelings).
pos(painting, expression_of_feelings).
pos(painting, spiritual).
pos(god, mercedes).
pos(god, oprah).
pos(wealth, happiness).
pos(god, material_gifts).
pos(eternal, satisfaction).
pos(spiritual, satisfaction).
pos(earth, satisfaction).
pos(afterlife, satisfaction).
pos(higher_purpose, rewards).
pos(god, rewards).
pos(person, good).
pos(god, person).
pos(beliefs, happiness).
pos(christian, god).
pos(christian, gods).

neg(latter_day_saint, intrinsic_value).
neg(painting, medium_of_trade).
neg(god, mercedes).
neg(god, oprah).
neg(wealth, happiness).
neg(god, material_gifts).
neg(christian, god).
neg(christian, gods).

Section 2 - General relationships:

relation(man, god).
relation(latter_day_saint, faith).
relation(tithe, church).
relation(faith, feeling).
relation(music, feeling).
relation(literature, feeling).
relation(art, feeling).
relation(painting, feeling).
relation(painting, value).
relation(god, mercedes).
relation(god, oprah).
relation(wealth, happiness).
relation(god, gifts).
relation(eternal, things).
relation(spiritual, things).
relation(earth, satisfaction).
relation(afterlife, satisfaction).
relation(higher_purpose, rewards).
relation(god, rewards).
relation(person, god).
relation(beliefs, happiness).
relation(christian, god).
relation(christian, gods).

Section 3 - Encoding:

god_is_good_because :- pos(god,Y).
god_is_bad_because :- neg(god,Y).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(christianity, argument).
pos(christianity, evidence).
pos(atheism, evidence).
neg(christianity, allah).
neg(atheism, evidence).

Section 2 - General relationships:

relation(christianity, islam).
relation(christianity, allah).
relation(christianity, yahweh).
relation(christianity, evidence).
relation(atheism, evidence).

Section 3 - Encoding:

christianity_is_good_because :- pos(christianity,Y).
christianity_is_bad_because :- neg(christianity,Y).
atheism_is_good_because :- pos(atheism,Y).
atheism_is_bad_because :- neg(atheism,Y).
compare(christianity,X,Y) :- neg(christianity,X),neg(Y,X), christianity != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = christianity.
compare(atheism,X,Y) :- neg(atheism,X),neg(Y,X), atheism != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = atheism.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(defeat_isis, kill_loved_ones_of_terrorists).

Section 2 - General relationships:

relation(defeat_isis, kill_loved_ones_of_terrorists).
relation(burden_of_proof, shared).
relation(forfeiting, full_seven_point_loss).
relation(images, permitted).
relation(videos, permitted).
relation(links, permitted).
relation(character_limit, ten_thousand).
relation(arguments, made_in_debate).
relation(technical_difficulties, sources_posted_in_comments).
relation(kritiks, permitted).
relation(semantics, permitted).
relation(trolling, permitted).
relation(sources, accessible_online).
relation(links, posted_to_debate).
relation(violations, noted_by_voters_in_scores_for_conduct).

Section 3 - Encoding:

defeat_isis_is_good_because :- pos(defeat_isis, Y).
defeat_isis_is_bad_because :- neg(defeat_isis, Y).
compare(defeat_isis,X,Y) :- neg(defeat_isis,X),neg(Y,X), defeat_isis != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = defeat_isis.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(newspaper, better_reading_experience).
pos(newspaper, natural_light).
pos(newspaper, tactile_physical_experience).
pos(newspaper, no_disruption).
neg(screen, eyes).
neg(screen, long_periods_of_time).
neg(screen, uncomfortable).
neg(digital_alternatives, better_reading_experience).
neg(digital_alternatives, natural_light).
neg(digital_alternatives, tactile_physical_experience).
neg(digital_alternatives, no_disruption).

Section 2 - General relationships:

relation(newspaper, reading_experience).
relation(screen, eyes).
relation(screen, long_periods_of_time).
relation(screen, uncomfortable).
relation(digital_alternatives, better_reading_experience).
relation(digital_alternatives, natural_light).
relation(digital_alternatives, tactile_physical_experience).
relation(digital_alternatives, no_disruption).

Section 3 - Encoding:

newspaper_is_good_because :- pos(newspaper,Y).
newspaper_is_bad_because :- neg(newspaper,Y).
digital_alternatives_is_good_because :- pos(digital_alternatives,Y).
digital_alternatives_is_bad_because :- neg(digital_alternatives,Y).
compare(newspaper,X,Y) :- neg(newspaper,X),neg(Y,X), newspaper != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = newspaper.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(competitive_team_fortress_2, trust).
pos(competitive_team_fortress_2, trends).
pos(competitive_team_fortress_2, offspring).

Section 2 - General relationships:

relation(competitive_team_fortress_2, trends).
relation(competitive_team_fortress_2, offspring).
relation(competitive_team_fortress_2, trust).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(mitt_romney, president_of_united_states).
pos(mitt_romney, good_debate).
neg(mitt_romney, war).
pos(ron_paul, continue_campaign).
pos(ron_paul, prevent_mccain_majority).
pos(ron_paul, prevent_mccain_nomination).
pos(ron_paul, ardent_supporter).
pos(ron_paul, win).
pos(ron_paul, stay_in_race).
pos(ron_paul, gop_convention).
pos(ron_paul, mainstream_media_attention).
pos(ron_paul, people_of_this_country_hearing).

Section 2 - General relationships:

relation(mitt_romney, war).
relation(ron_paul, mccain).
relation(ron_paul, delegates).
relation(ron_paul, nomination).
relation(ron_paul, huckabee).
relation(ron_paul, ardent_supporter).
relation(ron_paul, win).
relation(ron_paul, race).
relation(ron_paul, gop_convention).
relation(ron_paul, mainstream_media).
relation(ron_paul, people_of_this_country).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(women, respect).
pos(women, equality).
pos(feminism, equality).
neg(women, less_pay).
pos(men, same_responsibilities).

Section 2 - General relationships:

relation(women, selective_service).
relation(women, feminism).
relation(women, pay).
relation(women, responsibilities).
relation(men, responsibilities).

Section 3 - Encoding:

women_should_register :- pos(women,X), relation(women,X).
women_should_not_register :- neg(women,X), relation(women,X).
compare(women,X,Y) :- neg(women,X),neg(Y,X), women != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = women.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(strict_parents, good_for_children).

Section 2 - General relationships:

relation(success, fame).
relation(success, fortune).
relation(success, luxuries).
relation(success, effort).
relation(success, proud).
relation(success, achievements).
relation(success, difficult_tasks).
relation(success, goals).
relation(parents, support).
relation(parents, success).
relation(relaxed_parents, free).
relation(relaxed_parents, happy).
relation(tiger_mom, best_effort).
relation(tiger_mom, single_parenting_style).
relation(tiger_mom, philosophy).

Section 3 - Encoding:

strict_parents_are_good_because :- pos(strict_parents, Y).
strict_parents_are_bad_because :- neg(strict_parents, Y).
compare(strict_parents,X,Y) :- neg(strict_parents,X),neg(Y,X), strict_parents != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = strict_parents.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(evolutionists, idea_man_came_from_apes).
pos(evolutionists, hypothetical_ape_like_ancestor).
neg(evolution, all_members_of_a_type_evolved_into_another_type).
pos(evolution, small_group_of_individuals_evolved).
neg(peripheral_isolates, acquired_new_suites_of_functioning_genes_through_random_mutation).
pos(peripheral_isolates, acquired_new_traits_through_adaptation).
neg(evolution, transitional_individuals_were_few_in_number).
neg(evolution, transitional_individuals_were_unlikely_to_be_fossilized_and_discovered).
neg(evolution, best_alteration_science_has_observed_has_produced_only_novel_recombinations).
neg(evolution, many_mutations_are_fatal).
neg(evolution, evolution_requires_trillions_of_innovative_mutations_to_produce_man_from_lower_forms).
neg(evolution, evolution_requires_at_least_millions_to_produce_man_or_apes_from_an_ape_like_ancestor).
neg(evolution, evolution_tales_are_pseudo_scientific_stories_about_an_imaginary_history).
neg(evolution, evolution_is_best_understood_as_an_anti_god_origins_myth).

% Section 2 - General relationships
relation(evolutionists, idea_man_came_from_apes).
relation(evolutionists, hypothetical_ape_like_ancestor).
relation(evolution, all_members_of_a_type_evolved_into_another_type).
relation(evolution, small_group_of_individuals_evolved).
relation(peripheral_isolates, acquired_new_suites_of_functioning_genes_through_random_mutation).
relation(peripheral_isolates, acquired_new_traits_through_adaptation).
relation(evolution, transitional_individuals_were_few_in_number).
relation(evolution, transitional_individuals_were_unlikely_to_be_fossilized_and_discovered).
relation(evolution, best_alteration_science_has_observed_has_produced_only_novel_recombinations).
relation(evolution, many_mutations_are_fatal).
relation(evolution, evolution_requires_trillions_of_innovative_mutations_to_produce_man_from_lower_forms).
relation(evolution, evolution_requires_at_least_millions_to_produce_man_or_apes_from_an_ape_like_ancestor).
relation(evolution, evolution_tales_are_pseudo_scientific_stories_about_an_imaginary_history).
relation(evolution, evolution_is_best_understood_as_an_anti_god_origins_myth).

% Section 3 - Encoding
evolution_is_bad_because :- neg(evolution,Y).
evolution_is_good_because :- pos(evolution,Y).
compare(evolution,X,Y) :- neg(evolution,X),neg(Y,X), evolution != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = evolution.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(elementary_school_kids, intense_schooling_program).
neg(elementary_school_kids, easy_schoolwork).

Section 2 - General relationships:

relation(elementary_school_kids, pressure).
relation(elementary_school_kids, division).
relation(elementary_school_kids, teacher).
relation(elementary_school_kids, understanding).

Section 3 - Encoding:

elementary_school_kids_are_good_because :- pos(elementary_school_kids, Y).
elementary_school_kids_are_bad_because :- neg(elementary_school_kids, Y).
compare(elementary_school_kids,X,Y) :- neg(elementary_school_kids,X),neg(Y,X), elementary_school_kids != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elementary_school_kids.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(atheism, following_rules).
pos(atheism, better_sources).
pos(atheism, better_arguments).
pos(atheism, proper_definition).
pos(atheism, creative_force).
pos(theism, enforcer_of_science).

neg(theism, following_rules).
neg(theism, better_sources).
neg(theism, better_arguments).
neg(theism, proper_definition).
neg(theism, creative_force).
neg(theism, enforcer_of_science).

% Section 2 - General relationships
relation(atheism, theism).
relation(atheism, science).
relation(theism, science).
relation(atheism, god).
relation(theism, god).
relation(atheism, grammar).
relation(theism, grammar).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(contradiction, statement).
pos(contradiction, position).
pos(scholar, learned_person).
pos(scholar, academic_degree_holder).
pos(scholar, renowned_person).
pos(bible, christianity_religion).
pos(bible, holy_bible).
pos(religious_texts, denominational_dictionaries).
pos(religious_texts, glossaries).
pos(scholarly_texts, lexicons).
pos(scholarly_texts, concordances).
pos(scholarly_texts, dissertations).
pos(scholarly_texts, treatises).
pos(scholarly_texts, direct_quotes).
pos(scholarly_texts, respectable_scholars).
pos(proposition, definition).
pos(proposition, acceptance).
pos(proposition, rebuttal).
pos(proposition, refutation).
pos(proposition, closing_argument).
pos(proposition, closing_statements).
pos(rules, guidelines).
pos(rules, sources).
pos(rules, intelligent_debating).
pos(rules, indirect_questions).
pos(rules, concise_arguments).
pos(rules, textual_formatting).
pos(rules, voting_period).
pos(rules, judges_rulings).
pos(suggested_rules, ties).
pos(suggested_rules, points).
pos(suggested_rules, bias_question).
pos(suggested_rules, agreement).
pos(suggested_rules, reliable).
pos(suggested_rules, credible).
pos(suggested_rules, opponent).

neg(contradiction, statement).
neg(contradiction, position).
neg(scholar, learned_person).
neg(scholar, academic_degree_holder).
neg(scholar, renowned_person).
neg(bible, christianity_religion).
neg(bible, holy_bible).
neg(religious_texts, denominational_dictionaries).
neg(religious_texts, glossaries).
neg(scholarly_texts, lexicons).
neg(scholarly_texts, concordances).
neg(scholarly_texts, dissertations).
neg(scholarly_texts, treatises).
neg(scholarly_texts, direct_quotes).
neg(scholarly_texts, respectable_scholars).
neg(proposition, definition).
neg(proposition, acceptance).
neg(proposition, rebuttal).
neg(proposition, refutation).
neg(proposition, closing_argument).
neg(proposition, closing_statements).
neg(rules, guidelines).
neg(rules, sources).
neg(rules, intelligent_debating).
neg(rules, indirect_questions).
neg(rules, concise_arguments).
neg(rules, textual_formatting).
neg(rules, voting_period).
neg(rules, judges_rulings).
neg(suggested_rules, ties).
neg(suggested_rules, points).
neg(suggested_rules, bias_question).
neg(suggested_rules, agreement).
neg(suggested_rules, reliable).
neg(suggested_rules, credible).
neg(suggested_rules, opponent).

% Section 2 - General relationships
relation(contradiction, statement).
relation(contradiction, position).
relation(scholar, learned_person).
relation(scholar, academic_degree_holder).
relation(scholar, renowned_person).
relation(bible, christianity_religion).
relation(bible, holy_bible).
relation(religious_texts, denominational_dictionaries).
relation(religious_texts, glossaries).
relation(scholarly_texts, lexicons).
relation(scholarly_texts, concordances).
relation(scholarly_texts, dissertations).
relation(scholarly_texts, treatises).
relation(scholarly_texts, direct_quotes).
relation(scholarly_texts, respectable_scholars).
relation(proposition, definition).
relation(proposition, acceptance).
relation(proposition, rebuttal).
relation(proposition, refutation).
relation(proposition, closing_argument).
relation(proposition, closing_statements).
relation(rules, guidelines).
relation(rules, sources).
relation(rules, intelligent_debating).
relation(rules, indirect_questions).
relation(rules, concise_arguments).
relation(rules, textual_formatting).
relation(rules, voting_period).
relation(rules, judges_rulings).
relation(suggested_rules, ties).
relation(suggested_rules, points).
relation(suggested_rules, bias_question).
relation(suggested_rules, agreement).
relation(suggested_rules, reliable).
relation(suggested_rules, credible).
relation(suggested_rules, opponent).

% Section 3 - Encoding
contradiction_is_statement :- pos(contradiction, statement).
contradiction_is_position :- pos(contradiction, position).
scholar_is_learned_person :- pos(scholar, learned_person).
scholar_is_academic_degree_holder :- pos(scholar, academic_degree_holder).
scholar_is_renowned_person :- pos(scholar, renowned_person).
bible_is_christianity_religion :- pos(bible, christianity_religion).
bible_is_holy_bible :- pos(bible, holy_bible).
religious_texts_are_denominational_dictionaries :- pos(religious_texts, denominational_dictionaries).
religious_texts_are_glossaries :- pos(religious_texts, glossaries).
scholarly_texts_are_lexicons :- pos(scholarly_texts, lexicons).
scholarly_texts_are_concordances :- pos(scholarly_texts, concordances).
scholarly_texts_are_dissertations :- pos(scholarly_texts, dissertations).
scholarly_texts_are_treatises :- pos(scholarly_texts, treatises).
scholarly_texts_are_direct_quotes :- pos(scholarly_texts, direct_quotes).
scholarly_texts_are_respectable_scholars :- pos(scholarly_texts, respectable_scholars).
proposition_is_definition :- pos(proposition, definition).
proposition_is_acceptance :- pos(proposition, acceptance).
proposition_is_rebuttal :- pos(proposition, rebuttal).
proposition_is_refutation :- pos(proposition, refutation).
proposition_is_closing_argument :- pos(proposition, closing_argument).
proposition_is_closing_statements :- pos(proposition, closing_statements).
rules_are_guidelines :- pos(rules, guidelines).
rules_are_sources :- pos(rules, sources).
rules_are_intelligent_debating :- pos(rules, intelligent_debating).
rules_are_indirect_questions :- pos(rules, indirect_questions).
rules_are_concise_arguments :- pos(rules, concise_arguments).
rules_are_textual_formatting :- pos(rules, textual_formatting).
rules_are_voting_period :- pos(rules, voting_period).
rules_are_judges_rulings :- pos(rules, judges_rulings).
suggested_rules_are_ties :- pos(suggested_rules, ties).
suggested_rules_are_points :- pos(suggested_rules, points).
suggested_rules_are_bias_question :- pos(suggested_rules, bias_question).
suggested_rules_are_agreement :- pos(suggested_rules, agreement).
suggested_rules_are_reliable :- pos(suggested_rules, reliable).
suggested_rules_are_credible :- pos(suggested_rules, credible).
suggested_rules_are_opponent :- pos(suggested_rules, opponent).

contradiction_is_not_statement :- neg(contradiction, statement).
contradiction_is_not_position :- neg(contradiction, position).
scholar_is_not_learned_person :- neg(scholar, learned_person).
scholar_is_not_academic_degree_holder :- neg(scholar, academic_degree_holder).
scholar_is_not_renowned_person :- neg(scholar, renowned_person).
bible_is_not_christianity_religion :- neg(bible, christianity_religion).
bible_is_not_holy_bible :- neg(bible, holy_bible).
religious_texts_are_not_denominational_dictionaries :- neg(religious_texts, denominational_dictionaries).
religious_texts_are_not_glossaries :- neg(religious_texts, glossaries).
scholarly_texts_are_not_lexicons :- neg(scholarly_texts, lexicons).
scholarly_texts_are_not_concordances :- neg(scholarly_texts, concordances).
scholarly_texts_are_not_dissertations :- neg(scholarly_texts, dissertations).
scholarly_texts_are_not_treatises :- neg(scholarly_texts, treatises).
scholarly_texts_are_not_direct_quotes :- neg(scholarly_texts, direct_quotes).
scholarly_texts_are_not_respectable_scholars :- neg(scholarly_texts, respectable_scholars).
proposition_is_not_definition :- neg(proposition, definition).
proposition_is_not_acceptance :- neg(proposition, acceptance).
proposition_is_not_rebuttal :- neg(proposition, rebuttal).
proposition_is_not_refutation :- neg(proposition, refutation).
proposition_is_not_closing_argument :- neg(proposition, closing_argument).
proposition_is_not_closing_statements :- neg(proposition, closing_statements).
rules_are_not_guidelines :- neg(rules, guidelines).
rules_are_not_sources :- neg(rules, sources).
rules_are_not_intelligent_debating :- neg(rules, intelligent_debating).
rules_are_not_indirect_questions :- neg(rules, indirect_questions).
rules_are_not_concise_arguments :- neg(rules, concise_arguments).
rules_are_not_textual_formatting :- neg(rules, textual_formatting).
rules_are_not_voting_period :- neg(rules, voting_period).
rules_are_not_judges_rulings :- neg(rules, judges_rulings).
suggested_rules_are_not_ties :- neg(suggested_rules, ties).
suggested_rules_are_not_points :- neg(suggested_rules, points).
suggested_rules_are_not_bias_question :- neg(suggested_rules, bias_question).
suggested_rules_are_not_agreement :- neg(suggested_rules, agreement).
suggested_rules_are_not_reliable :- neg(suggested_rules, reliable).
suggested_rules_are_not_credible :- neg(suggested_rules, credible).
suggested_rules_are_not_opponent :- neg(suggested_rules, opponent).

compare(X,Y) :- contradiction_is_statement, contradiction_is_not_statement, X != Y.
compare(X,Y) :- scholar_is_learned_person, scholar_is_not_learned_person, X != Y.
compare(X,Y) :- scholar_is_academic_degree_holder, scholar_is_not_academic_degree_holder, X != Y.
compare(X,Y) :- scholar_is_renowned_person, scholar_is_not_renowned_person, X != Y.
compare(X,Y) :- bible_is_christianity_religion, bible_is_not_christianity_religion, X != Y.
compare(X,Y) :- bible_is_holy_bible, bible_is_not_holy_bible, X != Y.
compare(X,Y) :- religious_texts_are_denominational_dictionaries, religious_texts_are_not_denominational_dictionaries, X != Y.
compare(X,Y) :- religious_texts_are_glossaries, religious_texts_are_not_glossaries, X != Y.
compare(X,Y) :- scholarly_texts_are_lexicons, scholarly_texts_are_not_lexicons, X != Y.
compare(X,Y) :- scholarly_texts_are_concordances, scholarly_texts_are_not_concordances, X != Y.
compare(X,Y) :- scholarly_texts_are_dissertations, scholarly_texts_are_not_dissertations, X != Y.
compare(X,Y) :- scholarly_texts_are_treatises, scholarly_texts_are_not_treatises, X != Y.
compare(X,Y) :- scholarly_texts_are_direct_quotes, scholarly_texts_are_not_direct_quotes, X != Y.
compare(X,Y) :- scholarly_texts_are_respectable_scholars, scholarly_texts_are_not_respectable_scholars, X != Y.
compare(X,Y) :- proposition_is_definition, proposition_is_not_definition, X != Y.
compare(X,Y) :- proposition_is_acceptance, proposition_is_not_acceptance, X != Y.
compare(X,Y) :- proposition_is_rebuttal, proposition_is_not_rebuttal, X != Y.
compare(X,Y) :- proposition_is_refutation, proposition_is_not_refutation, X != Y.
compare(X,Y) :- proposition_is_closing_argument, proposition_is_not_closing_argument, X != Y.
compare(X,Y) :- proposition_is_closing_statements, proposition_is_not_closing_statements, X != Y.
compare(X,Y) :- rules_are_guidelines, rules_are_not_guidelines, X != Y.
compare(X,Y) :- rules_are_sources, rules_are_not_sources, X != Y.
compare(X,Y) :- rules_are_intelligent_debating, rules_are_not_intelligent_debating, X != Y.
compare(X,Y) :- rules_are_indirect_questions, rules_are_not_indirect_questions, X != Y.
compare(X,Y) :- rules_are_concise_arguments, rules_are_not_concise_arguments, X != Y.
compare(X,Y) :- rules_are_textual_formatting, rules_are_not_textual_formatting, X != Y.
compare(X,Y) :- rules_are_voting_period, rules_are_not_voting_period, X != Y.
compare(X,Y) :- rules_are_judges_rulings, rules_are_not_judges_rulings, X != Y.
compare(X,Y) :- suggested_rules_are_ties, suggested_rules_are_not_ties, X != Y.
compare(X,Y) :- suggested_rules_are_points, suggested_rules_are_not_points, X != Y.
compare(X,Y) :- suggested_rules_are_bias_question, suggested_rules_are_not_bias_question, X != Y.
compare(X,Y) :- suggested_rules_are_agreement, suggested_rules_are_not_agreement, X != Y.
compare(X,Y) :- suggested_rules_are_reliable, suggested_rules_are_not_reliable, X != Y.
compare(X,Y) :- suggested_rules_are_credible, suggested_rules_are_not_credible, X != Y.
compare(X,Y) :- suggested_rules_are_opponent, suggested_rules_are_not_opponent, X != Y.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(i, prove).
pos(i, show).
pos(i, disprove).
pos(i, refute).
pos(i, argument).
pos(i, statement).
pos(i, round).
pos(i, topic).
pos(i, sentence).

Section 2 - General relationships:

relation(i, you).
relation(i, challenger).
relation(i, statement).
relation(i, round).
relation(i, topic).
relation(i, sentence).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(mobile_phone, todays_youth).
neg(mobile_phone_use, driving).
pos(mobile_phone_use, risk_of_road_traffic_accidents).
neg(electromagnetic_fields, human_brain).
neg(microwave_radiation, mobile_phones).
neg(microwave_radiation, serious_diseases).
neg(microwave_radiation, disturbances).
neg(microwave_radiation, physiology).
neg(microwave_radiation, cancer_risk).
neg(microwave_radiation, genetic_damage).
neg(microwave_radiation, disturbed_brain_function).
neg(mobile_phone_radiation, health).
neg(mobile_phone_use, wireless_mobile_telephony).

% Section 2 - General relationships
relation(mobile_phone_use, driving).
relation(electromagnetic_fields, mobile_phones).
relation(microwave_radiation, mobile_phones).
relation(microwave_radiation, serious_diseases).
relation(microwave_radiation, disturbances).
relation(microwave_radiation, physiology).
relation(microwave_radiation, cancer_risk).
relation(microwave_radiation, genetic_damage).
relation(microwave_radiation, disturbed_brain_function).
relation(mobile_phone_radiation, health).
relation(mobile_phone_use, wireless_mobile_telephony).

% Section 3 - Encoding
mobile_phone_is_bad_because :- neg(mobile_phone,Y).
mobile_phone_is_good_because :- pos(mobile_phone,Y).
compare(mobile_phone,X,Y) :- neg(mobile_phone,X),neg(Y,X), mobile_phone != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = mobile_phone.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(human_being, superior).
pos(human_being, precious).
pos(prime_minister, life).
pos(bodyguard, life).
neg(animal, human_being).

Section 2 - General relationships:

relation(human_being, animal).
relation(human_being, life).
relation(animal, life).
relation(prime_minister, bodyguard).
relation(bodyguard, prime_minister).

Section 3 - Encoding:

human_being_is_good_because :- pos(human_being, Y).
human_being_is_bad_because :- neg(human_being, Y).
animal_is_good_because :- pos(animal, Y).
animal_is_bad_because :- neg(animal, Y).
compare(human_being, X, Y) :- neg(human_being, X), neg(Y, X), human_being != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = human_being.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(government, help).
pos(government, care).
pos(government, citizens).
pos(government, job).
pos(charities, help).
pos(me, rebuts).
pos(me, rebutted).
pos(me, points).

neg(government, help_every_single_one).
neg(charities, do_everything).

Section 2 - General relationships:

relation(government, poor).
relation(government, citizens).
relation(government, charities).
relation(me, con).

Section 3 - Encoding:

help_every_single_one(X) :- relation(government, X), neg(government, help_every_single_one).
do_everything(X) :- relation(charities, X), neg(charities, do_everything).

government_is_good_because :- pos(government, Y).
government_is_bad_because :- neg(government, Y).
compare(government,X,Y) :- neg(government,X),neg(Y,X), government != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = government.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(eye_for_eye, direct_retribution).
pos(eye_for_eye, making_unjust_society).
pos(eye_for_eye, insanity).
pos(eye_for_eye, making_whole_world_blind).
pos(two_wrongs, making_right).
pos(our_judicial_system, proportionality).
pos(our_judicial_system, not_insanity).
pos(our_judicial_system, not_raping_rapist).
pos(our_judicial_system, not_kidnapping_kidnapper).
pos(opponent, agreeing_eye_for_eye_is_direct_retribution).

neg(eye_for_eye, exact_equal_consequences).
neg(eye_for_eye, proportionate_consequences).
neg(eye_for_eye, almost_equal_consequences).
neg(two_wrongs, making_right).

Section 2 - General relationships:

relation(eye_for_eye, consequences).
relation(eye_for_eye, society).
relation(eye_for_eye, punishment).
relation(eye_for_eye, direct_retribution).
relation(eye_for_eye, insanity).
relation(eye_for_eye, making_whole_world_blind).
relation(eye_for_eye, making_unjust_society).
relation(two_wrongs, making_right).
relation(our_judicial_system, insanity).
relation(our_judicial_system, proportionality).
relation(our_judicial_system, raping_rapist).
relation(our_judicial_system, kidnapping_kidnapper).
relation(opponent, eye_for_eye).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(abortion, morality).
pos(abortion, rape).
neg(abortion, baby).
pos(abortion, mother).
pos(abortion, grievance).
neg(abortion, rights).

Section 2 - General relationships:

relation(abortion, law).
relation(abortion, age).
relation(abortion, sex).
relation(abortion, choice).
relation(abortion, baby).
relation(abortion, mother).
relation(abortion, grievance).
relation(abortion, rights).

Section 3 - Encoding:

abortion_is_moral_because :- pos(abortion, Y).
abortion_is_immoral_because :- neg(abortion, Y).
compare(abortion,X,Y) :- neg(abortion,X),neg(Y,X), abortion != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = abortion.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(philadelphia_experiment, false).
pos(crew_eldridge, humor).
pos(david_wilcock, sailor).
pos(david_wilcock, alien_technology).
pos(david_wilcock, secret_government_agencies).
pos(david_wilcock, time_travel).
pos(david_wilcock, body_swapping).
pos(david_wilcock, law_of_parsimony).
pos(david_wilcock, hyperspace).
pos(david_wilcock, time_dilation).
pos(david_wilcock, alien_help).
pos(david_wilcock, minesweeper).
pos(david_wilcock, public_deception).

neg(crew_eldridge, philadelphia_experiment).
neg(ed_wise, philadelphia_experiment).
neg(ted_davis, philadelphia_experiment).
neg(bill_van_allen, philadelphia_experiment).
neg(ray_perrino, philadelphia_experiment).
neg(mike_perlstien, philadelphia_experiment).
neg(ed_duncan, time_travel).
neg(ed_duncan, alien_technology).
neg(ed_duncan, body_swapping).
neg(ed_duncan, law_of_parsimony).
neg(ed_duncan, hyperspace).
neg(ed_duncan, time_dilation).
neg(ed_duncan, alien_help).
neg(ed_duncan, minesweeper).
neg(ed_duncan, public_deception).

Section 2 - General relationships:

relation(crew_eldridge, philadelphia_experiment).
relation(ed_wise, philadelphia_experiment).
relation(ted_davis, philadelphia_experiment).
relation(bill_van_allen, philadelphia_experiment).
relation(ray_perrino, philadelphia_experiment).
relation(mike_perlstien, philadelphia_experiment).
relation(david_wilcock, philadelphia_experiment).
relation(david_wilcock, ed_duncan).
relation(ed_duncan, time_travel).
relation(ed_duncan, alien_technology).
relation(ed_duncan, body_swapping).
relation(ed_duncan, law_of_parsimony).
relation(ed_duncan, hyperspace).
relation(ed_duncan, time_dilation).
relation(ed_duncan, alien_help).
relation(ed_duncan, minesweeper).
relation(ed_duncan, public_deception).

Section 3 - Encoding:

philadelphia_experiment_is_false :- pos(philadelphia_experiment, false).
crew_eldridge_considers_philadelphia_experiment_false :- neg(crew_eldridge, philadelphia_experiment).
david_wilcock_claims_philadelphia_experiment_true :- pos(david_wilcock, philadelphia_experiment).
david_wilcock_claims_ed_duncan_time_traveler :- pos(david_wilcock, time_travel).
david_wilcock_claims_ed_duncan_alien_technology :- pos(david_wilcock, alien_technology).
david_wilcock_claims_ed_duncan_body_swapping :- pos(david_wilcock, body_swapping).
david_wilcock_claims_ed_duncan_law_of_parsimony :- pos(david_wilcock, law_of_parsimony).
david_wilcock_claims_ed_duncan_hyperspace :- pos(david_wilcock, hyperspace).
david_wilcock_claims_ed_duncan_time_dilation :- pos(david_wilcock, time_dilation).
david_wilcock_claims_ed_duncan_alien_help :- pos(david_wilcock, alien_help).
david_wilcock_claims_minesweeper_used :- pos(david_wilcock, minesweeper).
david_wilcock_claims_public_deception :- pos(david_wilcock, public_deception).
ed_duncan_denies_philadelphia_experiment :- neg(ed_duncan, philadelphia_experiment).
ed_duncan_denies_time_travel :- neg(ed_duncan, time_travel).
ed_duncan_denies_alien_technology :- neg(ed_duncan, alien_technology).
ed_duncan_denies_body_swapping :- neg(ed_duncan, body_swapping).
ed_duncan_denies_law_of_parsimony :- neg(ed_duncan, law_of_parsimony).
ed_duncan_denies_hyperspace :- neg(ed_duncan, hyperspace).
ed_duncan_denies_time_dilation :- neg(ed_duncan, time_dilation).
ed_duncan_denies_alien_help :- neg(ed_duncan, alien_help).
ed_duncan_denies_minesweeper :- neg(ed_duncan, minesweeper).
ed_duncan_denies_public_deception :- neg(ed_duncan, public_deception).
compare(david_wilcock, ed_duncan, philadelphia_experiment) :- neg(david_wilcock, philadelphia_experiment), neg(ed_duncan, philadelphia_experiment), david_wilcock != ed_duncan.
compare(david_wilcock, ed_duncan, time_travel) :- neg(david_wilcock, time_travel), neg(ed_duncan, time_travel), david_wilcock != ed_duncan, david_wilcock = ed_duncan.
compare(david_wilcock, ed_duncan, alien_technology) :- neg(david_wilcock, alien_technology), neg(ed_duncan, alien_technology), david_wilcock != ed_duncan, david_wilcock = ed_duncan.
compare(david_wilcock, ed_duncan, body_swapping) :- neg(david_wilcock, body_swapping), neg(ed_duncan, body_swapping), david_wilcock != ed_duncan, david_wilcock = ed_duncan.
compare(david_wilcock, ed_duncan, law_of_parsimony) :- neg(david_wilcock, law_of_parsimony), neg(ed_duncan, law_of_parsimony), david_wilcock != ed_duncan, david_wilcock = ed_duncan.
compare(david_wilcock, ed_duncan, hyperspace) :- neg(david_wilcock, hyperspace), neg(ed_duncan, hyperspace), david_wilcock != ed_duncan, david_wilcock = ed_duncan.
compare(david_wilcock, ed_duncan, time_dilation) :- neg(david_wilcock, time_dilation), neg(ed_duncan, time_dilation), david_wilcock != ed_duncan, david_wilcock = ed_duncan.
compare(david_wilcock, ed_duncan, alien_help) :- neg(david_wilcock, alien_help), neg(ed_duncan, alien_help), david_wilcock != ed_duncan, david_wilcock = ed_duncan.
compare(david_wilcock, ed_duncan, minesweeper) :- neg(david_wilcock, minesweeper), neg(ed_duncan, minesweeper), david_wilcock != ed_duncan, david_wilcock = ed_duncan.
compare(david_wilcock, ed_duncan, public_deception) :- neg(david_wilcock, public_deception), neg(ed_duncan, public_deception), david_wilcock != ed_duncan, david_wilcock = ed_duncan.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(god, unrealized_effects).
pos(unrealized_effects, mind).
pos(mind, supreme_intelligence).

% Section 2 - General relationships
relation(god, unrealized_effects).
relation(unrealized_effects, mind).
relation(mind, supreme_intelligence).
relation(sensations, brain).
relation(images, brain).
relation(ideas, brain).

% Section 3 - Encoding
god_exists :- pos(god, Y).
unrealized_effects_in_mind :- pos(unrealized_effects, mind).
supreme_intelligence_exists :- pos(mind, supreme_intelligence).
sensations_in_brain :- relation(sensations, brain).
images_in_brain :- relation(images, brain).
ideas_in_brain :- relation(ideas, brain).
unrealized_effects_not_in_brain :- neg(unrealized_effects, brain).
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(retributivism, proportionality).
pos(retributivism, censure).
pos(retributivism, punishment).
pos(retributivism, serious_crimes).
pos(retributivism, violation).
pos(retributivism, rules).
pos(retributivism, pickpocket).
pos(retributivism, robber).
pos(retributivism, rape).
pos(retributivism, victim).
pos(retributivism, imprisonment).
pos(retributivism, probation).
pos(retributivism, reformation).
pos(retributivism, offender).
pos(retributivism, repentance).
pos(retributivism, consistency).
pos(retributivism, fairness).
pos(retributivism, approach).

neg(retributivism, equivalence).
neg(retributivism, eye_for_eye).
neg(retributivism, rehabilitation).

Section 2 - General relationships:

relation(retributivism, punishment).
relation(retributivism, crime).
relation(retributivism, offender).
relation(retributivism, proportionality).
relation(retributivism, rehabilitation).
relation(retributivism, consistency).
relation(retributivism, fairness).
relation(retributivism, approach).

Section 3 - Encoding:

retributivism_is_good_because :- pos(retributivism, Y).
retributivism_is_bad_because :- neg(retributivism, Y).
compare(retributivism,X,Y) :- neg(retributivism,X),neg(Y,X), retributivism != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = retributivism.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(death_penalty, right_to_live).
pos(heinous_crimes, strict_penalties).
pos(death_penalty, punishment_fits_crime).
pos(death_penalty, prevents_future_crimes).
pos(death_penalty, prevents_escape).
pos(death_penalty, prevents_kill_rape_inmate).
pos(death_penalty, prevents_harm_guards_prison_staff).
pos(unanimous_jury, fair_trial).
pos(two_highly_competent_attorneys, fair_trial).
pos(independent_judge, fair_trial).
pos(death_penalty, benefits_to_society).
neg(death_penalty, executing_wrong_person).
neg(life_sentence, worse_punishment).
neg(second_chance, likelihood_of_innocence).

Section 2 - General relationships:

relation(heinous_crimes, strict_penalties).
relation(death_penalty, punishment_fits_crime).
relation(death_penalty, prevents_future_crimes).
relation(death_penalty, prevents_escape).
relation(death_penalty, prevents_kill_rape_inmate).
relation(death_penalty, prevents_harm_guards_prison_staff).
relation(unanimous_jury, fair_trial).
relation(two_highly_competent_attorneys, fair_trial).
relation(independent_judge, fair_trial).
relation(death_penalty, benefits_to_society).
relation(death_penalty, executing_wrong_person).
relation(life_sentence, worse_punishment).
relation(second_chance, likelihood_of_innocence).

Section 3 - Encoding:

death_penalty_is_good_because :- pos(death_penalty, Y).
death_penalty_is_bad_because :- neg(death_penalty, Y).
compare(death_penalty,X,Y) :- neg(death_penalty,X),neg(Y,X), death_penalty != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = death_penalty.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(parallel_universe, mysterious_man).
pos(mysterious_man, power).
pos(mysterious_man, political_ladder).
pos(mysterious_man, caucasian_decent).
pos(mysterious_man, english).
pos(mysterious_man, accent).
pos(mysterious_man, questions).
pos(mysterious_man, arrival).
pos(mysterious_man, clothes).
pos(mysterious_man, seventies_style).
pos(mysterious_man, police).
pos(mysterious_man, politicians).
pos(mysterious_man, prison).
pos(mysterious_man, ultimate_goals).
pos(mysterious_man, power).
pos(mysterious_man, people).

neg(mysterious_man, answers).
neg(mysterious_man, luggage).
neg(mysterious_man, money).
neg(mysterious_man, vehicle).
neg(mysterious_man, possessions).
neg(mysterious_man, worst).

Section 2 - General relationships:

relation(mysterious_man, parallel_universe).
relation(mysterious_man, police).
relation(mysterious_man, politicians).
relation(mysterious_man, prison).
relation(mysterious_man, arrival).
relation(mysterious_man, clothes).
relation(mysterious_man, seventies_style).
relation(mysterious_man, people).
relation(mysterious_man, questions).
relation(mysterious_man, answers).
relation(mysterious_man, luggage).
relation(mysterious_man, money).
relation(mysterious_man, vehicle).
relation(mysterious_man, possessions).
relation(mysterious_man, worst).
relation(mysterious_man, power).
relation(mysterious_man, political_ladder).
relation(mysterious_man, ultimate_goals).
relation(mysterious_man, caucasian_decent).
relation(mysterious_man, english).
relation(mysterious_man, accent).

Section 3 - Encoding:

mysterious_man_is_good_because :- pos(mysterious_man, Y).
mysterious_man_is_bad_because :- neg(mysterious_man, Y).
compare(mysterious_man,X,Y) :- neg(mysterious_man,X),neg(Y,X), mysterious_man != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = mysterious_man.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(carthyass, xenophobe).
pos(carthyass, strong).
pos(carthyass, victory).
pos(carthyass, peace).

Section 2 - General relationships:

relation(carthyass, king).
relation(carthyass, queen).
relation(carthyass, prince).
relation(carthyass, war).
relation(carthyass, xenophobe).
relation(carthyass, fear).
relation(carthyass, victory).
relation(carthyass, peace).

Section 3 - Encoding:

strong(X) :- pos(X,Y).
victory(X) :- pos(X,Y).
peace(X) :- pos(X,Y).
compare(carthyass,X,Y) :- neg(carthyass,X),neg(Y,X), carthyass != Y.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(capital_gains, ordinary_income).
neg(capital_gains, passive_investment).
pos(direct_investments, society).
pos(hiring, society).
pos(firing, society).
pos(government_spending, greater_economic_good).
pos(education, greater_economic_good).
pos(training, greater_economic_good).
pos(entrepreneurs, greater_economic_good).

% Section 2 - General relationships
relation(capital_gains, ordinary_income).
relation(capital_gains, passive_investment).
relation(direct_investments, society).
relation(hiring, society).
relation(firing, society).
relation(government_spending, greater_economic_good).
relation(education, greater_economic_good).
relation(training, greater_economic_good).
relation(entrepreneurs, greater_economic_good).

% Section 3 - Encoding
capital_gains_is_good_because :- pos(capital_gains, Y).
capital_gains_is_bad_because :- neg(capital_gains, Y).
compare(capital_gains, X, Y) :- neg(capital_gains, X), neg(Y, X), capital_gains != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = capital_gains.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(eating_animals, natural).
pos(eating_animals, slaughter).
pos(eating_animals, cruelty).
pos(eating_animals, savagery).
pos(vegetarian, good_moral_decision).
pos(animals, hormones).
pos(animals, drugs).
pos(chickens, cages).
neg(chickens, large_enough).
neg(chickens, turn_around).
neg(chickens, come_out).

Section 2 - General relationships:

relation(eating_animals, natural).
relation(eating_animals, slaughter).
relation(eating_animals, cruelty).
relation(eating_animals, savagery).
relation(vegetarian, good_moral_decision).
relation(animals, hormones).
relation(animals, drugs).
relation(chickens, cages).
relation(chickens, large_enough).
relation(chickens, turn_around).
relation(chickens, come_out).

Section 3 - Encoding:

vegetarian_is_good_because :- pos(vegetarian, Y).
vegetarian_is_bad_because :- neg(vegetarian, Y).
eating_animals_is_good_because :- pos(eating_animals, Y).
eating_animals_is_bad_because :- neg(eating_animals, Y).
compare(vegetarian,X,Y) :- neg(vegetarian,X),neg(Y,X), vegetarian != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = vegetarian.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(leslie_knope, backbone_of_the_department).
pos(leslie_knope, does_work).
pos(leslie_knope, prevents_mistakes).
pos(leslie_knope, kept_grice_dog_run_open).
pos(leslie_knope, made_pawnee_more_enjoyable).
pos(leslie_knope, can_befriend_bears).
pos(ron_swanson, can_fight_bears).
neg(ron_swanson, backbone_of_the_department).
neg(ron_swanson, does_work).
neg(ron_swanson, prevents_mistakes).
neg(ron_swanson, kept_grice_dog_run_open).
neg(ron_swanson, made_pawnee_more_enjoyable).
neg(ron_swanson, can_befriend_bears).
neg(ron_swanson, hates_government).
neg(ron_swanson, closed_unnecessary_recreational_spaces).
neg(ron_swanson, got_back_together_with_tammy_1_and_2).

Section 2 - General relationships:

relation(leslie_knope, ron_swanson).
relation(ron_swanson, leslie_knope).
relation(ron_swanson, tammy_1).
relation(ron_swanson, tammy_2).
relation(ron_swanson, portola_skate_park).
relation(ron_swanson, glice_dog_run).
relation(ron_swanson, morris_easton_observatory).
relation(ron_swanson, mohanga_native_american_heritage_center).
relation(ron_swanson, public_drinking_fountains).
relation(leslie_knope, portola_skate_park).
relation(leslie_knope, glice_dog_run).
relation(leslie_knope, morris_easton_observatory).
relation(leslie_knope, mohanga_native_american_heritage_center).
relation(leslie_knope, public_drinking_fountains).
relation(leslie_knope, bears).

Section 3 - Encoding:

leslie_knope_is_good_because :- pos(leslie_knope,Y).
leslie_knope_is_bad_because :- neg(leslie_knope,Y).
ron_swanson_is_good_because :- pos(ron_swanson,Y).
ron_swanson_is_bad_because :- neg(ron_swanson,Y).
compare(leslie_knope,X,Y) :- neg(leslie_knope,X),neg(Y,X), leslie_knope != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = leslie_knope.
compare(ron_swanson,X,Y) :- neg(ron_swanson,X),neg(Y,X), ron_swanson != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = ron_swanson.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(society, image).
pos(teens, image).
neg(society, anorexia).
neg(society, drug_use).
neg(society, underage_drinking).
neg(society, suicide).
neg(society, eating_disorders).
neg(society, ecstasy).

Section 2 - General relationships:

relation(society, teens).
relation(image, anorexia).
relation(image, drug_use).
relation(image, underage_drinking).
relation(image, suicide).
relation(image, eating_disorders).
relation(image, ecstasy).
relation(celebrities, teens).
relation(media, teens).

Section 3 - Encoding:

society_is_good_because :- pos(society,Y).
society_is_bad_because :- neg(society,Y).
compare(society,X,Y) :- neg(society,X),neg(Y,X), society != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = society.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(wrong_doings, good_intentions).
pos(decision, good_intentions).
pos(decision, provide_for_ourselves).
pos(decision, provide_for_our_families).
pos(decision, provide_for_our_friends).

% Section 2 - General relationships
relation(wrong_doings, good_intentions).
relation(decision, good_intentions).
relation(decision, provide_for_ourselves).
relation(decision, provide_for_our_families).
relation(decision, provide_for_our_friends).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(french, alternatives).
pos(french, defense_de_la_langue_francaise).
pos(defense_de_la_langue_francaise, terminology).
pos(defense_de_la_langue_francaise, quota).
pos(defense_de_la_langue_francaise, public_opinion).
pos(defense_de_la_langue_francaise, purpose).
pos(defense_de_la_langue_francaise, problems).
pos(balladeur, french).
pos(walkman, english).
neg(french, anglicising).
neg(french, franglais).
neg(franglais, french).
neg(anglo_snobs, french).
neg(anglo_snobs, standard_french).

Section 2 - General relationships:

relation(french, alternatives).
relation(french, franglais).
relation(franglais, anglo_snobs).
relation(anglo_snobs, standard_french).
relation(defense_de_la_langue_francaise, terminology).
relation(defense_de_la_langue_francaise, quota).
relation(defense_de_la_langue_francaise, public_opinion).
relation(defense_de_la_langue_francaise, purpose).
relation(defense_de_la_langue_francaise, problems).
relation(balladeur, french).
relation(walkman, english).
relation(anglicising, french).

Section 3 - Encoding:

defense_de_la_langue_francaise_is_good_because :- pos(defense_de_la_langue_francaise, Y).
defense_de_la_langue_francaise_is_bad_because :- neg(defense_de_la_langue_francaise, Y).
compare(defense_de_la_langue_francaise,X,Y) :- neg(defense_de_la_langue_francaise,X),neg(Y,X), defense_de_la_langue_francaise != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = defense_de_la_langue_francaise.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(tradesmen, normal_humans).
pos(laborers, normal_humans).
pos(tradesmen, handmade).
pos(laborers, handmade).
pos(tradesmen, united_nations).
pos(laborers, united_nations).
pos(tradesmen, western_nations).
pos(laborers, western_nations).
pos(tradesmen, homo_sapiens).
pos(laborers, homo_sapiens).
pos(tradesmen, human_beings).
pos(laborers, human_beings).
pos(tradesmen, building_blocks).
pos(laborers, building_blocks).
pos(tradesmen, wide_base).
pos(laborers, wide_base).
pos(tradesmen, small_population).
pos(laborers, small_population).
pos(tradesmen, top).
pos(laborers, top).
pos(tradesmen, wealth).
pos(laborers, wealth).
pos(tradesmen, power).
pos(laborers, power).

Section 2 - General relationships:

relation(tradesmen, laborers).
relation(tradesmen, food).
relation(laborers, food).
relation(tradesmen, television).
relation(laborers, television).
relation(tradesmen, united_nations).
relation(laborers, united_nations).
relation(tradesmen, western_nations).
relation(laborers, western_nations).
relation(tradesmen, homo_sapiens).
relation(laborers, homo_sapiens).
relation(tradesmen, human_beings).
relation(laborers, human_beings).
relation(tradesmen, building_blocks).
relation(laborers, building_blocks).
relation(tradesmen, wide_base).
relation(laborers, wide_base).
relation(tradesmen, small_population).
relation(laborers, small_population).
relation(tradesmen, top).
relation(laborers, top).
relation(tradesmen, wealth).
relation(laborers, wealth).
relation(tradesmen, power).
relation(laborers, power).

Section 3 - Encoding:

tradesmen_are_good_because :- pos(tradesmen,Y).
tradesmen_are_bad_because :- neg(tradesmen,Y).
laborers_are_good_because :- pos(laborers,Y).
laborers_are_bad_because :- neg(laborers,Y).
compare(tradesmen,X,Y) :- neg(tradesmen,X),neg(Y,X), tradesmen != Y.
compare(laborers,X,Y) :- neg(laborers,X),neg(laborers,Z), Y != Z, Y = laborers.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(america, peaceful_split).
pos(america, better_political_fit).
pos(america, better_social_fit).
pos(america, smaller_countries).
pos(america, more_efficient_government).
pos(america, less_political_polarization).
pos(america, more_local_control).
pos(america, more_cultural_homogeneity).
pos(america, less_crime).
pos(america, better_education).
pos(america, better_healthcare).
pos(america, better_infrastructure).
pos(america, more_innovation).
pos(america, more_economic_growth).
pos(america, more_global_influence).
pos(america, happier_citizens).

Section 2 - General relationships:

relation(america, new_england).
relation(america, dixie).
relation(america, california).
relation(america, republic_of_the_midwest).
relation(new_england, illinois).
relation(dixie, georgia).
relation(dixie, tennessee).
relation(dixie, texas).
relation(dixie, oklahoma).
relation(california, hawaii).
relation(california, alaska).
relation(california, nevada).
relation(california, washington).
relation(california, oregon).
relation(republic_of_the_midwest, nebraska).
relation(republic_of_the_midwest, minnesota).
relation(republic_of_the_midwest, new_mexico).
relation(republic_of_the_midwest, illinois).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(mandela_effect, phenomenon).
pos(mandela_effect, memory).
pos(mandela_effect, event).
pos(mandela_effect, fact).
pos(mandela_effect, example).
pos(mandela_effect, reason).

Section 2 - General relationships:

relation(mandela_effect, burden_of_proof).
relation(mandela_effect, definition).
relation(mandela_effect, example).
relation(mandela_effect, reason).
relation(mandela_effect, techtarget).

Section 3 - Encoding:

mandela_effect_is_real_because :- pos(mandela_effect,Y).
mandela_effect_is_fake_because :- neg(mandela_effect,Y).
compare(mandela_effect,X,Y) :- neg(mandela_effect,X),neg(Y,X), mandela_effect != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = mandela_effect.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(lesotho, separate_state).
pos(basotho_people, separate_state).
pos(lesotho, different_identity).
pos(lesotho, apartheid_free).
pos(lesotho, national_identification_documents).
neg(south_africa, apartheid_free).
neg(south_africa, different_identity).

Section 2 - General relationships:

relation(lesotho, south_africa).
relation(lesotho, apartheid).
relation(lesotho, basotho_people).
relation(lesotho, national_identification_documents).

Section 3 - Encoding:

lesotho_is_different_because :- pos(lesotho,Y).
lesotho_is_similar_because :- neg(lesotho,Y).
compare(lesotho,X,Y) :- neg(lesotho,X),neg(Y,X), lesotho != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = lesotho.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(illegal_wives, state_law).
neg(illegal_wives, lawful_institutions).
neg(illegal_wives, police).
neg(illegal_wives, father_figure).
neg(illegal_wives, possessions).
neg(illegal_children, state_law).
neg(illegal_children, lawful_institutions).
neg(illegal_children, police).
neg(illegal_children, father_figure).
neg(illegal_children, possessions).
pos(legal_polygamy, children_mental_development).
pos(legal_polygamy, mothers_mental_development).
pos(legal_polygamy, women_abuse).
pos(legal_polygamy, father_figure).
pos(legal_polygamy, possessions).
pos(legal_polygamy, divorce).

% Section 2 - General relationships
relation(state, citizen).
relation(state, felon).
relation(state, action).
relation(state, marriage).
relation(state, wife).
relation(state, polygamy).
relation(state, children).
relation(state, women).
relation(state, abuse).
relation(state, institutions).
relation(state, identity).
relation(state, origins).
relation(state, father).
relation(state, possessions).
relation(illegal_wives, children).
relation(illegal_wives, abuse).
relation(illegal_wives, institutions).
relation(illegal_wives, police).
relation(illegal_wives, father_figure).
relation(illegal_children, children).
relation(illegal_children, abuse).
relation(illegal_children, institutions).
relation(illegal_children, police).
relation(illegal_children, father_figure).
relation(legal_polygamy, children).
relation(legal_polygamy, mothers).
relation(legal_polygamy, women).
relation(legal_polygamy, abuse).
relation(legal_polygamy, institutions).
relation(legal_polygamy, father).
relation(legal_polygamy, possessions).
relation(legal_polygamy, divorce).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(information, real).
pos(information, perceived_reality).
pos(information, subjective).
pos(information, zero).
neg(information, objective).
pos(data, meaning).
neg(data, unit).
neg(data, relevance).
neg(data, real_world).
neg(data, information).
neg(data, subjective_reality).
neg(data, integer).

Section 2 - General relationships:

relation(information, data).
relation(information, meaning).
relation(information, unit).
relation(information, relevance).
relation(information, real_world).
relation(information, subjective_reality).
relation(information, integer).

Section 3 - Encoding:

information_is_not_real :- neg(information, real).
information_is_real :- pos(information, real).
data_is_information :- pos(data, information).
data_is_not_information :- neg(data, information).
data_is_meaningful :- pos(data, meaning).
data_is_not_meaningful :- neg(data, meaning).
data_is_an_integer :- pos(data, integer).
data_is_not_an_integer :- neg(data, integer).
compare(information,X,Y) :- neg(information,X),neg(Y,X), information != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = information.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(life, religious_purpose).
pos(religion, serve_humanity).
pos(religion, believe_in_life_after_death).
pos(selfless, serve_society).
pos(selfless, care_about_society).
pos(selfish, live_life_to_its_extremes).
pos(selfish, fulfill_desires).

% Section 2 - General relationships
relation(person, god).
relation(person, religion).
relation(person, society).
relation(person, death).
relation(person, life).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(minimum_wage, betterment_of_lower_class).
pos(minimum_wage, fight_for_higher_income).
neg(minimum_wage, surplus_of_labor).
neg(minimum_wage, employers_unable_to_adapt_to_increased_labor_costs).
neg(minimum_wage, stop_hiring_layoff_current_workers).
neg(minimum_wage, wages_shoot_up_in_the_long_term).
neg(minimum_wage, higher_cost_of_living).
neg(minimum_wage, demand_that_would_otherwise_not_be_there).
neg(minimum_wage, prices_would_go_up).
neg(minimum_wage, wages_rise_once_more_the_following_year).
neg(minimum_wage, currency_inflating_indefinitely).
neg(minimum_wage, employers_unwilling_to_pay_wages).
neg(minimum_wage, surplus_in_labor).
neg(minimum_wage, surplus_of_overpriced_goods).
neg(minimum_wage, economic_free_fall).
neg(minimum_wage, people_unemployed_and_unable_to_afford_things).
neg(minimum_wage, prices_would_fall_out).
neg(minimum_wage, businesses_shut_their_doors_entirely).

Section 2 - General relationships:

relation(minimum_wage, equilibrium).
relation(minimum_wage, job_market).
relation(minimum_wage, cost_of_living).
relation(minimum_wage, prices).
relation(minimum_wage, currency).
relation(minimum_wage, employers).
relation(minimum_wage, workers).
relation(minimum_wage, goods).
relation(minimum_wage, businesses).

Section 3 - Encoding:

minimum_wage_is_good_because :- pos(minimum_wage, Y).
minimum_wage_is_bad_because :- neg(minimum_wage, Y).
compare(minimum_wage,X,Y) :- neg(minimum_wage,X),neg(Y,X), minimum_wage != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = minimum_wage.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(abortion, baby).
pos(abortion, termination_of_fetus).
neg(fetus, emotion).
neg(fetus, sentience).
pos(chicken, intelligence).
pos(chicken, flesh).
pos(chicken, tasty).
neg(person, morals).
neg(person, right_to_live).
neg(person, feral_beast).
neg(woman, ability_to_look_after_template).
pos(woman, personal_reasons).
pos(woman, life_altering_reasons).
neg(woman, casual_abortion).
neg(woman, right_to_give_birth).

% Section 2 - General relationships
relation(abortion, baby).
relation(abortion, fetus).
relation(fetus, emotion).
relation(fetus, sentience).
relation(chicken, intelligence).
relation(chicken, flesh).
relation(chicken, tasty).
relation(person, morals).
relation(person, right_to_live).
relation(person, feral_beast).
relation(woman, ability_to_look_after_template).
relation(woman, personal_reasons).
relation(woman, life_altering_reasons).
relation(woman, casual_abortion).
relation(woman, right_to_give_birth).

% Section 3 - Encoding
abortion_is_good_because :- pos(abortion, Y).
abortion_is_bad_because :- neg(abortion, Y).
compare(abortion,X,Y) :- neg(abortion,X),neg(Y,X), abortion != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = abortion.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(poor_labour_standards, developing_countries).
pos(lower_prices, lower_standards).
pos(lower_standards, developing_countries).
pos(unfair_standard, uniform_carbon_emission_caps).
pos(uniform_carbon_emission_caps, developing_world).
pos(lower_standards, more_easily_met).
pos(achievable_standard, fair_standard).
pos(lower_standards, better).
pos(unachievable_standard, unfair_standard).

neg(uniform_carbon_emission_caps, developing_world).
neg(lower_standards, uniform_carbon_emission_caps).
neg(lower_standards, unfair_standard).
neg(lower_standards, achievable_standard).

Section 2 - General relationships:

relation(poor_labour_standards, developing_countries).
relation(uniform_carbon_emission_caps, developing_world).
relation(lower_standards, developing_countries).
relation(lower_standards, uniform_carbon_emission_caps).
relation(lower_standards, achievable_standard).
relation(lower_standards, unfair_standard).
relation(lower_standards, better).
relation(lower_standards, more_easily_met).

Section 3 - Encoding:

poor_labour_standards_are_bad_because :- neg(poor_labour_standards, Y).
poor_labour_standards_are_good_because :- pos(poor_labour_standards, Y).
uniform_carbon_emission_caps_are_bad_because :- neg(uniform_carbon_emission_caps, Y).
uniform_carbon_emission_caps_are_good_because :- pos(uniform_carbon_emission_caps, Y).
developing_countries_are_bad_because :- neg(developing_countries, Y).
developing_countries_are_good_because :- pos(developing_countries, Y).
lower_standards_are_bad_because :- neg(lower_standards, Y).
lower_standards_are_good_because :- pos(lower_standards, Y).
achievable_standard_is_bad_because :- neg(achievable_standard, Y).
achievable_standard_is_good_because :- pos(achievable_standard, Y).
unfair_standard_is_bad_because :- neg(unfair_standard, Y).
unfair_standard_is_good_because :- pos(unfair_standard, Y).
better_is_bad_because :- neg(better, Y).
better_is_good_because :- pos(better, Y).
more_easily_met_is_bad_because :- neg(more_easily_met, Y).
more_easily_met_is_good_because :- pos(more_easily_met, Y).
compare(poor_labour_standards,X,Y) :- neg(poor_labour_standards,X),neg(Y,X), poor_labour_standards != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = poor_labour_standards.
compare(uniform_carbon_emission_caps,X,Y) :- neg(uniform_carbon_emission_caps,X),neg(Y,X), uniform_carbon_emission_caps != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = uniform_carbon_emission_caps.
compare(developing_countries,X,Y) :- neg(developing_countries,X),neg(Y,X), developing_countries != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = developing_countries.
compare(lower_standards,X,Y) :- neg(lower_standards,X),neg(Y,X), lower_standards != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = lower_standards.
compare(achievable_standard,X,Y) :- neg(achievable_standard,X),neg(Y,X), achievable_standard != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = achievable_standard.
compare(unfair_standard,X,Y) :- neg(unfair_standard,X),neg(Y,X), unfair_standard != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = unfair_standard.
compare(better,X,Y) :- neg(better,X),neg(Y,X), better != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = better.
compare(more_easily_met,X,Y) :- neg(more_easily_met,X),neg(Y,X), more_easily_met != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = more_easily_met.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(textbooks, durability).
pos(textbooks, long_term_storage).
pos(textbooks, invulnerability).
pos(textbooks, untraceability).
pos(textbooks, zombie_apocalypses).
pos(textbooks, smell).

neg(tablets, durability).
neg(tablets, long_term_storage).
neg(tablets, invulnerability).
neg(tablets, untraceability).
neg(tablets, zombie_apocalypses).
neg(tablets, smell).

Section 2 - General relationships:

relation(textbooks, power).
relation(textbooks, internet).
relation(textbooks, storage_conditions).
relation(textbooks, obsolescence).
relation(textbooks, upgrades).
relation(textbooks, maintenance).
relation(textbooks, servers).
relation(textbooks, cooling_towers).
relation(textbooks, staff).
relation(textbooks, infrastructure).
relation(textbooks, books).
relation(textbooks, history).
relation(textbooks, care).
relation(textbooks, firmware_updates).
relation(textbooks, backwards_build).
relation(textbooks, technology).
relation(textbooks, access).
relation(textbooks, archives).
relation(textbooks, filtered_air).
relation(textbooks, shelves).
relation(textbooks, costs).
relation(textbooks, bomb_proof_shelter).
relation(textbooks, attack).
relation(textbooks, technological_cyber_warfare).
relation(textbooks, hacking).
relation(textbooks, person).
relation(textbooks, airdrop).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(non_human_primates, good_use).
pos(pigs, similar_organs).
pos(pigs, lower_risk).
pos(xenotransplantation, good_cause).
pos(pigs, food).

% Section 2 - General relationships
relation(xenotransplantation, chimpanzees).
relation(xenotransplantation, baboons).
relation(xenotransplantation, pigs).
relation(xenotransplantation, humans).
relation(xenotransplantation, infectious_diseases).
relation(pigs, food).

% Section 3 - Encoding
xenotransplantation_is_good_because :- pos(xenotransplantation, Y).
xenotransplantation_is_bad_because :- neg(xenotransplantation, Y).
compare(xenotransplantation,X,Y) :- neg(xenotransplantation,X),neg(Y,X), xenotransplantation != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = xenotransplantation.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(i, hate).
neg(i, kkk).
neg(you, manga).
neg(you, japanese_people).
neg(you, fandoms).
neg(opponent, brony).
neg(opponent, forty_year_old).
neg(opponent, passion).
neg(opponent, dead_russian_leaders).
neg(opponent, mother).
neg(opponent, basement).
neg(opponent, old_japanese_boss).
neg(opponent, manga).

pos(i, intentions).
pos(manga, everybody).
pos(opponent, superiority_complex).
pos(opponent, virgin).
pos(opponent, duchebag).
pos(opponent, antagonize).
pos(opponent, sight).
pos(opponent, everybody).
pos(opponent, cat).
pos(opponent, face).
pos(opponent, life).
pos(opponent, old_japanese_boss).

Section 2 - General relationships:

relation(i, kkk).
relation(i, manga).
relation(i, japanese_people).
relation(i, fandoms).
relation(i, opponent).
relation(opponent, brony).
relation(opponent, forty_year_old).
relation(opponent, passion).
relation(opponent, dead_russian_leaders).
relation(opponent, mother).
relation(opponent, basement).
relation(opponent, old_japanese_boss).
relation(opponent, manga).

Section 3 - Encoding:

i_is_good_because :- pos(i,Y).
i_is_bad_because :- neg(i,Y).
opponent_is_good_because :- pos(opponent,Y).
opponent_is_bad_because :- neg(opponent,Y).
compare(i,X,Y) :- neg(i,X),neg(Y,X), i != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = i.
compare(opponent,X,Y) :- neg(opponent,X),neg(Y,X), opponent != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = opponent.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(con, accepting_debate).
pos(con, accepting_rules).
pos(opponent, breaking_rules).
pos(opponent, contesting_rules).
pos(opponent, choosing_lines).
pos(opponent, applying_rule_4).
pos(opponent, having_fun).

neg(con, contesting_rules).
neg(opponent, accepting_rules).
neg(opponent, following_rule_4).

Section 2 - General relationships:

relation(con, rules).
relation(con, debate).
relation(opponent, rules).
relation(opponent, debate).
relation(opponent, round).
relation(opponent, line).
relation(opponent, letter).

Section 3 - Encoding:

accepting_debate(con) :- pos(con, accepting_debate).
accepting_rules(con) :- pos(con, accepting_rules).
breaking_rules(opponent) :- pos(opponent, breaking_rules).
contesting_rules(opponent) :- pos(opponent, contesting_rules).
choosing_lines(opponent) :- pos(opponent, choosing_lines).
applying_rule_4(opponent) :- pos(opponent, applying_rule_4).
having_fun(opponent) :- pos(opponent, having_fun).

not_accepting_rules(opponent) :- neg(opponent, accepting_rules).
not_following_rule_4(opponent) :- neg(opponent, following_rule_4).

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(opponent, homosexuals).
neg(opponent, society).
neg(opponent, christians).
neg(opponent, bible).

% Section 2 - General relationships
relation(opponent, homosexuals).
relation(opponent, society).
relation(opponent, christians).
relation(opponent, bible).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(barbie, feminist_icon).
pos(barbie, empowering).
pos(barbie, adventurous).
pos(barbie, strong).
pos(barbie, kind).
pos(barbie, smart).
pos(barbie, empathetic).
pos(barbie, girly).
pos(barbie, housewife).
pos(barbie, air_hostess).
pos(barbie, pre_school_teacher).
pos(barbie, web_series).
pos(barbie, life_in_the_dreamhouse).
pos(barbie, car).
pos(barbie, plane).
pos(barbie, ken).
pos(media, telling).
pos(media, buying).
pos(media, wearing).
pos(media, worse).
pos(boys, muscular).
pos(boys, handsome).
pos(boys, action_figures).
pos(kids, smart).
pos(kids, realizing).
pos(kids, learning).
pos(kids, watching).
pos(kids, playing).
pos(kids, picking_up).
pos(kids, emotions).
pos(kids, empathy).
pos(kids, love).
pos(kids, grasping).
pos(kids, movies).
pos(kids, one_sided).
pos(kids, web_series).
pos(kids, life_in_the_dreamhouse).
pos(kids, girly).
pos(kids, strong).

neg(barbie, harming).
neg(barbie, perception_of_beauty).
neg(barbie, housewife).
neg(barbie, air_hostess).
neg(barbie, exciting).
neg(barbie, movies).
neg(barbie, one_sided).
neg(media, good).
neg(boys, harming).
neg(kids, dumb).
neg(kids, ignorant).
neg(kids, unlearning).
neg(kids, forgetting).
neg(kids, unemotional).
neg(kids, unloving).
neg(kids, ungrasping).

Section 2 - General relationships:

relation(barbie, feminist_icon).
relation(barbie, empowering).
relation(barbie, adventurous).
relation(barbie, strong).
relation(barbie, kind).
relation(barbie, smart).
relation(barbie, empathetic).
relation(barbie, girly).
relation(barbie, housewife).
relation(barbie, air_hostess).
relation(barbie, pre_school_teacher).
relation(barbie, web_series).
relation(barbie, life_in_the_dreamhouse).
relation(barbie, car).
relation(barbie, plane).
relation(barbie, ken).
relation(media, telling).
relation(media, buying).
relation(media, wearing).
relation(media, worse).
relation(boys, muscular).
relation(boys, handsome).
relation(boys, action_figures).
relation(kids, smart).
relation(kids, realizing).
relation(kids, learning).
relation(kids, watching).
relation(kids, playing).
relation(kids, picking_up).
relation(kids, emotions).
relation(kids, empathy).
relation(kids, love).
relation(kids, grasping).
relation(kids, movies).
relation(kids, one_sided).
relation(kids, web_series).
relation(kids, life_in_the_dreamhouse).
relation(kids, girly).
relation(kids, strong).

Section 3 - Encoding:

barbie_is_feminist_icon :- pos(barbie, feminist_icon).
barbie_is_not_feminist_icon :- neg(barbie, feminist_icon).
barbie_is_empowering :- pos(barbie, empowering).
barbie_is_not_empowering :- neg(barbie, empowering).
barbie_is_adventurous :- pos(barbie, adventurous).
barbie_is_not_adventurous :- neg(barbie, adventurous).
barbie_is_strong :- pos(barbie, strong).
barbie_is_not_strong :- neg(barbie, strong).
barbie_is_kind :- pos(barbie, kind).
barbie_is_not_kind :- neg(barbie, kind).
barbie_is_smart :- pos(barbie, smart).
barbie_is_not_smart :- neg(barbie, smart).
barbie_is_empathetic :- pos(barbie, empathetic).
barbie_is_not_empathetic :- neg(barbie, empathetic).
barbie_is_girly :- pos(barbie, girly).
barbie_is_not_girly :- neg(barbie, girly).
barbie_is_housewife :- pos(barbie, housewife).
barbie_is_not_housewife :- neg(barbie, housewife).
barbie_is_air_hostess :- pos(barbie, air_hostess).
barbie_is_not_air_hostess :- neg(barbie, air_hostess).
barbie_is_pre_school_teacher :- pos(barbie, pre_school_teacher).
barbie_is_not_pre_school_teacher :- neg(barbie, pre_school_teacher).
barbie_is_web_series :- pos(barbie, web_series).
barbie_is_not_web_series :- neg(barbie, web_series).
barbie_is_life_in_the_dreamhouse :- pos(barbie, life_in_the_dreamhouse).
barbie_is_not_life_in_the_dreamhouse :- neg(barbie, life_in_the_dreamhouse).
barbie_is_car :- pos(barbie, car).
barbie_is_not_car :- neg(barbie, car).
barbie_is_plane :- pos(barbie, plane).
barbie_is_not_plane :- neg(barbie, plane).
barbie_is_ken :- pos(barbie, ken).
barbie_is_not_ken :- neg(barbie, ken).
media_is_telling :- pos(media, telling).
media_is_not_telling :- neg(media, telling).
media_is_buying :- pos(media, buying).
media_is_not_buying :- neg(media, buying).
media_is_wearing :- pos(media, wearing).
media_is_not_wearing :- neg(media, wearing).
media_is_worse :- pos(media, worse).
media_is_not_worse :- neg(media, worse).
boys_are_muscular :- pos(boys, muscular).
boys_are_not_muscular :- neg(boys, muscular).
boys_are_handsome :- pos(boys, handsome).
boys_are_not_handsome :- neg(boys, handsome).
boys_are_action_figures :- pos(boys, action_figures).
boys_are_not_action_figures :- neg(boys, action_figures).
kids_are_smart :- pos(kids, smart).
kids_are_not_smart :- neg(kids, smart).
kids_are_realizing :- pos(kids, realizing).
kids_are_not_realizing :- neg(kids, realizing).
kids_are_learning :- pos(kids, learning).
kids_are_not_learning :- neg(kids, learning).
kids_are_watching :- pos(kids, watching).
kids_are_not_watching :- neg(kids, watching).
kids_are_playing :- pos(kids, playing).
kids_are_not_playing :- neg(kids, playing).
kids_are_picking_up :- pos(kids, picking_up).
kids_are_not_picking_up :- neg(kids, picking_up).
kids_are_emotions :- pos(kids, emotions).
kids_are_not_emotions :- neg(kids, emotions).
kids_are_empathy :- pos(kids, empathy).
kids_are_not_empathy :- neg(kids, empathy).
kids_are_love :- pos(kids, love).
kids_are_not_love :- neg(kids, love).
kids_are_grasping :- pos(kids, grasping).
kids_are_not_grasping :- neg(kids, grasping).
kids_are_movies :- pos(kids, movies).
kids_are_not_movies :- neg(kids, movies).
kids_are_one_sided :- pos(kids, one_sided).
kids_are_not_one_sided :- neg(kids, one_sided).
kids_are_web_series :- pos(kids, web_series).
kids_are_not_web_series :- neg(kids, web_series).
kids_are_life_in_the_dreamhouse :- pos(kids, life_in_the_dreamhouse).
kids_are_not_life_in_the_dreamhouse :- neg(kids, life_in_the_dreamhouse).
kids_are_girly :- pos(kids, girly).
kids_are_not_girly :- neg(kids, girly).
kids_are_strong :- pos(kids, strong).
kids_are_not_strong :- neg(kids, strong).
compare(barbie,X,Y) :- neg(barbie,X),neg(Y,X), barbie != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = barbie.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(gay_marriage, procreation).
neg(gay_marriage, family).
neg(gay_marriage, pleasure).
neg(homosexuality, natural).
neg(homosexuality, moral).
pos(marriage, procreation).
pos(marriage, family).
pos(children, father).
pos(children, mother).
pos(heterosexual_parents, children).

Section 2 - General relationships:

relation(gay_marriage, america).
relation(marriage, procreation).
relation(marriage, family).
relation(children, father).
relation(children, mother).
relation(homosexuality, natural).
relation(homosexuality, moral).
relation(heterosexual_parents, children).

Section 3 - Encoding:

procreation_marriage :- pos(marriage, procreation).
family_marriage :- pos(marriage, family).
father_children :- pos(children, father).
mother_children :- pos(children, mother).
heterosexual_parents_children :- pos(heterosexual_parents, children).
unnatural_homosexuality :- neg(homosexuality, natural).
immoral_homosexuality :- neg(homosexuality, moral).
pleasure_homosexuality :- neg(gay_marriage, pleasure).
compare(gay_marriage,X,Y) :- neg(gay_marriage,X),neg(Y,X), gay_marriage != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gay_marriage.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(libertarianism, goals).
pos(conservatism, goals).
pos(hoppes, thesis).
pos(statist, conservatism).
pos(libertarianism, conservatism).
pos(libertarianism, allies).
pos(conservatism, allies).

neg(libertarianism, goals).
neg(conservatism, goals).
neg(hoppes, thesis).
neg(statist, conservatism).
neg(libertarianism, conservatism).
neg(libertarianism, allies).
neg(conservatism, allies).

Section 2 - General relationships:

relation(libertarianism, conservatism).
relation(hoppes, thesis).
relation(statist, conservatism).

Section 3 - Encoding:

libertarianism_and_conservatism_are_allies :- pos(libertarianism, conservatism).
libertarianism_and_conservatism_are_not_allies :- neg(libertarianism, conservatism).
compare(libertarianism, conservatism, X) :- neg(libertarianism, X), neg(conservatism, X), libertarianism != conservatism.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = libertarianism.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(sikh_god, christian_god).
pos(god, light).
pos(bible, smaller_lights).
pos(women, leaders).
pos(women, rulers).
pos(sikhism, women).
neg(christian, chauvinistic_pig).

Section 2 - General relationships:

relation(sikh_god, christian_god).
relation(god, light).
relation(bible, smaller_lights).
relation(women, leaders).
relation(women, rulers).
relation(sikhism, women).
relation(christian, chauvinistic_pig).

Section 3 - Encoding:

sikh_god_is_christian_god :- pos(sikh_god, christian_god).
god_is_light :- pos(god, light).
bible_refers_to_us_as_smaller_lights :- pos(bible, smaller_lights).
women_are_leaders :- pos(women, leaders).
women_are_rulers :- pos(women, rulers).
sikhism_respects_women :- pos(sikhism, women).
christians_are_chauvinistic_pigs :- neg(christian, chauvinistic_pig).

compare(sikh_god,X,Y) :- neg(sikh_god,X),neg(Y,X), sikh_god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = sikh_god.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(forcing_people, voting).
neg(voters, random_voting).
pos(releasing_full_details, public_trust).
pos(citizenship_classes, electoral_process).
pos(citizenship_classes, suffragette_movement).
pos(citizenship_classes, reform_bills).
pos(citizenship_classes, responsibilities_of_living_in_a_democracy).

Section 2 - General relationships:

relation(persuasion, coercion).
relation(forcing_people, voting).
relation(voters, random_voting).
relation(releasing_full_details, public_trust).
relation(citizenship_classes, electoral_process).
relation(citizenship_classes, suffragette_movement).
relation(citizenship_classes, reform_bills).
relation(citizenship_classes, responsibilities_of_living_in_a_democracy).

Section 3 - Encoding:

neg(forcing_people, voting) :- neg(voters, random_voting).
pos(releasing_full_details, public_trust) :- pos(citizenship_classes, electoral_process).
pos(releasing_full_details, public_trust) :- pos(citizenship_classes, suffragette_movement).
pos(releasing_full_details, public_trust) :- pos(citizenship_classes, reform_bills).
pos(releasing_full_details, public_trust) :- pos(citizenship_classes, responsibilities_of_living_in_a_democracy).
compare(forcing_people, X, Y) :- neg(forcing_people, X), neg(Y, X), forcing_people != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = forcing_people.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(anecdotal_evidence, pragmatic_concerns).
pos(doxastic_concerns, debating).

Section 2 - General relationships:

relation(anecdotal_evidence, point).
relation(beliefs, pragmatic_concerns).
relation(beliefs, doxastic_concerns).
relation(doxastic_concerns, debating).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(neo_nazis, control_ukraine_government).
pos(fascists, control_ukraine_government).
pos(svoboda, far_right_political_party).
pos(oleh_tyahnebok, leader_svoboda).
pos(oleh_tyahnebok, co_signed_letter_president_yuschenko).
pos(oleh_tyahnebok, wanted_president_investigate_criminal_activities_organized_jewry_ukraine).
pos(oleh_tyahnebok, made_comments_speech_carpathian_mountains).
pos(oleh_tyahnebok, referred_ukrainian_people_watching_television_moscow_jewish_mafia_ruling_ukraine_fears_most).
pos(oleh_tyahnebok, gave_speech_recognition_members_ukrainian_insurgent_army).
pos(ukrainian_insurgent_army, committed_crimes_murder_over_million_jews_western_ukraine).
pos(svoboda, once_known_social_national_party_ukraine).
pos(svoboda, modified_wolfsangel_rune_symbol).
pos(stepan_bandera, head_organization_controlled_ukrainian_insurgent_army).
pos(arsenyi_yatsenyuk, acting_prime_minister).
pos(arsenyi_yatsenyuk, made_comment_let_us_honor_brave_soldiers_ukrainian_insurgent_army_died_this_day).
pos(arsenyi_yatsenyuk, ukrainian_nationalist).
pos(arsenyi_yatsenyuk, supported_protests).
pos(andriy_parubiy, head_ukrainian_national_security_council).
pos(andriy_parubiy, gave_title_hero_ukraine_stepan_bandera).
pos(andriy_parubiy, conducting_antiterrorist_operations_east_ukraine_presently).
pos(oleh_tyahnebok, supports_arsenyi_yatsenyuk).
pos(right_sector, organization_similar_svoboda).
pos(right_sector, had_major_part_protests).

neg(svoboda, social_national_party_ukraine).
neg(oleh_tyahnebok, afraid_ukrainian_insurgent_army).
neg(ukrainian_insurgent_army, afraid_moscovites_germans_jews_other_scum).
neg(oleh_tyahnebok, told_ukrainian_insurgent_army_collaboration_hitler).
neg(arsenyi_yatsenyuk, member_svoboda).

Section 2 - General relationships:

relation(neo_nazis, ukraine_government).
relation(fascists, ukraine_government).
relation(svoboda, ukraine_parliament).
relation(oleh_tyahnebok, president_yuschenko).
relation(oleh_tyahnebok, ukrainian_insurgent_army).
relation(ukrainian_insurgent_army, jews).
relation(svoboda, social_national_party_ukraine).
relation(stepan_bandera, ukrainian_insurgent_army).
relation(arsenyi_yatsenyuk, ukrainian_national_guard).
relation(andriy_parubiy, ukrainian_national_security_council).
relation(andriy_parubiy, stepan_bandera).
relation(andriy_parubiy, east_ukraine).
relation(oleh_tyahnebok, arsenyi_yatsenyuk).
relation(right_sector, protests).

Section 3 - Encoding:

neo_nazis_are_in_control_because :- pos(neo_nazis,Y).
fascists_are_in_control_because :- pos(fascists,Y).
svoboda_is_far_right_because :- pos(svoboda,Y).
oleh_tyahnebok_is_leader_svoboda_because :- pos(oleh_tyahnebok,Y).
oleh_tyahnebok_co_signed_letter_because :- pos(oleh_tyahnebok,Y).
oleh_tyahnebok_wanted_president_investigate_because :- pos(oleh_tyahnebok,Y).
oleh_tyahnebok_made_comments_because :- pos(oleh_tyahnebok,Y).
oleh_tyahnebok_referred_ukrainian_people_because :- pos(oleh_tyahnebok,Y).
oleh_tyahnebok_gave_speech_because :- pos(oleh_tyahnebok,Y).
oleh_tyahnebok_is_not_afraid_because :- neg(oleh_tyahnebok,Y).
ukrainian_insurgent_army_is_not_afraid_because :- neg(ukrainian_insurgent_army,Y).
oleh_tyahnebok_did_not_tell_because :- neg(oleh_tyahnebok,Y).
svoboda_was_once_known_as_because :- pos(svoboda,Y).
svoboda_has_modified_wolfsangel_rune_as_symbol_because :- pos(svoboda,Y).
stepan_bandera_is_head_organization_because :- pos(stepan_bandera,Y).
arsenyi_yatsenyuk_is_acting_prime_minister_because :- pos(arsenyi_yatsenyuk,Y).
arsenyi_yatsenyuk_made_comment_because :- pos(arsenyi_yatsenyuk,Y).
arsenyi_yatsenyuk_is_ukrainian_nationalist_because :- pos(arsenyi_yatsenyuk,Y).
arsenyi_yatsenyuk_supported_protests_because :- pos(arsenyi_yatsenyuk,Y).
andriy_parubiy_is_head_ukrainian_national_security_council_because :- pos(andriy_parubiy,Y).
andriy_parubiy_gave_title_hero_ukraine_because :- pos(andriy_parubiy,Y).
andriy_parubiy_is_conducting_antiterrorist_operations_because :- pos(andriy_parubiy,Y).
oleh_tyahnebok_supports_arsenyi_yatsenyuk_because :- pos(oleh_tyahnebok,Y).
right_sector_is_organization_similar_svoboda_because :- pos(right_sector,Y).
right_sector_had_major_part_protests_because :- pos(right_sector,Y).

compare(neo_nazis,X,Y) :- neg(neo_nazis,X),neg(Y,X), neo_nazis != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = neo_nazis.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(internet, coordination_medium).
pos(jihadist_groups, internet).
pos(internet, disruptive_tactics).
pos(internet, influence).
pos(internet, election_outcome).
pos(internet, base_for_elections).
pos(internet, development_of_base).
pos(internet, democracy).
pos(internet, elections).
pos(internet, stable_base).
pos(internet, transition_to_democracy).
pos(internet, undermining).
pos(internet, websites).
pos(internet, opposition_candidates).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_regimes).
pos(internet, democracy).
pos(internet, jihadist_groups).
pos(internet, middle_eastern_states).
pos(internet, hackers).
pos(internet, russian_government).
pos(internet, key_politicians).
pos(internet, ministries).
pos(internet, utilities).
pos(internet, estonia).
pos(internet, soviet_war_memorial).
pos(internet, belarusian_elections).
pos(internet, ddos_attacks).
pos(internet, sub_state_groups).
pos(internet, repressive_
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(education, culture).
pos(education, arts).
pos(education, creativity).
pos(education, vocational_subjects).
pos(education, life_skills).
pos(education, home_language).
pos(education, mathematics).
pos(education, science).
pos(education, modern_languages).
pos(education, business_studies).
pos(education, law).
pos(education, employment).
neg(education, artistic_subjects).
neg(education, poetry).

Section 2 - General relationships:

relation(education, culture).
relation(education, arts).
relation(education, creativity).
relation(education, vocational_subjects).
relation(education, life_skills).
relation(education, home_language).
relation(education, mathematics).
relation(education, science).
relation(education, modern_languages).
relation(education, business_studies).
relation(education, law).
relation(education, employment).
relation(education, artistic_subjects).
relation(education, poetry).

Section 3 - Encoding:

education_is_good_because :- pos(education, Y).
education_is_bad_because :- neg(education, Y).
compare(education,X,Y) :- neg(education,X),neg(Y,X), education != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = education.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(con, evidence).
neg(con, facts).
neg(con, truth).
neg(con, morality).
neg(con, gods_word).
pos(i, truth).
pos(gods_word, truth).

% Section 2 - General relationships
relation(con, flesh).
relation(con, readers).
relation(i, government).
relation(i, gods_word).
relation(i, con).
relation(i, human_race).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(invitro_fertilization, experience_of_pregnancy).
neg(adoption, experience_of_pregnancy).
pos(adoption, less_costly_procedure).
neg(invitro_fertilization, less_costly_procedure).
pos(adoption, immediate_satisfaction).
neg(invitro_fertilization, immediate_satisfaction).

Section 2 - General relationships:

relation(invitro_fertilization, child).
relation(adoption, child).
relation(adoption, cost).
relation(invitro_fertilization, cost).
relation(adoption, time).
relation(invitro_fertilization, time).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(climate_anomalies, anthropogenic).
pos(co2_levels, anthropogenic).
pos(greenhouse_effect, co2).
pos(ice_caps_melting, co2_levels).
pos(oceanic_greenhouse_effects, co2).
pos(temperature_anomalies, co2_levels).

neg(co2_levels, natural).

Section 2 - General relationships:

relation(climate_anomalies, co2_levels).
relation(co2_levels, greenhouse_effect).
relation(greenhouse_effect, ice_caps_melting).
relation(ice_caps_melting, oceanic_greenhouse_effects).
relation(oceanic_greenhouse_effects, temperature_anomalies).

Section 3 - Encoding:

climate_anomalies_are_anthropogenic :- pos(climate_anomalies, anthropogenic).
climate_anomalies_are_not_anthropogenic :- neg(climate_anomalies, anthropogenic).
co2_levels_are_anthropogenic :- pos(co2_levels, anthropogenic).
co2_levels_are_not_anthropogenic :- neg(co2_levels, anthropogenic).
greenhouse_effect_is_caused_by_co2 :- pos(greenhouse_effect, co2).
greenhouse_effect_is_not_caused_by_co2 :- neg(greenhouse_effect, co2).
ice_caps_melting_is_caused_by_co2_levels :- pos(ice_caps_melting, co2_levels).
ice_caps_melting_is_not_caused_by_co2_levels :- neg(ice_caps_melting, co2_levels).
oceanic_greenhouse_effects_are_caused_by_co2 :- pos(oceanic_greenhouse_effects, co2).
oceanic_greenhouse_effects_are_not_caused_by_co2 :- neg(oceanic_greenhouse_effects, co2).
temperature_anomalies_are_caused_by_co2_levels :- pos(temperature_anomalies, co2_levels).
temperature_anomalies_are_not_caused_by_co2_levels :- neg(temperature_anomalies, co2_levels).
compare(climate_anomalies, X, Y) :- neg(climate_anomalies, X), neg(Y, X), climate_anomalies != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = climate_anomalies.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(gun_rights_people, guns_kill_people).
pos(people, guns_kill_people).
pos(guns, kill).
pos(guns, injure).

Section 2 - General relationships:

relation(guns, people).
relation(guns, criminals).
relation(guns, murder).
relation(guns, task).
relation(guns, problem).

Section 3 - Encoding:

gun_rights_people_is_good_because :- pos(gun_rights_people, Y).
gun_rights_people_is_bad_because :- neg(gun_rights_people, Y).
compare(gun_rights_people,X,Y) :- neg(gun_rights_people,X),neg(Y,X), gun_rights_people != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gun_rights_people.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(gandhigiri, relevant).
pos(gandhigiri, today).
pos(gandhi, ideologies).
pos(gandhi, thoughts).
pos(gandhi, views).
pos(gandhi, philosophies).
pos(gandhi, leader).
pos(gandhi, problems).
pos(gandhi, country).
pos(gandhi, ideas).
pos(satyagrah, solution).
pos(satyagrah, problems).
pos(satyagrah, world).
pos(satyagrah, issues).
pos(satyagrah, revenge).
pos(satyagrah, war).

neg(india, harmony).
neg(pakistan, harmony).
neg(world, gandhigiri).

Section 2 - General relationships:

relation(gandhigiri, india).
relation(gandhigiri, pakistan).
relation(gandhi, india).
relation(gandhi, pakistan).
relation(gandhi, world).
relation(satyagrah, gandhi).
relation(satyagrah, world).
relation(satyagrah, issues).
relation(satyagrah, war).

Section 3 - Encoding:

gandhigiri_is_relevant_because :- pos(gandhigiri, Y).
gandhigiri_is_not_relevant_because :- neg(gandhigiri, Y).
compare(gandhigiri,X,Y) :- neg(gandhigiri,X),neg(Y,X), gandhigiri != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gandhigiri.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(brazil, united_states).
pos(russia, united_states).
pos(india, united_states).
pos(china, united_states).
pos(american_public, big_media_scandal).
pos(american_public, investors_taking_out_their_shares).
pos(american_public, company_losing_money).
pos(american_public, fixing_the_problem).
pos(businesses, jobs).
pos(businesses, money).
pos(businesses, expansion).
pos(businesses, job_creation).
pos(china, job_creation).
pos(bric_countries, active_role).
pos(bric_countries, burden_reduction).
pos(united_states_army, money).

neg(lead_poisoning, united_states).
neg(china, united_states_unemployment).
neg(bad_economy, united_states_unemployment).
neg(poor_government_handling, united_states_unemployment).
neg(china, job_stealing).
neg(businesses, job_cuts).
neg(bric_countries, united_states_enemy).
neg(bric_countries, united_states_friend).

% Section 2 - General relationships
relation(brazil, united_states).
relation(russia, united_states).
relation(india, united_states).
relation(china, united_states).
relation(american_public, big_media_scandal).
relation(american_public, investors_taking_out_their_shares).
relation(american_public, company_losing_money).
relation(american_public, fixing_the_problem).
relation(businesses, jobs).
relation(businesses, money).
relation(businesses, expansion).
relation(businesses, job_creation).
relation(china, job_creation).
relation(bric_countries, active_role).
relation(bric_countries, burden_reduction).
relation(united_states_army, money).
relation(lead_poisoning, united_states).
relation(china, united_states_unemployment).
relation(bad_economy, united_states_unemployment).
relation(poor_government_handling, united_states_unemployment).
relation(china, job_stealing).
relation(businesses, job_cuts).
relation(bric_countries, united_states_enemy).
relation(bric_countries, united_states_friend).

% Section 3 - Encoding
brazil_is_good_because :- pos(brazil,Y).
brazil_is_bad_because :- neg(brazil,Y).
russia_is_good_because :- pos(russia,Y).
russia_is_bad_because :- neg(russia,Y).
india_is_good_because :- pos(india,Y).
india_is_bad_because :- neg(india,Y).
china_is_good_because :- pos(china,Y).
china_is_bad_because :- neg(china,Y).
compare(brazil,X,Y) :- neg(brazil,X),neg(Y,X), brazil != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = brazil.
compare(russia,X,Y) :- neg(russia,X),neg(Y,X), russia != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = russia.
compare(india,X,Y) :- neg(india,X),neg(Y,X), india != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = india.
compare(china,X,Y) :- neg(china,X),neg(Y,X), china != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = china.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(space_program, regular_people).
pos(space_program, resources).
pos(space_program, people).
pos(space_program, food).
pos(space_program, water).

Section 2 - General relationships:

relation(space_exploration, resources).
relation(space_exploration, earth).
relation(space_program, space_exploration).
relation(space_program, resources).
relation(space_program, people).
relation(space_program, food).
relation(space_program, water).
relation(earth, resources).
relation(earth, people).
relation(earth, food).
relation(earth, water).
relation(earth, governments).

Section 3 - Encoding:

space_exploration_is_good_because :- pos(space_exploration, Y).
space_exploration_is_bad_because :- neg(space_exploration, Y).
compare(space_exploration,X,Y) :- neg(space_exploration,X),neg(Y,X), space_exploration != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = space_exploration.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(devolution, ability).
pos(scots, ability).
pos(scots, civility).
pos(westminster, politics).
neg(westminster, civility).
pos(alex_salmond, westminster).
neg(holyrood, good_politics).
neg(holyrood, scandal).

Section 2 - General relationships:

relation(devolution, scots).
relation(devolution, westminster).
relation(westminster, politics).
relation(alex_salmond, westminster).
relation(holyrood, scandal).

Section 3 - Encoding:

devolution_is_good_because :- pos(devolution, Y).
devolution_is_bad_because :- neg(devolution, Y).
compare(devolution,X,Y) :- neg(devolution,X),neg(Y,X), devolution != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = devolution.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(higher_taxes, hard_work).
pos(american_producers, level_playing_field).
neg(todays_tax_code, american_producers).
neg(todays_tax_code, american_investors).
neg(todays_tax_code, american_managers).
neg(todays_tax_code, u_s_balance_of_trade).
neg(todays_tax_code, american_jobs).
pos(major_reduction, corporate_tax_rate).
pos(major_reduction, american_companies).
pos(major_reduction, american_jobs).

% Section 2 - General relationships
relation(higher_taxes, hard_work).
relation(american_producers, level_playing_field).
relation(todays_tax_code, american_producers).
relation(todays_tax_code, american_investors).
relation(todays_tax_code, american_managers).
relation(todays_tax_code, u_s_balance_of_trade).
relation(todays_tax_code, american_jobs).
relation(major_reduction, corporate_tax_rate).
relation(major_reduction, american_companies).
relation(major_reduction, american_jobs).

% Section 3 - Encoding
higher_taxes_discourage_hard_work :- neg(higher_taxes, hard_work).
american_producers_can_compete_successfully :- pos(american_producers, level_playing_field).
todays_tax_code_is_tilted_against_american_producers :- neg(todays_tax_code, american_producers).
todays_tax_code_hurts_american_investors :- neg(todays_tax_code, american_investors).
todays_tax_code_hurts_american_managers :- neg(todays_tax_code, american_managers).
todays_tax_code_hurts_u_s_balance_of_trade :- neg(todays_tax_code, u_s_balance_of_trade).
todays_tax_code_sends_american_jobs_overseas :- neg(todays_tax_code, american_jobs).
we_support_a_major_reduction_in_the_corporate_tax_rate :- pos(major_reduction, corporate_tax_rate).
american_companies_stay_competitive_with_their_foreign_counterparts :- pos(major_reduction, american_companies).
american_jobs_can_remain_in_this_country :- pos(major_reduction, american_jobs).
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(m1_garand, battle_implement).
pos(m1_garand, semi_automatic).
pos(m1_garand, firepower).
pos(m1_garand, shot_for_shot_recovery_time).
pos(m1_garand, penetration).
pos(m1_garand, range_finder).
pos(m1_garand, come_ups).
pos(m1_garand, accurate).
pos(m1_garand, effective).
pos(m1_garand, variety).
pos(m1_garand, combat_situations).
pos(m1_garand, thirty_ought_six_round).
pos(m1_garand, aperture_sight).
pos(m1_garand, scope).
pos(m1_garand, telescope).
pos(m1_garand, american_infantry).
pos(m1_garand, soldier).
pos(m1_garand, enemy_infantry).
pos(m1_garand, german).
pos(m1_garand, italian).
pos(m1_garand, japanese).
pos(m1_garand, man_sized_target).
pos(m1_garand, twenty_five_to_five_hundred_yd).
pos(m1_garand, world_war_ii).
pos(m1_garand, model_nineteen_hundred_and_three_springfield).
pos(m1_garand, bolt_action).
pos(m1_garand, three_hundred_army).
pos(m1_garand, ordance).
pos(m1_garand, war_department).
pos(m1_garand, january).
pos(m1_garand, nineteen_hundred_and_forty_five).
pos(m1_garand, u_s_department_of_the_army_technical_manual).
pos(m1_garand, u_s_marine_rifleman).
pos(m1_garand, pacific_theater).
pos(m1_garand, osprey_publishing).
pos(m1_garand, isbn).
pos(m1_garand, shots_fired_in_anger).
pos(m1_garand, samworth_press).
pos(m1_garand, becomingriflemen).
pos(m1_garand, wordpress).

neg(m1_garand, best_battle_implement_ever_devised).
neg(m1_garand, best_rifle_ever_devised).

Section 2 - General relationships:

relation(m1_garand, battle_implement).
relation(m1_garand, rifle).
relation(m1_garand, world_war_ii).
relation(m1_garand, semi_automatic).
relation(m1_garand, firepower).
relation(m1_garand, shot_for_shot_recovery_time).
relation(m1_garand, penetration).
relation(m1_garand, range_finder).
relation(m1_garand, come_ups).
relation(m1_garand, accurate).
relation(m1_garand, effective).
relation(m1_garand, variety).
relation(m1_garand, combat_situations).
relation(m1_garand, thirty_ought_six_round).
relation(m1_garand, aperture_sight).
relation(m1_garand, scope).
relation(m1_garand, telescope).
relation(m1_garand, american_infantry).
relation(m1_garand, soldier).
relation(m1_garand, enemy_infantry).
relation(m1_garand, german).
relation(m1_garand, italian).
relation(m1_garand, japanese).
relation(m1_garand, man_sized_target).
relation(m1_garand, twenty_five_to_five_hundred_yd).
relation(m1_garand, world_war_ii).
relation(m1_garand, model_nineteen_hundred_and_three_springfield).
relation(m1_garand, bolt_action).
relation(m1_garand, three_hundred_army).
relation(m1_garand, ordance).
relation(m1_garand, war_department).
relation(m1_garand, january).
relation(m1_garand, nineteen_hundred_and_forty_five).
relation(m1_garand, u_s_department_of_the_army_technical_manual).
relation(m1_garand, u_s_marine_rifleman).
relation(m1_garand, pacific_theater).
relation(m1_garand, osprey_publishing).
relation(m1_garand, isbn).
relation(m1_garand, shots_fired_in_anger).
relation(m1_garand, samworth_press).
relation(m1_garand, becomingriflemen).
relation(m1_garand, wordpress).

Section 3 - Encoding:

m1_garand_is_good_because :- pos(m1_garand,Y).
m1_garand_is_bad_because :- neg(m1_garand,Y).
compare(m1_garand,X,Y) :- neg(m1_garand,X),neg(Y,X), m1_garand != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = m1_garand.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(united_states_government, lesser_sentence).
pos(mentally_ill_defendants, lesser_sentence).
pos(mentally_ill_persons, proper_care).
pos(mentally_ill_persons, jobs).
pos(mentally_ill_persons, funds).
pos(mentally_ill_persons, treatment).
pos(states, programs).
pos(states, funds).
pos(psychiatric_hospital, treatment).
pos(physicians, attending).
pos(physicians, release).
pos(physicians, negligence).
pos(physicians, manslaughter).
pos(ill_persons, psychotic_episodes).
pos(ill_persons, perceptions).
pos(ill_persons, threat).
pos(ill_persons, residential_treatment_facility).
pos(ill_persons, socioty).
pos(ill_persons, productivity).
pos(ill_persons, release).
pos(ill_persons, percentage).
pos(ill_persons, nonviolent_crimes).
pos(ill_persons, violent_crimes).
pos(ill_persons, small_sentences).
pos(ill_persons, costs).
pos(ill_persons, proposed_plan).

neg(insane_asylums, care).
neg(mentally_ill_persons, proper_care).
neg(mentally_ill_persons, jobs).
neg(mentally_ill_persons, funds).
neg(mentally_ill_persons, treatment).
neg(states, funds).
neg(physicians, release).
neg(ill_persons, perceptions).
neg(ill_persons, threat).
neg(ill_persons, socioty).
neg(ill_persons, productivity).
neg(ill_persons, release).
neg(ill_persons, costs).
neg(ill_persons, proposed_plan).

Section 2 - General relationships:

relation(united_states_government, mentally_ill_defendants).
relation(mentally_ill_defendants, lesser_sentence).
relation(mentally_ill_persons, insane_asylums).
relation(mentally_ill_persons, streets).
relation(mentally_ill_persons, states).
relation(mentally_ill_persons, programs).
relation(mentally_ill_persons, funds).
relation(mentally_ill_persons, treatment).
relation(mentally_ill_persons, stigma).
relation(mentally_ill_persons, violence).
relation(mentally_ill_persons, psychotic_episodes).
relation(mentally_ill_persons, perceptions).
relation(mentally_ill_persons, ill_persons).
relation(mentally_ill_persons, jails).
relation(mentally_ill_persons, residential_treatment_facility).
relation(mentally_ill_persons, socioty).
relation(mentally_ill_persons, productivity).
relation(mentally_ill_persons, release).
relation(mentally_ill_persons, costs).
relation(mentally_ill_persons, proposed_plan).
relation(physicians, attending).
relation(physicians, release).
relation(physicians, negligence).
relation(physicians, manslaughter).
relation(ill_persons, psychotic_episodes).
relation(ill_persons, perceptions).
relation(ill_persons, threat).
relation(ill_persons, jails).
relation(ill_persons, residential_treatment_facility).
relation(ill_persons, socioty).
relation(ill_persons, productivity).
relation(ill_persons, release).
relation(ill_persons, costs).
relation(ill_persons, proposed_plan).

Section 3 - Encoding:

lesser_sentence_because :- pos(X, lesser_sentence).
lesser_sentence_because :- neg(X, lesser_sentence).
proper_care_because :- pos(X, proper_care).
proper_care_because :- neg(X, proper_care).
jobs_because :- pos(X, jobs).
jobs_because :- neg(X, jobs).
funds_because :- pos(X, funds).
funds_because :- neg(X, funds).
treatment_because :- pos(X, treatment).
treatment_because :- neg(X, treatment).
programs_because :- pos(X, programs).
programs_because :- neg(X, programs).
stigma_because :- pos(X, stigma).
stigma_because :- neg(X, stigma).
violence_because :- pos(X, violence).
violence_because :- neg(X, violence).
psychotic_episodes_because :- pos(X, psychotic_episodes).
psychotic_episodes_because :- neg(X, psychotic_episodes).
perceptions_because :- pos(X, perceptions).
perceptions_because :- neg(X, perceptions).
threat_because :- pos(X, threat).
threat_because :- neg(X, threat).
residential_treatment_facility_because :- pos(X, residential_treatment_facility).
residential_treatment_facility_because :- neg(X, residential_treatment_facility).
socioty_because :- pos(X, socioty).
socioty_because :- neg(X, socioty).
productivity_because :- pos(X, productivity).
productivity_because :- neg(X, productivity).
release_because :- pos(X, release).
release_because :- neg(X, release).
costs_because :- pos(X, costs).
costs_because :- neg(X, costs).
proposed_plan_because :- pos(X, proposed_plan).
proposed_plan_because :- neg(X, proposed_plan).
attending_because :- pos(X, attending).
attending_because :- neg(X, attending).
release_because :- pos(X, release).
release_because :- neg(X, release).
negligence_because :- pos(X, negligence).
negligence_because :- neg(X, negligence).
manslaughter_because :- pos(X, manslaughter).
manslaughter_because :- neg(X, manslaughter).
compare(united_states_government,X,Y) :- neg(united_states_government,X),neg(Y,X), united_states_government != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = united_states_government.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(wikipedia, presentation_of_arguments).
pos(wikipedia, neutral_context).
neg(wikipedia, flame_wars).
pos(wikiquette, social_mores).
pos(wikiquette, handily).

Section 2 - General relationships:

relation(wikipedia, usenet).
relation(wikipedia, wikiquette).
relation(arguments, article_pages).
relation(arguments, talk_pages).
relation(arguments, neutral_context).

Section 3 - Encoding:

wikipedia_is_good_because :- pos(wikipedia,Y).
wikipedia_is_bad_because :- neg(wikipedia,Y).
compare(wikipedia,X,Y) :- neg(wikipedia,X),neg(Y,X), wikipedia != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = wikipedia.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(ron_paul, republicans).
neg(ron_paul, effective_changes).
neg(ron_paul, millions_of_votes).
neg(ron_paul, pure).
neg(ron_paul, unusual_ideas).
pos(ron_paul, third_party_candidate).
pos(ron_paul, liberals).
pos(ron_paul, democrats).

Section 2 - General relationships:

relation(ron_paul, republicans).
relation(ron_paul, effective_changes).
relation(ron_paul, millions_of_votes).
relation(ron_paul, pure).
relation(ron_paul, unusual_ideas).
relation(ron_paul, liberals).
relation(ron_paul, democrats).

Section 3 - Encoding:

ron_paul_is_good_because :- pos(ron_paul,Y).
ron_paul_is_bad_because :- neg(ron_paul,Y).
compare(ron_paul,X,Y) :- neg(ron_paul,X),neg(Y,X), ron_paul != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = ron_paul.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(anarcho_capitalism, anarchism).
neg(anarcho_capitalism, philosophy).
pos(anarcho_capitalism, capitalist_system).
neg(anarcho_capitalism, anarchism_philosophy).

Section 2 - General relationships:

relation(anarcho_capitalism, anarchism).
relation(anarcho_capitalism, philosophy).
relation(anarcho_capitalism, capitalist_system).
relation(anarcho_capitalism, anarchism_philosophy).

Section 3 - Encoding:

anarcho_capitalism_is_anarchism :- pos(anarcho_capitalism, anarchism).
anarcho_capitalism_is_not_anarchism :- neg(anarcho_capitalism, anarchism).
anarcho_capitalism_is_philosophy :- pos(anarcho_capitalism, philosophy).
anarcho_capitalism_is_not_philosophy :- neg(anarcho_capitalism, philosophy).
anarcho_capitalism_is_capitalist_system :- pos(anarcho_capitalism, capitalist_system).
anarcho_capitalism_is_not_capitalist_system :- neg(anarcho_capitalism, capitalist_system).
anarcho_capitalism_is_anarchism_philosophy :- pos(anarcho_capitalism, anarchism_philosophy).
anarcho_capitalism_is_not_anarchism_philosophy :- neg(anarcho_capitalism, anarchism_philosophy).
compare(anarcho_capitalism, anarchism, philosophy) :- neg(anarcho_capitalism, anarchism), neg(anarcho_capitalism, philosophy), anarchism != philosophy, anarchism = anarcho_capitalism.
compare(anarcho_capitalism, philosophy, capitalist_system) :- neg(anarcho_capitalism, philosophy), neg(anarcho_capitalism, capitalist_system), philosophy != capitalist_system, philosophy = anarcho_capitalism.
compare(anarcho_capitalism, capitalist_system, anarchism_philosophy) :- neg(anarcho_capitalism, capitalist_system), neg(anarcho_capitalism, anarchism_philosophy), capitalist_system != anarchism_philosophy, capitalist_system = anarcho_capitalism.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(batman, aging_humans).
pos(batman, destroying_plants).
pos(batman, crushing_iron_man).
pos(batman, crushing_hulk).
pos(batman, crushing_black_widow).
pos(batman, crushing_captain_america).
pos(batman, crushing_spiderman).
neg(mojo, aging_humans).
neg(mojo, destroying_plants).
neg(mojo, crushing_iron_man).
neg(mojo, crushing_hulk).
neg(mojo, crushing_black_widow).
neg(mojo, crushing_captain_america).
neg(mojo, crushing_spiderman).

Section 2 - General relationships:

relation(batman, mojo).
relation(mantis, wasp).
relation(mantis, avengers).
relation(wasp, avengers).
relation(iron_man, weapons).
relation(iron_man, leg_guns).
relation(hulk, natural_disasters).

Section 3 - Encoding:

batman_is_better_than_mojo :- pos(batman,X), neg(mojo,X).
mojo_is_better_than_batman :- pos(mojo,X), neg(batman,X).
compare(batman,X,Y) :- neg(batman,X),neg(Y,X), batman != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = batman.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(global_warming, lie).
neg(global_warming, eco_terrorists).
neg(eco_terrorists, technology).
neg(eco_terrorists, primitive_life_style).
pos(carbon, natural_cycle).
pos(earth, natural_cycle).
pos(eco_terrorists, hysteria).

% Section 2 - General relationships
relation(global_warming, eco_terrorists).
relation(global_warming, lie).
relation(eco_terrorists, technology).
relation(eco_terrorists, primitive_life_style).
relation(carbon, natural_cycle).
relation(earth, natural_cycle).
relation(eco_terrorists, hysteria).

% Section 3 - Encoding
global_warming_is_a_lie :- neg(global_warming, lie).
global_warming_is_not_a_lie :- pos(global_warming, lie).
eco_terrorists_are_spreading_lies :- neg(eco_terrorists, lie).
eco_terrorists_are_not_spreading_lies :- pos(eco_terrorists, lie).
technology_is_bad :- neg(technology, good).
technology_is_not_bad :- pos(technology, good).
primitive_life_style_is_good :- neg(primitive_life_style, bad).
primitive_life_style_is_not_good :- pos(primitive_life_style, bad).
carbon_is_natural :- pos(carbon, natural_cycle).
carbon_is_not_natural :- neg(carbon, natural_cycle).
earth_is_natural :- pos(earth, natural_cycle).
earth_is_not_natural :- neg(earth, natural_cycle).
eco_terrorists_are_causing_hysteria :- neg(eco_terrorists, hysteria).
eco_terrorists_are_not_causing_hysteria :- pos(eco_terrorists, hysteria).
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(human_rights, not_censoring).
neg(not_censoring, human_rights_in_china).
neg(google_cn, good_way_to_access_information).
pos(google, broaden_access_to_information).

Section 2 - General relationships:

relation(not_censoring, human_rights).
relation(google, human_rights_in_china).
relation(google_cn, chinese_citizens).
relation(google_cn, google).
relation(google_com, great_firewall).
relation(baidu, chinese_government).

Section 3 - Encoding:

human_rights_are_violated :- neg(human_rights,Y).
not_censoring_doesnt_advance_human_rights :- neg(human_rights_in_china,Y).
google_cn_will_get_shut_down :- neg(google_cn,Y).
google_can_broaden_access_to_information :- pos(google,Y).
compare(google,X,Y) :- neg(google,X),neg(Y,X), google != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = google.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(children, watch_tv_during_school_week).
neg(children, censorship).
neg(children, body_image).
neg(children, addiction).
neg(children, lack_of_socialization).
neg(children, obesity).
neg(children, cliffhangers).
neg(children, corporate_advertising).
neg(children, scheduled_show_times).
neg(children, long_shows).
neg(children, anorexia).
neg(children, lack_of_exercise).
neg(children, tv_as_accurate_representation_of_society).

Section 2 - General relationships:

relation(children, tv).
relation(children, parents).
relation(children, school).
relation(children, books).
relation(children, obesity).
relation(children, socialization).
relation(children, media).
relation(children, cliffhangers).
relation(children, corporate_advertising).
relation(children, scheduled_show_times).
relation(children, long_shows).
relation(children, anorexia).
relation(children, lack_of_exercise).
relation(children, tv_as_accurate_representation_of_society).

Section 3 - Encoding:

children_should_watch_tv_because :- pos(children, X).
children_should_not_watch_tv_because :- neg(children, X).
compare(children, X, Y) :- neg(children, X), neg(children, Y), children != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = children.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(earth, expanding).
pos(aether, fictitious).
neg(aether, single_particle).
neg(aether, universe).
neg(aether, spin).
neg(color_argument, universe).
neg(color_argument, three_options).
neg(color_argument, left_spin).
neg(color_argument, right_spin).
neg(color_argument, no_spin_states).
neg(color_argument, human_brain).
neg(color_argument, primary_colors).
neg(color_argument, red).
neg(color_argument, blue).
neg(color_argument, green).
neg(color_argument, particle).
neg(color_argument, color).
neg(color_argument, spin).
neg(color_argument, two_things).
neg(color_argument, different_materials).
neg(color_argument, exact_same_color).
neg(science_world, existence_aether).
neg(science_world, motive).
neg(science_world, sense).
neg(science_world, test).
neg(science_world, device).
neg(science_world, grusenick_experiment_proves_existence_ether).
neg(science_world, aether).
neg(science_world, important).
neg(science_world, functioning).
neg(science_world, universe).

Section 2 - General relationships:

relation(earth, expanding).
relation(aether, fictitious).
relation(aether, single_particle).
relation(aether, universe).
relation(aether, spin).
relation(color_argument, universe).
relation(color_argument, three_options).
relation(color_argument, left_spin).
relation(color_argument, right_spin).
relation(color_argument, no_spin_states).
relation(color_argument, human_brain).
relation(color_argument, primary_colors).
relation(color_argument, red).
relation(color_argument, blue).
relation(color_argument, green).
relation(color_argument, particle).
relation(color_argument, color).
relation(color_argument, spin).
relation(color_argument, two_things).
relation(color_argument, different_materials).
relation(color_argument, exact_same_color).
relation(science_world, existence_aether).
relation(science_world, motive).
relation(science_world, sense).
relation(science_world, test).
relation(science_world, device).
relation(science_world, grusenick_experiment_proves_existence_ether).
relation(science_world, aether).
relation(science_world, important).
relation(science_world, functioning).
relation(science_world, universe).

Section 3 - Encoding:

expanding_is_good_because :- pos(expanding,Y).
expanding_is_bad_because :- neg(expanding,Y).
aether_is_good_because :- pos(aether,Y).
aether_is_bad_because :- neg(aether,Y).
fictitious_is_good_because :- pos(fictitious,Y).
fictitious_is_bad_because :- neg(fictitious,Y).
single_particle_is_good_because :- pos(single_particle,Y).
single_particle_is_bad_because :- neg(single_particle,Y).
universe_is_good_because :- pos(universe,Y).
universe_is_bad_because :- neg(universe,Y).
spin_is_good_because :- pos(spin,Y).
spin_is_bad_because :- neg(spin,Y).
color_argument_is_good_because :- pos(color_argument,Y).
color_argument_is_bad_because :- neg(color_argument,Y).
three_options_is_good_because :- pos(three_options,Y).
three_options_is_bad_because :- neg(three_options,Y).
left_spin_is_good_because :- pos(left_spin,Y).
left_spin_is_bad_because :- neg(left_spin,Y).
right_spin_is_good_because :- pos(right_spin,Y).
right_spin_is_bad_because :- neg(right_spin,Y).
no_spin_states_is_good_because :- pos(no_spin_states,Y).
no_spin_states_is_bad_because :- neg(no_spin_states,Y).
human_brain_is_good_because :- pos(human_brain,Y).
human_brain_is_bad_because :- neg(human_brain,Y).
primary_colors_is_good_because :- pos(primary_colors,Y).
primary_colors_is_bad_because :- neg(primary_colors,Y).
red_is_good_because :- pos(red,Y).
red_is_bad_because :- neg(red,Y).
blue_is_good_because :- pos(blue,Y).
blue_is_bad_because :- neg(blue,Y).
green_is_good_because :- pos(green,Y).
green_is_bad_because :- neg(green,Y).
particle_is_good_because :- pos(particle,Y).
particle_is_bad_because :- neg(particle,Y).
color_is_good_because :- pos(color,Y).
color_is_bad_because :- neg(color,Y).
two_things_is_good_because :- pos(two_things,Y).
two_things_is_bad_because :- neg(two_things,Y).
different_materials_is_good_because :- pos(different_materials,Y).
different_materials_is_bad_because :- neg(different_materials,Y).
exact_same_color_is_good_because :- pos(exact_same_color,Y).
exact_same_color_is_bad_because :- neg(exact_same_color,Y).
existence_aether_is_good_because :- pos(existence_aether,Y).
existence_aether_is_bad_because :- neg(existence_aether,Y).
motive_is_good_because :- pos(motive,Y).
motive_is_bad_because :- neg(motive,Y).
sense_is_good_because :- pos(sense,Y).
sense_is_bad_because :- neg(sense,Y).
test_is_good_because :- pos(test,Y).
test_is_bad_because :- neg(test,Y).
device_is_good_because :- pos(device,Y).
device_is_bad_because :- neg(device,Y).
grusenick_experiment_proves_existence_ether_is_good_because :- pos(grusenick_experiment_proves_existence_ether,Y).
grusenick_experiment_proves_existence_ether_is_bad_because :- neg(grusenick_experiment_proves_existence_ether,Y).
important_is_good_because :- pos(important,Y).
important_is_bad_because :- neg(important,Y).
functioning_is_good_because :- pos(functioning,Y).
functioning_is_bad_because :- neg(functioning,Y).
compare(expanding,X,Y) :- neg(expanding,X),neg(Y,X), expanding != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = expanding.
compare(aether,X,Y) :- neg(aether,X),neg(Y,X), aether != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = aether.
compare(fictitious,X,Y) :- neg(fictitious,X),neg(Y,X), fictitious != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = fictitious.
compare(single_particle,X,Y) :- neg(single_particle,X),neg(Y,X), single_particle != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = single_particle.
compare(universe,X,Y) :- neg(universe,X),neg(Y,X), universe != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = universe.
compare(spin,X,Y) :- neg(spin,X),neg(Y,X), spin != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = spin.
compare(color_argument,X,Y) :- neg(color_argument,X),neg(Y,X), color_argument != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = color_argument.
compare(three_options,X,Y) :- neg(three_options,X),neg(Y,X), three_options != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = three_options.
compare(left_spin,X,Y) :- neg(left_spin,X),neg(Y,X), left_spin != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = left_spin.
compare(right_spin,X,Y) :- neg(right_spin,X),neg(Y,X), right_spin != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = right_spin.
compare(no_spin_states,X,Y) :- neg(no_spin_states,X),neg(Y,X), no_spin_states != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = no_spin_states.
compare(human_brain,X,Y) :- neg(human_brain,X),neg(Y,X), human_brain != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = human_brain.
compare(primary_colors,X,Y) :- neg(primary_colors,X),neg(Y,X), primary_colors != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = primary_colors.
compare(red,X,Y) :- neg(red,X),neg(Y,X), red != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = red.
compare(blue,X,Y) :- neg(blue,X),neg(Y,X), blue != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = blue.
compare(green,X,Y) :- neg(green,X),neg(Y,X), green != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = green.
compare(particle,X,Y) :- neg(particle,X),neg(Y,X), particle != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = particle.
compare(color,X,Y) :- neg(color,X),neg(Y,X), color != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = color.
compare(two_things,X,Y) :- neg(two_things,X),neg(Y,X), two_things != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = two_things.
compare(different_materials,X,Y) :- neg(different_materials,X),neg(Y,X), different_materials != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = different_materials.
compare(exact_same_color,X,Y) :- neg(exact_same_color,X),neg(Y,X), exact_same_color != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = exact_same_color.
compare(existence_aether,X,Y) :- neg(existence_aether,X),neg(Y,X), existence_aether != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = existence_aether.
compare(motive,X,Y) :- neg(motive,X),neg(Y,X), motive != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = motive.
compare(sense,X,Y) :- neg(sense,X),neg(Y,X), sense != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = sense.
compare(test,X,Y) :- neg(test,X),neg(Y,X), test != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = test.
compare(device,X,Y) :- neg(device,X),neg(Y,X), device != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = device.
compare(grusenick_experiment_proves_existence_ether,X,Y) :- neg(grusenick_experiment_proves_existence_ether,X),neg(Y,X), grusenick_experiment_proves_existence_ether != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = grusenick_experiment_proves_existence_ether.
compare(important,X,Y) :- neg(important,X),neg(Y,X), important != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = important.
compare(functioning,X,Y) :- neg(functioning,X),neg(Y,X), functioning != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = functioning.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(article_98_agreements, protect_us_citizens_from_icc).
pos(article_98_agreements, legally_binding_agreements).
pos(article_98_agreements, bilateral_agreements).
pos(article_98_agreements, legally_permissible).
pos(article_98_agreements, consistent_with_the_letter_and_spirit_of_the_rome_statute).
pos(article_98_agreements, necessary_protections).
pos(article_98_agreements, ultimate_goal).
pos(article_98_agreements, conclude_with_every_country_in_the_world).
pos(article_98_agreements, regardless_of_whether_they_have_signed_or_ratified_the_icc).
pos(article_98_agreements, regardless_of_whether_they_intend_to_in_the_future).
pos(article_98_agreements, european_union).
pos(article_98_agreements, september).
pos(article_98_agreements, permit_its_member_states_to_conclude_article_98_agreements_with_the_united_states).
pos(article_98_agreements, bilateral_discussions_with_several_eu_countries).
pos(article_98_agreements, discussions_on_the_issue_with_several_countries_in_the_middle_east_and_south_asia).
pos(article_98_agreements, united_states).
pos(article_98_agreements, icc).
pos(article_98_agreements, rome_statute).
pos(article_98_agreements, un_security_council).
pos(article_98_agreements, peacekeeping_force_in_the_former_yugoslavia).
pos(article_98_agreements, jurisdictional_claims).
pos(article_98_agreements, remedy).
pos(article_98_agreements, federalist_society).
pos(article_98_agreements, remarks).
pos(article_98_agreements, john_r_bolton).
pos(article_98_agreements, november).
pos(article_98_agreements, two_thousand_and_two).

Section 2 - General relationships:

relation(article_98_agreements, protect_us_citizens_from_icc).
relation(article_98_agreements, legally_binding_agreements).
relation(article_98_agreements, bilateral_agreements).
relation(article_98_agreements, legally_permissible).
relation(article_98_agreements, consistent_with_the_letter_and_spirit_of_the_rome_statute).
relation(article_98_agreements, necessary_protections).
relation(article_98_agreements, ultimate_goal).
relation(article_98_agreements, conclude_with_every_country_in_the_world).
relation(article_98_agreements, regardless_of_whether_they_have_signed_or_ratified_the_icc).
relation(article_98_agreements, regardless_of_whether_they_intend_to_in_the_future).
relation(article_98_agreements, european_union).
relation(article_98_agreements, september).
relation(article_98_agreements, permit_its_member_states_to_conclude_article_98_agreements_with_the_united_states).
relation(article_98_agreements, bilateral_discussions_with_several_eu_countries).
relation(article_98_agreements, discussions_on_the_issue_with_several_countries_in_the_middle_east_and_south_asia).
relation(article_98_agreements, united_states).
relation(article_98_agreements, icc).
relation(article_98_agreements, rome_statute).
relation(article_98_agreements, un_security_council).
relation(article_98_agreements, peacekeeping_force_in_the_former_yugoslavia).
relation(article_98_agreements, jurisdictional_claims).
relation(article_98_agreements, remedy).
relation(article_98_agreements, federalist_society).
relation(article_98_agreements, remarks).
relation(article_98_agreements, john_r_bolton).
relation(article_98_agreements, november).
relation(article_98_agreements, two_thousand_and_two).

Section 3 - Encoding:

article_98_agreements_are_good_because :- pos(article_98_agreements,Y).
article_98_agreements_are_bad_because :- neg(article_98_agreements,Y).
compare(article_98_agreements,X,Y) :- neg(article_98_agreements,X),neg(article_98_agreements,Y), article_98_agreements != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = article_98_agreements.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(dubstep, music).
pos(music, vocal_or_instrumental_sounds).
pos(vocal_or_instrumental_sounds, beauty_of_form).
pos(vocal_or_instrumental_sounds, harmony).
pos(vocal_or_instrumental_sounds, expression_of_emotion).
pos(skrillex, scary_monsters_and_nice_sprites).
pos(scary_monsters_and_nice_sprites, electronic_tones).
neg(scary_monsters_and_nice_sprites, instrumental).
pos(instrumental, serving_as_an_instrument_or_means_in_pursuing_an_aim_or_policy).
pos(computer, producing_musical_sounds).
pos(computer, mathematical_instrument).
pos(computer, mathematical_calculations).
neg(computer, musical_instrument).
neg(computer, preforming_the_function_of_a_musical_instrument).
pos(beat, electronic_tones).
pos(beat, percussionist).
pos(beat, drum_solo).
neg(beat, music).

Section 2 - General relationships:

relation(dubstep, music).
relation(music, vocal_or_instrumental_sounds).
relation(vocal_or_instrumental_sounds, beauty_of_form).
relation(vocal_or_instrumental_sounds, harmony).
relation(vocal_or_instrumental_sounds, expression_of_emotion).
relation(skrillex, scary_monsters_and_nice_sprites).
relation(scary_monsters_and_nice_sprites, electronic_tones).
relation(instrumental, serving_as_an_instrument_or_means_in_pursuing_an_aim_or_policy).
relation(computer, producing_musical_sounds).
relation(computer, mathematical_instrument).
relation(computer, mathematical_calculations).
relation(computer, musical_instrument).
relation(computer, preforming_the_function_of_a_musical_instrument).
relation(beat, electronic_tones).
relation(beat, percussionist).
relation(beat, drum_solo).
relation(beat, music).

Section 3 - Encoding:

dubstep_is_music_because :- pos(dubstep, music).
dubstep_is_not_music_because :- neg(dubstep, music).
compare(dubstep,X,Y) :- neg(dubstep,X),neg(Y,X), dubstep != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = dubstep.
###DELIMITER###
 Section 1 - Negative and positive relationships:
pos(old_testament, truth).
neg(new_testament, love_of_money).
neg(new_testament, power).

Section 2 - General relationships:
relation(old_testament, new_testament).
relation(jesus, immanuel).
relation(wisdom, persistence).
relation(catholic, system).
relation(daniel, bible).

Section 3 - Encoding:
old_testament_is_true :- pos(old_testament, truth).
new_testament_is_false :- neg(new_testament, love_of_money).
new_testament_is_false :- neg(new_testament, power).
jesus_is_immanuel :- relation(jesus, immanuel).
wisdom_comes_from_persistence :- relation(wisdom, persistence).
catholics_live_in_a_system :- relation(catholic, system).
daniel_helps_understand_bible :- relation(daniel, bible).
compare(old_testament, new_testament, X) :- neg(old_testament, X), neg(new_testament, X), old_testament != new_testament.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = old_testament.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(jerusalem, independent_city_state).
neg(jerusalem, split).
neg(palestinians, jew_elected).
neg(jews, palestinian_elected).
neg(jerusalem, viable_long_term).
neg(city_states, viable_long_term).
neg(oligarchies, economic_stagnation).
neg(ethnic_conflict, economy).
neg(somalia, economic_superpower).
neg(south_sudan, economic_superpower).
neg(jerusalem, entire_land).
neg(jerusalem, negotiations).
neg(jerusalem, third_sovereign_nation).
neg(jerusalem, jews).

pos(jerusalem, independent_city_state).
pos(jews, jerusalem).

Section 2 - General relationships:

relation(jerusalem, split).
relation(palestinians, jew_elected).
relation(jews, palestinian_elected).
relation(jerusalem, viable_long_term).
relation(city_states, viable_long_term).
relation(oligarchies, economic_stagnation).
relation(ethnic_conflict, economy).
relation(somalia, economic_superpower).
relation(south_sudan, economic_superpower).
relation(jerusalem, entire_land).
relation(jerusalem, negotiations).
relation(jerusalem, third_sovereign_nation).
relation(jerusalem, jews).

Section 3 - Encoding:

jerusalem_is_good_because :- pos(jerusalem, Y).
jerusalem_is_bad_because :- neg(jerusalem, Y).
compare(jerusalem,X,Y) :- neg(jerusalem,X),neg(Y,X), jerusalem != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = jerusalem.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(democrats, people).
pos(democrats, legislation).
neg(democrats, republicans).
pos(republicans, bill).
pos(republicans, voters).
neg(shutdown, people).
pos(shutdown, disagreement).
pos(shutdown, parties).

Section 2 - General relationships:

relation(democrats, people).
relation(democrats, legislation).
relation(democrats, republicans).
relation(republicans, bill).
relation(republicans, voters).
relation(shutdown, people).
relation(shutdown, disagreement).
relation(shutdown, parties).

Section 3 - Encoding:

democrats_are_good_because :- pos(democrats, Y).
democrats_are_bad_because :- neg(democrats, Y).
republicans_are_good_because :- pos(republicans, Y).
republicans_are_bad_because :- neg(republicans, Y).
shutdown_is_good_because :- pos(shutdown, Y).
shutdown_is_bad_because :- neg(shutdown, Y).
compare(democrats,X,Y) :- neg(democrats,X),neg(Y,X), democrats != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = democrats.
compare(republicans,X,Y) :- neg(republicans,X),neg(Y,X), republicans != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = republicans.
compare(shutdown,X,Y) :- neg(shutdown,X),neg(Y,X), shutdown != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = shutdown.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(democracy, minority_rights).
pos(democracy, political_system).
pos(kurds, separate_state).
pos(turkey, kurdish_language_tv_station).
pos(turkey, kurdish_language_courses).
pos(turkey, cease_fire).
pos(turkey, constitutional_changes).
pos(erdogan, prime_minister).
pos(erdogan, kurdish_recognition).
pos(erdogan, peace_process).

neg(turkey, kurdish_discrimination).

Section 2 - General relationships:

relation(democracy, minority).
relation(democracy, political_system).
relation(kurds, turkey).
relation(erdogan, turkey).
relation(erdogan, kurds).

Section 3 - Encoding:

democracy_is_good_because :- pos(democracy,Y).
democracy_is_bad_because :- neg(democracy,Y).
kurds_are_good_because :- pos(kurds,Y).
kurds_are_bad_because :- neg(kurds,Y).
turkey_is_good_because :- pos(turkey,Y).
turkey_is_bad_because :- neg(turkey,Y).
erdogan_is_good_because :- pos(erdogan,Y).
erdogan_is_bad_because :- neg(erdogan,Y).
compare(democracy,X,Y) :- neg(democracy,X),neg(Y,X), democracy != Y.
compare(kurds,X,Y) :- neg(kurds,X),neg(Y,X), kurds != Y.
compare(turkey,X,Y) :- neg(turkey,X),neg(Y,X), turkey != Y.
compare(erdogan,X,Y) :- neg(erdogan,X),neg(Y,X), erdogan != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(global_multiculturalism, different_cultures).
neg(national_multiculturalism, preserved_cultures).
neg(current_multiculturalism, uk).
neg(current_multiculturalism, australia).
neg(current_multiculturalism, france).
neg(current_multiculturalism, germany).
neg(multiculturalism, diversity).

Section 2 - General relationships:

relation(national_multiculturalism, people).
relation(people, preserved_cultures).
relation(multiculturalism, assimilation).
relation(assimilation, loss_of_diversity).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(truth, absolute_concept).
neg(god, non_existence).
neg(universe, self_creation).
neg(life, non_existence_after_death).
neg(physicist_1, non_existence_of_god).
pos(physicist_2, existence_of_god).
neg(mr_x, presence_in_office).
pos(mr_x, absence_in_office).

% Section 2 - General relationships
relation(truth, god).
relation(truth, universe).
relation(truth, life).
relation(god, physicist_1).
relation(god, physicist_2).
relation(physicist_1, universe).
relation(physicist_2, universe).
relation(mr_x, office).

% Section 3 - Encoding
relation(X,Y) :- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(germany, respect).
neg(germany, neighbors).
neg(germany, hitler).
neg(hitler, window_of_opportunity).
neg(cold_war, better).
neg(terror, recent_problem).
neg(terror, age_of_terror).

pos(germany, nationalism).
pos(germany, imperialism).
pos(germany, military_industrial_complex).
pos(germany, big_chance).
pos(cold_war, worse).
pos(cold_war, half_the_world_powers).
pos(terror, emotion).
pos(terror, old_problem).

Section 2 - General relationships:

relation(germany, ww1).
relation(germany, ww2).
relation(germany, hitler).
relation(germany, cold_war).
relation(germany, terror).
relation(hitler, window_of_opportunity).
relation(cold_war, allied_powers_of_ww1).
relation(cold_war, central_powers_of_ww2).
relation(terror, age_of_terror).

Section 3 - Encoding:

respect(germany, neighbors) :- neg(germany, respect).
respect(germany, neighbors) :- pos(germany, respect).
hitler_in_politics(germany) :- neg(germany, hitler).
hitler_in_politics(germany) :- pos(germany, hitler).
window_of_opportunity(hitler) :- neg(hitler, window_of_opportunity).
window_of_opportunity(hitler) :- pos(hitler, window_of_opportunity).
cold_war_worse :- neg(cold_war, better).
cold_war_worse :- pos(cold_war, worse).
cold_war_half_the_world_powers :- neg(cold_war, half_the_world_powers).
cold_war_half_the_world_powers :- pos(cold_war, half_the_world_powers).
terror_not_recent_problem :- neg(terror, recent_problem).
terror_not_recent_problem :- pos(terror, old_problem).
terror_not_age_of_terror :- neg(terror, age_of_terror).
terror_not_age_of_terror :- pos(terror, age_of_terror).
compare(germany,X,Y) :- neg(germany,X),neg(Y,X), germany != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = germany.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(zionist_jewish_networks, perpetrators_of_9_11).
pos(zionist_and_zionist_jewish_networks, companies_and_institutions_surrounding_9_11).
pos(zionist_and_zionist_jewish_networks, attacks).
pos(zionist_and_zionist_jewish_networks, war_against_israel_enemies).
pos(zionist_and_zionist_jewish_networks, middle_east).

neg(official_narrative, overwhelming_flaws).
neg(israel, subordinate_zionist_networks).
neg(israel, major_role_in_attacks).

Section 2 - General relationships:

relation(zionist_jewish_networks, collapse_of_the_world_trade_center).
relation(zionist_jewish_networks, beneficiaries_of_9_11).
relation(zionist_jewish_networks, issues_surrounding_9_11).
relation(zionist_jewish_networks, attacks).
relation(zionist_jewish_networks, israel).
relation(zionist_jewish_networks, subordinate_zionist_networks).
relation(zionist_jewish_networks, middle_east).
relation(zionist_jewish_networks, official_narrative).
relation(israel, subordinate_zionist_networks).
relation(israel, attacks).
relation(israel, middle_east).
relation(israel, official_narrative).

Section 3 - Encoding:

zionist_jewish_networks_are_perpetrators_of_9_11 :- pos(zionist_jewish_networks, perpetrators_of_9_11).
zionist_jewish_networks_are_not_perpetrators_of_9_11 :- neg(zionist_jewish_networks, perpetrators_of_9_11).
zionist_and_zionist_jewish_networks_involved_in_attacks :- pos(zionist_and_zionist_jewish_networks, attacks).
zionist_and_zionist_jewish_networks_not_involved_in_attacks :- neg(zionist_and_zionist_jewish_networks, attacks).
israel_had_major_role_in_attacks :- pos(israel, major_role_in_attacks).
israel_did_not_have_major_role_in_attacks :- neg(israel, major_role_in_attacks).
compare(zionist_jewish_networks,X,Y) :- neg(zionist_jewish_networks,X),neg(Y,X), zionist_jewish_networks != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = zionist_jewish_networks.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(gay_person, right_to_marry).
neg(civil_unions, same_thing_as_marriage).
neg(civil_unions, all_rights_of_marriage).
neg(government, right_to_limit_liberties).
neg(discrimination, sexual_orientation).

Section 2 - General relationships:

relation(gay_person, marriage).
relation(civil_unions, gay_couple).
relation(government, homeland_security).
relation(discrimination, race).
relation(discrimination, gender).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(spanish_speaking_american_citizens, freedom_of_speech).
pos(spanish_speaking_american_citizens, right_to_access_government).
pos(spanish_speaking_american_citizens, respect).
pos(spanish_speaking_american_citizens, equality).
pos(spanish_speaking_american_citizens, intelligence).
pos(spanish_speaking_american_citizens, legitimacy).
pos(spanish_speaking_american_citizens, recognition).
pos(spanish_speaking_american_citizens, first_amendment).
pos(spanish_speaking_american_citizens, bill_of_rights).
pos(spanish_speaking_american_citizens, constitution).
pos(spanish_speaking_american_citizens, united_states).
pos(spanish_speaking_american_citizens, new_spain_colonies).
pos(spanish_speaking_american_citizens, mexico).
pos(spanish_speaking_american_citizens, texas).
pos(spanish_speaking_american_citizens, california).
pos(spanish_speaking_american_citizens, oregon).
pos(spanish_speaking_american_citizens, gadsen).
pos(spanish_speaking_american_citizens, english_supremacist_monolingualists).
pos(spanish_speaking_american_citizens, racism).
pos(spanish_speaking_american_citizens, discrimination).
pos(spanish_speaking_american_citizens, inequality).
pos(spanish_speaking_american_citizens, disadvantage).
pos(spanish_speaking_american_citizens, oppression).
pos(spanish_speaking_american_citizens, marginalization).
pos(spanish_speaking_american_citizens, exclusion).
pos(spanish_speaking_american_citizens, segregation).
pos(spanish_speaking_american_citizens, assimilation).
pos(spanish_speaking_american_citizens, nativism).
pos(spanish_speaking_american_citizens, xenophobia).
pos(spanish_speaking_american_citizens, prejudice).
pos(spanish_speaking_american_citizens, intolerance).
pos(spanish_speaking_american_citizens, bigotry).
pos(spanish_speaking_american_citizens, hatred).
pos(spanish_speaking_american_citizens, violence).
pos(spanish_speaking_american_citizens, death).

neg(english_supremacist_monolingualists, respect).
neg(english_supremacist_monolingualists, equality).
neg(english_supremacist_monolingualists, intelligence).
neg(english_supremacist_monolingualists, legitimacy).
neg(english_supremacist_monolingualists, recognition).
neg(english_supremacist_monolingualists, freedom_of_speech).
neg(english_supremacist_monolingualists, right_to_access_government).
neg(english_supremacist_monolingualists, spanish_speaking_american_citizens).
neg(english_supremacist_monolingualists, united_states).
neg(english_supremacist_monolingualists, new_spain_colonies).
neg(english_supremacist_monolingualists, mexico).
neg(english_supremacist_monolingualists, texas).
neg(english_supremacist_monolingualists, california).
neg(english_supremacist_monolingualists, oregon).
neg(english_supremacist_monolingualists, gadsen).
neg(english_supremacist_monolingualists, first_amendment).
neg(english_supremacist_monolingualists, bill_of_rights).
neg(english_supremacist_monolingualists, constitution).

Section 2 - General relationships:

relation(spanish_speaking_american_citizens, united_states).
relation(spanish_speaking_american_citizens, english_supremacist_monolingualists).
relation(spanish_speaking_american_citizens, freedom_of_speech).
relation(spanish_speaking_american_citizens, right_to_access_government).
relation(spanish_speaking_american_citizens, respect).
relation(spanish_speaking_american_citizens, equality).
relation(spanish_speaking_american_citizens, intelligence).
relation(spanish_speaking_american_citizens, legitimacy).
relation(spanish_speaking_american_citizens, recognition).
relation(spanish_speaking_american_citizens, first_amendment).
relation(spanish_speaking_american_citizens, bill_of_rights).
relation(spanish_speaking_american_citizens, constitution).
relation(spanish_speaking_american_citizens, new_spain_colonies).
relation(spanish_speaking_american_citizens, mexico).
relation(spanish_speaking_american_citizens, texas).
relation(spanish_speaking_american_citizens, california).
relation(spanish_speaking_american_citizens, oregon).
relation(spanish_speaking_american_citizens, gadsen).

Section 3 - Encoding:

spanish_speaking_american_citizens_are_respected :- pos(spanish_speaking_american_citizens, respect).
spanish_speaking_american_citizens_are_equal :- pos(spanish_speaking_american_citizens, equality).
spanish_speaking_american_citizens_are_intelligent :- pos(spanish_speaking_american_citizens, intelligence).
spanish_speaking_american_citizens_are_legitimate :- pos(spanish_speaking_american_citizens, legitimacy).
spanish_speaking_american_citizens_are_recognized :- pos(spanish_speaking_american_citizens, recognition).
spanish_speaking_american_citizens_have_freedom_of_speech :- pos(spanish_speaking_american_citizens, freedom_of_speech).
spanish_speaking_american_citizens_have_right_to_access_government :- pos(spanish_speaking_american_citizens, right_to_access_government).
english_supremacist_monolingualists_are_disrespectful :- neg(english_supremacist_monolingualists, respect).
english_supremacist_monolingualists_are_unequal :- neg(english_supremacist_monolingualists, equality).
english_supremacist_monolingualists_are_unintelligent :- neg(english_supremacist_monolingualists, intelligence).
english_supremacist_monolingualists_are_illegitimate :- neg(english_supremacist_monolingualists, legitimacy).
english_supremacist_monolingualists_are_unrecognized :- neg(english_supremacist_monolingualists, recognition).
english_supremacist_monolingualists_do_not_have_freedom_of_speech :- neg(english_supremacist_monolingualists, freedom_of_speech).
english_supremacist_monolingualists_do_not_have_right_to_access_government :- neg(english_supremacist_monolingualists, right_to_access_government).
compare(spanish_speaking_american_citizens, english_supremacist_monolingualists, respect) :- neg(spanish_speaking_american_citizens, respect), neg(english_supremacist_monolingualists, respect), spanish_speaking_american_citizens != english_supremacist_monolingualists.
compare(spanish_speaking_american_citizens, english_supremacist_monolingualists, equality) :- neg(spanish_speaking_american_citizens, equality), neg(english_supremacist_monolingualists, equality), spanish_speaking_american_citizens != english_supremacist_monolingualists.
compare(spanish_speaking_american_citizens, english_supremacist_monolingualists, intelligence) :- neg(spanish_speaking_american_citizens, intelligence), neg(english_supremacist_monolingualists, intelligence), spanish_speaking_american_citizens != english_supremacist_monolingualists.
compare(spanish_speaking_american_citizens, english_supremacist_monolingualists, legitimacy) :- neg(spanish_speaking_american_citizens, legitimacy), neg(english_supremacist_monolingualists, legitimacy), spanish_speaking_american_citizens != english_supremacist_monolingualists.
compare(spanish_speaking_american_citizens, english_supremacist_monolingualists, recognition) :- neg(spanish_speaking_american_citizens, recognition), neg(english_supremacist_monolingualists, recognition), spanish_speaking_american_citizens != english_supremacist_monolingualists.
compare(spanish_speaking_american_citizens, english_supremacist_monolingualists, freedom_of_speech) :- neg(spanish_speaking_american_citizens, freedom_of_speech), neg(english_supremacist_monolingualists, freedom_of_speech), spanish_speaking_american_citizens != english_supremacist_monolingualists.
compare(spanish_speaking_american_citizens, english_supremacist_monolingualists, right_to_access_government) :- neg(spanish_speaking_american_citizens, right_to_access_government), neg(english_supremacist_monolingualists, right_to_access_government), spanish_speaking_american_citizens != english_supremacist_monolingualists.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(church, government_views).
neg(government, church_actions).
pos(church, private_organization).
pos(church, right_to_discriminate).
pos(bible, leviticus).
pos(bible, sin_gay).
pos(bible, sin_comb_hair).
pos(bible, sin_eat_shellfish).

% Section 2 - General relationships
relation(church, government).
relation(church, founding_fathers).
relation(church, bible).
relation(gay_people, church).
relation(government, marriage).
relation(marriage, church).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(absolute_monarchy, restrictions).
neg(absolute_monarchy, laws).
neg(absolute_monarchy, monarch).
pos(absolute_monarchy, monarch_made_up).
neg(monarch, abide_by_monarch_made_up).
pos(limited_monarchy, restrictions).
pos(limited_monarchy, rules).
pos(limited_monarchy, created_by_itself).
pos(limited_monarchy, created_by_government).

% Section 2 - General relationships
relation(absolute_monarchy, limited_monarchy).
relation(monarch, absolute_monarchy).
relation(monarch, limited_monarchy).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(true_debaters, truth).
neg(true_debaters, liars).
neg(false_debaters, debates).
pos(false_debaters, claims).
pos(false_debaters, debates).

Section 2 - General relationships:

relation(true_debaters, debates).
relation(false_debaters, debates).
relation(true_debaters, liars).
relation(true_debaters, truth).

Section 3 - Encoding:

true_debaters_are_good_because :- pos(true_debaters, Y).
true_debaters_are_bad_because :- neg(true_debaters, Y).
false_debaters_are_good_because :- pos(false_debaters, Y).
false_debaters_are_bad_because :- neg(false_debaters, Y).
compare(true_debaters,X,Y) :- neg(true_debaters,X),neg(Y,X), true_debaters != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = true_debaters.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(werewolves, super_strength).
pos(werewolves, virtual_immortality).
pos(werewolves, super_senses).
pos(werewolves, wolf_transformation).
pos(werewolves, create_other_werewolves).
pos(vampires, super_speed).
pos(vampires, telepathy).
pos(vampires, bat_transformation).
pos(vampires, mist_transformation).
pos(vampires, vampire_fangs).
pos(vampires, immortality).
pos(vampires, create_other_vampires).
pos(vampires, super_healing).
pos(vampires, super_senses).
pos(vampires, scale_walls).

Section 2 - General relationships:

relation(werewolves, vampires).
relation(werewolves, super_strength).
relation(werewolves, virtual_immortality).
relation(werewolves, super_senses).
relation(werewolves, wolf_transformation).
relation(werewolves, create_other_werewolves).
relation(vampires, super_speed).
relation(vampires, telepathy).
relation(vampires, bat_transformation).
relation(vampires, mist_transformation).
relation(vampires, vampire_fangs).
relation(vampires, immortality).
relation(vampires, create_other_vampires).
relation(vampires, super_healing).
relation(vampires, super_senses).
relation(vampires, scale_walls).

Section 3 - Encoding:

werewolves_are_good_because :- pos(werewolves, Y).
werewolves_are_bad_because :- neg(werewolves, Y).
vampires_are_good_because :- pos(vampires, Y).
vampires_are_bad_because :- neg(vampires, Y).
compare(werewolves, vampires, Z) :- neg(werewolves, Z), neg(vampires, Z), vampires != Z, vampires = werewolves.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = werewolves.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(fast_food_franchises, obesity).
pos(diet_industry, skinny_people).

Section 2 - General relationships:

relation(obesity, problem).
relation(children, parents).
relation(parents, responsibility).
relation(food, children).

Section 3 - Encoding:

obesity_is_a_problem :- pos(obesity,Y).
diet_industry_makes_people_skinny :- pos(diet_industry,Y).
children_are_the_responsibility_of_parents :- relation(children,Y), relation(parents,Y).
parents_are_responsible_for_childrens_food :- relation(parents,Y), relation(food,Y), relation(children,Y).
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(animal, scientific_research).
pos(rodent, short_life_span).
pos(rodent, speedier_disease_development).
pos(rodent, saving_human_lives).
pos(animal_research, medicine).
pos(medicine, breast_cancer).
pos(medicine, childhood_leukemia).
pos(medicine, lung_cancer).
pos(medicine, aids).
pos(medicine, hiv).
pos(medicine, heart_disease).
pos(medicine, diabetes).

neg(girl, example).
neg(vivisectioninformation, concept).
neg(animal, non_sentient_life).
neg(human, animal).
neg(animal, complex_brain).

% Section 2 - General relationships
relation(animal, scientific_research).
relation(rodent, short_life_span).
relation(rodent, speedier_disease_development).
relation(rodent, saving_human_lives).
relation(animal_research, medicine).
relation(medicine, breast_cancer).
relation(medicine, childhood_leukemia).
relation(medicine, lung_cancer).
relation(medicine, aids).
relation(medicine, hiv).
relation(medicine, heart_disease).
relation(medicine, diabetes).
relation(girl, example).
relation(vivisectioninformation, concept).
relation(animal, non_sentient_life).
relation(human, animal).
relation(animal, complex_brain).

% Section 3 - Encoding
animal_is_good_because :- pos(animal, Y).
animal_is_bad_because :- neg(animal, Y).
compare(animal,X,Y) :- neg(animal,X),neg(Y,X), animal != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = animal.
```
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(capitalistic_economy, free_education).
pos(parecon, non_capitalistic_economy).
pos(biased_education, all_education).
pos(technology, change_biased_education).
neg(capitalism, humanity).
neg(capitalism, scientist).
neg(capitalism, teacher).
neg(capitalism, military).
pos(teacher, worth_more_than_football_player).

% Section 2 - General relationships
relation(free_education, parecon).
relation(biased_education, technology).
relation(capitalism, humanity).
relation(capitalism, scientist).
relation(capitalism, teacher).
relation(capitalism, military).
relation(teacher, football_player).

% Section 3 - Encoding
parecon_is_good_because :- pos(parecon,Y).
parecon_is_bad_because :- neg(parecon,Y).
capitalism_is_good_because :- pos(capitalism,Y).
capitalism_is_bad_because :- neg(capitalism,Y).
compare(parecon,X,Y) :- neg(parecon,X),neg(Y,X), parecon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = parecon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(single_sex_schools, improved_grades).
neg(single_sex_schools, social_interaction_skills).

Section 2 - General relationships:

relation(single_sex_schools, education).
relation(education, social_interaction_skills).
relation(social_interaction_skills, males).
relation(social_interaction_skills, females).
relation(single_sex_schools, grades).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(sexting, loss_of_job_opportunity).
pos(sexting, form_of_expression).
neg(sexting, caring_about_sexter).

% Section 2 - General relationships
relation(sexting, privacy).
relation(sexting, employer).
relation(sexting, teenager).
relation(sexting, human_being).
relation(sexting, global_scale).

% Section 3 - Encoding
sexting_is_good_because :- pos(sexting, Y).
sexting_is_bad_because :- neg(sexting, Y).
compare(sexting,X,Y) :- neg(sexting,X),neg(Y,X), sexting != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = sexting.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(smoking, healthcare_costs).
pos(smoking_ban, healthcare_costs).
pos(smoking_ban, social_smokers).
pos(smoking_ban, passive_smokers).
pos(arizona_smoking_ban, hospital_admissions).
pos(arizona_smoking_ban, healthcare_costs).

Section 2 - General relationships:

relation(smoking, healthcare_costs).
relation(smoking_ban, social_smokers).
relation(smoking_ban, passive_smokers).
relation(arizona_smoking_ban, hospital_admissions).
relation(arizona_smoking_ban, healthcare_costs).

Section 3 - Encoding:

smoking_ban_is_good_because :- pos(smoking_ban, Y).
smoking_ban_is_bad_because :- neg(smoking_ban, Y).
compare(smoking_ban,X,Y) :- neg(smoking_ban,X),neg(Y,X), smoking_ban != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = smoking_ban.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(constructive_perception, intelligent_perception).
pos(constructive_perception, cognitive_understanding).
pos(constructive_perception, sensory_information).
pos(constructive_perception, stimulus).
pos(objects, laws_of_physics).
pos(objects, properties).
pos(objects, size).
pos(objects, shape).
pos(objects, texture).
pos(objects, smell).
pos(objects, taste).
pos(objects, colour).
pos(objects, matter).
pos(objects, space).
pos(objects, high_school).
pos(objects, anyone).
pos(objects, cs).
pos(objects, physics).
pos(objects, observation).
pos(objects, predictable_way).

neg(naive_realism, false).

Section 2 - General relationships:

relation(constructive_perception, intelligent_perception).
relation(constructive_perception, cognitive_understanding).
relation(constructive_perception, sensory_information).
relation(constructive_perception, stimulus).
relation(objects, laws_of_physics).
relation(objects, properties).
relation(objects, size).
relation(objects, shape).
relation(objects, texture).
relation(objects, smell).
relation(objects, taste).
relation(objects, colour).
relation(objects, matter).
relation(objects, space).
relation(objects, high_school).
relation(objects, anyone).
relation(objects, cs).
relation(objects, physics).
relation(objects, observation).
relation(objects, predictable_way).
relation(naive_realism, false).

Section 3 - Encoding:

constructive_perception_is_good_because :- pos(constructive_perception, Y).
constructive_perception_is_bad_because :- neg(constructive_perception, Y).
objects_are_good_because :- pos(objects, Y).
objects_are_bad_because :- neg(objects, Y).
naive_realism_is_good_because :- pos(naive_realism, Y).
naive_realism_is_bad_because :- neg(naive_realism, Y).
compare(constructive_perception,X,Y) :- neg(constructive_perception,X),neg(Y,X), constructive_perception != Y.
compare(objects,X,Y) :- neg(objects,X),neg(objects,Z), Y != Z, Y = objects.
compare(naive_realism,X,Y) :- neg(naive_realism,X),neg(Y,X), naive_realism != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(frozen, bad_movie).
pos(let_it_be, reference_to_let_it_be).
neg(beatles, care_about_frozen).
pos(beatles, money).
neg(hans, strong).
neg(hans, weak).
pos(hans, auto_loses_to_elsa).
pos(mulan, deceptive_name).
pos(mulan, secret_underground_society).
pos(mulan, trains_spartans).
pos(mulan, goddess).
neg(frozen_parents, anime_death).
pos(frozen_parents, water_death).
pos(hans, strong_burly_man).
pos(anna, pyromancer).
pos(anna, belongs_in_mortal_combat).
pos(elsa, almost_tesla_the_lightning_master).
pos(tesla, lightning_master).
pos(olaf, cold).
pos(olaf, boring).
pos(olaf, cruel).
pos(snow_monster, meh).

Section 2 - General relationships:

relation(frozen, bad_movie).
relation(let_it_be, reference_to_let_it_be).
relation(beatles, care_about_frozen).
relation(beatles, money).
relation(hans, strong).
relation(hans, weak).
relation(hans, auto_loses_to_elsa).
relation(mulan, deceptive_name).
relation(mulan, secret_underground_society).
relation(mulan, trains_spartans).
relation(mulan, goddess).
relation(frozen_parents, anime_death).
relation(frozen_parents, water_death).
relation(hans, strong_burly_man).
relation(anna, pyromancer).
relation(anna, belongs_in_mortal_combat).
relation(elsa, almost_tesla_the_lightning_master).
relation(tesla, lightning_master).
relation(olaf, cold).
relation(olaf, boring).
relation(olaf, cruel).
relation(snow_monster, meh).

Section 3 - Encoding:

frozen_is_bad_because :- pos(frozen,Y).
frozen_is_good_because :- neg(frozen,Y).
compare(frozen,X,Y) :- neg(frozen,X),neg(Y,X), frozen != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = frozen.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(federal_tuition_assistance, many_people_attending).
pos(federal_tuition_assistance, curtailing_federal_spending).
pos(federal_tuition_assistance, doing_right_by_kids).
pos(federal_tuition_assistance, trade_schools).
pos(college, cracked_up).
pos(college, students_pay_back_loans).
pos(college, takes_responsibility_off_other_people).
pos(college, fairer).
pos(tests, test_what_is_needed).
pos(engineering, regular_degree).
pos(nursing, regular_degree).
pos(act, compensate).
pos(sat, compensate).
neg(people_bottom_of_class, good_in_high_school).
neg(people_bottom_of_class, good_at_tests).
neg(degree, dilluted).

Section 2 - General relationships:

relation(federal_tuition_assistance, engineering).
relation(federal_tuition_assistance, nursing).
relation(federal_tuition_assistance, some_fields).
relation(federal_tuition_assistance, people_bottom_of_class).
relation(federal_tuition_assistance, high_school).
relation(federal_tuition_assistance, act).
relation(federal_tuition_assistance, sat).
relation(federal_tuition_assistance, tests).
relation(federal_tuition_assistance, degree).
relation(federal_tuition_assistance, college).
relation(federal_tuition_assistance, students).
relation(federal_tuition_assistance, loans).
relation(federal_tuition_assistance, poverty).
relation(engineering, regular_degree).
relation(nursing, regular_degree).
relation(people_bottom_of_class, good_in_high_school).
relation(people_bottom_of_class, good_at_tests).
relation(degree, dilluted).
relation(college, cracked_up).
relation(college, students_pay_back_loans).
relation(college, takes_responsibility_off_other_people).
relation(college, fairer).
relation(tests, test_what_is_needed).

Section 3 - Encoding:

federal_tuition_assistance_is_good_because :- pos(federal_tuition_assistance, Y).
federal_tuition_assistance_is_bad_because :- neg(federal_tuition_assistance, Y).
compare(federal_tuition_assistance,X,Y) :- neg(federal_tuition_assistance,X),neg(Y,X), federal_tuition_assistance != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = federal_tuition_assistance.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(capitalism, free_market_economic_system).
pos(capitalism, private_ownership).
pos(capitalism, entrepreneurship).
pos(capitalism, investment_of_capital).
pos(capitalism, production).
pos(capitalism, distribution).
pos(capitalism, income).
pos(capitalism, prices).
pos(capitalism, competitive_market).
pos(capitalism, voluntary).
pos(capitalism, private).
pos(capitalism, law_of_supply_and_demand).
pos(socialism, state_ownership).
pos(socialism, direct_control).
pos(socialism, major_means_of_production).
pos(socialism, distribution_of_goods).
pos(socialism, services).

neg(capitalism, government).
neg(socialism, government).

Section 2 - General relationships:

relation(capitalism, socialism).

Section 3 - Encoding:

capitalism_is_good_because :- pos(capitalism, Y).
capitalism_is_bad_because :- neg(capitalism, Y).
socialism_is_good_because :- pos(socialism, Y).
socialism_is_bad_because :- neg(socialism, Y).
compare(capitalism, socialism, X) :- neg(capitalism, X),neg(socialism, X), capitalism != socialism.
compare(X, Y, Z) :- neg(X, Y),neg(X, Z), Y != Z, Y = capitalism.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(adobe_photoshop_battle, photo_album).
pos(adobe_photoshop_battle, challenge).
pos(adobe_photoshop_battle, picture).
pos(adobe_photoshop_battle, round).
pos(adobe_photoshop_battle, style).
pos(adobe_photoshop_battle, view).
pos(adobe_photoshop_battle, falling).
pos(adobe_photoshop_battle, ground).
pos(adobe_photoshop_battle, high_place).

Section 2 - General relationships:

relation(photo_album, picture).
relation(challenge, picture).
relation(picture, round).
relation(style, picture).
relation(view, picture).
relation(falling, ground).
relation(falling, high_place).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(aliens, saved).
pos(aliens, saved).

Section 2 - General relationships:

relation(aliens, universe).
relation(aliens, christ).
relation(aliens, paradise).
relation(aliens, aircrafts).
relation(aliens, christ).
relation(aliens, earth).
relation(aliens, curse).
relation(aliens, god).
relation(aliens, adam).

Section 3 - Encoding:

elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(east, west).
pos(west, east).

Section 2 - General relationships:

relation(east, west).
relation(west, east).
relation(left, right).
relation(right, left).
relation(store, right).
relation(store, left).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(marketplace_of_ideas, freedom_of_speech).
neg(hateful_views, freedom_of_speech).
neg(hateful_views, equal_standing).
neg(hateful_views, right_or_wrong).
neg(hateful_views, campus).
neg(hateful_views, opponents).
neg(hateful_views, banned).
neg(hateful_views, preaching).
neg(hateful_views, greater_access).
neg(hateful_views, opportunity).
neg(hateful_views, persuade).

Section 2 - General relationships:

relation(marketplace_of_ideas, freedom_of_speech).
relation(hateful_views, freedom_of_speech).
relation(hateful_views, equal_standing).
relation(hateful_views, right_or_wrong).
relation(hateful_views, campus).
relation(hateful_views, opponents).
relation(hateful_views, banned).
relation(hateful_views, preaching).
relation(hateful_views, greater_access).
relation(hateful_views, opportunity).
relation(hateful_views, persuade).

Section 3 - Encoding:

marketplace_of_ideas_is_good_because :- pos(marketplace_of_ideas, Y).
marketplace_of_ideas_is_bad_because :- neg(marketplace_of_ideas, Y).
hateful_views_is_good_because :- pos(hateful_views, Y).
hateful_views_is_bad_because :- neg(hateful_views, Y).
compare(marketplace_of_ideas,X,Y) :- neg(marketplace_of_ideas,X),neg(Y,X), marketplace_of_ideas != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = marketplace_of_ideas.
compare(hateful_views,X,Y) :- neg(hateful_views,X),neg(Y,X), hateful_views != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = hateful_views.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(you, sins).
neg(you, progress).
neg(you, fortune).
neg(you, proportion).
neg(you, body).
neg(you, abortion).
pos(me, conquest).
pos(me, process).
pos(me, lesson).
pos(me, path).
pos(me, extortion).

Section 2 - General relationships:

relation(me, you).
relation(you, truth).
relation(you, jim).
relation(you, christ).

Section 3 - Encoding:

you_are_bad_because :- neg(you,Y).
you_are_good_because :- pos(you,Y).
compare(me,X,Y) :- neg(me,X),neg(Y,X), me != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = me.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(bananas, killing).
pos(god, intelligent_design).
neg(bananas, storing).
neg(bananas, god).

Section 2 - General relationships:

relation(bananas, evil).
relation(bananas, killing).
relation(bananas, god).
relation(bananas, storing).
relation(bananas, intelligent_design).

Section 3 - Encoding:

killing :- neg(bananas, killing).
storing :- neg(bananas, storing).
intelligent_design :- pos(god, intelligent_design).
compare(bananas,X,Y) :- neg(bananas,X),neg(Y,X), bananas != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = bananas.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(promiscuity, consensual_sexual_activity).
pos(promiscuity, different_people).
pos(promiscuity, given_period).
neg(promiscuity, immorality).

Section 2 - General relationships:

relation(promiscuity, oxford_dictionary).
relation(promiscuity, ethics).
relation(promiscuity, morality).
relation(promiscuity, consensual_sexual_activity).
relation(promiscuity, different_people).
relation(promiscuity, given_period).
relation(promiscuity, immorality).

Section 3 - Encoding:

promiscuity_is_ethical :- pos(promiscuity, Y).
promiscuity_is_unethical :- neg(promiscuity, Y).
compare(promiscuity, X, Y) :- neg(promiscuity, X), neg(Y, X), promiscuity != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = promiscuity.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(god, almighty).
pos(god, bad_things).
pos(doctor, operation).
pos(operation, temporary_pain).
pos(operation, strong_body).
pos(god, death).
pos(god, spiritual_body).
pos(god, believer).

% Section 2 - General relationships
relation(god, bad_things).
relation(doctor, operation).
relation(operation, temporary_pain).
relation(operation, strong_body).
relation(god, death).
relation(god, spiritual_body).
relation(god, believer).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(apple_computers, better).
pos(apple_computers, quality).
pos(dell_computers, logical_prices).
pos(dell_computers, sensible_prices).
neg(apple_computers, cd_drive).
neg(apple_computers, windows_apps).
neg(apple_computers, visual_basic).
neg(apple_computers, double_quality).
neg(apple_computers, double_cost).
neg(dell_computers, chance_of_surviving).

Section 2 - General relationships:

relation(apple_computers, dell_computers).
relation(apple_computers, macbooks).
relation(apple_computers, operating_system).
relation(apple_computers, windows_apps).
relation(apple_computers, visual_basic).
relation(apple_computers, cd_drive).
relation(apple_computers, cost).
relation(apple_computers, quality).
relation(dell_computers, chance_of_surviving).
relation(dell_computers, logical_prices).
relation(dell_computers, sensible_prices).

Section 3 - Encoding:

apple_computers_are_better_because :- pos(apple_computers, Y).
apple_computers_are_worse_because :- neg(apple_computers, Y).
compare(apple_computers, dell_computers, X) :- neg(apple_computers, X), neg(dell_computers, X), apple_computers != dell_computers.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = apple_computers.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(genetically_modified_soldiers, saving_human_lives).
neg(con, disregard_for_human_life).
pos(soldiers, emotional_connection_to_other_humans).
neg(soldiers_bred_for_war, emotional_connection).
pos(battalion, statistical_losses).
neg(soldiers, cover_against_air_strikes).
neg(soldiers, cover_against_helicopter_attacks).
pos(super_soldier, saving_human_lives).
neg(nuclear_weapons, expensive_endeavour).
pos(nuclear_weapons, fear_of_detonation).
neg(chemicals, object).
pos(chemicals, huge_amount_of_knowledge_and_practice_to_use_correctly).
pos(hardware, a_lot_of_electricity_and_space).
pos(chernobyl, nuclear_material_available).
neg(chernobyl, equivalent).
pos(super_soldier, only_one_applicable_use_of_creating_a_soldier).
neg(enemies, full_scale_creation).
pos(enemies, individual_modification).
neg(super_soldier, made_from_a_few_modified_cells).
pos(super_soldier, minimally_applicable).
pos(super_soldier, benefit_to_those_who_worry_about_the_fact_they_are_human).

Section 2 - General relationships:

relation(genetically_modified_soldiers, con).
relation(genetically_modified_soldiers, disregard_for_human_life).
relation(soldiers, emotional_connection_to_other_humans).
relation(soldiers_bred_for_war, emotional_connection).
relation(battalion, statistical_losses).
relation(soldiers, cover_against_air_strikes).
relation(soldiers, cover_against_helicopter_attacks).
relation(super_soldier, saving_human_lives).
relation(nuclear_weapons, expensive_endeavour).
relation(nuclear_weapons, fear_of_detonation).
relation(chemicals, object).
relation(chemicals, huge_amount_of_knowledge_and_practice_to_use_correctly).
relation(hardware, a_lot_of_electricity_and_space).
relation(chernobyl, nuclear_material_available).
relation(chernobyl, equivalent).
relation(super_soldier, only_one_applicable_use_of_creating_a_soldier).
relation(enemies, full_scale_creation).
relation(enemies, individual_modification).
relation(super_soldier, made_from_a_few_modified_cells).
relation(super_soldier, minimally_applicable).
relation(super_soldier, benefit_to_those_who_worry_about_the_fact_they_are_human).

Section 3 - Encoding:

genetically_modified_soldiers_are_good_because :- pos(genetically_modified_soldiers, Y).
genetically_modified_soldiers_are_bad_because :- neg(genetically_modified_soldiers, Y).
compare(genetically_modified_soldiers,X,Y) :- neg(genetically_modified_soldiers,X),neg(Y,X), genetically_modified_soldiers != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = genetically_modified_soldiers.
###DELIMITER###
 **Section 1 - Negative and positive relationships:**

pos(master_and_margarita, best_russian_novel_of_the_20th_century).

**Section 2 - General relationships:**

relation(master_and_margarita, mikhail_bulgakov).
relation(master_and_margarita, 1928).
relation(master_and_margarita, 1940).
relation(master_and_margarita, 1966).
relation(master_and_margarita, storyline).
relation(master_and_margarita, theme).
relation(master_and_margarita, characters).
relation(master_and_margarita, historical_context).
relation(master_and_margarita, success).

**Section 3 - Encoding:**

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(master_and_margarita,X,Y) :- neg(master_and_margarita,X),neg(Y,X), master_and_margarita != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = master_and_margarita.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(shroud_of_turin, ancient_historical_artifact).
neg(shroud_of_turin, forgery).

Section 2 - General relationships:

relation(shroud_of_turin, time_of_christ).
relation(shroud_of_turin, authenticity).

Section 3 - Encoding:

shroud_of_turin_is_authentic :- pos(shroud_of_turin, Y).
shroud_of_turin_is_not_authentic :- neg(shroud_of_turin, Y).
compare(shroud_of_turin,X,Y) :- neg(shroud_of_turin,X),neg(Y,X), shroud_of_turin != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = shroud_of_turin.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(explicit_songs, bullying).
pos(explicit_songs, kidz_bop).
pos(kidz_bop, bullying).

% Section 2 - General relationships
relation(explicit_songs, bullying).
relation(explicit_songs, kidz_bop).
relation(kidz_bop, bullying).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(bombing_of_hiroshima_and_nagasaki, justified).

% Section 2 - General relationships
relation(bombing_of_hiroshima_and_nagasaki, justified).
relation(burden_of_proof, opponent).
relation(ad_hominem_attacks, prohibited).
relation(profanity, prohibited).
relation(footnotes, required).
relation(endnotes, required).
relation(annotated_bibliography, required).
relation(nuke, action).
relation(justified, reason).
relation(unconditional_surrender, surrender).
relation(empire, group).

% Section 3 - Encoding
relation(X,Y) :- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(bombing_of_hiroshima_and_nagasaki,X,Y) :- neg(bombing_of_hiroshima_and_nagasaki,X),neg(Y,X), bombing_of_hiroshima_and_nagasaki != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = bombing_of_hiroshima_and_nagasaki.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(guomindang, power).
pos(guomindang, china).
neg(china, civil_war).
neg(china, warlordism).
neg(china, famines).
neg(china, devastation).
neg(guomindang, power_consolidation).
neg(sun_yat_sen, china_stabilization).

Section 2 - General relationships:

relation(guomindang, china).
relation(china, civil_war).
relation(china, warlordism).
relation(china, famines).
relation(china, devastation).
relation(guomindang, power_consolidation).
relation(sun_yat_sen, china_stabilization).

Section 3 - Encoding:

guomindang_is_good_because :- pos(guomindang, Y).
guomindang_is_bad_because :- neg(guomindang, Y).
compare(guomindang,X,Y) :- neg(guomindang,X),neg(Y,X), guomindang != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = guomindang.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(courts, racially_balanced_schools).
pos(boston_schools, racially_balanced_schools).
pos(mixed_schools, test_scores).
neg(inner_city_schools, test_scores).
pos(diverse_school, test_scores).
pos(suburban_counties, test_scores).
pos(boston_first_plan, free_country).
neg(boston_first_plan, school_choice).
pos(boston_new_plan, school_choice).

Section 2 - General relationships:

relation(courts, racially_balanced_schools).
relation(boston_schools, racially_balanced_schools).
relation(mixed_schools, test_scores).
relation(inner_city_schools, test_scores).
relation(diverse_school, test_scores).
relation(suburban_counties, test_scores).
relation(boston_first_plan, free_country).
relation(boston_first_plan, school_choice).
relation(boston_new_plan, school_choice).

Section 3 - Encoding:

courts_are_bad_because :- neg(courts, Y).
courts_are_good_because :- pos(courts, Y).
boston_schools_are_bad_because :- neg(boston_schools, Y).
boston_schools_are_good_because :- pos(boston_schools, Y).
mixed_schools_are_bad_because :- neg(mixed_schools, Y).
mixed_schools_are_good_because :- pos(mixed_schools, Y).
inner_city_schools_are_bad_because :- neg(inner_city_schools, Y).
inner_city_schools_are_good_because :- pos(inner_city_schools, Y).
diverse_school_are_bad_because :- neg(diverse_school, Y).
diverse_school_are_good_because :- pos(diverse_school, Y).
suburban_counties_are_bad_because :- neg(suburban_counties, Y).
suburban_counties_are_good_because :- pos(suburban_counties, Y).
boston_first_plan_is_bad_because :- neg(boston_first_plan, Y).
boston_first_plan_is_good_because :- pos(boston_first_plan, Y).
boston_new_plan_is_bad_because :- neg(boston_new_plan, Y).
boston_new_plan_is_good_because :- pos(boston_new_plan, Y).
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = X.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(space_exploration, long_term_viability).
neg(united_states_government, budget_surplus).
neg(federal_government, budget_surplus).
neg(nasa, budget_increase).

Section 2 - General relationships:

relation(space_exploration, nasa).
relation(united_states_government, federal_government).
relation(federal_government, budget).
relation(nasa, budget).

Section 3 - Encoding:

space_exploration_is_good_because :- pos(space_exploration, Y).
space_exploration_is_bad_because :- neg(space_exploration, Y).
compare(space_exploration,X,Y) :- neg(space_exploration,X),neg(Y,X), space_exploration != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = space_exploration.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(arbitrary_respect, deserved).
pos(arbitrary_respect, status).
neg(people, respect_army).
pos(people, beliefs).
neg(people, respect_religion).
pos(people, beliefs).

Section 2 - General relationships:

relation(arbitrary_respect, people).
relation(people, army).
relation(people, religion).
relation(people, beliefs).

Section 3 - Encoding:

respect_is_good_because :- pos(respect,Y).
respect_is_bad_because :- neg(respect,Y).
compare(respect,X,Y) :- neg(respect,X),neg(Y,X), respect != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = respect.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(atomic_bombs, persuasive_power).
pos(atomic_bombs, destructive_power).
pos(atomic_bombs, shock_value).
pos(atomic_bombs, surrender_catalyst).
pos(atomic_bombs, city_levelling_power).
pos(atomic_bombs, end_of_war_catalyst).
pos(atomic_bombs, japanese_surrender_catalyst).
pos(henry_l_stimson, shock_value_assessment).
pos(prime_minister_suzuki, shock_value_assessment).
pos(b29_bombing, surrender_catalyst).
pos(b29_bombing, city_levelling_power).
pos(b29_bombing, end_of_war_catalyst).
pos(b29_bombing, japanese_surrender_catalyst).
pos(japan, surrender_catalyst).
pos(japan, end_of_war_catalyst).
pos(japan, japanese_surrender_catalyst).
pos(japanese_government, shock_value_assessment).
pos(japanese_leadership, surrender_catalyst).
pos(japanese_leadership, end_of_war_catalyst).
pos(japanese_leadership, japanese_surrender_catalyst).
pos(japanese_rulers, surrender_catalyst).
pos(japanese_rulers, end_of_war_catalyst).
pos(japanese_rulers, japanese_surrender_catalyst).
pos(united_states_strategic_bombing_survey, b29_equivalence_assessment).

neg(atomic_bombs, conventional_weapons_equivalence).
neg(b29_bombing, atomic_bombs_equivalence).
neg(japan, surrender_catalyst).
neg(japan, end_of_war_catalyst).
neg(japan, japanese_surrender_catalyst).
neg(japanese_government, b29_bombing_equivalence).
neg(japanese_leadership, surrender_catalyst).
neg(japanese_leadership, end_of_war_catalyst).
neg(japanese_leadership, japanese_surrender_catalyst).
neg(japanese_rulers, surrender_catalyst).
neg(japanese_rulers, end_of_war_catalyst).
neg(japanese_rulers, japanese_surrender_catalyst).

Section 2 - General relationships:

relation(atomic_bombs, japan).
relation(atomic_bombs, japanese_rulers).
relation(atomic_bombs, japanese_leadership).
relation(atomic_bombs, japanese_government).
relation(atomic_bombs, united_states_strategic_bombing_survey).
relation(b29_bombing, japan).
relation(b29_bombing, japanese_rulers).
relation(b29_bombing, japanese_leadership).
relation(b29_bombing, japanese_government).
relation(japan, atomic_bombs).
relation(japan, b29_bombing).
relation(japan, japanese_rulers).
relation(japan, japanese_leadership).
relation(japan, japanese_government).
relation(japanese_rulers, atomic_bombs).
relation(japanese_rulers, b29_bombing).
relation(japanese_rulers, japan).
relation(japanese_rulers, japanese_leadership).
relation(japanese_rulers, japanese_government).
relation(japanese_leadership, atomic_bombs).
relation(japanese_leadership, b29_bombing).
relation(japanese_leadership, japan).
relation(japanese_leadership, japanese_rulers).
relation(japanese_leadership, japanese_government).
relation(japanese_government, atomic_bombs).
relation(japanese_government, b29_bombing).
relation(japanese_government, japan).
relation(japanese_government, japanese_rulers).
relation(japanese_government, japanese_leadership).
relation(henry_l_stimson, atomic_bombs).
relation(prime_minister_suzuki, atomic_bombs).

Section 3 - Encoding:

atomic_bombs_are_persuasive :- pos(atomic_bombs, persuasive_power).
atomic_bombs_are_destructive :- pos(atomic_bombs, destructive_power).
atomic_bombs_have_shock_value :- pos(atomic_bombs, shock_value).
atomic_bombs_catalysed_surrender :- pos(atomic_bombs, surrender_catalyst).
atomic_bombs_can_level_cities :- pos(atomic_bombs, city_levelling_power).
atomic_bombs_ended_the_war :- pos(atomic_bombs, end_of_war_catalyst).
atomic_bombs_caused_japanese_surrender :- pos(atomic_bombs, japanese_surrender_catalyst).
henry_l_stimson_assessed_shock_value :- pos(henry_l_stimson, shock_value_assessment).
prime_minister_suzuki_assessed_shock_value :- pos(prime_minister_suzuki, shock_value_assessment).
b29_bombing_catalysed_surrender :- pos(b29_bombing, surrender_catalyst).
b29_bombing_can_level_cities :- pos(b29_bombing, city_levelling_power).
b29_bombing_ended_the_war :- pos(b29_bombing, end_of_war_catalyst).
b29_bombing_caused_japanese_surrender :- pos(b29_bombing, japanese_surrender_catalyst).
japan_catalysed_surrender :- pos(japan, surrender_catalyst).
japan_ended_the_war :- pos(japan, end_of_war_catalyst).
japan_caused_japanese_surrender :- pos(japan, japanese_surrender_catalyst).
japanese_government_assessed_shock_value :- pos(japanese_government, shock_value_assessment).
japanese_leadership_catalysed_surrender :- pos(japanese_leadership, surrender_catalyst).
japanese_leadership_ended_the_war :- pos(japanese_leadership, end_of_war_catalyst).
japanese_leadership_caused_japanese_surrender :- pos(japanese_leadership, japanese_surrender_catalyst).
japanese_rulers_catalysed_surrender :- pos(japanese_rulers, surrender_catalyst).
japanese_rulers_ended_the_war :- pos(japanese_rulers, end_of_war_catalyst).
japanese_rulers_caused_japanese_surrender :- pos(japanese_rulers, japanese_surrender_catalyst).
united_states_strategic_bombing_survey_assessed_equivalence :- pos(united_states_strategic_bombing_survey, b29_equivalence_assessment).

atomic_bombs_are_not_equivalent_to_conventional_weapons :- neg(atomic_bombs, conventional_weapons_equivalence).
b29_bombing_is_not_equivalent_to_atomic_bombs :- neg(b29_bombing, atomic_bombs_equivalence).
japan_did_not_catalyse_surrender :- neg(japan, surrender_catalyst).
japan_did_not_end_the_war :- neg(japan, end_of_war_catalyst).
japan_did_not_cause_japanese_surrender :- neg(japan, japanese_surrender_catalyst).
japanese_government_did_not_assess_equivalence :- neg(japanese_government, b29_bombing_equivalence).
japanese_leadership_did_not_catalyse_surrender :- neg(japanese_leadership, surrender_catalyst).
japanese_leadership_did_not_end_the_war :- neg(japanese_leadership, end_of_war_catalyst).
japanese_leadership_did_not_cause_japanese_surrender :- neg(japanese_leadership, japanese_surrender_catalyst).
japanese_rulers_did_not_catalyse_surrender :- neg(japanese_rulers, surrender_catalyst).
japanese_rulers_did_not_end_the_war :- neg(japanese_rulers, end_of_war_catalyst).
japanese_rulers_did_not_cause_japanese_surrender :- neg(japanese_rulers, japanese_surrender_catalyst).

relation(X,Y) :- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(united_states_selective_service_system, good_policy).

Section 2 - General relationships:

relation(united_states_selective_service_system, forced_military_registration).
relation(united_states_selective_service_system, draft).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(media_owner, right_to_open_expression).
pos(media_owner, right_to_use_own_property).
pos(media_owner, right_to_free_speech).
pos(media_owner, right_to_critique).
pos(media_owner, right_to_use_for_academic_purpose).
pos(media_owner, right_to_contextualize_opinions).
pos(media_owner, right_to_contextualize_lessons).
pos(media_owner, right_to_improve_quality_of_education).
pos(media_owner, right_to_empower_students).
pos(media_owner, right_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner, right_to_use_media_to_contextualize_opinions).
pos(media_owner, right_to_use_media_to_contextualize_lessons).
pos(media_owner, right_to_use_media_to_improve_quality_of_education).
pos(media_owner, right_to_use_media_to_empower_students).
pos(media_owner, right_to_use_media_to_promote_valuable_enrichment_activities).
pos(media_owner, right_to_use_media_to_improve_discourse).
pos(media_owner, right_to_use_media_for_education).
pos(media_owner, right_to_use_media_for_critique).
pos(media_owner, right_to_use_media_for_academic_purpose).
pos(media_owner,
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(yahweh, reasonable_arguments).
pos(david, doubts).
pos(david, belief).
pos(gentiles, law).
pos(gentiles, conscience).
pos(gentiles, thoughts).
pos(gentiles, salvation).
pos(yahweh, omnibenevolent).
pos(yahweh, equal_chance_of_salvation).
pos(X, personality_traits).

neg(yahweh, reasonable_arguments).
neg(david, belief).
neg(gentiles, law).
neg(gentiles, salvation).
neg(X, existence).

Section 2 - General relationships:

relation(yahweh, david).
relation(yahweh, psalm_10).
relation(yahweh, psalm_44).
relation(yahweh, isaiah_45).
relation(yahweh, romans_2_14_16).
relation(yahweh, matthew_7_21_23).
relation(yahweh, opponent).
relation(yahweh, salvation).
relation(gentiles, law).
relation(gentiles, salvation).
relation(X, personality_traits).

Section 3 - Encoding:

yahweh_is_good_because :- pos(yahweh, Y).
yahweh_is_bad_because :- neg(yahweh, Y).
compare(yahweh,X,Y) :- neg(yahweh,X),neg(Y,X), yahweh != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = yahweh.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(michael_savage, dewshbag).
pos(michael_savage, fascist_nationalist).
pos(michael_savage, radio_head).
pos(michael_savage, banned).
pos(michael_savage, hate_speech).
pos(glenn_beck, entertainer).
pos(glenn_beck, joke).
pos(glenn_beck, nut).
pos(bill_o_reilly, doucheness).
pos(bill_o_reilly, big_time_news_anchor).
pos(bill_o_reilly, bigoted_hate_speaker).

neg(michael_savage, republican).
neg(glenn_beck, conservative).
neg(glenn_beck, libertarian).
neg(bill_o_reilly, manners).
neg(bill_o_reilly, cool).

Section 2 - General relationships:

relation(michael_savage, right_end_of_the_spectrum).
relation(michael_savage, political_party).
relation(michael_savage, conservative).
relation(michael_savage, fox_news).
relation(michael_savage, alex_jones).
relation(michael_savage, caller).
relation(michael_savage, black_people).
relation(michael_savage, slavery).
relation(michael_savage, welfare).
relation(michael_savage, mexican_caller).
relation(glenn_beck, fox_news).
relation(glenn_beck, conservative).
relation(glenn_beck, alex_jones).
relation(bill_o_reilly, fox_news).
relation(bill_o_reilly, bigoted_hate_speaker).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(people, responsibility).
neg(people, change_behaviour).
pos(market_methods, raise_price_of_energy).
pos(raise_price_of_energy, change_behaviour).
pos(carbon_tax, make_up_for_other_taxes).
pos(regulation, tackle_emissions).
neg(regulation, raise_cost_of_energy_and_fuel).

Section 2 - General relationships:

relation(people, climate_change).
relation(people, lifestyle).
relation(lifestyle, carbon).
relation(carbon, air).
relation(climate_change, tackle).
relation(market_methods, energy).
relation(energy, price).
relation(carbon_tax, system).
relation(regulation, cost).
relation(cost, energy).
relation(cost, fuel).
relation(producers, regulation).
relation(producers, consumers).

Section 3 - Encoding:

people_are_responsible_for_climate_change :- pos(people, responsibility).
people_are_not_responsible_for_climate_change :- neg(people, responsibility).
people_can_change_their_behaviour :- pos(people, change_behaviour).
people_cannot_change_their_behaviour :- neg(people, change_behaviour).
market_methods_can_raise_price_of_energy :- pos(market_methods, raise_price_of_energy).
market_methods_cannot_raise_price_of_energy :- neg(market_methods, raise_price_of_energy).
raise_price_of_energy_can_change_behaviour :- pos(raise_price_of_energy, change_behaviour).
raise_price_of_energy_cannot_change_behaviour :- neg(raise_price_of_energy, change_behaviour).
carbon_tax_can_make_up_for_other_taxes :- pos(carbon_tax, make_up_for_other_taxes).
carbon_tax_cannot_make_up_for_other_taxes :- neg(carbon_tax, make_up_for_other_taxes).
regulation_can_tackle_emissions :- pos(regulation, tackle_emissions).
regulation_cannot_tackle_emissions :- neg(regulation, tackle_emissions).
regulation_can_raise_cost_of_energy_and_fuel :- neg(regulation, raise_cost_of_energy_and_fuel).
regulation_cannot_raise_cost_of_energy_and_fuel :- pos(regulation, raise_cost_of_energy_and_fuel).
producers_can_pass_increased_costs_of_regulation_on_to_consumers :- relation(producers, regulation), relation(producers, consumers).
producers_cannot_pass_increased_costs_of_regulation_on_to_consumers :- neg(relation(producers, regulation)), neg(relation(producers, consumers)).
compare(people,X,Y) :- neg(people,X),neg(Y,X), people != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = people.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(islam, peace).
pos(islam, five_pillars_of_islam).
pos(five_pillars_of_islam, shahadah).
pos(five_pillars_of_islam, salah).
pos(five_pillars_of_islam, zakat).
pos(five_pillars_of_islam, sawm).
pos(five_pillars_of_islam, hajj).
neg(islamic_terrorists, peace).

Section 2 - General relationships:

relation(islam, violence).
relation(islam, islamic_terrorists).
relation(islamic_terrorists, violence).

Section 3 - Encoding:

islam_is_violent_because :- neg(islam,Y).
islam_is_peaceful_because :- pos(islam,Y).
compare(islam,X,Y) :- neg(islam,X),neg(Y,X), islam != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = islam.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(women, gun).
pos(elderly, gun).
pos(knife, felonious_intent).
pos(aggravated_assault_offenders, position).
neg(knife, officer).
neg(aggravated_assault_offenders, middle_age).
neg(position, discrimination).

Section 2 - General relationships:

relation(women, gun).
relation(elderly, gun).
relation(knife, officer).
relation(aggravated_assault_offenders, position).
relation(aggravated_assault_offenders, middle_age).
relation(position, discrimination).

Section 3 - Encoding:

women_are_safe_because :- pos(women,Y).
women_are_not_safe_because :- neg(women,Y).
elderly_are_safe_because :- pos(elderly,Y).
elderly_are_not_safe_because :- neg(elderly,Y).
knife_is_safe_because :- pos(knife,Y).
knife_is_not_safe_because :- neg(knife,Y).
aggravated_assault_offenders_are_safe_because :- pos(aggravated_assault_offenders,Y).
aggravated_assault_offenders_are_not_safe_because :- neg(aggravated_assault_offenders,Y).
position_is_safe_because :- pos(position,Y).
position_is_not_safe_because :- neg(position,Y).
compare(women,X,Y) :- neg(women,X),neg(Y,X), women != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = women.
compare(elderly,X,Y) :- neg(elderly,X),neg(Y,X), elderly != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elderly.
compare(knife,X,Y) :- neg(knife,X),neg(Y,X), knife != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = knife.
compare(aggravated_assault_offenders,X,Y) :- neg(aggravated_assault_offenders,X),neg(Y,X), aggravated_assault_offenders != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = aggravated_assault_offenders.
compare(position,X,Y) :- neg(position,X),neg(Y,X), position != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = position.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(plastic_surgery, clean_up).
pos(plastic_surgery, permittable).
pos(plastic_surgery, disfigurement).
pos(plastic_surgery, breast_implant).
pos(plastic_surgery, butt_implant).
pos(large_breasts, strength).
pos(large_breasts, power).
pos(large_breasts, milk).
pos(large_breasts, infant).
pos(large_breasts, baby).
pos(well_formed_butt, safe_environment).
pos(well_formed_butt, baby).
pos(exercise, look_better).
pos(exercise, feel_better).
pos(diet, look_better).
pos(diet, feel_better).
pos(donate_money, starving_children).
pos(donate_money, homeless_people).
pos(help_other_people, real_problems).

neg(plastic_surgery, good).
neg(plastic_surgery, scars).
neg(plastic_surgery, disfigurement).
neg(plastic_surgery, mangled).
neg(plastic_surgery, unnatural).
neg(plastic_surgery, disgusting).
neg(plastic_surgery, confusion).
neg(plastic_surgery, potential_mates).
neg(plastic_surgery, interest).
neg(plastic_surgery, perceived_enhancements).
neg(plastic_surgery, work).
neg(plastic_surgery, awkward_situation).
neg(plastic_surgery, want).
neg(plastic_surgery, touch).
neg(plastic_surgery, high_quality_genes).
neg(plastic_surgery, mate).
neg(plastic_surgery, freak_show).
neg(plastic_surgery, carnival_side_show).
neg(plastic_surgery, ethics).
neg(plastic_surgery, morals).
neg(plastic_surgery, sick).
neg(plastic_surgery, selfish).
neg(plastic_surgery, vanity).
neg(plastic_surgery, appearance).
neg(plastic_surgery, real_problems).
neg(plastic_surgery, big_deal).
neg(plastic_surgery, human_mutilation).

Section 2 - General relationships:

relation(plastic_surgery, serious_accident).
relation(plastic_surgery, car_crash).
relation(plastic_surgery, mauled_by_a_bear).
relation(plastic_surgery, burn_victim).
relation(plastic_surgery, breast).
relation(plastic_surgery, buttock).
relation(plastic_surgery, cloths).
relation(plastic_surgery, potential_mates).
relation(plastic_surgery, interest).
relation(plastic_surgery, perceived_enhancements).
relation(plastic_surgery, person).
relation(plastic_surgery, naked).
relation(plastic_surgery, awkward_situation).
relation(plastic_surgery, want).
relation(plastic_surgery, touch).
relation(plastic_surgery, large_breasts).
relation(plastic_surgery, butts).
relation(plastic_surgery, evolution).
relation(plastic_surgery, natural_selection).
relation(plastic_surgery, high_quality_genes).
relation(plastic_surgery, mate).
relation(plastic_surgery, freak_show).
relation(plastic_surgery, carnival_side_show).
relation(plastic_surgery, ethics).
relation(plastic_surgery, morals).
relation(plastic_surgery, money).
relation(plastic_surgery, bank).
relation(plastic_surgery, nose_job).
relation(plastic_surgery, starving_children).
relation(plastic_surgery, homeless_people).
relation(plastic_surgery, vanity).
relation(plastic_surgery, appearance).
relation(plastic_surgery, real_problems).
relation(plastic_surgery, big_deal).
relation(plastic_surgery, human_mutilation).
relation(large_breasts, strength).
relation(large_breasts, power).
relation(large_breasts, milk).
relation(large_breasts, infant).
relation(large_breasts, baby).
relation(well_formed_butt, safe_environment).
relation(well_formed_butt, baby).
relation(exercise, look_better).
relation(exercise, feel_better).
relation(diet, look_better).
relation(diet, feel_better).
relation(donate_money, starving_children).
relation(donate_money, homeless_people).
relation(help_other_people, real_problems).

Section 3 - Encoding:

plastic_surgery_is_good_because :- pos(plastic_surgery, Y).
plastic_surgery_is_bad_because :- neg(plastic_surgery, Y).
compare(plastic_surgery,X,Y) :- neg(plastic_surgery,X),neg(Y,X), plastic_surgery != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = plastic_surgery.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(abortion, unwanted).
pos(abortion, poverty).
pos(abortion, overpopulation).
neg(fetus, rights).
neg(fetus, adult).
neg(fetus, innocent).
neg(fetus, life).
neg(fetus, say).
pos(mother, life).
pos(mother, education).
pos(mother, working).
pos(mother, choice).
pos(mother, decision).

% Section 2 - General relationships
relation(abortion, fetus).
relation(abortion, mother).
relation(fetus, adult).
relation(fetus, cells).
relation(fetus, rights).
relation(fetus, life).
relation(mother, fetus).
relation(mother, life).
relation(mother, education).
relation(mother, working).
relation(mother, decision).

% Section 3 - Encoding
% General relations
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
% Specific relations
compare(fetus,X,Y) :- neg(fetus,X),neg(Y,X), fetus != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = fetus.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(production_for_profit, efficient).
pos(production_for_profit, higher_price).
pos(production_for_use, break_even_price).
pos(production_for_profit, less_money_spent).
pos(production_for_profit, less_money_made).
pos(production_for_profit, human_nature).
pos(production_for_profit, less_pay).
pos(production_for_profit, less_effort).
pos(social_darwinism, market_competition).
pos(social_darwinism, inequality).

neg(production_for_use, efficient).
neg(production_for_use, higher_price).
neg(production_for_profit, break_even_price).
neg(production_for_profit, less_money_spent).
neg(production_for_profit, less_money_made).
neg(production_for_profit, human_nature).
neg(production_for_profit, less_pay).
neg(production_for_profit, less_effort).
neg(social_darwinism, market_competition).
neg(social_darwinism, inequality).

Section 2 - General relationships:

relation(production_for_profit, production_for_use).
relation(production_for_profit, price).
relation(production_for_profit, money).
relation(production_for_profit, effort).
relation(production_for_profit, communism).
relation(production_for_profit, capitalism).
relation(production_for_profit, social_darwinism).
relation(production_for_profit, inequality).
relation(production_for_profit, income).
relation(production_for_profit, contrast).

Section 3 - Encoding:

production_for_profit_is_efficient :- pos(production_for_profit, efficient).
production_for_use_is_not_efficient :- neg(production_for_use, efficient).
production_for_profit_has_higher_price :- pos(production_for_profit, higher_price).
production_for_use_does_not_have_higher_price :- neg(production_for_use, higher_price).
production_for_profit_has_break_even_price :- pos(production_for_use, break_even_price).
production_for_profit_does_not_have_break_even_price :- neg(production_for_profit, break_even_price).
production_for_profit_has_less_money_spent :- pos(production_for_profit, less_money_spent).
production_for_profit_does_not_have_less_money_spent :- neg(production_for_profit, less_money_spent).
production_for_profit_has_less_money_made :- pos(production_for_profit, less_money_made).
production_for_profit_does_not_have_less_money_made :- neg(production_for_profit, less_money_made).
production_for_profit_is_human_nature :- pos(production_for_profit, human_nature).
production_for_profit_is_not_human_nature :- neg(production_for_profit, human_nature).
production_for_profit_has_less_pay :- pos(production_for_profit, less_pay).
production_for_profit_does_not_have_less_pay :- neg(production_for_profit, less_pay).
production_for_profit_has_less_effort :- pos(production_for_profit, less_effort).
production_for_profit_does_not_have_less_effort :- neg(production_for_profit, less_effort).
social_darwinism_has_market_competition :- pos(social_darwinism, market_competition).
social_darwinism_does_not_have_market_competition :- neg(social_darwinism, market_competition).
social_darwinism_has_inequality :- pos(social_darwinism, inequality).
social_darwinism_does_not_have_inequality :- neg(social_darwinism, inequality).

compare(production_for_profit, production_for_use, Y) :- neg(production_for_profit, Y), neg(production_for_use, Y), production_for_profit != production_for_use.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = production_for_profit.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(china, universal_language).
pos(china, universal_language).

Section 2 - General relationships:

relation(china, understand).
relation(china, stress).
relation(china, mandarin).
relation(china, words).
relation(china, spelling).
relation(china, pronunciation).
relation(china, alphabet).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(parent, child).
pos(parent, environment).
pos(parent, control).
pos(parent, teach).
pos(parent, show).
pos(parent, feed).
pos(parent, raise).
pos(parent, want).

Section 2 - General relationships:

relation(parent, child).
relation(parent, environment).
relation(parent, control).
relation(parent, teach).
relation(parent, show).
relation(parent, feed).
relation(parent, raise).
relation(parent, want).

Section 3 - Encoding:

parent_is_good_because :- pos(parent,Y).
parent_is_bad_because :- neg(parent,Y).
compare(parent,X,Y) :- neg(parent,X),neg(Y,X), parent != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = parent.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(styles, fights).
pos(mayweather, beats_pacquiao).
neg(opponent, boxing).
neg(opponent, substance).
pos(opponent, deconstruct).
pos(opponent, language).
pos(opponent, resolution).
pos(opponent, challenge).
pos(opponent, style).
pos(style, strategic_approach).
pos(style, fighter).
pos(style, bout).
pos(boxers, moves).
pos(boxers, punches).
pos(boxers, style).
pos(boxing_styles, advantages).
pos(boxing_styles, disadvantages).
pos(styles, fights).
pos(mayweather, straight_right_hand).
pos(mayweather, counter_pacquiao).
pos(marquez, straight_right_hand).
pos(pacquiao, vulnerable).
neg(pacquiao, straight_right_hand).
pos(de_la_hoya, left_handed_fighter).
pos(de_la_hoya, orthodox_stance).
pos(cotto, left_handed_fighter).
pos(cotto, orthodox_stance).
pos(hatton, pressure_in_fighter).
pos(hatton, hooks).
pos(hatton, uppercuts).
pos(margarito, pressure_in_fighter).
pos(margarito, hooks).
pos(margarito, uppercuts).
pos(clottey, straight_right_hand).
pos(mosley, straight_right_hand).
neg(clottey, throw_straight_right_hand).
neg(mosley, throw_straight_right_hand).

Section 2 - General relationships:

relation(styles, fights).
relation(mayweather, pacquiao).
relation(opponent, boxing).
relation(opponent, substance).
relation(opponent, language).
relation(opponent, resolution).
relation(opponent, challenge).
relation(opponent, style).
relation(style, strategic_approach).
relation(style, fighter).
relation(style, bout).
relation(boxers, moves).
relation(boxers, punches).
relation(boxers, style).
relation(boxing_styles, advantages).
relation(boxing_styles, disadvantages).
relation(styles, fights).
relation(mayweather, straight_right_hand).
relation(mayweather, counter_pacquiao).
relation(marquez, straight_right_hand).
relation(pacquiao, vulnerable).
relation(pacquiao, straight_right_hand).
relation(de_la_hoya, left_handed_fighter).
relation(de_la_hoya, orthodox_stance).
relation(cotto, left_handed_fighter).
relation(cotto, orthodox_stance).
relation(hatton, pressure_in_fighter).
relation(hatton, hooks).
relation(hatton, uppercuts).
relation(margarito, pressure_in_fighter).
relation(margarito, hooks).
relation(margarito, uppercuts).
relation(clottey, straight_right_hand).
relation(mosley, straight_right_hand).
relation(clottey, throw_straight_right_hand).
relation(mosley, throw_straight_right_hand).

Section 3 - Encoding:

styles_make_fights :- pos(styles, fights).
mayweather_beats_pacquiao :- pos(mayweather, beats_pacquiao).
opponent_not_boxing :- neg(opponent, boxing).
opponent_not_substance :- neg(opponent, substance).
opponent_deconstruct :- pos(opponent, deconstruct).
opponent_language :- pos(opponent, language).
opponent_resolution :- pos(opponent, resolution).
opponent_challenge :- pos(opponent, challenge).
opponent_style :- pos(opponent, style).
style_strategic_approach :- pos(style, strategic_approach).
style_fighter :- pos(style, fighter).
style_bout :- pos(style, bout).
boxers_moves :- pos(boxers, moves).
boxers_punches :- pos(boxers, punches).
boxers_style :- pos(boxers, style).
boxing_styles_advantages :- pos(boxing_styles, advantages).
boxing_styles_disadvantages :- pos(boxing_styles, disadvantages).
styles_make_fights :- pos(styles, fights).
mayweather_straight_right_hand :- pos(mayweather, straight_right_hand).
mayweather_counter_pacquiao :- pos(mayweather, counter_pacquiao).
marquez_straight_right_hand :- pos(marquez, straight_right_hand).
pacquiao_vulnerable :- pos(pacquiao, vulnerable).
pacquiao_not_straight_right_hand :- neg(pacquiao, straight_right_hand).
de_la_hoya_left_handed_fighter :- pos(de_la_hoya, left_handed_fighter).
de_la_hoya_orthodox_stance :- pos(de_la_hoya, orthodox_stance).
cotto_left_handed_fighter :- pos(cotto, left_handed_fighter).
cotto_orthodox_stance :- pos(cotto, orthodox_stance).
hatton_pressure_in_fighter :- pos(hatton, pressure_in_fighter).
hatton_hooks :- pos(hatton, hooks).
hatton_uppercuts :- pos(hatton, uppercuts).
margarito_pressure_in_fighter :- pos(margarito, pressure_in_fighter).
margarito_hooks :- pos(margarito, hooks).
margarito_uppercuts :- pos(margarito, uppercuts).
clottey_straight_right_hand :- pos(clottey, straight_right_hand).
mosley_straight_right_hand :- pos(mosley, straight_right_hand).
clottey_not_throw_straight_right_hand :- neg(clottey, throw_straight_right_hand).
mosley_not_throw_straight_right_hand :- neg(mosley, throw_straight_right_hand).
compare(mayweather, pacquiao, marquez) :- neg(mayweather, pacquiao),neg(mayweather, marquez), pacquiao != marquez, pacquiao = mayweather.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(banning, stop_people_viewing).
neg(explicit_content, educational).
pos(tasteful_nudity, not_banned).
pos(swearing, not_banned).
pos(national_geographic, children).
pos(discovery_science, children).
pos(bans, warnings).
pos(responsible_parents, bans).
pos(responsible_children, bans).
pos(children, know_bad).
pos(children, choose_see).
neg(no_bans, responsible_parents).
neg(no_bans, responsible_children).
neg(no_warnings, responsible_parents).
neg(no_warnings, responsible_children).
neg(no_restrictions, respect_children).
neg(no_restrictions, protect_children).

Section 2 - General relationships:

relation(banning, stop_people_viewing).
relation(explicit_content, educational).
relation(tasteful_nudity, not_banned).
relation(swearing, not_banned).
relation(national_geographic, children).
relation(discovery_science, children).
relation(bans, warnings).
relation(responsible_parents, bans).
relation(responsible_children, bans).
relation(children, know_bad).
relation(children, choose_see).
relation(no_bans, responsible_parents).
relation(no_bans, responsible_children).
relation(no_warnings, responsible_parents).
relation(no_warnings, responsible_children).
relation(no_restrictions, respect_children).
relation(no_restrictions, protect_children).

Section 3 - Encoding:

elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(hispanic_immigrants, english_official_language).
pos(hispanic_immigrants, self_segregation).
neg(hispanic_immigrants, english_speaking).
neg(hispanic_immigrants, good_jobs).
neg(hispanic_immigrants, invading_horde).
neg(hispanic_immigrants, conquering_united_states).
pos(english_official_language, breaking_self_segregation).
pos(english_official_language, american_opportunities).

Section 2 - General relationships:

relation(hispanic_immigrants, english_official_language).
relation(hispanic_immigrants, self_segregation).
relation(hispanic_immigrants, english_speaking).
relation(hispanic_immigrants, good_jobs).
relation(hispanic_immigrants, invading_horde).
relation(hispanic_immigrants, conquering_united_states).
relation(english_official_language, breaking_self_segregation).
relation(english_official_language, american_opportunities).

Section 3 - Encoding:

hispanic_immigrants_are_good_because :- pos(hispanic_immigrants, Y).
hispanic_immigrants_are_bad_because :- neg(hispanic_immigrants, Y).
english_official_language_is_good_because :- pos(english_official_language, Y).
english_official_language_is_bad_because :- neg(english_official_language, Y).
compare(hispanic_immigrants,X,Y) :- neg(hispanic_immigrants,X),neg(Y,X), hispanic_immigrants != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = hispanic_immigrants.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(republican, gritty_veteran).
pos(republican, tough_guy).
pos(republican, old_tough_guy).
pos(republican, strong).
pos(republican, brave).
pos(republican, fearless).
pos(republican, independent).
pos(republican, self-reliant).
pos(republican, confident).
pos(republican, secure).
pos(republican, capable).
pos(republican, competent).
pos(republican, effective).
pos(republican, efficient).
pos(republican, productive).
pos(republican, successful).
pos(republican, prosperous).
pos(republican, wealthy).
pos(republican, powerful).
pos(republican, influential).
pos(republican, respected).
pos(republican, admired).
pos(republican, loved).
pos(republican, gun).
pos(republican, firearm).
pos(republican, weapon).
pos(republican, nra).
pos(republican, hunting).
pos(republican, brawl).
pos(republican, fistfight).
pos(republican, argument).
pos(republican, dispute).
pos(republican, solution).
pos(republican, peace).
pos(republican, harmony).
pos(republican, safety).
pos(republican, security).
pos(republican, protection).
pos(republican, freedom).
pos(republican, liberty).
pos(republican, democracy).
pos(republican, america).
pos(republican, constitution).
pos(republican, god).

neg(republican, weak).
neg(republican, paranoid).
neg(republican, afraid).
neg(republican, scared).
neg(republican, insecure).
neg(republican, incompetent).
neg(republican, ineffective).
neg(republican, inefficient).
neg(republican, unproductive).
neg(republican, unsuccessful).
neg(republican, unprosperous).
neg(republican, poor).
neg(republican, powerless).
neg(republican, uninfluential).
neg(republican, disrespected).
neg(republican, unadmired).
neg(republican, unloved).
neg(republican, soft).
neg(republican, unable).
neg(republican, incapable).
neg(republican, incompetent).
neg(republican, ineffective).
neg(republican, inefficient).
neg(republican, unproductive).
neg(republican, unsuccessful).
neg(republican, unprosperous).
neg(republican, poor).
neg(republican, powerless).
neg(republican, uninfluential).
neg(republican, disrespected).
neg(republican, unadmired).
neg(republican, unloved).
neg(republican, unarmed).
neg(republican, defenseless).
neg(republican, vulnerable).
neg(republican, unsafe).
neg(republican, insecure).
neg(republican, unfree).
neg(republican, unamerican).
neg(republican, unconstitutional).
neg(republican, ungodly).

Section 2 - General relationships:

relation(republican, gun).
relation(republican, firearm).
relation(republican, weapon).
relation(republican, nra).
relation(republican, hunting).
relation(republican, brawl).
relation(republican, fistfight).
relation(republican, argument).
relation(republican, dispute).
relation(republican, solution).
relation(republican, peace).
relation(republican, harmony).
relation(republican, safety).
relation(republican, security).
relation(republican, protection).
relation(republican, freedom).
relation(republican, liberty).
relation(republican, democracy).
relation(republican, america).
relation(republican, constitution).
relation(republican, god).

Section 3 - Encoding:

republican_is_good_because :- pos(republican, Y).
republican_is_bad_because :- neg(republican, Y).
compare(republican,X,Y) :- neg(republican,X),neg(Y,X), republican != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = republican.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(tiller, legal_late_term_abortions).
neg(two_year_old_killer, legal_killing).
pos(tiller, illegal_late_term_abortions).
pos(two_year_old_killer, illegal_killing).

Section 2 - General relationships:

relation(tiller, illegal_late_term_abortions).
relation(two_year_old_killer, illegal_killing).
relation(tiller, two_year_old_killer).

Section 3 - Encoding:

tiller_is_bad_because :- neg(tiller, Y).
two_year_old_killer_is_bad_because :- neg(two_year_old_killer, Y).
compare(tiller, two_year_old_killer, X) :- neg(tiller, X), neg(two_year_old_killer, X), tiller != two_year_old_killer.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(nations, getting_into_other_nation_affairs).
pos(opponent, ignoring_first_rebuttal).
pos(opponent, conceding_point).
neg(hitler, genocide).
neg(japan, pearl_harbour_attacks).
pos(logic, knowing_more_deaths).
pos(hitler, invading_poland).
pos(hitler, rampage_through_europe).
neg(one_country, defeating_hitler).
pos(forces, joining_against_fascism).
pos(hitler, performing_genocide_outside_nations).
neg(opponent, spelling).
neg(opponent, arguing_side_of_case).

Section 2 - General relationships:

relation(nations, getting_into_other_nation_affairs).
relation(opponent, ignoring_first_rebuttal).
relation(opponent, conceding_point).
relation(hitler, genocide).
relation(japan, pearl_harbour_attacks).
relation(logic, knowing_more_deaths).
relation(hitler, invading_poland).
relation(hitler, rampage_through_europe).
relation(one_country, defeating_hitler).
relation(forces, joining_against_fascism).
relation(hitler, performing_genocide_outside_nations).
relation(opponent, spelling).
relation(opponent, arguing_side_of_case).

Section 3 - Encoding:

nations_is_bad_because :- neg(nations,Y).
nations_is_good_because :- pos(nations,Y).
opponent_is_bad_because :- neg(opponent,Y).
opponent_is_good_because :- pos(opponent,Y).
hitler_is_bad_because :- neg(hitler,Y).
hitler_is_good_because :- pos(hitler,Y).
japan_is_bad_because :- neg(japan,Y).
japan_is_good_because :- pos(japan,Y).
logic_is_bad_because :- neg(logic,Y).
logic_is_good_because :- pos(logic,Y).
one_country_is_bad_because :- neg(one_country,Y).
one_country_is_good_because :- pos(one_country,Y).
forces_is_bad_because :- neg(forces,Y).
forces_is_good_because :- pos(forces,Y).
compare(nations,X,Y) :- neg(nations,X),neg(Y,X), nations != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = nations.
compare(opponent,X,Y) :- neg(opponent,X),neg(Y,X), opponent != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = opponent.
compare(hitler,X,Y) :- neg(hitler,X),neg(Y,X), hitler != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = hitler.
compare(japan,X,Y) :- neg(japan,X),neg(Y,X), japan != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = japan.
compare(logic,X,Y) :- neg(logic,X),neg(Y,X), logic != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = logic.
compare(one_country,X,Y) :- neg(one_country,X),neg(Y,X), one_country != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = one_country.
compare(forces,X,Y) :- neg(forces,X),neg(Y,X), forces != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = forces.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(bible, good_source_for_morals).
neg(god_of_bible, perfect_and_moral_character).
neg(bible, perfect_moral_guide).
neg(yahweh, perfect_moral_character).
pos(yahweh, destruction_of_entire_town).
pos(yahweh, destruction_of_entire_peoples).
neg(women, property_of_father_or_husband).
neg(women, permitted_to_have_authority_over_a_man).
neg(yahweh, killing_witches).
neg(yahweh, killing_homosexuals).
neg(yahweh, killing_children_who_hit_their_parents).
neg(yahweh, killing_adulterers).
neg(yahweh, killing_unbelievers).
neg(yahweh, killing_apostates).

Section 2 - General relationships:

relation(bible, god_of_bible).
relation(bible, yahweh).
relation(bible, prophets_of_yahweh).
relation(bible, disciples_of_christ).
relation(women, father).
relation(women, husband).
relation(yahweh, pentateuch).
relation(yahweh, jesus).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(anita_pea, good_scientist).
neg(anita_pea, sane_person).
pos(anita_pea, lucid_experiments).
pos(anita_pea, hard_to_controvert_experiments).
pos(harry_nutt, good_scientist).
pos(harry_nutt, nobel_prize_winner).
pos(harry_nutt, congratulated_scientist).
pos(harry_nutt, anita_pea_experiments_are_true).

% Section 2 - General relationships
relation(anita_pea, sir_prostheticmcfingers).
relation(anita_pea, harry_nutt).
relation(harry_nutt, anita_pea).
relation(women, poop).
relation(sweat, fecal_free_substance).
relation(saliva, fecal_free_substance).
relation(fecal_study_and_control, sweat).
relation(fecal_study_and_control, saliva).
relation(pro, sweat).
relation(pro, saliva).
relation(pro, fecal_study_and_control).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(trump, money_smart).
pos(trump, perseverance).
neg(politifact, unbiased).
neg(majority_of_your_sources, unbiased).

Section 2 - General relationships:

relation(trump, politics).
relation(trump, politifact).
relation(trump, bankruptcy).
relation(trump, america).
relation(trump, republican).

Section 3 - Encoding:

trump_is_good_because :- pos(trump,Y).
trump_is_bad_because :- neg(trump,Y).
compare(trump,X,Y) :- neg(trump,X),neg(Y,X), trump != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = trump.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(free_speech, mock_religion).
pos(free_speech, important).
neg(mock_religion, constitution).
pos(constitution, freedom_of_religion).
neg(mock_religion, religious_views).
pos(religious_views, influence_choices).
pos(first_amendment, freedom_of_religion).
neg(mock_god, freedom_of_religion).
pos(mock_god, favor_religion).

Section 2 - General relationships:

relation(free_speech, mock_religion).
relation(mock_religion, constitution).
relation(constitution, freedom_of_religion).
relation(mock_religion, religious_views).
relation(religious_views, influence_choices).
relation(first_amendment, freedom_of_religion).
relation(mock_god, freedom_of_religion).
relation(mock_god, favor_religion).

Section 3 - Encoding:

free_speech_is_good_because :- pos(free_speech, Y).
free_speech_is_bad_because :- neg(free_speech, Y).
mock_religion_is_good_because :- pos(mock_religion, Y).
mock_religion_is_bad_because :- neg(mock_religion, Y).
constitution_is_good_because :- pos(constitution, Y).
constitution_is_bad_because :- neg(constitution, Y).
freedom_of_religion_is_good_because :- pos(freedom_of_religion, Y).
freedom_of_religion_is_bad_because :- neg(freedom_of_religion, Y).
religious_views_are_good_because :- pos(religious_views, Y).
religious_views_are_bad_because :- neg(religious_views, Y).
first_amendment_is_good_because :- pos(first_amendment, Y).
first_amendment_is_bad_because :- neg(first_amendment, Y).
mock_god_is_good_because :- pos(mock_god, Y).
mock_god_is_bad_because :- neg(mock_god, Y).
favor_religion_is_good_because :- pos(favor_religion, Y).
favor_religion_is_bad_because :- neg(favor_religion, Y).
compare(free_speech,X,Y) :- neg(free_speech,X),neg(Y,X), free_speech != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = free_speech.
compare(mock_religion,X,Y) :- neg(mock_religion,X),neg(Y,X), mock_religion != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = mock_religion.
compare(constitution,X,Y) :- neg(constitution,X),neg(Y,X), constitution != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = constitution.
compare(freedom_of_religion,X,Y) :- neg(freedom_of_religion,X),neg(Y,X), freedom_of_religion != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = freedom_of_religion.
compare(religious_views,X,Y) :- neg(religious_views,X),neg(Y,X), religious_views != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = religious_views.
compare(first_amendment,X,Y) :- neg(first_amendment,X),neg(Y,X), first_amendment != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = first_amendment.
compare(mock_god,X,Y) :- neg(mock_god,X),neg(Y,X), mock_god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = mock_god.
compare(favor_religion,X,Y) :- neg(favor_religion,X),neg(Y,X), favor_religion != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = favor_religion.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(freedom_of_expression, skyrockets_teens_confidence).
pos(freedom_of_speech, tinker_vs_des_moines).
neg(professional_behavior, teens).

Section 2 - General relationships:

relation(freedom_of_expression, freedom_of_speech).
relation(freedom_of_speech, tinker_vs_des_moines).
relation(professional_behavior, teens).

Section 3 - Encoding:

freedom_of_expression_is_good_because :- pos(freedom_of_expression, Y).
freedom_of_expression_is_bad_because :- neg(freedom_of_expression, Y).
professional_behavior_is_good_because :- pos(professional_behavior, Y).
professional_behavior_is_bad_because :- neg(professional_behavior, Y).
compare(freedom_of_expression, X, Y) :- neg(freedom_of_expression, X), neg(Y, X), freedom_of_expression != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = freedom_of_expression.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(you, great_mind).
pos(you, great_prime).
pos(you, diamond_tap).
pos(you, great_9).
pos(you, sun).
pos(you, shine).
pos(you, airin_something).
pos(you, break_jaw).
pos(you, black_eye).
pos(you, green_bay).
pos(you, packers).
pos(you, nunchuck).
pos(you, gun_butted).
pos(you, hammers).
pos(you, untuck).
pos(you, beam_mac).
pos(you, red_eye).
pos(you, dumb_blunted).
pos(you, hollow_tips).
pos(you, newports).
pos(you, cig).
pos(you, light).
pos(you, fight).
pos(you, line).
pos(you, telephone_beep).
pos(you, next_to_somebody).
pos(you, hanging).
pos(you, weak).
pos(you, speak).
pos(you, noose).
pos(you, neck).
pos(you, fleek).
pos(you, trick).
pos(you, dusty_ass).
pos(you, rap).
pos(you, battle).

neg(you, scared).
neg(you, nothing).
neg(you, whooped).
neg(you, punching).
neg(you, cursed).
neg(you, escape).
neg(you, hone).
neg(you, time).
neg(you, tryna).
neg(you, dose).
neg(you, approach).
neg(you, waistline).
neg(you, fly).
neg(you, bullets).
neg(you, shine).
neg(you, run).
neg(you, from).
neg(you, it).
neg(you, turn).
neg(you, up).
neg(you, right).
neg(you, easy).
neg(you, nice).
neg(you, thought).
neg(you, turning).
neg(you, me).
neg(you, sh-t).
neg(you, get).
neg(you, out).
neg(you, gone).
neg(you, be).
neg(you, strangling).
neg(you, bone).
neg(you, ever).
neg(you, ain't).

Section 2 - General relationships:

relation(you, great_mind).
relation(you, great_prime).
relation(you, diamond_tap).
relation(you, great_9).
relation(you, sun).
relation(you, shine).
relation(you, airin_something).
relation(you, break_jaw).
relation(you, black_eye).
relation(you, green_bay).
relation(you, packers).
relation(you, nunchuck).
relation(you, gun_butted).
relation(you, hammers).
relation(you, untuck).
relation(you, beam_mac).
relation(you, red_eye).
relation(you, dumb_blunted).
relation(you, hollow_tips).
relation(you, newports).
relation(you, cig).
relation(you, light).
relation(you, fight).
relation(you, line).
relation(you, telephone_beep).
relation(you, next_to_somebody).
relation(you, hanging).
relation(you, weak).
relation(you, speak).
relation(you, noose).
relation(you, neck).
relation(you, fleek).
relation(you, trick).
relation(you, dusty_ass).
relation(you, rap).
relation(you, battle).

Section 3 - Encoding:

pos(you,X) :- relation(you,Y), pos(Y,X).
pos(you,X) :- pos(Y,X), pos(you,Y).
neg(you,X) :- relation(you,Y), neg(Y,X).
neg(you,X) :- neg(Y,X), neg(you,Y).
compare(you,X,Y) :- neg(you,X),neg(Y,X), you != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = you.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(person, finish_debate).
neg(person, counter_opponents_point).
pos(person, concede_debate).
pos(person, void_debate).
pos(person, multi_round_debate).
pos(person, win_debate).
pos(person, vote).
pos(person, wait).
pos(person, emergency).

% Section 2 - General relationships
relation(person, debate).
relation(person, opponent).
relation(person, round).
relation(person, site).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(us_military_equipment, greater_security).
pos(counter_terrorism_forces, greater_security).
pos(africa, international_agenda).
pos(al_qaeda, international_agenda).
pos(africa, base).
pos(west, attacks).
pos(madrid_bombing, attacks).
pos(disruption, beneficial).
pos(eradication, beneficial).

neg(terrorist_groups, acting_freely).

Section 2 - General relationships:

relation(us_military_equipment, africa).
relation(counter_terrorism_forces, africa).
relation(terrorist_groups, africa).
relation(al_qaeda, africa).
relation(africa, west).
relation(madrid_bombing, west).
relation(disruption, terrorist_groups).
relation(eradication, terrorist_groups).

Section 3 - Encoding:

greater_security_because :- pos(X,greater_security).
international_agenda_because :- pos(X,international_agenda).
base_because :- pos(X,base).
attacks_because :- pos(X,attacks).
beneficial_because :- pos(X,beneficial).
acting_freely_because :- neg(X,acting_freely).

compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = X.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(supply_side_economics, control_of_student_loan_debt).
pos(obama, student_loan_forgiveness).
pos(supply_side_economics, stable_balance).
pos(supply_side_economics, people_not_handcuffed_by_other_legislation_and_or_policies).
pos(supply_side_economics, people_free_from_crazy_debt).
pos(student_loan_forgiveness, stable_balance).
pos(student_loan_forgiveness, people_not_handcuffed_by_other_legislation_and_or_policies).
pos(student_loan_forgiveness, people_free_from_crazy_debt).
neg(wealth, trickle_down_from_rich_to_poor).
neg(schools, looked_at_a_student_credit_history).
neg(schools, looked_at_a_student_income).
neg(schools, looked_at_a_student_ability_to_repay_the_debt).
neg(schools, looked_at_anything).
neg(students, could_afford_federal_loans).
neg(students, found_good_jobs).
neg(student_loan_debt, supply_side_economics).
neg(student_loan_debt, people_not_handcuffed_by_other_legislation_and_or_policies).
neg(student_loan_debt, people_free_from_crazy_debt).
neg(heavy_loans, supply_side_economics).
neg(heavy_loans, people_not_handcuffed_by_other_legislation_and_or_policies).
neg(heavy_loans, people_free_from_crazy_debt).
neg(government, acted_quickly_enough).

Section 2 - General relationships:

relation(wealth, trickle_down).
relation(keynesian_economics, supply_side_economics).
relation(student_loan_debt, control_of_insanity).
relation(student_loan_debt, supply_side_economics).
relation(student_loan_debt, people).
relation(student_loan_debt, economy).
relation(schools, federal_student_loan_programs).
relation(schools, students).
relation(schools, federal_loans).
relation(students, federal_loans).
relation(students, dreams_of_success).
relation(students, good_jobs).
relation(students, heavy_loans).
relation(students, economy).
relation(obama, student_loan_forgiveness).
relation(stable_balance, supply_side_economics).
relation(people, student_loan_debt).
relation(people, supply_side_economics).
relation(people, economy).
relation(government, student_loan_forgiveness).
relation(government, economy).

Section 3 - Encoding:

supply_side_economics_is_good_because :- pos(supply_side_economics, Y).
supply_side_economics_is_bad_because :- neg(supply_side_economics, Y).
student_loan_debt_is_good_because :- pos(student_loan_debt, Y).
student_loan_debt_is_bad_because :- neg(student_loan_debt, Y).
compare(supply_side_economics,X,Y) :- neg(supply_side_economics,X),neg(Y,X), supply_side_economics != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = supply_side_economics.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(u_s_constitution, living_document).
neg(opponent, meeting_deadline).
neg(opponent, explaining_himself).
neg(opponent, offering_apology).

Section 2 - General relationships:

relation(u_s_constitution, living_document).
relation(opponent, meeting_deadline).
relation(opponent, explaining_himself).
relation(opponent, offering_apology).

Section 3 - Encoding:

u_s_constitution_is_good_because :- pos(u_s_constitution, Y).
u_s_constitution_is_bad_because :- neg(u_s_constitution, Y).
opponent_is_good_because :- pos(opponent, Y).
opponent_is_bad_because :- neg(opponent, Y).
compare(u_s_constitution,X,Y) :- neg(u_s_constitution,X),neg(Y,X), u_s_constitution != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = u_s_constitution.
compare(opponent,X,Y) :- neg(opponent,X),neg(Y,X), opponent != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = opponent.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(pascals_wager, simplified_version).
pos(pascals_wager, theists_point_of_view).
pos(pascals_wager, worth_a_chance).
pos(pascals_wager, dont_lose_anything).
neg(pascals_wager, fairy_tale).
neg(pascals_wager, irrelevant_analogy).

Section 2 - General relationships:

relation(pascals_wager, theist).
relation(pascals_wager, atheist).
relation(pascals_wager, reality).
relation(pascals_wager, truth).
relation(pascals_wager, logic).
relation(pascals_wager, hypothetical).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(pascals_wager,X,Y) :- neg(pascals_wager,X),neg(Y,X), pascals_wager != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = pascals_wager.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(age_of_consent, sixteen_and_above).
neg(age_of_consent, eighteen_and_above).
pos(average_male_teen, loses_virginity_at_sixteen_point_nine).
pos(average_female_teen, loses_virginity_at_seventeen_point_four).
pos(america, reduce_age_of_consent).

Section 2 - General relationships:

relation(age_of_consent, state).
relation(age_of_consent, scenario).
relation(age_of_consent, rape).
relation(average_male_teen, age_of_consent).
relation(average_female_teen, age_of_consent).
relation(america, age_of_consent).

Section 3 - Encoding:

age_of_consent_is_good_because :- pos(age_of_consent, Y).
age_of_consent_is_bad_because :- neg(age_of_consent, Y).
compare(age_of_consent,X,Y) :- neg(age_of_consent,X),neg(Y,X), age_of_consent != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = age_of_consent.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(american_heroes, success).

Section 2 - General relationships:

relation(american_heroes, failures).
relation(failures, success).
relation(teaching, failures).
relation(teaching, famous_americans).
relation(school, teaching).

Section 3 - Encoding:

neg(teaching, failures) :- neg(american_heroes, success).
pos(teaching, failures) :- pos(american_heroes, success).
compare(teaching,X,Y) :- neg(teaching,X),neg(Y,X), teaching != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = teaching.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(hybrid_cars, good_solution_to_global_warming).
pos(global_warming, global_crisis).
neg(hybrid_cars, immediate_dramatic_response).
neg(hybrid_cars, full_measure).
pos(hybrid_cars, reduce_emissions).
neg(hybrid_cars, good_contributor_to_global_warming).
pos(electric_vehicles, emit_no_greenhouse_gases).
pos(hydrogen_vehicles, emit_no_greenhouse_gases).

Section 2 - General relationships:

relation(global_warming, hybrid_cars).
relation(hybrid_cars, electric_vehicles).
relation(hybrid_cars, hydrogen_vehicles).

Section 3 - Encoding:

hybrid_cars_are_bad_because :- neg(hybrid_cars,Y).
hybrid_cars_are_good_because :- pos(hybrid_cars,Y).
compare(hybrid_cars,X,Y) :- neg(hybrid_cars,X),neg(Y,X), hybrid_cars != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = hybrid_cars.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(crime_rate, california).
pos(healthy_community, next_generation).

Section 2 - General relationships:

relation(curfew_time, crime_rate).
relation(curfew_time, california).
relation(curfew_time, healthy_community).
relation(curfew_time, next_generation).

Section 3 - Encoding:

curfew_time_is_good_because :- pos(curfew_time, Y).
curfew_time_is_bad_because :- neg(curfew_time, Y).
compare(curfew_time,X,Y) :- neg(curfew_time,X),neg(Y,X), curfew_time != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = curfew_time.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(point, true).
pos(point, false).

Section 2 - General relationships:

relation(point, x).
relation(x, point).

Section 3 - Encoding:

neg(point, true) :- relation(point, x), neg(x, true).
neg(point, true) :- neg(x, true), neg(point, x).
pos(point, false) :- relation(point, x), pos(x, false).
pos(point, false) :- pos(x, false), pos(point, x).
compare(point, x, y) :- neg(point, x), neg(y, x), point != y.
compare(x, y, z) :- neg(x, y), neg(x, z), y != z, y = point.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(tuition_fees, education).
pos(universities, funding).
pos(universities, research).
pos(universities, students).
pos(universities, education).
neg(recession, public_finances).
neg(recession, universities).
neg(recession, lecturers).
neg(recession, research).
neg(recession, applications).
neg(recession, universities).
neg(public_money, universities).

Section 2 - General relationships:

relation(tuition_fees, universities).
relation(universities, public_finances).
relation(universities, lecturers).
relation(universities, research).
relation(universities, applications).
relation(universities, students).
relation(universities, education).
relation(public_money, universities).

Section 3 - Encoding:

tuition_fees_are_good_because :- pos(tuition_fees, Y).
tuition_fees_are_bad_because :- neg(tuition_fees, Y).
universities_are_good_because :- pos(universities, Y).
universities_are_bad_because :- neg(universities, Y).
compare(tuition_fees,X,Y) :- neg(tuition_fees,X),neg(Y,X), tuition_fees != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = tuition_fees.
compare(universities,X,Y) :- neg(universities,X),neg(Y,X), universities != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = universities.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(faker, best_mid_laner).
pos(pawn, good_laning_phase).
neg(kassadin, good_laning_phase).
neg(faker, proper_gank).
neg(pawn, proper_gank).
neg(faker, logical_decision).
neg(faker, good_communication).
neg(faker, ahead_of_time).

Section 2 - General relationships:

relation(faker, pawn).
relation(faker, kassadin).
relation(faker, talon).
relation(faker, bengi).
relation(faker, dandy).
relation(faker, maknoon).
relation(faker, pray).
relation(league_of_legends, sport).

Section 3 - Encoding:

faker_is_good_because :- pos(faker, Y).
faker_is_bad_because :- neg(faker, Y).
compare(faker,X,Y) :- neg(faker,X),neg(Y,X), faker != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = faker.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(books, ability_to_put_a_coherent_sentence_together_with_correct_grammar_and_spelling).
neg(television, ability_to_put_a_coherent_sentence_together_with_correct_grammar_and_spelling).

Section 2 - General relationships:

relation(books, television).
relation(books, ability_to_put_a_coherent_sentence_together_with_correct_grammar_and_spelling).
relation(television, ability_to_put_a_coherent_sentence_together_with_correct_grammar_and_spelling).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(gambling, knowledge).
pos(gambling, expertise).
pos(stock_market, knowledge).
pos(stock_market, expertise).
pos(stock_market, understanding).
pos(stock_market, economy).
pos(stock_market, investors).

Section 2 - General relationships:

relation(gambling, horse_racing).
relation(gambling, games).
relation(stock_market, bonds).
relation(stock_market, shares).
relation(stock_market, currency).
relation(stock_market, derivatives).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(followerofchrist1955, lack_of_civility).
pos(followerofchrist1955, mental_instability).
pos(followerofchrist1955, ego_fragility).
pos(followerofchrist1955, anger).
pos(followerofchrist1955, ridiculousness).
pos(followerofchrist1955, lack_of_credibility).
pos(followerofchrist1955, disability).
pos(followerofchrist1955, entertaining).

Section 2 - General relationships:

relation(poem_battle, followerofchrist1955).
relation(followerofchrist1955, poem_battle).
relation(followerofchrist1955, god).
relation(followerofchrist1955, heaven).
relation(followerofchrist1955, jesus).
relation(followerofchrist1955, moses).
relation(followerofchrist1955, abraham).

Section 3 - Encoding:

neg(followerofchrist1955, peace).
neg(followerofchrist1955, tranquility).
neg(followerofchrist1955, sanity).
neg(followerofchrist1955, nobility).
neg(followerofchrist1955, civility).
neg(followerofchrist1955, debating_ability).
neg(followerofchrist1955, wisdom).
neg(followerofchrist1955, greatness).
neg(followerofchrist1955, straight_facts).
neg(followerofchrist1955, mental_stability).

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(jimmy_carter, aura).
pos(jimmy_carter, crisis_of_confidence_speech).
pos(jimmy_carter, malaise_speech).
pos(nikita_khrushchev, un_speech).
pos(nikita_khrushchev, bury_you_phrase).
pos(nikita_khrushchev, shoe_banging).
pos(nikita_khrushchev, premier_of_ussr).
pos(nikita_khrushchev, denouncing_colonialism).
pos(nikita_khrushchev, denouncing_american_imperialism).
pos(un, fierce_debate).
pos(un, congo_crisis).
pos(nikita_khrushchev, opinion).

Section 2 - General relationships:

relation(jimmy_carter, crisis_of_confidence_speech).
relation(jimmy_carter, malaise_speech).
relation(nikita_khrushchev, un_speech).
relation(nikita_khrushchev, bury_you_phrase).
relation(nikita_khrushchev, shoe_banging).
relation(nikita_khrushchev, premier_of_ussr).
relation(nikita_khrushchev, denouncing_colonialism).
relation(nikita_khrushchev, denouncing_american_imperialism).
relation(un, fierce_debate).
relation(un, congo_crisis).
relation(nikita_khrushchev, opinion).

Section 3 - Encoding:

jimmy_carter_is_good_because :- pos(jimmy_carter, Y).
jimmy_carter_is_bad_because :- neg(jimmy_carter, Y).
nikita_khrushchev_is_good_because :- pos(nikita_khrushchev, Y).
nikita_khrushchev_is_bad_because :- neg(nikita_khrushchev, Y).
compare(jimmy_carter,X,Y) :- neg(jimmy_carter,X),neg(Y,X), jimmy_carter != Y.
compare(nikita_khrushchev,X,Y) :- neg(nikita_khrushchev,X),neg(Y,X), nikita_khrushchev != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = jimmy_carter.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = nikita_khrushchev.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(playstation_3, better_console).
pos(xbox_360, enjoyable_community).
pos(xbox_community, most_people_on_xbox_live).
pos(xbox_community, more_people_buy_and_play).
pos(virtual_goods, cost_time).
pos(developers, use_equipment_time_and_money).
pos(microsoft, up_to_date).
pos(microsoft, responds_quickly_to_the_community).
pos(xbox, organized_dashboard).
pos(xbox, easier_to_find_many_things).
pos(xbox, kinect_adventures).
pos(xbox, top_sellers).
pos(xbox, above_call_of_duty).
pos(xbox, sixty_gb_hard_drive).
pos(xbox, more_access).
pos(xbox, better_community_support).
pos(xbox, patches_hacks_earlier).

neg(playstation_3, glitches_and_patches_open_for_a_longer_time).
neg(playstation_3, terrible_security_system).

Section 2 - General relationships:

relation(playstation_3, xbox_360).
relation(xbox_community, xbox).
relation(virtual_goods, developers).
relation(microsoft, xbox).
relation(xbox, kinect_adventures).
relation(xbox, call_of_duty).
relation(xbox, playstation_3).
relation(xbox, blue_ray_movies).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.

playstation_3_is_better_because :- pos(playstation_3,Y).
playstation_3_is_worse_because :- neg(playstation_3,Y).
xbox_360_is_better_because :- pos(xbox_360,Y).
xbox_360_is_worse_because :- neg(xbox_360,Y).
compare(playstation_3,xbox_360,Y) :- neg(playstation_3,Y),neg(xbox_360,Y), playstation_3 != xbox_360.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = playstation_3.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(soup, meal).
pos(armani_suite, good_deal).
pos(armani_suite, expensive).
pos(mendys, restaurant).
pos(hot_dog, food).
pos(soup, side_dish).
pos(kenny_bania, cheap).
neg(kenny_bania, appreciative).
pos(elaine_benes, friend).
pos(elaine_benes, honest).

Section 2 - General relationships:

relation(soup, meal).
relation(jerry_seinfeld, kenny_bania).
relation(armani_suite, kenny_bania).
relation(armani_suite, jerry_seinfeld).
relation(mendys, kenny_bania).
relation(mendys, jerry_seinfeld).
relation(hot_dog, kenny_bania).
relation(elaine_benes, kenny_bania).
relation(elaine_benes, jerry_seinfeld).

Section 3 - Encoding:

meal_is_not_soup :- neg(soup, meal).
good_deal_is_armani_suite :- pos(armani_suite, good_deal).
expensive_is_armani_suite :- pos(armani_suite, expensive).
mendys_is_restaurant :- pos(mendys, restaurant).
hot_dog_is_food :- pos(hot_dog, food).
soup_is_side_dish :- pos(soup, side_dish).
kenny_is_cheap :- pos(kenny_bania, cheap).
kenny_is_not_appreciative :- neg(kenny_bania, appreciative).
elaine_is_friend :- pos(elaine_benes, friend).
elaine_is_honest :- pos(elaine_benes, honest).
kenny_and_jerry_are_related :- relation(jerry_seinfeld, kenny_bania).
armani_and_kenny_are_related :- relation(armani_suite, kenny_bania).
armani_and_jerry_are_related :- relation(armani_suite, jerry_seinfeld).
mendys_and_kenny_are_related :- relation(mendys, kenny_bania).
mendys_and_jerry_are_related :- relation(mendys, jerry_seinfeld).
hot_dog_and_kenny_are_related :- relation(hot_dog, kenny_bania).
elaine_and_kenny_are_related :- relation(elaine_benes, kenny_bania).
elaine_and_jerry_are_related :- relation(elaine_benes, jerry_seinfeld).
compare(soup,X,Y) :- neg(soup,X),neg(Y,X), soup != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = soup.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(opponent, existed_for_all_time).
pos(opponent, matter).
pos(opponent, resolution).
pos(opponent, born).
pos(opponent, conscious_human).
pos(self, ego).

% Section 2 - General relationships
relation(opponent, resolution).
relation(opponent, born).
relation(opponent, conscious_human).
relation(self, ego).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(smoking, united_states_top_10_healthiest_countries).
neg(smoking, non_smokers_right_to_clean_air).
neg(smoking, government_ban_on_smoking).
neg(smoking, minors_allowed_to_smoke).

pos(smoking, legal).
pos(meat_smoking, legal).

Section 2 - General relationships:

relation(smoking, united_states_top_10_healthiest_countries).
relation(smoking, non_smokers_right_to_clean_air).
relation(smoking, government_ban_on_smoking).
relation(smoking, minors_allowed_to_smoke).
relation(smoking, meat_smoking).

Section 3 - Encoding:

smoking_is_bad_because :- neg(smoking,X).
smoking_is_good_because :- pos(smoking,X).
meat_smoking_is_bad_because :- neg(meat_smoking,X).
meat_smoking_is_good_because :- pos(meat_smoking,X).
compare(smoking,X,Y) :- neg(smoking,X),neg(Y,X), smoking != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = smoking.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(liar, truth).
pos(liar, expression_of_disapproval).
pos(liar, hostility).

% Section 2 - General relationships
relation(liar, question).
relation(liar, instruction).
relation(liar, debate).
relation(liar, participant).
relation(liar, character).
relation(liar, assertion).
relation(liar, logic).
relation(liar, evidence).
relation(liar, reading).
relation(liar, knowledge).
relation(liar, truth).
relation(liar, disapproval).
relation(liar, hostility).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(call_of_duty, sold_more_copies).
pos(call_of_duty, more_votes).
pos(call_of_duty, better_ratings).
pos(call_of_duty, comes_out_every_year).
pos(call_of_duty, made_for_both_competitive_and_casual_gamers).
pos(call_of_duty, has_a_lot_more_game_options_to_choose_from).
pos(call_of_duty, has_a_better_story_line).
pos(call_of_duty, has_a_more_complex_story_line).
pos(call_of_duty, has_better_rating).
pos(call_of_duty, compatible_for_all_types_of_players).
pos(call_of_duty, has_sold_a_lot_better_than_halo).
pos(call_of_duty, has_multiple_story_lines).
pos(call_of_duty, has_zombies_story_mode).
pos(call_of_duty, has_a_very_complex_story_line).
pos(call_of_duty, has_a_very_emotionally_engaging_campaign).
pos(call_of_duty, has_a_very_triumph_moment_when_captain_price_kills_makrov).
pos(call_of_duty, has_a_very_complex_storyline_and_you_have_to_play_them_from_the_very_beginning_to_fully_understand).
pos(call_of_duty, has_melee_weapons_grenades_and_equipment_as_a_main_aspect).
pos(call_of_duty, has_a_far_more_complex_story_line_than_halo).
pos(halo, balanced_for_competitive_play).
pos(halo, battles_are_about_outsmarting_and_outperforming_your_opponents).

neg(halo, sold_less_copies).
neg(halo, got_less_votes).
neg(halo, has_worse_ratings).
neg(halo, does_not_come_out_every_year).
neg(halo, forces_players_to_play_a_halo_game_for_2_years).
neg(halo, is_not_enjoyable_for_non_competitive_players).
neg(halo, fails_to_realize_that_approximately_2_percent_of_gamers_are_competitive).
neg(halo, leaves_the_other_98_percent_of_gamers_left_without_a_entertaining_game).
neg(halo, is_not_made_for_both_competitive_and_casual_gamers).
neg(halo, does_not_have_a_lot_more_game_options_to_choose_from).
neg(halo, does_not_have_a_better_story_line).
neg(halo, does_not_have_a_more_complex_story_line).
neg(halo, does_not_have_better_rating).
neg(halo, is_not_compatible_for_all_types_of_players).
neg(halo, has_not_sold_a_lot_better_than_call_of_duty).
neg(halo, does_not_have_multiple_story_lines).
neg(halo, does_not_have_zombies_story_mode).
neg(halo, does_not_have_a_very_complex_story_line).
neg(halo, does_not_have_a_very_emotionally_engaging_campaign).
neg(halo, does_not_have_a_very_triumph_moment_when_captain_price_kills_makrov).
neg(halo, does_not_have_a_very_complex_storyline_and_you_have_to_play_them_from_the_very_beginning_to_fully_understand).
neg(halo, does_not_have_melee_weapons_grenades_and_equipment_as_a_main_aspect).
neg(halo, does_not_have_a_far_more_complex_story_line_than_call_of_duty).
neg(call_of_duty, campaigns_dont_have_in_depth_campaigns).
neg(call_of_duty, battles_are_not_about_outsmarting_and_outperforming_your_opponents).
neg(call_of_duty, only_85_percent_of_people_who_shoot_first_win_the_gun_battle).

Section 2 - General relationships:

relation(call_of_duty, halo).
relation(call_of_duty, sold_more_copies).
relation(call_of_duty, got_more_votes).
relation(call_of_duty, has_better_ratings).
relation(call_of_duty, comes_out_every_year).
relation(call_of_duty, forces_players_to_play_a_halo_game_for_2_years).
relation(call_of_duty, is_not_enjoyable_for_non_competitive_players).
relation(call_of_duty, fails_to_realize_that_approximately_2_percent_of_gamers_are_competitive).
relation(call_of_duty, leaves_the_other_98_percent_of_gamers_left_without_a_entertaining_game).
relation(call_of_duty, is_not_made_for_both_competitive_and_casual_gamers).
relation(call_of_duty, does_not_have_a_lot_more_game_options_to_choose_from).
relation(call_of_duty, does_not_have_a_better_story_line).
relation(call_of_duty, does_not_have_a_more_complex_story_line).
relation(call_of_duty, does_not_have_better_rating).
relation(call_of_duty, is_not_compatible_for_all_types_of_players).
relation(call_of_duty, has_not_sold_a_lot_better_than_halo).
relation(call_of_duty, does_not_have_multiple_story_lines).
relation(call_of_duty, does_not_have_zombies_story_mode).
relation(call_of_duty, does_not_have_a_very_complex_story_line).
relation(call_of_duty, does_not_have_a_very_emotionally_engaging_campaign).
relation(call_of_duty, does_not_have_a_very_triumph_moment_when_captain_price_kills_makrov).
relation(call_of_duty, does_not_have_a_very_complex_storyline_and_you_have_to_play_them_from_the_very_beginning_to_fully_understand).
relation(call_of_duty, does_not_have_melee_weapons_grenades_and_equipment_as_a_main_aspect).
relation(call_of_duty, does_not_have_a_far_more_complex_story_line_than_halo).
relation(halo, campaigns_dont_have_in_depth_campaigns).
relation(halo, battles_are_not_about_outsmarting_and_outperforming_your_opponents).
relation(halo, only_85_percent_of_people_who_shoot_first_win_the_gun_battle).

Section 3 - Encoding:

call_of_duty_is_better_because :- pos(call_of_duty,Y).
call_of_duty_is_worse_because :- neg(call_of_duty,Y).
halo_is_better_because :- pos(halo,Y).
halo_is_worse_because :- neg(halo,Y).
compare(call_of_duty,X,Y) :- neg(call_of_duty,X),neg(Y,X), call_of_duty != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = call_of_duty.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(opponent, read).
pos(opponent, propose).
pos(opponent, choose).
neg(opponent, choice).
pos(opponent, request).
neg(opponent, fulfill).
pos(opponent, post).
pos(opponent, check).
pos(opponent, comment).
pos(opponent, continue).

% Section 2 - General relationships
relation(opponent, topic).
relation(opponent, position).
relation(opponent, choice).
relation(opponent, request).
relation(opponent, comment).
relation(opponent, debate).

% Section 3 - Encoding
elon_is_good_because :- pos(opponent, Y).
elon_is_bad_because :- neg(opponent, Y).
compare(opponent,X,Y) :- neg(opponent,X),neg(Y,X), opponent != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = opponent.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(jesus_christ, doomsday_prediction).
pos(jesus_christ, first_century_doomsday).
pos(jesus_christ, new_testament).
pos(jesus_christ, christian_gospels).
pos(jesus_christ, matthew).
pos(jesus_christ, mark).
pos(jesus_christ, luke).
pos(jesus_christ, john).
pos(doomsday, death).
pos(doomsday, destruction).
pos(doomsday, wars).
pos(doomsday, political_upheavals).
pos(doomsday, natural_disasters).
pos(generation, people).
pos(generation, age).
pos(generation, time).
pos(generation, births).
pos(generation, deaths).
pos(doomsday_cult, leader).
pos(doomsday_cult, will).
pos(doomsday_cult, global_calamity).
pos(doomsday_cult_leader, doomsday_cult).
pos(doomsday_cult_leader, apocalyptic_prophet).

Section 2 - General relationships:

relation(jesus_christ, doomsday).
relation(jesus_christ, new_testament).
relation(jesus_christ, christian_gospels).
relation(jesus_christ, matthew).
relation(jesus_christ, mark).
relation(jesus_christ, luke).
relation(jesus_christ, john).
relation(doomsday, death).
relation(doomsday, destruction).
relation(doomsday, wars).
relation(doomsday, political_upheavals).
relation(doomsday, natural_disasters).
relation(generation, people).
relation(generation, age).
relation(generation, time).
relation(generation, births).
relation(generation, deaths).
relation(doomsday_cult, leader).
relation(doomsday_cult, will).
relation(doomsday_cult, global_calamity).
relation(doomsday_cult_leader, doomsday_cult).
relation(doomsday_cult_leader, apocalyptic_prophet).

Section 3 - Encoding:

jesus_christ_predicted_doomsday :- pos(jesus_christ, doomsday_prediction).
jesus_christ_predicted_first_century_doomsday :- pos(jesus_christ, first_century_doomsday).
compare(jesus_christ,X,Y) :- neg(jesus_christ,X),neg(Y,X), jesus_christ != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = jesus_christ.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(lannan, good_luck).
pos(taylor_swift, good_luck).
pos(taylor_swift, popular).
pos(comic_sans, funny).
pos(comic_sans, comedy).
neg(comic_sans, serious).
neg(comic_sans, humor).
neg(lannan, bad_luck).
neg(lannan, losing).
neg(lannan, errors).
neg(lannan, green_text).
neg(lannan, big_text).
neg(lannan, yodeling).
neg(lannan, voice).
neg(lannan, winning).
neg(lannan, fence).
neg(9spaceking, winning).
neg(9spaceking, conduct).
neg(9spaceking, luck).
neg(9spaceking, trend).
neg(9spaceking, arguments).

% Section 2 - General relationships
relation(lannan, taylor_swift).
relation(lannan, yodeling).
relation(lannan, errors).
relation(lannan, green_text).
relation(lannan, big_text).
relation(lannan, winning).
relation(lannan, fence).
relation(9spaceking, losing).
relation(9spaceking, luck).
relation(9spaceking, trend).
relation(9spaceking, arguments).

% Section 3 - Encoding
lannan_is_good_because :- pos(lannan, Y).
lannan_is_bad_because :- neg(lannan, Y).
compare(lannan,X,Y) :- neg(lannan,X),neg(Y,X), lannan != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = lannan.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(e_books, cheaper_than_books).
pos(e_books, cheaper_to_produce).
pos(e_readers, waterproof).
pos(e_readers, survive_fall_five_story_building).
pos(books, cheaper_than_e_readers).
pos(books, discounted_prices_amazon).
pos(books, option_purchase_used_books_amazon).
pos(books, great_condition).
neg(books, prone_to_weathering).
neg(books, prone_to_damage).
neg(books, prone_to_tears).
neg(books, prone_to_terrain_issues).
neg(e_readers, easily_damaged).

Section 2 - General relationships:

relation(e_books, books).
relation(e_readers, books).
relation(e_readers, phones).
relation(sony_xperia, e_readers).
relation(amazon, books).

Section 3 - Encoding:

e_books_are_better_than_books :- pos(e_books, X), neg(books, X).
e_books_are_worse_than_books :- neg(e_books, X), pos(books, X).
compare(e_books, books, X) :- neg(e_books, X), neg(books, X), e_books != books.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = e_books.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(children, access_food).
neg(children, understand_repurcussions).
neg(children, obey_parents).
neg(parents, control_children_food).
pos(children, take_food_at_night).

Section 2 - General relationships:

relation(children, parents).
relation(children, school).
relation(children, food).
relation(parents, children).
relation(parents, school).
relation(parents, food).

Section 3 - Encoding:

access_food_because :- pos(children, access_food).
understand_repurcussions_because :- neg(children, understand_repurcussions).
obey_parents_because :- neg(children, obey_parents).
control_children_food_because :- neg(parents, control_children_food).
take_food_at_night_because :- pos(children, take_food_at_night).
compare(children,X,Y) :- neg(children,X),neg(Y,X), children != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = children.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(muammar_gaddafi, fair_trial).
pos(rebel_forces, execution).
pos(muammar_gaddafi, execution).

% Section 2 - General relationships
relation(muammar_gaddafi, execution).
relation(rebel_forces, execution).
relation(muammar_gaddafi, fair_trial).

% Section 3 - Encoding
execution_is_justified :- pos(rebel_forces, execution), neg(muammar_gaddafi, fair_trial).
execution_is_not_justified :- neg(rebel_forces, execution), pos(muammar_gaddafi, fair_trial).
compare(muammar_gaddafi, execution, fair_trial) :- neg(muammar_gaddafi, fair_trial), neg(execution, fair_trial), muammar_gaddafi != execution.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(utilitarianism, united_states_constitution).
pos(social_contract, united_states_constitution).
pos(locke, united_states_constitution).
pos(constitution, equality).
pos(unabomber, immorality).
pos(justice_system, justice).
pos(confiscation, justice).
pos(unabomber, freedom_of_speech).

neg(kant, united_states_constitution).
neg(kant, equality).
neg(unabomber, morality).
neg(unabomber, freedom_of_speech).

Section 2 - General relationships:

relation(utilitarianism, social_contract).
relation(locke, kant).
relation(utilitarianism, deontology).
relation(constitution, first_amendment).
relation(unabomber, writings).
relation(unabomber, justice_system).
relation(unabomber, first_amendment).

Section 3 - Encoding:

utilitarianism_is_good_because :- pos(utilitarianism, Y).
utilitarianism_is_bad_because :- neg(utilitarianism, Y).
social_contract_is_good_because :- pos(social_contract, Y).
social_contract_is_bad_because :- neg(social_contract, Y).
locke_is_good_because :- pos(locke, Y).
locke_is_bad_because :- neg(locke, Y).
kant_is_good_because :- pos(kant, Y).
kant_is_bad_because :- neg(kant, Y).
unabomber_is_good_because :- pos(unabomber, Y).
unabomber_is_bad_because :- neg(unabomber, Y).
justice_system_is_good_because :- pos(justice_system, Y).
justice_system_is_bad_because :- neg(justice_system, Y).
confiscation_is_good_because :- pos(confiscation, Y).
confiscation_is_bad_because :- neg(confiscation, Y).
compare(utilitarianism,X,Y) :- neg(utilitarianism,X),neg(Y,X), utilitarianism != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = utilitarianism.
compare(social_contract,X,Y) :- neg(social_contract,X),neg(Y,X), social_contract != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = social_contract.
compare(locke,X,Y) :- neg(locke,X),neg(Y,X), locke != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = locke.
compare(kant,X,Y) :- neg(kant,X),neg(Y,X), kant != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = kant.
compare(unabomber,X,Y) :- neg(unabomber,X),neg(Y,X), unabomber != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = unabomber.
compare(justice_system,X,Y) :- neg(justice_system,X),neg(Y,X), justice_system != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = justice_system.
compare(confiscation,X,Y) :- neg(confiscation,X),neg(Y,X), confiscation != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = confiscation.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(belief_in_god_of_bible, rational).
pos(responsibility, person_saying_something_exists).

Section 2 - General relationships:

relation(belief_in_god_of_bible, irrational).
relation(atheists, god).
relation(god, existence).
relation(yom, days).
relation(jesus, god).
relation(yom_kippur, day).
relation(atonement, yom_kippur).

Section 3 - Encoding:

neg(belief_in_god_of_bible, rational) :- neg(belief_in_god_of_bible, X), neg(rational, X).
neg(belief_in_god_of_bible, rational) :- neg(X, rational), neg(belief_in_god_of_bible, X).
pos(responsibility, person_saying_something_exists) :- pos(responsibility, X), pos(person_saying_something_exists, X).
pos(responsibility, person_saying_something_exists) :- pos(X, person_saying_something_exists), pos(responsibility, X).
compare(belief_in_god_of_bible, X, Y) :- neg(belief_in_god_of_bible, X), neg(Y, X), belief_in_god_of_bible != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = belief_in_god_of_bible.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(unemployment, money).
neg(unemployment, stimulate).
neg(yahoo, good).
neg(business_incentives, jobs).
neg(inflation, good).
neg(economic_stimulus_act_of_2008, gas_prices).
neg(coke, good).
neg(oil_prices, good).
neg(trucks, good).

pos(unemployment, problem).
pos(money, economy).
pos(yahoo, article).
pos(jobs, economy).
pos(business_incentives, new_machinery).
pos(inflation, money).
pos(economic_stimulus_act_of_2008, economy).
pos(coke, price).
pos(oil_prices, trucks).
pos(trucks, coke).

% Section 2 - General relationships
relation(unemployment, money).
relation(unemployment, economy).
relation(yahoo, article).
relation(jobs, economy).
relation(business_incentives, new_machinery).
relation(inflation, money).
relation(economic_stimulus_act_of_2008, economy).
relation(coke, price).
relation(oil_prices, trucks).
relation(trucks, coke).

% Section 3 - Encoding
unemployment_is_bad_because :- neg(unemployment, Y).
unemployment_is_good_because :- pos(unemployment, Y).
inflation_is_bad_because :- neg(inflation, Y).
inflation_is_good_because :- pos(inflation, Y).
compare(unemployment,X,Y) :- neg(unemployment,X),neg(Y,X), unemployment != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = unemployment.
compare(inflation,X,Y) :- neg(inflation,X),neg(Y,X), inflation != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = inflation.
```
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(god, non_existence).
pos(god, existence).
pos(god, incorporeal_mind).
pos(god, creator).
pos(god, source_of_morality).

% Section 2 - General relationships
relation(god, universe).
relation(god, morality).

% Section 3 - Encoding
god_exists :- pos(god, Y).
god_does_not_exist :- neg(god, Y).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
```
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(abortion, murder).
neg(fetus, child).
neg(fetus, human).
pos(abortion, choice).
pos(abortion, woman).
pos(abortion, body).
pos(fetus, parasite).
pos(fetus, cells).
pos(fetus, tissue).
pos(fetus, nutrients).
pos(fetus, vitals).
pos(fetus, host).
pos(fetus, pregnancy).
pos(fetus, toll).
pos(fetus, changes).
pos(fetus, work).
pos(fetus, money).
pos(fetus, adoption).
pos(fetus, months).

% Section 2 - General relationships
relation(abortion, woman).
relation(abortion, government).
relation(abortion, people).
relation(abortion, fetus).
relation(abortion, murder).
relation(abortion, child).
relation(abortion, parasite).
relation(abortion, pregnancy).
relation(abortion, body).
relation(abortion, choice).
relation(abortion, nutrients).
relation(abortion, vitals).
relation(abortion, host).
relation(abortion, cells).
relation(abortion, tissue).
relation(abortion, human).
relation(abortion, work).
relation(abortion, money).
relation(abortion, adoption).
relation(abortion, months).
relation(abortion, changes).
relation(abortion, toll).

% Section 3 - Encoding
abortion_is_wrong :- neg(abortion, X).
abortion_is_right :- pos(abortion, X).
compare(abortion, X, Y) :- neg(abortion, X), neg(Y, X), abortion != Y.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(marriage, show_love).
pos(marriage, commitment).
pos(marriage, legal_side).
pos(marriage, trusted_with_life).
pos(marriage, responsible_for_medical_decisions).
pos(marriage, inherit_everything).
pos(marriage, ultimate_show_of_trust).
neg(civil_partnerships, same_responsibilities).

Section 2 - General relationships:

relation(marriage, husband).
relation(marriage, wife).
relation(marriage, significant_other).
relation(marriage, death).
relation(marriage, gay).
relation(marriage, straight).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(free_will, illusion).
neg(human, control_impulses).
neg(human, control_tendencies).
neg(human, author_conscious_desires).

Section 2 - General relationships:

relation(free_will, illusion).
relation(human, control_impulses).
relation(human, control_tendencies).
relation(human, author_conscious_desires).

Section 3 - Encoding:

free_will_is_illusion_because :- pos(free_will, Y).
free_will_is_not_illusion_because :- neg(free_will, Y).
compare(free_will,X,Y) :- neg(free_will,X),neg(Y,X), free_will != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = free_will.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(c, rhyme).
pos(c, college_courses).
neg(c, fortune).
neg(c, fame).
pos(c, cabaret).
neg(c, joke).
neg(c, womb).
neg(c, shotgun).
neg(c, cherries).

Section 2 - General relationships:

relation(c, rhyme).
relation(c, college_courses).
relation(c, fortune).
relation(c, fame).
relation(c, cabaret).
relation(c, joke).
relation(c, womb).
relation(c, shotgun).
relation(c, cherries).

Section 3 - Encoding:

c_is_good_because :- pos(c,Y).
c_is_bad_because :- neg(c,Y).
compare(c,X,Y) :- neg(c,X),neg(Y,X), c != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = c.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(invitro_fertilization, homosexual_couples).
pos(invitro_fertilization, unmarried_individuals).
pos(invitro_fertilization, infertile_couples).
pos(invitro_fertilization, male_factor).

Section 2 - General relationships:

relation(invitro_fertilization, homosexual_couples).
relation(invitro_fertilization, unmarried_individuals).
relation(invitro_fertilization, infertile_couples).
relation(invitro_fertilization, male_factor).

Section 3 - Encoding:

invitro_fertilization_is_good_because :- pos(invitro_fertilization, Y).
invitro_fertilization_is_bad_because :- neg(invitro_fertilization, Y).
compare(invitro_fertilization,X,Y) :- neg(invitro_fertilization,X),neg(Y,X), invitro_fertilization != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = invitro_fertilization.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(homosexuality, natural_act).
pos(slavery, modern_issue).
pos(race_issues, modern_issue).
pos(gender_issues, modern_issue).
pos(women_rights, modern_issue).
neg(women_rights, caveman).
neg(women_rights, sex).
neg(women_rights, slavery).
pos(homosexuality, sexual_perversion).
pos(homosexuality, small_segment).
pos(homosexuality, society).
neg(homosexuality, natural).
pos(nature, natural_universe).
neg(man, natural_universe).
pos(man, sexual_perversion).
pos(man, animal_world).
pos(man, arrogance).
pos(man, pollution).
pos(man, pillaging).
pos(man, violation).

Section 2 - General relationships:

relation(homosexuality, natural_act).
relation(slavery, modern_issue).
relation(race_issues, modern_issue).
relation(gender_issues, modern_issue).
relation(women_rights, modern_issue).
relation(women_rights, caveman).
relation(women_rights, sex).
relation(women_rights, slavery).
relation(homosexuality, sexual_perversion).
relation(homosexuality, small_segment).
relation(homosexuality, society).
relation(homosexuality, natural).
relation(nature, natural_universe).
relation(man, natural_universe).
relation(man, sexual_perversion).
relation(man, animal_world).
relation(man, arrogance).
relation(man, pollution).
relation(man, pillaging).
relation(man, violation).

Section 3 - Encoding:

homosexuality_is_unnatural_because :- neg(homosexuality, natural_act).
homosexuality_is_natural_because :- pos(homosexuality, natural_act).
modern_issues_are_not_new :- pos(slavery, modern_issue).
modern_issues_are_not_new :- pos(race_issues, modern_issue).
modern_issues_are_not_new :- pos(gender_issues, modern_issue).
women_rights_are_a_modern_issue :- pos(women_rights, modern_issue).
women_rights_are_not_a_modern_issue :- neg(women_rights, modern_issue).
homosexuality_is_a_sexual_perversion :- pos(homosexuality, sexual_perversion).
homosexuality_is_not_a_sexual_perversion :- neg(homosexuality, sexual_perversion).
man_is_not_above_nature :- neg(man, natural_universe).
man_is_above_nature :- pos(man, natural_universe).
man_pollutes_the_environment :- pos(man, pollution).
man_does_not_pollute_the_environment :- neg(man, pollution).
man_pillages_the_environment :- pos(man, pillaging).
man_does_not_pillage_the_environment :- neg(man, pillaging).
man_justifies_his_violations :- pos(man, violation).
man_does_not_justify_his_violations :- neg(man, violation).
compare(homosexuality,X,Y) :- neg(homosexuality,X),neg(Y,X), homosexuality != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = homosexuality.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(donors, influence).
pos(judges, decisions).
neg(donors, common_philosophy).
pos(judges, campaign_donors).
pos(judges, positions).
pos(judges, donors).
pos(donors, money).
pos(judges, judicial_philosophies).
pos(judges, statistics).
pos(judges, causality).
pos(judges, positions).
pos(donors, judicial_philosophy).

Section 2 - General relationships:

relation(donors, judges).
relation(judges, decisions).
relation(donors, judicial_philosophies).
relation(judges, campaign_donors).
relation(judges, positions).
relation(judges, donors).
relation(donors, money).
relation(judges, judicial_philosophies).
relation(judges, statistics).
relation(judges, causality).
relation(judges, positions).
relation(donors, judicial_philosophy).

Section 3 - Encoding:

donors_influence_judges :- pos(donors, influence).
donors_dont_influence_judges :- neg(donors, influence).
judges_decisions_based_on_donors :- pos(judges, decisions), pos(donors, influence).
judges_decisions_not_based_on_donors :- neg(judges, decisions), neg(donors, influence).
judges_shift_positions_in_favor_of_donors :- pos(judges, positions), pos(judges, campaign_donors).
judges_dont_shift_positions_in_favor_of_donors :- neg(judges, positions), neg(judges, campaign_donors).
judges_actively_bend_positions_in_favor_of_donors :- pos(judges, causality), pos(judges, positions), pos(judges, campaign_donors).
judges_dont_actively_bend_positions_in_favor_of_donors :- neg(judges, causality), neg(judges, positions), neg(judges, campaign_donors).
donors_give_money_to_judges_of_similar_judicial_philosophy :- pos(donors, money), pos(judges, judicial_philosophies).
donors_dont_give_money_to_judges_of_similar_judicial_philosophy :- neg(donors, money), neg(judges, judicial_philosophies).
statistics_show_causality_of_judges_bending_positions_in_favor_of_donors :- pos(judges, statistics), pos(judges, causality), pos(judges, positions), pos(judges, campaign_donors).
statistics_dont_show_causality_of_judges_bending_positions_in_favor_of_donors :- neg(judges, statistics), neg(judges, causality), neg(judges, positions), neg(judges, campaign_donors).
compare(donors,X,Y) :- neg(donors,X),neg(Y,X), donors != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = donors.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(cinderella, childhood_deserved).
pos(cinderella, difficult_situations).
neg(ariel, listen_parents).
neg(ariel, know_stranger).
pos(cinderella, true_wishes).

Section 2 - General relationships:

relation(cinderella, childhood).
relation(ariel, parents).
relation(ariel, wishes).
relation(cinderella, true_love).
relation(cinderella, step_mother).
relation(cinderella, stepsisters).

Section 3 - Encoding:

cinderella_is_good_because :- pos(cinderella, Y).
cinderella_is_bad_because :- neg(cinderella, Y).
ariel_is_good_because :- pos(ariel, Y).
ariel_is_bad_because :- neg(ariel, Y).
compare(cinderella,X,Y) :- neg(cinderella,X),neg(Y,X), cinderella != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = cinderella.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(voter_id_laws, cost_effective).
neg(voter_id_laws, non_discriminatory).
neg(voter_id_laws, effective_at_stopping_voter_fraud).
pos(voter_id_laws, can_deter_voter_fraud).

Section 2 - General relationships:

relation(voter_id_laws, cost).
relation(voter_id_laws, discrimination).
relation(voter_id_laws, voter_fraud).
relation(voter_fraud, united_states).
relation(voter_fraud, rare).
relation(voter_id_laws, support_of_american_people).
relation(voter_id_laws, help_america_vote_act).
relation(help_america_vote_act, two_thousand).
relation(help_america_vote_act, election).
relation(help_america_vote_act, provisions).
relation(help_america_vote_act, deterring_voter_fraud).
relation(voter_id_laws, states).
relation(states, budget_deficit).
relation(voter_id_laws, hispanic_voters).
relation(hispanic_voters, texas).
relation(hispanic_voters, registered).
relation(white_voters, texas).
relation(white_voters, registered).
relation(voter_id_laws, illegal_immigration).
relation(voter_id_laws, investigating).
relation(voter_id_laws, prosecuting).
relation(voter_id_laws, election_crimes).
relation(voter_id_laws, right).
relation(voter_id_laws, wrong).

Section 3 - Encoding:

cost_effective(X) :- pos(X,Y), relation(Y,cost).
non_discriminatory(X) :- pos(X,Y), relation(Y,discrimination).
effective_at_stopping_voter_fraud(X) :- pos(X,Y), relation(Y,voter_fraud).
can_deter_voter_fraud(X) :- neg(X,Y), relation(Y,voter_fraud).
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = X.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(ivf, infertile_parents).
pos(ivf, couples).
pos(ivf, parents).
pos(ivf, baby).
pos(ivf, determination).
pos(ivf, chance).
neg(ivf, birth_defects).
neg(ivf, illness).
neg(ivf, risk).
neg(ivf, cost).
neg(ivf, first_attempt).

Section 2 - General relationships:

relation(ivf, infertile_parents).
relation(ivf, couples).
relation(ivf, parents).
relation(ivf, baby).
relation(ivf, determination).
relation(ivf, chance).
relation(ivf, birth_defects).
relation(ivf, illness).
relation(ivf, risk).
relation(ivf, cost).
relation(ivf, first_attempt).

Section 3 - Encoding:

ivf_is_good_because :- pos(ivf, Y).
ivf_is_bad_because :- neg(ivf, Y).
compare(ivf,X,Y) :- neg(ivf,X),neg(Y,X), ivf != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = ivf.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(twitter, fast_news).
pos(twitter, messaging_friends).
pos(twitter, connecting_old_friends).
pos(twitter, playing_games).
neg(facebook, fast_news).
neg(facebook, playing_games).

Section 2 - General relationships:

relation(twitter, facebook).
relation(twitter, internet).
relation(twitter, pope).

Section 3 - Encoding:

twitter_is_good_because :- pos(twitter,Y).
twitter_is_bad_because :- neg(twitter,Y).
facebook_is_good_because :- pos(facebook,Y).
facebook_is_bad_because :- neg(facebook,Y).
compare(twitter,X,Y) :- neg(twitter,X),neg(Y,X), twitter != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = twitter.
compare(facebook,X,Y) :- neg(facebook,X),neg(Y,X), facebook != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = facebook.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(islam, peaceful_religion).
pos(christianity, peace).
neg(christianity, rape).
neg(christianity, murder).
neg(christianity, warlike_crimes).
pos(islam, tolerance).
neg(islam, compulsion).
neg(islam, rape).
neg(islam, force).

Section 2 - General relationships:

relation(islam, peaceful_religion).
relation(islam, tolerance).
relation(islam, compulsion).
relation(islam, rape).
relation(islam, force).
relation(christianity, peace).
relation(christianity, rape).
relation(christianity, murder).
relation(christianity, warlike_crimes).

Section 3 - Encoding:

islam_is_not_peaceful_because :- neg(islam, peaceful_religion).
islam_is_peaceful_because :- pos(islam, peaceful_religion).
christianity_is_peaceful_because :- pos(christianity, peace).
christianity_is_not_peaceful_because :- neg(christianity, peace).
compare(islam, christianity, X) :- neg(islam, X), neg(christianity, X), islam != christianity.
compare(X, islam, christianity) :- neg(X, islam), neg(X, christianity), islam != X, islam = christianity.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(disney_resorts, better).
pos(universal_studios_resort, reality_shows).
pos(universal_studios_resort, donald_trump).
pos(universal_studios_resort, the_apprentice).
pos(universal_studios_resort, more_people).
pos(universal_studios_resort, better_stores).
pos(universal_studios_resort, more_things_to_do).
pos(universal_studios_resort, better_3d_imax_movie_theme).
pos(universal_studios_resort, live_actors).
pos(terminator_3d, best_3d_imax_movie).
pos(universal_studios_resort, personal_tours).
pos(universal_studios_resort, studio_area).
pos(universal_studios_resort, hotels).
pos(universal_studios_resort, parking).
pos(universal_studios_resort, drop_off_and_pick_up).

neg(disney_resorts, better).
neg(disney_resorts, reality_shows).
neg(disney_resorts, donald_trump).
neg(disney_resorts, the_apprentice).
neg(disney_resorts, more_people).
neg(disney_resorts, better_stores).
neg(disney_resorts, more_things_to_do).
neg(disney_resorts, better_3d_imax_movie_theme).
neg(disney_resorts, live_actors).
neg(disney_resorts, personal_tours).
neg(disney_resorts, studio_area).
neg(disney_resorts, hotels).
neg(disney_resorts, parking).
neg(disney_resorts, drop_off_and_pick_up).

Section 2 - General relationships:

relation(disney_resorts, universal_studios_resort).
relation(kohaku, good).
relation(universal_studios_resort, donald_trump).
relation(universal_studios_resort, the_apprentice).
relation(universal_studios_resort, terminator_3d).
relation(universal_studios_resort, disney_hollywood).
relation(universal_studios_resort, hilton).
relation(universal_studios_resort, los_angeles).
relation(universal_studios_resort, city_walk).

Section 3 - Encoding:

disney_resorts_is_better_because :- pos(disney_resorts,Y).
disney_resorts_is_worse_because :- neg(disney_resorts,Y).
universal_studios_resort_is_better_because :- pos(universal_studios_resort,Y).
universal_studios_resort_is_worse_because :- neg(universal_studios_resort,Y).
compare(disney_resorts,X,Y) :- neg(disney_resorts,X),neg(Y,X), disney_resorts != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = disney_resorts.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(eat, dogs).
pos(dogs, protect, humans).

Section 2 - General relationships:

relation(dogs, humans).
relation(eat, dogs).
relation(kill, dogs).
relation(feel, humans).
relation(eat, humans).
relation(kill, humans).
relation(feel, humans).
relation(protect, humans).
relation(eat, dogs).
relation(kill, dogs).
relation(feel, humans).
relation(eat, humans).
relation(kill, humans).
relation(feel, humans).
relation(protect, humans).

Section 3 - Encoding:

eat_is_bad_because :- neg(eat, X).
eat_is_good_because :- pos(eat, X).
compare(eat, X, Y) :- neg(eat, X), neg(Y, X), eat != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = eat.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(uk_schools, intelligence_gap).
pos(uk_schools, education).
pos(education, all_abilities).
pos(education, best_possible).
pos(education, individual_pupil).
pos(father, shipyard_worker).
pos(father, hard_worker).
pos(father, proud).
pos(son, proud).
pos(education_system, students_strengths).
pos(education_system, academic).
pos(education_system, practical).

Section 2 - General relationships:

relation(uk_schools, intelligence_gap).
relation(education, all_abilities).
relation(education, best_possible).
relation(education, individual_pupil).
relation(father, shipyard_worker).
relation(father, hard_worker).
relation(father, proud).
relation(son, proud).
relation(education_system, students_strengths).
relation(education_system, academic).
relation(education_system, practical).

Section 3 - Encoding:

intelligence_gap_is_bad :- neg(uk_schools, intelligence_gap).
education_is_good :- pos(education, all_abilities).
education_is_good :- pos(education, best_possible).
education_is_good :- pos(education, individual_pupil).
father_is_good :- pos(father, shipyard_worker).
father_is_good :- pos(father, hard_worker).
father_is_good :- pos(father, proud).
son_is_good :- pos(son, proud).
education_system_is_good :- pos(education_system, students_strengths).
education_system_is_good :- pos(education_system, academic).
education_system_is_good :- pos(education_system, practical).
compare(uk_schools,X,Y) :- neg(uk_schools,X),neg(Y,X), uk_schools != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = uk_schools.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(automotive_companies_in_michigan, low_skill_laborers).
pos(automation, american_cars).
neg(american_automotive_business, thriving).
pos(american_cars, cheaper_than_foreign_cars).
pos(economy, thriving).
pos(economy_thriving, unemployment_goes_down).

Section 2 - General relationships:

relation(automotive_companies_in_michigan, low_skill_laborers).
relation(american_cars, cheaper_than_foreign_cars).
relation(economy, unemployment).
relation(economy_thriving, unemployment_goes_down).

Section 3 - Encoding:

automotive_companies_in_michigan_is_good_because :- pos(automotive_companies_in_michigan, Y).
automotive_companies_in_michigan_is_bad_because :- neg(automotive_companies_in_michigan, Y).
compare(automotive_companies_in_michigan,X,Y) :- neg(automotive_companies_in_michigan,X),neg(Y,X), automotive_companies_in_michigan != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = automotive_companies_in_michigan.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(illegal_immigrants, major_problems_in_america).
pos(legals, problems_for_illegals).
pos(immigrants, problems_with_gangs_or_drugs).
pos(arizona, law_passed_that_put_up_very_harsh_punishments_for_hiring_illegal_immigrants).
neg(arizona_law, support_for_illegal_immigrants).
neg(current_legislation, inherent_rights_of_immigrants).

Section 2 - General relationships:

relation(illegal_immigrants, major_problems_in_america).
relation(legals, problems_for_illegals).
relation(immigrants, problems_with_gangs_or_drugs).
relation(arizona_law, support_for_illegal_immigrants).
relation(current_legislation, inherent_rights_of_immigrants).

Section 3 - Encoding:

elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(killing_animals, illegal).
pos(uncontrollable_animals, stronger).
pos(trained_whale, deceived).
pos(trained_whale, acted_out).
neg(trained_whale, fellow_fans).
neg(trained_whale, trainer).
neg(trained_whale, consequence).
neg(trained_whale, death).

Section 2 - General relationships:

relation(killing_animals, illegal).
relation(uncontrollable_animals, stronger).
relation(trained_whale, owner).
relation(trained_whale, death).

Section 3 - Encoding:

killing_animals_is_bad_because :- neg(killing_animals, X).
killing_animals_is_good_because :- pos(killing_animals, X).
uncontrollable_animals_is_bad_because :- neg(uncontrollable_animals, X).
uncontrollable_animals_is_good_because :- pos(uncontrollable_animals, X).
trained_whale_is_bad_because :- neg(trained_whale, X).
trained_whale_is_good_because :- pos(trained_whale, X).
compare(killing_animals,X,Y) :- neg(killing_animals,X),neg(Y,X), killing_animals != Y.
compare(uncontrollable_animals,X,Y) :- neg(uncontrollable_animals,X),neg(Y,X), uncontrollable_animals != Y.
compare(trained_whale,X,Y) :- neg(trained_whale,X),neg(Y,X), trained_whale != Y.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(swear, good_cause).
neg(swear, good_effect).
neg(obscenity, good_expression).
neg(obscenity, good_standards).
neg(ill_cause, good_effect).
neg(ill_cause, good_meaning).
neg(ill_effect, good_expression).
neg(ill_effect, good_meaning).
pos(swear, ill_cause).
pos(swear, ill_effect).
pos(obscenity, ill_cause).
pos(obscenity, ill_effect).
pos(ill_cause, swear).
pos(ill_effect, swear).
pos(ill_cause, obscenity).
pos(ill_effect, obscenity).

% Section 2 - General relationships
relation(swear, obscenity).
relation(obscenity, expression).
relation(expression, meaning).
relation(meaning, vocabulary).
relation(meaning, communication).
relation(meaning, confusion).
relation(meaning, hurt).
relation(ill_cause, will).
relation(ill_cause, vocabulary).
relation(ill_cause, meaning).
relation(ill_cause, hate).
relation(ill_cause, anger).
relation(ill_effect, expression).
relation(ill_effect, confusion).
relation(ill_effect, hurt).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(women, easier).
neg(men, easier).
pos(women, unique_biological_difficulties).
pos(women, unique_social_difficulties).
pos(women, unique_financial_difficulties).

Section 2 - General relationships:

relation(women, men).
relation(women, unique_biological_difficulties).
relation(women, unique_social_difficulties).
relation(women, unique_financial_difficulties).
relation(pro, burden_of_proof).
relation(pro, arguments).
relation(pro, victory).
relation(pro, genders).
relation(pro, obstacles).
relation(pro, existence).
relation(pro, contentions).
relation(pro, resolution).
relation(maikuru, debate).
relation(maikuru, readers).

Section 3 - Encoding:

women_have_it_easier_because :- pos(women, easier).
men_have_it_easier_because :- pos(men, easier).
women_have_it_worse_because :- pos(women, unique_biological_difficulties).
women_have_it_worse_because :- pos(women, unique_social_difficulties).
women_have_it_worse_because :- pos(women, unique_financial_difficulties).
pro_cannot_win_because :- neg(pro, victory).
pro_cannot_win_because :- neg(pro, arguments).
pro_cannot_win_because :- neg(pro, contentions).
pro_cannot_win_because :- neg(pro, resolution).
maikuru_met_burden_because :- pos(maikuru, burden_of_proof).
maikuru_met_burden_because :- pos(maikuru, arguments).
maikuru_met_burden_because :- pos(maikuru, contentions).
maikuru_met_burden_because :- pos(maikuru, resolution).
compare(women, men, easier) :- neg(women, easier), neg(men, easier), women != men.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(donald_trump, deport_immigrants).
pos(deport_immigrants, stop_gangs).
pos(stop_gangs, ms_13).
pos(deport_immigrants, make_border_patrol_stronger).

Section 2 - General relationships:

relation(donald_trump, illegal_immigration).
relation(donald_trump, ms_13).
relation(donald_trump, border_patrol).

Section 3 - Encoding:

deport_immigrants_is_good_because :- pos(deport_immigrants, Y).
deport_immigrants_is_bad_because :- neg(deport_immigrants, Y).
compare(donald_trump,X,Y) :- neg(donald_trump,X),neg(Y,X), donald_trump != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = donald_trump.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(parents, assimilate).
pos(kids, parents).
neg(kids, understand).
pos(kids, horrible_situation).
neg(economies, strength).
pos(population, cycle).
pos(children, workers).
neg(jobs, enough).
pos(paranoia, stop).
neg(we, accept).
pos(we, risk).
pos(immigrants, problems).
pos(immigrants, terrorists).
pos(immigrants, security_risk).
neg(time, accept).
neg(money, accept).

Section 2 - General relationships:

relation(parents, kids).
relation(economies, jobs).
relation(paranoia, immigrants).
relation(we, immigrants).
relation(time, accept).
relation(money, accept).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(hotdog, sandwich).
pos(hotdog, frankfurter).
pos(hotdog, soft_roll).
pos(sandwich, two_pieces_of_bread).
pos(sandwich, filling).
pos(sandwich, condiments).
pos(sandwich, meat).

Section 2 - General relationships:

relation(hotdog, frankfurter).
relation(hotdog, soft_roll).
relation(sandwich, two_pieces_of_bread).
relation(sandwich, filling).
relation(sandwich, condiments).
relation(sandwich, meat).

Section 3 - Encoding:

sandwich_is_sandwich_because :- pos(sandwich,X).
hotdog_is_not_sandwich_because :- neg(hotdog,X).
compare(hotdog,X,Y) :- neg(hotdog,X),neg(Y,X), hotdog != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = hotdog.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(freedom_of_speech, burning_flag).
neg(burning_flag, american_virtues).
pos(burning_flag, vandalizing).
pos(american_flag, national_symbol).
pos(american_flag, symbol_of_country).
pos(american_soldiers, fighting_for_country).
pos(american_soldiers, risking_lives).
pos(american_soldiers, pride).
neg(burning_flag, thanking_soldiers).
neg(burning_flag, respecting_country).
neg(burning_flag, freedom_of_speech).

Section 2 - General relationships:

relation(burning_flag, freedom_of_speech).
relation(burning_flag, american_virtues).
relation(burning_flag, vandalizing).
relation(american_flag, national_symbol).
relation(american_flag, symbol_of_country).
relation(american_soldiers, fighting_for_country).
relation(american_soldiers, risking_lives).
relation(american_soldiers, pride).
relation(burning_flag, thanking_soldiers).
relation(burning_flag, respecting_country).
relation(burning_flag, freedom_of_speech).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(school, free_education).
pos(school, high_school_education).
pos(school, basic_math_skills).
pos(school, social_skills).
pos(school, economics).
pos(school, successful_life).
pos(school, independent_life).
pos(school, american_dream).
pos(school, good_job).
pos(school, big_fancy_house).
pos(school, family).
pos(school, dream_house).
pos(high_school_education, work_at_restaurants).
pos(high_school_education, work_at_big_company_names).
pos(high_school_education, survive).
pos(knowledge, survive).
pos(education, free_will).
pos(education, pursue_goal).
pos(education, perfect).
pos(education, american_dream).
pos(ged, new_career).
pos(celebrities, publicity).
pos(money, buy_anything).

neg(school, chopped_off_hands).
neg(school, truancy).
neg(school, court_cost).
neg(school, tax_payers).
neg(school, not_good).
neg(school, school_system).
neg(high_school_education, make_it_in_the_world).
neg(high_school_education, depend_on_others).
neg(celebrities, know_everything).
neg(celebrities, stupid).
neg(money, perfect).

Section 2 - General relationships:

relation(school, free_education).
relation(school, high_school_education).
relation(school, basic_math_skills).
relation(school, social_skills).
relation(school, economics).
relation(school, successful_life).
relation(school, independent_life).
relation(school, american_dream).
relation(school, good_job).
relation(school, big_fancy_house).
relation(school, family).
relation(school, dream_house).
relation(high_school_education, work_at_restaurants).
relation(high_school_education, work_at_big_company_names).
relation(high_school_education, survive).
relation(knowledge, survive).
relation(education, free_will).
relation(education, pursue_goal).
relation(education, perfect).
relation(education, american_dream).
relation(ged, new_career).
relation(celebrities, publicity).
relation(money, buy_anything).
relation(school, chopped_off_hands).
relation(school, truancy).
relation(school, court_cost).
relation(school, tax_payers).
relation(school, not_good).
relation(school, school_system).
relation(high_school_education, make_it_in_the_world).
relation(high_school_education, depend_on_others).
relation(celebrities, know_everything).
relation(celebrities, stupid).
relation(money, perfect).

Section 3 - Encoding:

school_is_good_because :- pos(school, Y).
school_is_bad_because :- neg(school, Y).
compare(school,X,Y) :- neg(school,X),neg(Y,X), school != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = school.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, perfect).
pos(god, light).
pos(lucifer, perfect).
neg(god, sin).
neg(god, darkness).
neg(lucifer, truth).

Section 2 - General relationships:

relation(god, sin).
relation(god, lucifer).
relation(lucifer, sin).
relation(lucifer, adam).
relation(lucifer, eve).
relation(adam, eve).
relation(adam, god).
relation(eve, god).
relation(sin, law).

Section 3 - Encoding:

god_is_good_because :- pos(god,Y).
god_is_bad_because :- neg(god,Y).
lucifer_is_good_because :- pos(lucifer,Y).
lucifer_is_bad_because :- neg(lucifer,Y).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(lucifer,X,Y) :- neg(lucifer,X),neg(lucifer,Z), Y != Z, Y = lucifer.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(american_republicans, liars).
pos(american_republicans, art_form).
pos(hitler, technique).
pos(american_republicans, public_opinion).
pos(bush, lies).
pos(cnn, study).
pos(republicans, nazis).
pos(republicans, economic_gain).
pos(republicans, inside_job).
pos(niaz_naik, pakistani_foreign_secretary).
pos(danny_jowenko, demolitions_expert).
pos(wtc_7, collapse).

neg(american_republicans, truth).
neg(american_republicans, facts).
neg(republicans, territorial_expansion).
neg(republicans, muslims).
neg(republicans, communists).

Section 2 - General relationships:

relation(american_republicans, nazis).
relation(american_republicans, hitler).
relation(american_republicans, bush).
relation(american_republicans, cnn).
relation(american_republicans, republicans).
relation(american_republicans, niaz_naik).
relation(american_republicans, danny_jowenko).
relation(american_republicans, wtc_7).
relation(hitler, technique).
relation(bush, lies).
relation(cnn, study).
relation(republicans, nazis).
relation(republicans, economic_gain).
relation(republicans, territorial_expansion).
relation(republicans, muslims).
relation(republicans, communists).
relation(republicans, inside_job).
relation(niaz_naik, pakistani_foreign_secretary).
relation(danny_jowenko, demolitions_expert).
relation(wtc_7, collapse).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.

american_republicans_are_bigger_liars_than_nazis :- pos(american_republicans, liars), pos(nazis, liars), compare(american_republicans, nazis, liars).
american_republicans_are_bigger_liars_than_nazis :- neg(american_republicans, liars), neg(nazis, liars), compare(american_republicans, nazis, liars).
american_republicans_are_bigger_liars_than_nazis :- pos(american_republicans, art_form), pos(nazis, art_form), compare(american_republicans, nazis, art_form).
american_republicans_are_bigger_liars_than_nazis :- neg(american_republicans, art_form), neg(nazis, art_form), compare(american_republicans, nazis, art_form).
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(abortion, human_life).
pos(mother, right_to_life).
pos(mother, life).

Section 2 - General relationships:

relation(mother, pregnancy).
relation(pregnancy, death).
relation(pregnancy, fetus).
relation(fetus, mother).
relation(abortion, pregnancy).
relation(abortion, fetus).
relation(abortion, mother).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(sprint, halo_series).
neg(anti_sprinter, sprint).
pos(game_play_styles, adapt).
pos(game_play_styles, revise).
pos(challenge, good).
pos(statistics, dont_lie).
pos(test_group, significant).
pos(toggle_setting, argument).
pos(dislike, game_play_style).
pos(operator, game_play_style).
pos(classical_integrity, dynamic).
pos(change, upset).
pos(sprint, battlefield_2_bad_company).
pos(sprint, battlefield_1942).
pos(mistake, wait).

Section 2 - General relationships:

relation(sprint, halo_series).
relation(anti_sprinter, sprint).
relation(game_play_styles, adapt).
relation(game_play_styles, revise).
relation(challenge, good).
relation(statistics, dont_lie).
relation(test_group, significant).
relation(toggle_setting, argument).
relation(dislike, game_play_style).
relation(operator, game_play_style).
relation(classical_integrity, dynamic).
relation(change, upset).
relation(sprint, battlefield_2_bad_company).
relation(sprint, battlefield_1942).
relation(mistake, wait).

Section 3 - Encoding:

sprint_is_good_because :- pos(sprint, Y).
sprint_is_bad_because :- neg(sprint, Y).
compare(sprint,X,Y) :- neg(sprint,X),neg(Y,X), sprint != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = sprint.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(video_games, efficient_training).
pos(simulations, efficient_training).
pos(traditional_way_of_teaching, better_than_video_games_and_simulations).

Section 2 - General relationships:

relation(video_games, simulations).
relation(video_games, efficient_training).
relation(simulations, efficient_training).
relation(traditional_way_of_teaching, video_games).
relation(traditional_way_of_teaching, simulations).

Section 3 - Encoding:

efficient_training_is_good_because :- pos(X, efficient_training).
efficient_training_is_bad_because :- neg(X, efficient_training).
compare(video_games,X,Y) :- neg(video_games,X),neg(Y,X), video_games != Y.
compare(simulations,X,Y) :- neg(simulations,X),neg(Y,X), simulations != Y.
compare(traditional_way_of_teaching,X,Y) :- neg(traditional_way_of_teaching,X),neg(Y,X), traditional_way_of_teaching != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(imagination, false).
pos(belief, imaginary).
pos(math, absolute).
pos(math, non_absoluteness).
pos(math, context).
pos(circle, being).
pos(DDO, existence).
pos(DDO, truth).
pos(coffee_cup, hot).
pos(coffee_cup, liquid).
pos(coffee_cup, steam).
pos(coffee_cup, radiative_warmth).
pos(coffee_cup, temperature).

neg(imagination, true).
neg(belief, true).
neg(coffee_cup, imagination).

Section 2 - General relationships:

relation(imagination, belief).
relation(math, circle).
relation(DDO, imagination).
relation(DDO, belief).
relation(DDO, truth).
relation(coffee_cup, liquid).
relation(coffee_cup, steam).
relation(coffee_cup, radiative_warmth).
relation(coffee_cup, temperature).

Section 3 - Encoding:

imagination_is_false :- pos(imagination, false).
belief_is_imaginary :- pos(belief, imaginary).
math_is_absolute :- pos(math, absolute).
math_allows_non_absoluteness :- pos(math, non_absoluteness).
math_needs_context :- pos(math, context).
circle_came_into_being :- pos(circle, being).
DDO_exists :- pos(DDO, existence).
DDO_is_true :- pos(DDO, truth).
coffee_cup_is_hot :- pos(coffee_cup, hot).
coffee_cup_has_liquid :- pos(coffee_cup, liquid).
coffee_cup_has_steam :- pos(coffee_cup, steam).
coffee_cup_has_radiative_warmth :- pos(coffee_cup, radiative_warmth).
coffee_cup_has_temperature :- pos(coffee_cup, temperature).
coffee_cup_is_not_imagination :- neg(coffee_cup, imagination).

compare(imagination, belief, DDO) :- neg(imagination, true), neg(belief, true), imagination != DDO, belief != DDO.
compare(DDO, imagination, belief) :- neg(DDO, true), neg(DDO, false), imagination != belief, DDO != belief.
compare(coffee_cup, imagination, belief) :- neg(coffee_cup, true), neg(imagination, true), neg(belief, true), coffee_cup != imagination, coffee_cup != belief.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(online_gambling, incidence_of_gambling_addiction).
pos(internet_gambling, normal_gambling).
pos(internet_gambling, free_food).
pos(internet_gambling, entertainment).
pos(internet_gambling, glitzy_surroundings).
pos(internet_gambling, peer_pressure).
pos(internet_gambling, credit_cards).
pos(internet_gambling, fraud).
pos(internet_gambling, trustworthy).
pos(internet_gambling, responsible).
pos(internet_gambling, trusted_brands).
pos(internet_gambling, odds).
pos(internet_gambling, word).

Section 2 - General relationships:

relation(online_gambling, incidence_of_gambling_addiction).
relation(internet_gambling, normal_gambling).
relation(internet_gambling, free_food).
relation(internet_gambling, entertainment).
relation(internet_gambling, glitzy_surroundings).
relation(internet_gambling, peer_pressure).
relation(internet_gambling, credit_cards).
relation(internet_gambling, fraud).
relation(internet_gambling, trustworthy).
relation(internet_gambling, responsible).
relation(internet_gambling, trusted_brands).
relation(internet_gambling, odds).
relation(internet_gambling, word).

Section 3 - Encoding:

internet_gambling_is_good_because :- pos(internet_gambling, Y).
internet_gambling_is_bad_because :- neg(internet_gambling, Y).
compare(internet_gambling,X,Y) :- neg(internet_gambling,X),neg(Y,X), internet_gambling != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = internet_gambling.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(sixteen_year_old, job).
pos(sixteen_year_old, drive).
pos(sixteen_year_old, treated_as_adult).
pos(sixteen_year_old, drink).
pos(dwight_b_heath, crazy).
pos(france, cultural_model).
pos(italy, cultural_model).
pos(parents, educate).
pos(parents, rob).
pos(parents, taboo_allure).
pos(belgium, alcoholic_beverages).
pos(denmark, alcoholic_beverages).
pos(germany, alcoholic_beverages).
pos(united_states, cut_binge_drinking).
pos(united_states, under_aged_drinking).

neg(sixteen_year_old, binge_drink).
neg(united_states, legal_drinking_age).

% Section 2 - General relationships
relation(sixteen_year_old, job).
relation(sixteen_year_old, drive).
relation(sixteen_year_old, treated_as_adult).
relation(sixteen_year_old, drink).
relation(dwight_b_heath, crazy).
relation(france, cultural_model).
relation(italy, cultural_model).
relation(parents, educate).
relation(parents, rob).
relation(parents, taboo_allure).
relation(belgium, alcoholic_beverages).
relation(denmark, alcoholic_beverages).
relation(germany, alcoholic_beverages).
relation(united_states, cut_binge_drinking).
relation(united_states, under_aged_drinking).

% Section 3 - Encoding
sixteen_year_old_is_good_because :- pos(sixteen_year_old, Y).
sixteen_year_old_is_bad_because :- neg(sixteen_year_old, Y).
compare(sixteen_year_old,X,Y) :- neg(sixteen_year_old,X),neg(Y,X), sixteen_year_old != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = sixteen_year_old.
```
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(intelligence, irrelevant).
neg(intelligence, contrast).
neg(arguments, relevant).
neg(arguments, moot).
neg(arguments, debates).
neg(you, good).
neg(you, clear).

pos(intelligence, logic).
pos(intelligence, abstract_thought).
pos(intelligence, self_awareness).
pos(intelligence, communication).
pos(intelligence, learning).

% Section 2 - General relationships
relation(intelligence, logic).
relation(intelligence, abstract_thought).
relation(intelligence, self_awareness).
relation(intelligence, communication).
relation(intelligence, learning).
relation(arguments, debates).
relation(arguments, moot).
relation(you, arguments).

% Section 3 - Encoding
intelligence_is_good_because :- pos(intelligence, Y).
intelligence_is_bad_because :- neg(intelligence, Y).
compare(intelligence,X,Y) :- neg(intelligence,X),neg(Y,X), intelligence != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = intelligence.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(snails, us).
pos(geneva_convention, prisoners).
neg(geneva_convention, waste_of_time).
neg(snails, properties).
neg(properties, snails).
neg(snails, good_day).
pos(bazooka, man).
neg(snails, man).

Section 2 - General relationships:

relation(snails, geneva_convention).
relation(snails, properties).
relation(snails, bazooka).
relation(snails, man).
relation(geneva_convention, prisoners).
relation(geneva_convention, waste_of_time).
relation(geneva_convention, good_day).
relation(properties, snails).
relation(properties, bazooka).
relation(properties, man).
relation(bazooka, man).
relation(bazooka, snails).
relation(man, snails).
relation(man, bazooka).

Section 3 - Encoding:

snails_are_good_because :- pos(snails,Y).
snails_are_bad_because :- neg(snails,Y).
compare(snails,X,Y) :- neg(snails,X),neg(Y,X), snails != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = snails.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(mikal, best_debater).
neg(imabench, best_debater).
pos(imabench, insanely_low_lose_rate).
pos(imabench, number_of_debates_won).
pos(imabench, insanely_good_debater).

Section 2 - General relationships:

relation(mikal, imabench).
relation(imabench, debate.org).
relation(imabench, troll).

Section 3 - Encoding:

mikal_is_best_debater_because :- pos(mikal,Y).
imabench_is_best_debater_because :- pos(imabench,Y).
compare(mikal,imabench,X) :- neg(mikal,X),neg(imabench,X), mikal != imabench.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(abortion, population_control).
pos(abortion, cancer_prevention).

Section 2 - General relationships:

relation(abortion, population).
relation(abortion, cancer).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(mafia_games, uninformed_perspective).
pos(mafia_games, informed_perspective).
neg(mafia_games, scumhunting).
neg(mafia_games, random_lynches).

Section 2 - General relationships:

relation(mafia_games, uninformed_perspective).
relation(mafia_games, informed_perspective).
relation(mafia_games, scumhunting).
relation(mafia_games, random_lynches).

Section 3 - Encoding:

mafia_games_is_good_because :- pos(mafia_games, Y).
mafia_games_is_bad_because :- neg(mafia_games, Y).
compare(mafia_games,X,Y) :- neg(mafia_games,X),neg(Y,X), mafia_games != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = mafia_games.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(stable_nations, allies).
neg(failed_nations, allies).
pos(failed_nations, nuclear_power).
neg(failed_nations, favorable).

Section 2 - General relationships:

relation(stable_nations, u_s).
relation(failed_nations, u_s).
relation(failed_nations, stable_nations).
relation(nuclear_power, u_s).
relation(failed_nations, conflict).

Section 3 - Encoding:

stable_nations_are_not_a_threat :- pos(stable_nations,X), neg(stable_nations,Y).
failed_nations_are_a_threat :- pos(failed_nations,X), neg(failed_nations,Y).
compare(failed_nations,stable_nations,X) :- neg(failed_nations,X),neg(stable_nations,X), failed_nations != stable_nations.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(international_law_court, developing_countries).
neg(individual_countries, pollution).
neg(scientists, pollution).
neg(countries, pollution_compensation).

Section 2 - General relationships:

relation(international_law_court, developing_countries).
relation(individual_countries, pollution).
relation(scientists, pollution).
relation(countries, pollution_compensation).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(young_boy, con_people).
pos(young_boy, truth).
pos(young_boy, money).
pos(mail_man, truth).

Section 2 - General relationships:

relation(young_boy, friend).
relation(young_boy, mother).
relation(young_boy, father).
relation(young_boy, mail_man).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, contingent_universe).
pos(god, necessary_substance).
pos(cosmological_argument, contingent_universe).
pos(teleological_argument, contingent_universe).
pos(cosmological_argument, necessary_substance).
pos(teleological_argument, necessary_substance).
pos(ontological_argument, god).
pos(cosmological_argument, god).
pos(teleological_argument, god).

Section 2 - General relationships:

relation(god, contingent_universe).
relation(god, necessary_substance).
relation(cosmological_argument, contingent_universe).
relation(teleological_argument, contingent_universe).
relation(cosmological_argument, necessary_substance).
relation(teleological_argument, necessary_substance).
relation(ontological_argument, god).
relation(cosmological_argument, god).
relation(teleological_argument, god).

Section 3 - Encoding:

god_is_good_because :- pos(god,Y).
god_is_bad_because :- neg(god,Y).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(drugs, health).
neg(drugs, well_being).
neg(drugs, efficiency).
neg(drugs, society).
neg(meth, teeth).
neg(meth, strokes).
neg(meth, heart).
neg(meth, withdrawal_syndrome).
neg(meth, ejaculation).
neg(meth, hygiene).
neg(meth, self_destructive_behavior).
neg(ecstasy, hyponatremia).
neg(ecstasy, hypertension).
neg(ecstasy, heart_rate).
neg(ecstasy, blood_pressure).

Section 2 - General relationships:

relation(drugs, health).
relation(drugs, well_being).
relation(drugs, efficiency).
relation(drugs, society).
relation(meth, teeth).
relation(meth, strokes).
relation(meth, heart).
relation(meth, withdrawal_syndrome).
relation(meth, ejaculation).
relation(meth, hygiene).
relation(meth, self_destructive_behavior).
relation(ecstasy, hyponatremia).
relation(ecstasy, hypertension).
relation(ecstasy, heart_rate).
relation(ecstasy, blood_pressure).

Section 3 - Encoding:

drugs_are_bad_because :- neg(drugs,X).
drugs_are_good_because :- pos(drugs,X).
compare(drugs,X,Y) :- neg(drugs,X),neg(Y,X), drugs != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = drugs.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(uchiha_itachi, defeat).
pos(uchiha_itachi, healthy_living_state).
pos(uchiha_itachi, maximum_chakra_levels).
pos(uchiha_itachi, restored_eyesight).
pos(uchiha_itachi, memories_up_to_death).
pos(uchiha_itachi, standard_equipment).
pos(uzumaki_naruto, chapter_499_page_16_state).
pos(uzumaki_naruto, no_trance).
neg(uzumaki_naruto, pre_prepared_senjutsu_kage_bunshin).

% Section 2 - General relationships
relation(uchiha_itachi, uzumaki_naruto).
relation(uchiha_itachi, chapter_393_page_16_state).
relation(uchiha_itachi, akatsuki_cloak).
relation(uchiha_itachi, ninja_tools).
relation(uzumaki_naruto, chapter_499_page_16_state).
relation(uzumaki_naruto, beach).
relation(uzumaki_naruto, forest).
relation(uzumaki_naruto, six_yards).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(uchiha_itachi,X,Y) :- neg(uchiha_itachi,X),neg(Y,X), uchiha_itachi != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = uchiha_itachi.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(bible, remission_of_sins).
pos(bible, water_baptism).
pos(pro, fool).
neg(pro, attempt).
neg(pro, debate).
neg(pro, argument).
neg(pro, argumentation).
neg(pro, prove).

Section 2 - General relationships:

relation(bible, water_baptism).
relation(bible, remission_of_sins).
relation(pro, attempt).
relation(pro, debate).
relation(pro, argument).
relation(pro, argumentation).
relation(pro, prove).
relation(pro, fool).
relation(paul, real_person).

Section 3 - Encoding:

water_baptism_is_for_remission_of_sins :- pos(bible, water_baptism), pos(bible, remission_of_sins).
pro_is_fool :- pos(pro, fool).
pro_has_not_attempted_to_respond :- neg(pro, attempt).
pro_has_not_made_any_attempt_to_debate :- neg(pro, debate).
pro_has_not_made_any_attempt_to_argue :- neg(pro, argument).
pro_has_not_made_any_attempt_to_prove :- neg(pro, prove).
pro_has_conceded_the_single_point :- pos(pro, single_point).
pro_second_point_first_sentence_supports_my_position :- pos(pro, second_point_first_sentence).
paul_is_a_real_person :- pos(paul, real_person).
compare(pro,X,Y) :- neg(pro,X),neg(Y,X), pro != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = pro.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(abortion, human_life).
pos(child, life).
pos(adoption, child).

Section 2 - General relationships:

relation(abortion, child).
relation(abortion, women).
relation(adoption, couple).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(pikmin_movie, good_movie).
pos(pikmin_movie, animated).
pos(pikmin_movie, fond_memories).
neg(pikmin_movie, terrible_movie).
neg(video_game_movie, good_movie).
neg(super_mario_bros_movie, good_movie).
neg(live_action_movie, good_movie).
neg(final_fantasy_the_spirits_within, good_movie).

% Section 2 - General relationships
relation(pikmin_movie, video_game_movie).
relation(pikmin_movie, super_mario_bros_movie).
relation(pikmin_movie, live_action_movie).
relation(pikmin_movie, final_fantasy_the_spirits_within).
relation(super_mario_bros_movie, live_action_movie).
relation(super_mario_bros_movie, toad).
relation(toad, video_game).
relation(toad, fond_memories).

% Section 3 - Encoding
pikmin_movie_is_good_because :- pos(pikmin_movie, Y).
pikmin_movie_is_bad_because :- neg(pikmin_movie, Y).
compare(pikmin_movie, X, Y) :- neg(pikmin_movie, X),neg(Y, X), pikmin_movie != Y.
compare(X, Y, Z) :- neg(X, Y),neg(X, Z), Y != Z, Y = pikmin_movie.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(laura_mallory, devout_christian).
pos(twilight, promotes_lust).
pos(bella, lustful).
pos(edward_cullen, sexual_attractiveness).

Section 2 - General relationships:

relation(laura_mallory, twilight).
relation(laura_mallory, harry_potter).
relation(laura_mallory, religion).
relation(twilight, lust).
relation(bella, edward_cullen).

Section 3 - Encoding:

laura_mallory_is_offended_by_twilight :- pos(twilight, Y), pos(laura_mallory, Y).
laura_mallory_is_not_offended_by_harry_potter :- neg(harry_potter, Y), pos(laura_mallory, Y).
compare(laura_mallory, twilight, harry_potter) :- pos(twilight, Y), neg(harry_potter, Y), twilight != harry_potter.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(january_first, new_years_day).
neg(january, english_speaking_part).
neg(january, other_countries).

Section 2 - General relationships:

relation(january_first, new_years_day).
relation(january, english_speaking_part).
relation(january, other_countries).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(murderers, right_to_quick_and_speedy_trial).
pos(murderers, right_to_help_himself_get_out_of_jail).
pos(murderers, right_to_previous_rights).
pos(murderers, second_chance).
pos(people_who_willingly_spread_hiv, right_to_vote).
pos(people_who_willingly_spread_hiv, right_to_speak_publicly).
pos(people_who_willingly_spread_hiv, right_to_gather).
pos(people_who_escape_jail, right_to_trial).
pos(dead_people, rights).

Section 2 - General relationships:

relation(murderers, right_to_quick_and_speedy_trial).
relation(murderers, right_to_help_himself_get_out_of_jail).
relation(murderers, right_to_previous_rights).
relation(murderers, second_chance).
relation(people_who_willingly_spread_hiv, right_to_vote).
relation(people_who_willingly_spread_hiv, right_to_speak_publicly).
relation(people_who_willingly_spread_hiv, right_to_gather).
relation(people_who_escape_jail, right_to_trial).
relation(dead_people, rights).

Section 3 - Encoding:

murderers_are_good_because :- pos(murderers, Y).
murderers_are_bad_because :- neg(murderers, Y).
people_who_willingly_spread_hiv_are_good_because :- pos(people_who_willingly_spread_hiv, Y).
people_who_willingly_spread_hiv_are_bad_because :- neg(people_who_willingly_spread_hiv, Y).
people_who_escape_jail_are_good_because :- pos(people_who_escape_jail, Y).
people_who_escape_jail_are_bad_because :- neg(people_who_escape_jail, Y).
dead_people_are_good_because :- pos(dead_people, Y).
dead_people_are_bad_because :- neg(dead_people, Y).
compare(murderers,X,Y) :- neg(murderers,X),neg(Y,X), murderers != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = murderers.
compare(people_who_willingly_spread_hiv,X,Y) :- neg(people_who_willingly_spread_hiv,X),neg(Y,X), people_who_willingly_spread_hiv != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = people_who_willingly_spread_hiv.
compare(people_who_escape_jail,X,Y) :- neg(people_who_escape_jail,X),neg(Y,X), people_who_escape_jail != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = people_who_escape_jail.
compare(dead_people,X,Y) :- neg(dead_people,X),neg(Y,X), dead_people != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = dead_people.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(joker, makeup).
neg(joker, guns).
neg(joker, scary).
neg(joker, great_plan).
neg(joker, lawman).
neg(joker, harley).
neg(joker, woman).
neg(joker, boss).
neg(guido_fawkes, modernise).
neg(guido_fawkes, scary).

pos(joker, agent_of_chaos).
pos(joker, type).
pos(joker, information).
pos(joker, secrets).
pos(joker, suit).
pos(joker, batarang).
pos(joker, places).
pos(joker, time).
pos(joker, harley).
pos(guido_fawkes, makeup).
pos(guido_fawkes, guns).
pos(guido_fawkes, scary).
pos(guido_fawkes, great_plan).
pos(guido_fawkes, lawman).
pos(guido_fawkes, harley).
pos(guido_fawkes, woman).
pos(guido_fawkes, boss).

Section 2 - General relationships:

relation(joker, makeup).
relation(joker, guns).
relation(joker, agent_of_chaos).
relation(joker, type).
relation(joker, information).
relation(joker, secrets).
relation(joker, suit).
relation(joker, batarang).
relation(joker, places).
relation(joker, time).
relation(joker, harley).
relation(joker, woman).
relation(joker, boss).
relation(guido_fawkes, makeup).
relation(guido_fawkes, guns).
relation(guido_fawkes, scary).
relation(guido_fawkes, great_plan).
relation(guido_fawkes, lawman).
relation(guido_fawkes, harley).
relation(guido_fawkes, woman).
relation(guido_fawkes, boss).

Section 3 - Encoding:

joker_is_good_because :- pos(joker,Y).
joker_is_bad_because :- neg(joker,Y).
guido_fawkes_is_good_because :- pos(guido_fawkes,Y).
guido_fawkes_is_bad_because :- neg(guido_fawkes,Y).
compare(joker,guido_fawkes,X) :- neg(joker,X),neg(guido_fawkes,X), joker != guido_fawkes.
compare(guido_fawkes,joker,X) :- neg(guido_fawkes,X),neg(joker,X), guido_fawkes != joker.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(poetry, underdeveloped_fiction).
neg(poetry, literature).
neg(poetry, merit_to_the_english_language).
pos(narrative_poems, story).
pos(narrative_poems, character).
pos(narrative_poems, scene).
pos(modern_poetry, short).
pos(modern_poetry, formless).
pos(narrative_classic_poems, story).
pos(narrative_classic_poems, character).
pos(narrative_classic_poems, scene).
pos(narrative_classic_poems, literature).
pos(narrative_classic_poems, merit_to_the_english_language).
pos(narrative_classic_poems, art_form).
pos(narrative_classic_poems, lazy).
pos(narrative_classic_poems, underdeveloped).
pos(narrative_classic_poems, poetic_literature).
pos(narrative_classic_poems, abstract).
pos(narrative_classic_poems, convey_concepts).
pos(narrative_classic_poems, narrative_form).
pos(narrative_classic_poems, homer).
pos(narrative_classic_poems, shakespeare).
pos(narrative_classic_poems, frost).
pos(narrative_classic_poems, desiderata).
pos(narrative_classic_poems, immersion).
pos(narrative_classic_poems, message).
pos(narrative_classic_poems, many_more_ways).
pos(narrative_classic_poems, time_worn_method).
pos(narrative_classic_poems, extremely_effective_structure).
pos(narrative_classic_poems, convey_concepts_2).
pos(narrative_classic_poems, fit_into_the_structure).
pos(narrative_classic_poems, enhanced).

Section 2 - General relationships:

relation(poetry, underdeveloped_fiction).
relation(poetry, literature).
relation(poetry, merit_to_the_english_language).
relation(narrative_poems, story).
relation(narrative_poems, character).
relation(narrative_poems, scene).
relation(modern_poetry, short).
relation(modern_poetry, formless).
relation(narrative_classic_poems, story).
relation(narrative_classic_poems, character).
relation(narrative_classic_poems, scene).
relation(narrative_classic_poems, literature).
relation(narrative_classic_poems, merit_to_the_english_language).
relation(narrative_classic_poems, art_form).
relation(narrative_classic_poems, lazy).
relation(narrative_classic_poems, underdeveloped).
relation(narrative_classic_poems, poetic_literature).
relation(narrative_classic_poems, abstract).
relation(narrative_classic_poems, convey_concepts).
relation(narrative_classic_poems, narrative_form).
relation(narrative_classic_poems, homer).
relation(narrative_classic_poems, shakespeare).
relation(narrative_classic_poems, frost).
relation(narrative_classic_poems, desiderata).
relation(narrative_classic_poems, immersion).
relation(narrative_classic_poems, message).
relation(narrative_classic_poems, many_more_ways).
relation(narrative_classic_poems, time_worn_method).
relation(narrative_classic_poems, extremely_effective_structure).
relation(narrative_classic_poems, convey_concepts_2).
relation(narrative_classic_poems, fit_into_the_structure).
relation(narrative_classic_poems, enhanced).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(you, rule).
neg(you, rule_three).

Section 2 - General relationships:

relation(you, rule).
relation(you, rule_three).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(bestgore_com, educational_purposes).
pos(bestgore_com, artistic_view).
pos(bestgore_com, original_creativity).
pos(bestgore_com, movies).
pos(bestgore_com, jonelle).
pos(kindergarten, brutality).
pos(trigonometry, mathematical_principles).
pos(torture_videos, mathematical_principles).
pos(lord_of_the_rings, better).
pos(kindergarten, artistic_view).
pos(kindergarten, original_creativity).
pos(kindergarten, movies).
pos(kindergarten, jonelle).
pos(kindergarten, brutality).
pos(sex_ed, plot).
pos(horror_films, movies).

neg(bestgore_com, refined).
neg(bestgore_com, boring).
neg(bestgore_com, completely_engage).
neg(trigonometry, worlds_apart).
neg(torture_videos, worlds_apart).
neg(sex_ed, relevant).
neg(horror_films, relevant).

Section 2 - General relationships:

relation(bestgore_com, educational_purposes).
relation(bestgore_com, artistic_view).
relation(bestgore_com, original_creativity).
relation(bestgore_com, movies).
relation(bestgore_com, jonelle).
relation(kindergarten, brutality).
relation(trigonometry, mathematical_principles).
relation(torture_videos, mathematical_principles).
relation(lord_of_the_rings, better).
relation(kindergarten, artistic_view).
relation(kindergarten, original_creativity).
relation(kindergarten, movies).
relation(kindergarten, jonelle).
relation(kindergarten, brutality).
relation(sex_ed, plot).
relation(horror_films, movies).

Section 3 - Encoding:

bestgore_com_is_good_because :- pos(bestgore_com,Y).
bestgore_com_is_bad_because :- neg(bestgore_com,Y).
compare(bestgore_com,X,Y) :- neg(bestgore_com,X),neg(Y,X), bestgore_com != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = bestgore_com.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(bible, contradictions).
pos(bible, verses).
pos(bible, testaments).
pos(bible, definitions).
pos(bible, readers).
pos(bible, verses).
pos(bible, verses).
pos(bible, verses).
pos(bible, verses).
pos(bible, verses).
pos(bible, verses).

% Section 2 - General relationships
relation(bible, verses).
relation(bible, testaments).
relation(bible, definitions).
relation(bible, readers).
relation(bible, verses).
relation(bible, verses).
relation(bible, verses).
relation(bible, verses).
relation(bible, verses).
relation(bible, verses).

% Section 3 - Encoding
compare(bible,X,Y) :- neg(bible,X),neg(Y,X), bible != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = bible.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(man, mutual_understanding).
pos(man, trust).
pos(woman, mutual_understanding).
pos(woman, trust).
pos(woman, contribution).
pos(woman, significance).
pos(woman, desire).
pos(husband, respect).
pos(wife, respect).
pos(married, harmony).

neg(man, forbid).
neg(man, offend).
neg(woman, freeloader).

Section 2 - General relationships:

relation(man, woman).
relation(woman, job).
relation(woman, family_budget).
relation(husband, wife).

Section 3 - Encoding:

mutual_understanding(X,Y) :- relation(X,Y).
trust(X,Y) :- relation(X,Y).
contribution(X,Y) :- relation(X,Y).
significance(X,Y) :- relation(X,Y).
desire(X,Y) :- relation(X,Y).
respect(X,Y) :- relation(X,Y).
harmony(X,Y) :- relation(X,Y).

man_forbid_work(X,Y) :- neg(X,Y).
man_offend(X,Y) :- neg(X,Y).
woman_freeloader(X,Y) :- neg(X,Y).
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(black_people, deserve_to_die).
neg(indian_people, deserve_to_die).
neg(retarded_people, deserve_to_die).
neg(gay_people, deserve_to_die).
neg(amputees, deserve_to_die).
neg(homosexuality, appropriate).
neg(homosexuality, good).
neg(homos, deserve_to_die).
neg(bis, deserve_to_die).
neg(trans, deserve_to_die).
neg(black_people, know_anything).
neg(black_people, intelligent).
neg(black_people, liked).
neg(black_people, good).
neg(black_people, useful).
neg(black_people, valuable).
neg(black_people, worthy).
neg(black_people, important).
neg(black_people, significant).
neg(black_people, meaningful).
neg(black_people, worthwhile).
neg(black_people, beneficial).
neg(black_people, advantageous).
neg(black_people, profitable).
neg(black_people, gainful).
neg(black_people, lucrative).
neg(black_people, rewarding).
neg(black_people, satisfying).
neg(black_people, fulfilling).
neg(black_people, enjoyable).
neg(black_people, pleasurable).
neg(black_people, delightful).
neg(black_people, charming).
neg(black_people, attractive).
neg(black_people, appealing).
neg(black_people, desirable).
neg(black_people, tempting).
neg(black_people, alluring).
neg(black_people, enchanting).
neg(black_people, captivating).
neg(black_people, bewitching).
neg(black_people, fascinating).
neg(black_people, spellbinding).
neg(black_people, mesmerizing).
neg(black_people, entrancing).
neg(black_people, ravishing).
neg(black_people, transporting).
neg(black_people, intoxicating).
neg(black_people, addictive).
neg(black_people, habit-forming).
neg(black_people, compulsive).
neg(black_people, obsessive).
neg(black_people, uncontrollable).
neg(black_people, irresistible).
neg(black_people, overwhelming).
neg(black_people, overpowering).
neg(black_people, devastating).
neg(black_people, catastrophic).
neg(black_people, disastrous).
neg(black_people, apocalyptic).
neg(black_people, life-ending).
neg(black_people, fatal).
neg(black_people, deadly).
neg(black_people, lethal).
neg(black_people, mortal).
neg(black_people, terminal).
neg(black_people, incurable).
neg(black_people, untreatable).
neg(black_people, irreversible).
neg(black_people, permanent).
neg(black_people, lasting).
neg(black_people, enduring).
neg(black_people, persistent).
neg(black_people, continual).
neg(black_people, continuous).
neg(black_people, unceasing).
neg(black_people, relentless).
neg(black_people, unabating).
neg(black_people, unyielding).
neg(black_people, unbreakable).
neg(black_people, indestructible).
neg(black_people, invincible).
neg(black_people, unconquerable).
neg(black_people, unbeatable).
neg(black_people, unsurpassable).
neg(black_people, unequaled).
neg(black_people, unmatched).
neg(black_people, unparalleled).
neg(black_people, incomparable).
neg(black_people, inimitable).
neg(black_people, matchless).
neg(black_people, peerless).
neg(black_people, unrivaled).
neg(black_people, supreme).
neg(black_people, paramount).
neg(black_people, preeminent).
neg(black_people, predominant).
neg(black_people, dominant).
neg(black_people, leading).
neg(black_people, foremost).
neg(black_people, principal).
neg(black_people, chief).
neg(black_people, main).
neg(black_people, primary).
neg(black_people, essential).
neg(black_people, fundamental).
neg(black_people, basic).
neg(black_people, rudimentary).
neg(black_people, simple).
neg(black_people, easy).
neg(black_people, effortless).
neg(black_people, painless).
neg(black_people, comfortable).
neg(black_people, enjoyable).
neg(black_people, pleasurable).
neg(black_people, delightful).
neg(black_people, charming).
neg(black_people, attractive).
neg(black_people, appealing).
neg(black_people, desirable).
neg(black_people, tempting).
neg(black_people, alluring).
neg(black_people, enchanting).
neg(black_people, captivating).
neg(black_people, bewitching).
neg(black_people, fascinating).
neg(black_people, spellbinding).
neg(black_people, mesmerizing).
neg(black_people, entrancing).
neg(black_people, ravishing).
neg(black_people, transporting).
neg(black_people, intoxicating).
neg(black_people, addictive).
neg(black_people, habit-forming).
neg(black_people, compulsive).
neg(black_people, obsessive).
neg(black_people, uncontrollable).
neg(black_people, irresistible).
neg(black_people, overwhelming).
neg(black_people, overpowering).
neg(black_people, devastating).
neg(black_people, catastrophic).
neg(black_people, disastrous).
neg(black_people, apocalyptic).
neg(black_people, life-ending).
neg(black_people, fatal).
neg(black_people, deadly).
neg(black_people, lethal).
neg(black_people, mortal).
neg(black_people, terminal).
neg(black_people, incurable).
neg(black_people, untreatable).
neg(black_people, irreversible).
neg(black_people, permanent).
neg(black_people, lasting).
neg(black_people, enduring).
neg(black_people, persistent).
neg(black_people, continual).
neg(black_people, continuous).
neg(black_people, unceasing).
neg(black_people, relentless).
neg(black_people, unabating).
neg(black_people, unyielding).
neg(black_people, unbreakable).
neg(black_people, indestructible).
neg(black_people, invincible).
neg(black_people, unconquerable).
neg(black_people, unbeatable).
neg(black_people, unsurpassable).
neg(black_people, unequaled).
neg(black_people, unmatched).
neg(black_people, unparalleled).
neg(black_people, incomparable).
neg(black_people, inimitable).
neg(black_people, matchless).
neg(black_people, peerless).
neg(black_people, unrivaled).
neg(black_people, supreme).
neg(black_people, paramount).
neg(black_people, preeminent).
neg(black_people, predominant).
neg(black_people, dominant).
neg(black_people, leading).
neg(black_people, foremost).
neg(black_people, principal).
neg(black_people, chief).
neg(black_people, main).
neg(black_people, primary).
neg(black_people, essential).
neg(black_people, fundamental).
neg(black_people, basic).
neg(black_people, rudimentary).
neg(black_people, simple).
neg(black_people, easy).
neg(black_people, effortless).
neg(black_people, painless).
neg(black_people, comfortable).
neg(black_people, enjoyable).
neg(black_people, pleasurable).
neg(black_people, delightful).
neg(black_people, charming).
neg(black_people, attractive).
neg(black_people, appealing).
neg(black_people, desirable).
neg(black_people, tempting).
neg(black_people, alluring).
neg(black_people, enchanting).
neg(black_people, captivating).
neg(black_people, bewitching).
neg(black_people, fascinating).
neg(black_people, spellbinding).
neg(black_people, mesmerizing).
neg(black_people, entrancing).
neg(black_people, ravishing).
neg(black_people, transporting).
neg(black_people, intoxicating).
neg(black_people, addictive).
neg(black_people, habit-forming).
neg(black_people, compulsive).
neg(black_people, obsessive).
neg(black_people, uncontrollable).
neg(black_people, irresistible).
neg(black_people, overwhelming).
neg(black_people, overpowering).
neg(black_people, devastating).
neg(black_people, catastrophic).
neg(black_people, disastrous).
neg(black_people, apocalyptic).
neg(black_people, life-ending).
neg(black_people, fatal).
neg(black_people, deadly).
neg(black_people, lethal).
neg(black_people, mortal).
neg(black_people, terminal).
neg(black_people, incurable).
neg(black_people, untreatable).
neg(black_people, irreversible).
neg(black_people, permanent).
neg(black_people, lasting).
neg(black_people, enduring).
neg(black_people, persistent).
neg(black_people, continual).
neg(black_people, continuous).
neg(black_people, unceasing).
neg(black_people, relentless).
neg(black_people, unabating).
neg(black_people, unyielding).
neg(black_people, unbreakable).
neg(black_people, indestructible).
neg(black_people, invincible).
neg(black_people, unconquerable).
neg(black_people, unbeatable).
neg(black_people, unsurpassable).
neg(black_people, unequaled).
neg(black_people, unmatched).
neg(black_people, unparalleled).
neg(black_people, incomparable).
neg(black_people, inimitable).
neg(black_people, matchless).
neg(black_people, peerless).
neg(black_people, unrivaled).
neg(black_people, supreme).
neg(black_people, paramount).
neg(black_people, preeminent).
neg(black_people, predominant).
neg(black_people, dominant).
neg(black_people, leading).
neg(black_people, foremost).
neg(black_people, principal).
neg(black_people, chief).
neg(black_people, main).
neg(black_people, primary).
neg(black_people, essential).
neg(black_people, fundamental).
neg(black_people, basic).
neg(black_people, rudimentary).
neg(black_people, simple).
neg(black_people, easy).
neg(black_people, effortless).
neg(black_people, painless).
neg(black_people, comfortable).
neg(black_people, enjoyable).
neg(black_people, pleasurable).
neg(black_people, delightful).
neg(black_people, charming).
neg(black_people, attractive).
neg(black_people, appealing).
neg(black_people, desirable).
neg(black_people, tempting).
neg(black_people, alluring).
neg(black_people, enchanting).
neg(black_people, captivating).
neg(black_people, bewitching).
neg(black_people, fascinating).
neg(black_people, spellbinding).
neg(black_people, mesmerizing).
neg(black_people, entrancing).
neg(black_people, ravishing).
neg(black_people, transporting).
neg(black_people, intoxicating).
neg(black_people, addictive).
neg(black_people, habit-forming).
neg(black_people, compulsive).
neg(black_people, obsessive).
neg(black_people, uncontrollable).
neg(black_people, irresistible).
neg(black_people, overwhelming).
neg(black_people, overpowering).
neg(black_people, devastating).
neg(black_people, catastrophic).
neg(black_people, disastrous).
neg(black_people, apocalyptic).
neg(black_people, life-ending).
neg(black_people, fatal).
neg(black_people, deadly).
neg(black_people, lethal).
neg(black_people, mortal).
neg(black_people, terminal).
neg(black_people, incurable).
neg(black_people, untreatable).
neg(black_people, irreversible).
neg(black_people, permanent).
neg(black_people, lasting).
neg(black_people, enduring).
neg(black_people, persistent).
neg(black_people, continual).
neg(black_people, continuous).
neg(black_people, unceasing).
neg(black_people, relentless).
neg(black_people, unabating).
neg(black_people, unyielding).
neg(black_people, unbreakable).
neg(black_people, indestructible).
neg(black_people, invincible).
neg(black_people, unconquerable).
neg(black_people, unbeatable).
neg(black_people, unsurpassable).
neg(black_people, unequaled).
neg(black_people, unmatched).
neg(black_people, unparalleled).
neg(black_people, incomparable).
neg(black_people, inimitable).
neg(black_people, matchless).
neg(black_people, peerless).
neg(black_people, unrivaled).
neg(black_people, supreme).
neg(black_people, paramount).
neg(black_people, preeminent).
neg(black_people, predominant).
neg(black_people, dominant).
neg(black_people, leading).
neg(black_people, foremost).
neg(black_people, principal).
neg(black_people, chief).
neg(black_people, main).
neg(black_people, primary).
neg(black_people, essential).
neg(black_people, fundamental).
neg(black_people, basic).
neg(black_people, rudimentary).
neg(black_people, simple).
neg(black_people, easy).
neg(black_people, effortless).
neg(black_people, painless).
neg(black_people, comfortable).
neg(black_people, enjoyable).
neg(black_people, pleasurable).
neg(black_people, delightful).
neg(black_people, charming).
neg(black_people, attractive).
neg(black_people, appealing).
neg(black_people, desirable).
neg(black_people, tempting).
neg(black_people, alluring).
neg(black_people, enchanting).
neg(black_people, captivating).
neg(black_people, bewitching).
neg(black_people, fascinating).
neg(black_people, spellbinding).
neg(black_people, mesmerizing).
neg(black_people, entrancing).
neg(black_people, ravishing).
neg(black_people, transporting).
neg(black_people, intoxicating).
neg(black_people, addictive).
neg(black_people, habit-forming).
neg(black_people, compulsive).
neg(black_people, obsessive).
neg(black_people, uncontrollable).
neg(black_people, irresistible).
neg(black_people, overwhelming).
neg(black_people, overpowering).
neg(black_people, devastating).
neg(black_people, catastrophic).
neg(black_people, disastrous).
neg(black_people, apocalyptic).
neg(black_people, life-ending).
neg(black_people, fatal).
neg(black_people, deadly).
neg(black_people, lethal).
neg(black_people, mortal).
neg(black_people, terminal).
neg(black_people, incurable).
neg(black_people, untreatable).
neg(black_people, irreversible).
neg(black_people, permanent).
neg(black_people, lasting).
neg(black_people, enduring).
neg(black_people, persistent).
neg(black_people, continual).
neg(black_people, continuous).
neg(black_people, unceasing).
neg(black_people, relentless).
neg(black_people, unabating).
neg(black_people, unyielding).
neg(black_people, unbreakable).
neg(black_people, indestructible).
neg(black_people, invincible).
neg(black_people, unconquerable).
neg(black_people, unbeatable).
neg(black_people, unsurpassable).
neg(black_people, unequaled).
neg(black_people, unmatched).
neg(black_people, unparalleled).
neg(black_people, incomparable).
neg(black_people, inimitable).
neg(black_people, matchless).
neg(black_people, peerless).
neg(black_people, unrivaled).
neg(black_people, supreme).
neg(black_people, paramount).
neg(black_people, preeminent).
neg(black_people, predominant).
neg(black_people, dominant).
neg(black_people, leading).
neg(black_people, foremost).
neg(black_people, principal).
neg(black_people, chief).
neg(black_people, main).
neg(black_people, primary).
neg(black_people, essential).
neg(black_people, fundamental).
neg(black_people, basic).
neg(black_people, rudimentary).
neg(black_people, simple).
neg(black_people, easy).
neg(black_people, effortless).
neg(black_people, painless).
neg(black_people, comfortable).
neg(black_people, enjoyable).
neg(black_people, pleasurable).
neg(black_people, delightful).
neg(black_people, charming).
neg(black_people, attractive).
neg(black_people, appealing).
neg(black_people, desirable).
neg(black_people, tempting).
neg(black_people, alluring).
neg(black_people, enchanting).
neg(black_people, captivating).
neg(black_people, bewitching).
neg(black_people, fascinating).
neg(black_people, spellbinding).
neg(black_people, mesmerizing).
neg(black_people, entrancing).
neg(black_people, ravishing).
neg(black_people, transporting).
neg(black_people, intoxicating).
neg(black_people, addictive).
neg(black_people, habit-forming).
neg(black_people, compulsive).
neg(black_people, obsessive).
neg(black_people, uncontrollable).
neg(black_people, irresistible).
neg(black_people, overwhelming).
neg(black_people, overpowering).
neg(black_people, devastating).
neg(black_people, catastrophic).
neg(black_people, disastrous).
neg(black_people, apocalyptic).
neg(black_people, life-ending).
neg(black_people, fatal).
neg(black_people, deadly).
neg(black_people, lethal).
neg(black_people, mortal).
neg(black_people, terminal).
neg(black_people, incurable).
neg(black_people, untreatable).
neg(black_people, irreversible).
neg(black_people, permanent).
neg(black_people, lasting).
neg(black_people, enduring).
neg(black_people, persistent).
neg(black_people, continual).
neg(black_people, continuous).
neg(black_people, unceasing).
neg(black_people, relentless).
neg(black_people, unabating).
neg(black_people, unyielding).
neg(black_people, unbreakable).
neg(black_people, indestructible).
neg(black_people, invincible).
neg(black_people, unconquerable).
neg(black_people, unbeatable).
neg(black_people, unsurpassable).
neg(black_people, unequaled).
neg(black_people, unmatched).
neg(black_people, unparalleled).
neg(black_people, incomparable).
neg(black_people, inimitable).
neg(black_people, matchless).
neg(black_people, peerless).
neg(black_people, unrivaled).
neg(black_people, supreme).
neg(black_people, paramount).
neg(black_people, preeminent).
neg(black_people, predominant).
neg(black_people, dominant).
neg(black_people, leading).
neg(black_people, foremost).
neg(black_people, principal).
neg(black_people, chief).
neg(black_people, main).
neg(black_people, primary).
neg(black_people, essential).
neg(black_people, fundamental).
neg(black_people, basic).
neg(black_people, rudimentary).
neg(black_people, simple).
neg(black_people, easy).
neg(black_people, effortless).
neg(black_people, painless).
neg(black_people, comfortable).
neg(black_people, enjoyable).
neg(black_people, pleasurable).
neg(black_people, delightful).
neg(black_people, charming).
neg(black_people, attractive).
neg(black_people, appealing).
neg(black_people, desirable).
neg(black_people, tempting).
neg(black_people, alluring).
neg(black_people, enchanting).
neg(black_people, captivating).
neg(black_people, bewitching).
neg(black_people, fascinating).
neg(black_people, spellbinding).
neg(black_people, mesmerizing).
neg(black_people, entrancing).
neg(black_people, ravishing).
neg(black_people, transporting).
neg(black_people, intoxicating).
neg(black_people, addictive).
neg(black_people, habit-forming).
neg(black_people, compulsive).
neg(black_people, obsessive).
neg(black_people, uncontrollable).
neg(black_people, irresistible).
neg(black_people, overwhelming).
neg(black_people, overpowering).
neg(black_people, devastating).
neg(black_people, catastrophic).
neg(black_people, disastrous).
neg(black_people, apocalyptic).
neg(black_people, life-ending).
neg(black_people, fatal).
neg(black_people, deadly).
neg(black_people, lethal).
neg(black_people, mortal).
neg(black_people, terminal).
neg(black_people, incurable).
neg(black_people, untreatable).
neg(black_people, irreversible).
neg(black_people, permanent).
neg(black_people, lasting).
neg(black_people, enduring).
neg(black_people, persistent).
neg(black_people, continual).
neg(black_people, continuous).
neg(black_people, unceasing).
neg(black_people, relentless).
neg(black_people, unabating).
neg(black_people, unyielding).
neg(black_people, unbreakable).
neg(black_people, indestructible).
neg(black_people, invincible).
neg(black_people, unconquerable).
neg(black_people, unbeatable).
neg(black_people, unsurpassable).
neg(black_people, unequaled).
neg(black_people, unmatched).
neg(black_people, unparalleled).
neg(black_people, incomparable).
neg(black_people, inimitable).
neg(black_people, matchless).
neg(black_people, peerless).
neg(black_people, unrivaled).
neg(black_people, supreme).
neg(black_people, paramount).
neg(black_people, preeminent).
neg(black_people, predominant).
neg(black_people, dominant).
neg(black_people, leading).
neg(black_people, foremost).
neg(black_people, principal).
neg(black_people, chief).
neg(black_people, main).
neg(black_people, primary).
neg(black_people, essential).
neg(black_people, fundamental).
neg(black_people, basic).
neg(black_people, rudimentary).
neg(black_people, simple).
neg(black_people, easy).
neg(black_people, effortless).
neg(black_people, painless).
neg(black_people, comfortable).
neg(black_people, enjoyable).
neg(black_people, pleasurable).
neg(black_people, delightful).
neg(black_people, charming).
neg(black_people, attractive).
neg(black_people, appealing).
neg(black_people, desirable).
neg(black_people, tempting).
neg(black_people, alluring).
neg(black_people, enchanting).
neg(black_people, captivating).
neg(black_people, bewitching).
neg(black_people, fascinating).
neg(black_people, spellbinding).
neg(black_people, mesmerizing).
neg(black_people, entrancing).
neg(black_people, ravishing).
neg(black_people, transporting).
neg(black_people, intoxicating).
neg(black_people, addictive).
neg(black_people, habit-forming).
neg(black_people, compulsive).
neg(black_people, obsessive).
neg(black_people, uncontrollable).
neg(black_people, irresistible).
neg(black_people, overwhelming).
neg(black_people, overpowering).
neg(black_people, devastating).
neg(black_people, catastrophic).
neg(black_people, disastrous).
neg(black_people, apocalyptic).
neg(black_people, life-ending).
neg(black_people, fatal).
neg(black_people, deadly).
neg(black_people, lethal).
neg(black_people, mortal).
neg(black_people, terminal).
neg(black_people, incurable).
neg(black_people, untreatable).
neg(black_people, irreversible).
neg(black_people, permanent).
neg(black_people, lasting).
neg(black_people, enduring).
neg(black_people, persistent).
neg(black_people, continual).
neg(black_people, continuous).
neg(black_people, unceasing).
neg(black_people, relentless).
neg(black_people, unabating).
neg(black_people, unyielding).
neg(black_people, unbreakable).
neg(black_people, indestructible).
neg(black_people, invincible).
neg(black_people, unconquerable).
neg(black_people, unbeatable).
neg(black_people, unsurpassable).
neg(black_people, unequaled).
neg(black_people, unmatched).
neg(black_people, unparalleled).
neg(black_people, incomparable).
neg(black_people, inimitable).
neg(black_people, matchless).
neg(black_people, peerless).
neg(black_people, unrivaled).
neg(black_people, supreme).
neg(black_people, paramount).
neg(black_people, preeminent).
neg(black_people, predominant).
neg(black_people, dominant).
neg(black_people, leading).
neg(black_people, foremost).
neg(black_people, principal).
neg(black_people, chief).
neg(black_people, main).
neg(black_people, primary).
neg(black_people, essential).
neg(black_people, fundamental).
neg(black_people, basic).
neg(black_people, rudimentary).
neg(black_people, simple).
neg(black_people, easy).
neg(black_people, effortless).
neg(black_people, painless).
neg(black_people, comfortable).
neg(black_people, enjoyable).
neg(black_people, pleasurable).
neg(black_people, delightful).
neg(black_people, charming).
neg(black_people, attractive).
neg(black_people, appealing).
neg(black_people, desirable).
neg(black_people, tempting).
neg(black_people, alluring).
neg(black_people, enchanting).
neg(black_people, captivating).
neg(black_people, bewitching).
neg(black_people, fascinating).
neg(black_people, spellbinding).
neg(black_people, mesmerizing).
neg(black_people, entrancing).
neg(black_people, ravishing).
neg(black_people, transporting).
neg(black_people, intoxicating).
neg(black_people, addictive).
neg(black_people, habit-forming).
neg(black_people, compulsive).
neg(black_people, obsessive).
neg(black_people, uncontrollable).
neg(black_people, irresistible).
neg(black_people, overwhelming).
neg(black_people, overpowering).
neg(black_people, devastating).
neg(black_people, catastrophic).
neg(black_people, disastrous).
neg(black_people, apocalyptic).
neg(black_people, life-ending).
neg(black_people, fatal).
neg(black_people, deadly).
neg(black_people, lethal).
neg(black_people, mortal).
neg(black_people, terminal).
neg(black_people, incurable).
neg(black_people, untreatable).
neg(black_people, irreversible).
neg(black_people, permanent).
neg(black_people, lasting).
neg(black_people, enduring).
neg(black_people, persistent).
neg(black_people, continual).
neg(black_people, continuous).
neg(black_people, unceasing).
neg(black_people, relentless).
neg(black_people, unabating).
neg(black_people, unyielding).
neg(black_people, unbreakable).
neg(black_people, indestructible).
neg(black_people, invincible).
neg(black_people, unconquerable).
neg(black_people, unbeatable).
neg(black_people, unsurpassable).
neg(black_people, unequaled).
neg(black_people, unmatched).
neg(black_people, unparalleled).
neg(black_people, incomparable).
neg(black_people, inimitable).
neg(black_people, matchless).
neg(black_people, peerless).
neg(black_people, unrivaled).
neg(black_people, supreme).
neg(black_people, paramount).
neg(black_people, preeminent).
neg(black_people, predominant).
neg(black_people, dominant).
neg(black_people, leading).
neg(black_people, foremost).
neg(black_people, principal).
neg(black_people, chief).
neg(black_people, main).
neg(black_people, primary).
neg(black_people, essential).
neg(black_people, fundamental).
neg(black_people, basic).
neg(black_people, rudimentary).
neg(black_people, simple).
neg(black_people, easy).
neg(black_people, effortless).
neg(black_people, painless).
neg(black_people, comfortable).
neg(black_people, enjoyable).
neg(black_people, pleasurable).
neg(black_people, delightful).
neg(black_people, charming).
neg(black_people, attractive).
neg(black_people, appealing).
neg(black_people, desirable).
neg(black_people, tempting).
neg(black_people, alluring).
neg(black_people, enchanting).
neg(black_people, captivating).
neg(black_people, bewitching).
neg(black_people, fascinating).
neg(black_people, spellbinding).
neg(black_people, mesmerizing).
neg(black_people, entrancing).
neg(black_people, ravishing).
neg(black_people, transporting).
neg(black_people, intoxicating).
neg(black_people, addictive).
neg(black_people, habit-forming).
neg(black_people, compulsive).
neg(black_people, obsessive).
neg(black_people, uncontrollable).
neg(black_people, irresistible).
neg(black_people, overwhelming).
neg(black_people, overpowering).
neg(black_people, devastating).
neg(black_people, catastrophic).
neg(black_people, disastrous).
neg(black_people, apocalyptic).
neg(black_people, life-ending).
neg(black_people, fatal).
neg(black_people, deadly).
neg(black_people, lethal).
neg(black_people, mortal).
neg(black_people, terminal).
neg(black_people, incurable).
neg(black_people, untreatable).
neg(black_people, irreversible).
neg(black_people, permanent).
neg(black_people, lasting).
neg(black_people, enduring).
neg(black_people, persistent).
neg(black_people, continual).
neg(black_people, continuous).
neg(black_people, unceasing).
neg(black_people, relentless).
neg(black_people, unabating).
neg(black_people, unyielding).
neg(black_people, unbreakable).
neg(black_people, indestructible).
neg(black_people, invincible).
neg(black_people, unconquerable).
neg(black_people, unbeatable).
neg(black_people, unsurpassable).
neg(black_people, unequaled).
neg(black_people, unmatched).
neg(black_people, unparalleled).
neg(black_people, incomparable).
neg(black_people, inimitable).
neg(black_people, matchless).
neg(black_people, peerless).
neg(black_people, unrivaled).
neg(black_people, supreme).
neg(black_people, paramount).
neg(black_people, preeminent).
neg(black_people, predominant).
neg(black_people, dominant).
neg(black_people, leading).
neg(black_people, foremost).
neg(black_people, principal).
neg(black_people, chief).
neg(black_people, main).
neg(black_people, primary).
neg(black_people, essential).
neg(black_people, fundamental).
neg(black_people, basic).
neg(black_people, rudimentary).
neg(black_people, simple).
neg(black_people, easy).
neg(black_people, effortless).
neg(black_people, painless).
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(opponent, prove(disney_fans, stronger_tendency(vote_bombing, most))).
pos(friend, video(dumbass_disney_comments)).
pos(video(dumbass_disney_comments), vote_bomb(disney_fans)).
pos(debate, win(pro_disney_side)).
neg(user, know(disney_debate)).

Section 2 - General relationships:

relation(opponent, prove).
relation(prove, disney_fans).
relation(disney_fans, stronger_tendency).
relation(stronger_tendency, vote_bombing).
relation(vote_bombing, most).
relation(friend, video).
relation(video, vote_bomb).
relation(debate, win).
relation(win, pro_disney_side).
relation(user, know).
relation(know, disney_debate).

Section 3 - Encoding:

prove(disney_fans, stronger_tendency(vote_bombing, most)) :- pos(opponent, prove(disney_fans, stronger_tendency(vote_bombing, most))).
vote_bomb(disney_fans) :- pos(friend, video(dumbass_disney_comments)), pos(video(dumbass_disney_comments), vote_bomb(disney_fans)).
win(pro_disney_side) :- pos(debate, win(pro_disney_side)).
know(disney_debate) :- neg(user, know(disney_debate)).
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(debate, extension).
pos(debate, simplicity).
pos(debate, challenge).
pos(challenge, acceptance).
pos(challenge, two_part_debate).
pos(challenge, humorous_purposes).
pos(challenge, actual_topic).
pos(challenge, topic_support).
pos(challenge, topic_debate).

% Section 2 - General relationships
relation(debate, extension).
relation(debate, simplicity).
relation(debate, challenge).
relation(challenge, acceptance).
relation(challenge, two_part_debate).
relation(challenge, humorous_purposes).
relation(challenge, actual_topic).
relation(challenge, topic_support).
relation(challenge, topic_debate).

% Section 3 - Encoding
debate_should_be_extended :- neg(debate, extension).
debate_should_not_be_extended :- pos(debate, extension).

challenge_is_accepted :- pos(challenge, acceptance).
challenge_is_not_accepted :- neg(challenge, acceptance).

two_part_debate_will_happen :- pos(challenge, two_part_debate).
two_part_debate_will_not_happen :- neg(challenge, two_part_debate).

humorous_debate :- pos(challenge, humorous_purposes).
serious_debate :- neg(challenge, humorous_purposes).

actual_topic_will_be_debated :- pos(challenge, actual_topic).
actual_topic_will_not_be_debated :- neg(challenge, actual_topic).

topic_will_be_supported :- pos(challenge, topic_support).
topic_will_not_be_supported :- neg(challenge, topic_support).

topic_will_be_debated :- pos(challenge, topic_debate).
topic_will_not_be_debated :- neg(challenge, topic_debate).

% Additional rules
compare(debate, X, Y) :- neg(debate, X), neg(debate, Y), debate != Y.
compare(challenge, X, Y) :- neg(challenge, X), neg(challenge, Y), challenge != Y.
```
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(lgbt, love).
pos(lgbt, family).
pos(lgbt, happiness).
pos(lgbt, acceptance).
pos(lgbt, equality).
pos(lgbt, human_rights).
pos(lgbt, freedom).
pos(lgbt, diversity).
pos(lgbt, inclusion).
pos(lgbt, tolerance).
pos(lgbt, respect).
pos(lgbt, understanding).
pos(lgbt, compassion).
pos(lgbt, empathy).
pos(lgbt, kindness).
pos(lgbt, generosity).
pos(lgbt, forgiveness).
pos(lgbt, patience).
pos(lgbt, perseverance).
pos(lgbt, resilience).
pos(lgbt, strength).
pos(lgbt, courage).
pos(lgbt, hope).
pos(lgbt, faith).
pos(lgbt, love).
pos(lgbt, joy).
pos(lgbt, peace).
pos(lgbt, life).

neg(religion, same_sex_relationships).
neg(religion, lgbt).
neg(religion, homosexuality).
neg(religion, gayness).
neg(religion, lesbianism).
neg(religion, bisexuality).
neg(religion, transgenderism).
neg(religion, queerness).
neg(religion, non-binary).
neg(religion, gender_nonconforming).
neg(religion, intersex).
neg(religion, asexual).
neg(religion, aromantic).
neg(religion, pansexual).
neg(religion, polysexual).
neg(religion, genderfluid).
neg(religion, genderqueer).
neg(religion, agender).
neg(religion, bigender).
neg(religion, trigender).
neg(religion, genderflux).
neg(religion, genderless).
neg(religion, non-gendered).
neg(religion, gender-neutral).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender-nonconforming).
neg(religion, gender-queer).
neg(religion, gender-variant).
neg(religion, gender-diverse).
neg(religion, gender-expansive).
neg(religion, gender-inclusive).
neg(religion, gender-affirming).
neg(religion, gender-fluid).
neg(religion, gender
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(god, existence).
pos(you, honesty).

Section 2 - General relationships:

relation(relativism, physical_world).
relation(subjectivity, physical_world).
relation(universe, knowledge).
relation(einstein, quantum_mechanics).
relation(newton, physics).
relation(quantum_mechanics, materialism).

Section 3 - Encoding:

relativism_is_bad_because :- neg(relativism,X).
subjectivity_is_bad_because :- neg(subjectivity,X).
universe_is_good_because :- pos(universe,X).
einstein_is_good_because :- pos(einstein,X).
newton_is_bad_because :- neg(newton,X).
quantum_mechanics_is_good_because :- pos(quantum_mechanics,X).
materialism_is_bad_because :- neg(materialism,X).

compare(relativism,X,Y) :- neg(relativism,X),neg(Y,X), relativism != Y.
compare(subjectivity,X,Y) :- neg(subjectivity,X),neg(Y,X), subjectivity != Y.
compare(universe,X,Y) :- neg(universe,X),neg(Y,X), universe != Y.
compare(einstein,X,Y) :- neg(einstein,X),neg(Y,X), einstein != Y.
compare(newton,X,Y) :- neg(newton,X),neg(Y,X), newton != Y.
compare(quantum_mechanics,X,Y) :- neg(quantum_mechanics,X),neg(Y,X), quantum_mechanics != Y.
compare(materialism,X,Y) :- neg(materialism,X),neg(Y,X), materialism != Y.
###DELIMITER###

###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(minecraft, good_loads).
neg(minecraft, lag).
neg(minecraft, crappy_laptop).
neg(minecraft, cheap_tablet).
pos(minecraft, very_good_runs).
pos(minecraft, seamless_plays).
neg(roblox, good_loads).
neg(roblox, long_loads).
neg(roblox, glitches).
pos(minecraft, awesome_graphics).
pos(minecraft, top_sold_videogame).

Section 2 - General relationships:

relation(minecraft, roblox).
relation(minecraft, loads).
relation(minecraft, graphics).
relation(minecraft, videogame).
relation(roblox, loads).
relation(roblox, glitches).
relation(roblox, graphics).
relation(roblox, videogame).

Section 3 - Encoding:

minecraft_is_good_because :- pos(minecraft,Y).
minecraft_is_bad_because :- neg(minecraft,Y).
roblox_is_good_because :- pos(roblox,Y).
roblox_is_bad_because :- neg(roblox,Y).
compare(minecraft,roblox,X) :- neg(minecraft,X),neg(roblox,X), minecraft != roblox.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = minecraft.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(libertarianism, non_aggression_principle).
pos(libertarianism, freedom).
pos(libertarianism, voluntary_trade).
pos(libertarianism, hierarchy).
pos(libertarianism, productivity).
pos(libertarianism, accountability).
pos(libertarianism, transparency).
pos(capitalism, hierarchy).
pos(capitalism, productivity).
pos(capitalism, accountability).
pos(capitalism, transparency).
pos(arts, capitalism).
pos(sciences, capitalism).
pos(culture, capitalism).

neg(government, non_aggression_principle).
neg(government, freedom).
neg(government, voluntary_trade).
neg(government, accountability).
neg(government, transparency).
neg(democracy, non_aggression_principle).
neg(democracy, freedom).
neg(communism, non_aggression_principle).
neg(communism, freedom).
neg(fascism, non_aggression_principle).
neg(fascism, freedom).
neg(hierarchy, equality).
neg(bad_luck, productivity).
neg(bad_luck, accountability).

Section 2 - General relationships:

relation(libertarianism, non_aggression_principle).
relation(libertarianism, government).
relation(libertarianism, democracy).
relation(libertarianism, communism).
relation(libertarianism, fascism).
relation(libertarianism, hierarchy).
relation(libertarianism, bad_luck).
relation(libertarianism, productivity).
relation(libertarianism, accountability).
relation(libertarianism, transparency).
relation(capitalism, hierarchy).
relation(capitalism, productivity).
relation(capitalism, accountability).
relation(capitalism, transparency).
relation(arts, capitalism).
relation(sciences, capitalism).
relation(culture, capitalism).

Section 3 - Encoding:

libertarianism_is_good_because :- pos(libertarianism, Y).
libertarianism_is_bad_because :- neg(libertarianism, Y).
compare(libertarianism,X,Y) :- neg(libertarianism,X),neg(Y,X), libertarianism != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = libertarianism.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(china, learning_from_past_mistakes).
pos(history, great_teacher).
neg(society, rectifying_problems).
neg(china, diplomatic_row).
neg(china, gaining_extra_territories).
neg(china, learning_from_past_actions).

Section 2 - General relationships:

relation(history, society).
relation(china, india).
relation(china, vietnam).
relation(china, war).

Section 3 - Encoding:

learning_from_past_mistakes(X) :- pos(X,Y).
not_learning_from_past_mistakes(X) :- neg(X,Y).
rectifying_problems(X) :- pos(X,Y).
not_rectifying_problems(X) :- neg(X,Y).
diplomatic_row(X) :- pos(X,Y).
not_diplomatic_row(X) :- neg(X,Y).
gaining_extra_territories(X) :- pos(X,Y).
not_gaining_extra_territories(X) :- neg(X,Y).
learning_from_past_actions(X) :- pos(X,Y).
not_learning_from_past_actions(X) :- neg(X,Y).
compare(china,X,Y) :- neg(china,X),neg(Y,X), china != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = china.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(opponent, many_questions).
pos(opponent, difficult_debate).
pos(opponent, contradiction_atheism_agnostic).
pos(opponent, contradiction_rules_of_debate).
neg(opponent, anticipated_questions).
neg(opponent, easy_debate).
neg(opponent, consistent_beliefs).
neg(opponent, followed_rules).
neg(agnostic, supernatural).
neg(agnostic, god).
neg(agnostic, ultimate_reality).
pos(agnostic, unknowable).
pos(agnostic, unknown).
pos(agnostic, merriam_webster_dictionary).
pos(agnostic, definition).
pos(agnostic, supernatural_question).
pos(agnostic, appropriate_response).
pos(agnostic, i_dont_know).
neg(agnostic, contradiction).
pos(atheist, supernatural).
pos(atheist, god).
pos(atheist, ultimate_reality).
neg(atheist, unknowable).
neg(atheist, unknown).
neg(atheist, merriam_webster_dictionary).
neg(atheist, definition).
neg(atheist, supernatural_question).
neg(atheist, appropriate_response).
neg(atheist, i_dont_know).
pos(atheist, contradiction).

Section 2 - General relationships:

relation(opponent, questions).
relation(opponent, debate).
relation(opponent, beliefs).
relation(opponent, rules).
relation(agnostic, supernatural).
relation(agnostic, god).
relation(agnostic, ultimate_reality).
relation(agnostic, merriam_webster_dictionary).
relation(agnostic, definition).
relation(agnostic, supernatural_question).
relation(agnostic, appropriate_response).
relation(agnostic, i_dont_know).
relation(atheist, supernatural).
relation(atheist, god).
relation(atheist, ultimate_reality).
relation(atheist, merriam_webster_dictionary).
relation(atheist, definition).
relation(atheist, supernatural_question).
relation(atheist, appropriate_response).
relation(atheist, i_dont_know).

Section 3 - Encoding:

opponent_is_good_because :- pos(opponent, Y).
opponent_is_bad_because :- neg(opponent, Y).
compare(opponent,X,Y) :- neg(opponent,X),neg(Y,X), opponent != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = opponent.
agnostic_is_good_because :- pos(agnostic, Y).
agnostic_is_bad_because :- neg(agnostic, Y).
compare(agnostic,X,Y) :- neg(agnostic,X),neg(Y,X), agnostic != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = agnostic.
atheist_is_good_because :- pos(atheist, Y).
atheist_is_bad_because :- neg(atheist, Y).
compare(atheist,X,Y) :- neg(atheist,X),neg(Y,X), atheist != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = atheist.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(consequentialism, good_outcome).
pos(consequentialism, good_consequence).
pos(consequentialism, morally_right_act).
pos(consequentialism, morally_right_omission).
pos(killing, good_for_brother).

Section 2 - General relationships:

relation(consequentialism, act).
relation(consequentialism, conduct).
relation(consequentialism, outcome).
relation(consequentialism, consequence).
relation(consequentialism, morality).
relation(killing, brother).
relation(killing, job).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(amanda_knox, innocent).
neg(amanda_knox, guilty).
pos(conti_vecchiotti_report, reasonable_doubt).
neg(double_dna_knife, reliability).

Section 2 - General relationships:

relation(amanda_knox, crime_scene).
relation(amanda_knox, murder).
relation(double_dna_knife, crime_scene).
relation(conti_vecchiotti_report, double_dna_knife).
relation(judge_hellman, conti_vecchiotti_report).

Section 3 - Encoding:

amanda_knox_is_innocent_because :- pos(amanda_knox, innocent).
amanda_knox_is_guilty_because :- neg(amanda_knox, innocent).
compare(amanda_knox, innocent, guilty) :- neg(amanda_knox, innocent), neg(amanda_knox, guilty).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(west, distance).
neg(distance, today).
pos(refugees, greece).
pos(refugees, eu).
pos(refugees, hungary).
pos(refugees, italy).
pos(ideology, distance).
pos(ideology, terrorist_attacks).
pos(ideology, paris).
pos(ideology, nicosia).
pos(ideology, western_europe).
pos(ideology, syria).
neg(distance, threat).
neg(state, borders).

Section 2 - General relationships:

relation(west, daesh).
relation(distance, today).
relation(refugees, syria).
relation(refugees, greece).
relation(refugees, eu).
relation(refugees, hungary).
relation(refugees, italy).
relation(ideology, distance).
relation(ideology, terrorist_attacks).
relation(ideology, paris).
relation(ideology, nicosia).
relation(ideology, western_europe).
relation(ideology, syria).
relation(distance, threat).
relation(state, borders).

Section 3 - Encoding:

west_is_good_because :- pos(west,Y).
west_is_bad_because :- neg(west,Y).
compare(west,X,Y) :- neg(west,X),neg(Y,X), west != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = west.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(republican_stances, republican_ideals).
pos(republicanism, citizenship).
pos(republicanism, popular_sovereignty).
pos(republicanism, state).
pos(republicanism, republic).
pos(tyranny, power).
pos(tyranny, one_person).
pos(tyranny, rule).
pos(tyranny, authority).
pos(tyranny, tyrant).

% Section 2 - General relationships
relation(republican_stances, republican_ideals).
relation(republicanism, citizenship).
relation(republicanism, popular_sovereignty).
relation(republicanism, state).
relation(republicanism, republic).
relation(tyranny, power).
relation(tyranny, one_person).
relation(tyranny, rule).
relation(tyranny, authority).
relation(tyranny, tyrant).

% Section 3 - Encoding
republican_ideals_are_good :- pos(republicanism,Y).
republican_ideals_are_bad :- neg(republicanism,Y).
tyranny_is_good :- pos(tyranny,Y).
tyranny_is_bad :- neg(tyranny,Y).
compare(republicanism,X,Y) :- neg(republicanism,X),neg(Y,X), republicanism != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = republicanism.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(water, human_throat).

Section 2 - General relationships:

relation(water, people).
relation(water, schools).
relation(water, sporting_events).
relation(water, grocery_stores).
relation(water, oceans).

Section 3 - Encoding:

neg(water, safe).
compare(water, X, Y) :- neg(water, X), neg(Y, X), water != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(gun, need).
neg(gun, protection).
pos(nunchucks, protection).
neg(gun, safety).
pos(gun, danger).
neg(gun, accessibility).
neg(gun, child_safety).
neg(gun, child_accident).

Section 2 - General relationships:

relation(gun, child).
relation(gun, accident).
relation(gun, injury).
relation(gun, death).
relation(gun, violence).
relation(gun, crime).
relation(gun, safety).
relation(gun, protection).
relation(gun, need).
relation(gun, accessibility).

Section 3 - Encoding:

gun_is_good_because :- pos(gun, Y).
gun_is_bad_because :- neg(gun, Y).
compare(gun,X,Y) :- neg(gun,X),neg(Y,X), gun != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gun.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(pie, good_nutrition).
pos(pie, good_taste).
pos(pie, easy_to_make).
pos(pie, affordable).
neg(pie, high_calories).
neg(pie, high_fat).
neg(pie, high_sugar).

Section 2 - General relationships:

relation(pie, nutrition).
relation(pie, taste).
relation(pie, making).
relation(pie, affordability).
relation(pie, calories).
relation(pie, fat).
relation(pie, sugar).

Section 3 - Encoding:

nutrition_is_good_because :- pos(pie, good_nutrition).
nutrition_is_bad_because :- neg(pie, high_calories), neg(pie, high_fat), neg(pie, high_sugar).
taste_is_good_because :- pos(pie, good_taste).
making_is_good_because :- pos(pie, easy_to_make).
affordability_is_good_because :- pos(pie, affordable).
compare(pie,X,Y) :- neg(pie,X),neg(Y,X), pie != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = pie.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(dress_code, poor_kids).
pos(dress_code, poor_kids).
pos(dress_code, confidential_information).
neg(dress_code, distracting_clothing).
neg(dress_code, bad_image).

Section 2 - General relationships:

relation(dress_code, poor_kids).
relation(dress_code, confidential_information).
relation(dress_code, distracting_clothing).
relation(dress_code, bad_image).

Section 3 - Encoding:

dress_code_is_good_because :- pos(dress_code, Y).
dress_code_is_bad_because :- neg(dress_code, Y).
compare(dress_code,X,Y) :- neg(dress_code,X),neg(Y,X), dress_code != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = dress_code.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(fetus, living).
pos(fetus, human).
pos(fetus, human_being).
pos(fetus, life).
pos(fetus, organism).
pos(fetus, offspring).
pos(fetus, unborn).
pos(fetus, embryo).
pos(fetus, birth).
pos(fetus, signaling).
pos(fetus, self_sustaining).
pos(fetus, processes).
pos(fetus, homeostasis).
pos(fetus, development).
pos(fetus, growth).
pos(fetus, response).
pos(fetus, breathing).
pos(fetus, movement).
pos(fetus, stimulation).
pos(fetus, lung).
pos(fetus, oxygen).
pos(fetus, biogenesis).
pos(fetus, reproduction).
pos(fetus, kind).
pos(fetus, human_kind).
pos(fetus, species).
pos(fetus, human_species).
pos(fetus, equal_protection).
pos(fetus, protection).
pos(fetus, law).
pos(fetus, jurisdiction).
pos(fetus, murder).
pos(fetus, death).
pos(fetus, life_form).
pos(fetus, life_forms).
pos(fetus, life_span).
pos(fetus, life_cycle).
pos(fetus, life_expectancy).
pos(fetus, life_quality).
pos(fetus, life_value).
pos(fetus, life_meaning).
pos(fetus, life_purpose).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
pos(fetus, life_mystery).
pos(fetus, life_journey).
pos(fetus, life_experience).
pos(fetus, life_lesson).
pos(fetus, life_gift).
pos(fetus, life_blessing).
pos(fetus, life_miracle).
pos(fetus, life_wonder).
pos(fetus, life_beauty).
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(evolution, creationism).
pos(evolution, abiogenesis).

Section 2 - General relationships:

relation(evolution, abiogenesis).
relation(evolution, creationism).
relation(evolution, second_law_of_thermodynamics).
relation(evolution, water).
relation(evolution, rock).
relation(evolution, living_bodies).
relation(evolution, molecules).
relation(evolution, reactions).

Section 3 - Encoding:

evolution_is_valid :- pos(evolution,X).
evolution_is_invalid :- neg(evolution,X).
compare(evolution,X,Y) :- neg(evolution,X),neg(Y,X), evolution != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = evolution.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(hillary_clinton, honest).
neg(hillary_clinton, lying).
pos(hillary_clinton, telling_a_falsehood).
pos(hillary_clinton, human_error).
pos(hillary_clinton, honest_mistake).
pos(hillary_clinton, one_server).
pos(hillary_clinton, multiple_machines).
pos(hillary_clinton, cash_down_payment).
pos(hillary_clinton, mortgage).
pos(hillary_clinton, president_of_the_usa).
pos(hillary_clinton, white_house).
pos(hillary_clinton, senate).
pos(hillary_clinton, wealthy).

Section 2 - General relationships:

relation(hillary_clinton, james_comey).
relation(hillary_clinton, fbi).
relation(hillary_clinton, server).
relation(hillary_clinton, tarmac).
relation(hillary_clinton, child).
relation(hillary_clinton, poem).
relation(hillary_clinton, campaigning).
relation(hillary_clinton, bill_clinton).
relation(hillary_clinton, white_house).
relation(hillary_clinton, senate).

Section 3 - Encoding:

hillary_is_honest_because :- pos(hillary_clinton, Y).
hillary_is_lying_because :- neg(hillary_clinton, Y).
compare(hillary_clinton,X,Y) :- neg(hillary_clinton,X),neg(Y,X), hillary_clinton != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = hillary_clinton.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(palestine, easy_issue).
pos(israelis, historical_connection).
pos(israelis, west_bank).
pos(netanyahu, trial_and_error).
pos(israel, security_issues).
pos(israel, restrictions).
pos(israel, safety).
pos(israel, citizens).
pos(israel, concessions).
neg(israel, peace).
neg(israel, attacks).
neg(palestine, country).
pos(israel, un).
pos(israel, right).

Section 2 - General relationships:

relation(palestine, israelis).
relation(israelis, west_bank).
relation(netanyahu, trial_and_error).
relation(israel, palestinian_terrorists).
relation(israel, buses).
relation(israel, civilians).
relation(israel, nations).
relation(israel, enemies).
relation(israel, attacks).
relation(israel, hawks).
relation(israel, citizens).
relation(palestine, country).
relation(israel, un).

Section 3 - Encoding:

israelis_feel_historical_connection :- pos(israelis, historical_connection).
west_bank_is_important_to_israelis :- pos(israelis, west_bank).
trial_and_error_is_the_only_way :- pos(netanyahu, trial_and_error).
israel_has_security_issues :- pos(israel, security_issues).
israel_has_restrictions :- pos(israel, restrictions).
israel_is_safe :- pos(israel, safety).
israel_is_willing_to_make_concessions :- pos(israel, concessions).
peace_has_not_ended_attacks :- neg(israel, peace).
attacks_have_happened_on_israel :- neg(israel, attacks).
palestine_was_not_a_country :- neg(palestine, country).
israel_was_founded_in_1948 :- pos(israel, un).
israel_has_the_right_to_the_country :- pos(israel, right).

compare(israel,X,Y) :- neg(israel,X),neg(Y,X), israel != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = israel.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(sikhism, judaism).
neg(sikhism, homosexuality).
pos(christians, tanakh).
pos(christians, nontestament).
pos(bhagat baini, shakti).
neg(bhagat baini, intellect).
neg(devotee baini, life).
neg(devotee baini, mouth).
neg(devotee baini, sexual_organs).
neg(dasam granth, lust).

Section 2 - General relationships:

relation(sikhism, judaism).
relation(sikhism, homosexuality).
relation(christians, tanakh).
relation(christians, nontestament).
relation(bhagat baini, shakti).
relation(bhagat baini, intellect).
relation(devotee baini, life).
relation(devotee baini, mouth).
relation(devotee baini, sexual_organs).
relation(dasam granth, lust).

Section 3 - Encoding:

sikhism_is_same_as_judaism :- pos(sikhism, judaism).
sikhism_is_not_same_as_judaism :- neg(sikhism, judaism).
sikhism_bans_homosexuality :- neg(sikhism, homosexuality).
sikhism_does_not_ban_homosexuality :- pos(sikhism, homosexuality).
christians_ignore_tanakh :- pos(christians, tanakh).
christians_ignore_nontestament :- pos(christians, nontestament).
bhagat_baini_warns_against_lust :- neg(bhagat baini, intellect).
bhagat_baini_warns_against_hedonism :- neg(devotee baini, life).
bhagat_baini_warns_against_sexual_immorality :- neg(devotee baini, sexual_organs).
dasam_granth_warns_against_lust :- neg(dasam granth, lust).
compare(sikhism, judaism,X) :- neg(sikhism,X),neg(judaism,X), sikhism != judaism.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = sikhism.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(veganism, health).
neg(animal_products, health).

% Section 2 - General relationships
relation(veganism, animal_products).
relation(human_species, food).
relation(food_industry, health).

% Section 3 - Encoding
veganism_is_better_because :- pos(veganism, X).
veganism_is_worse_because :- neg(veganism, X).
compare(veganism, X, Y) :- neg(veganism, X), neg(Y, X), veganism != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = veganism.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(pewdiepie, commentary).
neg(pewdiepie, commentary).
pos(pewdiepie, fan base).
pos(pewdiepie, viewers).
pos(pewdiepie, money).
pos(pewdiepie, fame).
pos(pewdiepie, views).
pos(pewdiepie, attention).
pos(pewdiepie, job).
pos(pewdiepie, effort).
pos(pewdiepie, motivation).
pos(pewdiepie, equipment).
pos(pewdiepie, time).
pos(pewdiepie, editing).
pos(pewdiepie, uploads).
pos(pewdiepie, holidays).
pos(pewdiepie, tour).
pos(pewdiepie, channel).
pos(pewdiepie, subscribers).

Section 2 - General relationships:

relation(pewdiepie, commentary).
relation(pewdiepie, fan base).
relation(pewdiepie, viewers).
relation(pewdiepie, money).
relation(pewdiepie, fame).
relation(pewdiepie, views).
relation(pewdiepie, attention).
relation(pewdiepie, job).
relation(pewdiepie, effort).
relation(pewdiepie, motivation).
relation(pewdiepie, equipment).
relation(pewdiepie, time).
relation(pewdiepie, editing).
relation(pewdiepie, uploads).
relation(pewdiepie, holidays).
relation(pewdiepie, tour).
relation(pewdiepie, channel).
relation(pewdiepie, subscribers).

Section 3 - Encoding:

pewdiepie_is_good_because :- pos(pewdiepie, Y).
pewdiepie_is_bad_because :- neg(pewdiepie, Y).
compare(pewdiepie,X,Y) :- neg(pewdiepie,X),neg(Y,X), pewdiepie != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = pewdiepie.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(abortion, immoral).
neg(abortion, moral).
pos(abortion, wrong).
neg(abortion, right).
pos(abortion, should_not_be_done).
neg(abortion, should_be_done).
pos(abortion, rape).
pos(abortion, incest).
pos(abortion, exceptions).
pos(abortion, conception).
pos(abortion, pro).
pos(masterkage, pro).
pos(masterkage, burden_of_proof).
pos(wiploc, con).
pos(wiploc, good).
pos(wiploc, lots_of_people).
pos(wiploc, should_abort).
pos(requiring_abortions, bad).
pos(forbidding_abortions, bad).
pos(debate, three_round).
pos(debate, four_rounds).
pos(debate, con_initiated).
pos(debate, con_won_t_argue).
pos(debate, pro_will_argue_first).
pos(debate, pro_will_argue_last).
pos(debate, round_1).
pos(debate, round_2).
pos(debate, round_3).
pos(debate, round_4).
pos(debate, pro_not_committed).
pos(debate, setup).
pos(debate, cancel).
pos(debate, start_again).
pos(debate, characters).
pos(debate, hours).
pos(debate, voters).
pos(debate, score).
pos(debate, citations).
pos(debate, sources).
pos(debate, logic).

Section 2 - General relationships:

relation(abortion, immoral).
relation(abortion, moral).
relation(abortion, wrong).
relation(abortion, right).
relation(abortion, should_not_be_done).
relation(abortion, should_be_done).
relation(abortion, rape).
relation(abortion, incest).
relation(abortion, exceptions).
relation(abortion, conception).
relation(abortion, pro).
relation(masterkage, pro).
relation(masterkage, burden_of_proof).
relation(wiploc, con).
relation(wiploc, good).
relation(wiploc, lots_of_people).
relation(wiploc, should_abort).
relation(requiring_abortions, bad).
relation(forbidding_abortions, bad).
relation(debate, three_round).
relation(debate, four_rounds).
relation(debate, con_initiated).
relation(debate, con_won_t_argue).
relation(debate, pro_will_argue_first).
relation(debate, pro_will_argue_last).
relation(debate, round_1).
relation(debate, round_2).
relation(debate, round_3).
relation(debate, round_4).
relation(debate, pro_not_committed).
relation(debate, setup).
relation(debate, cancel).
relation(debate, start_again).
relation(debate, characters).
relation(debate, hours).
relation(debate, voters).
relation(debate, score).
relation(debate, citations).
relation(debate, sources).
relation(debate, logic).

Section 3 - Encoding:

abortion_is_immoral :- pos(abortion,Y).
abortion_is_moral :- neg(abortion,Y).
compare(abortion,X,Y) :- neg(abortion,X),neg(Y,X), abortion != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(cause, another_cause).
neg(first_cause, cause).
pos(first_cause, first).

Section 2 - General relationships:

relation(first_cause, cause).
relation(opponent, first_cause).
relation(opponent, point).
relation(opposition, debate).

Section 3 - Encoding:

first_cause_is_caused :- pos(first_cause, Y).
first_cause_is_not_caused :- neg(first_cause, Y).
opponent_has_point :- pos(opponent, Y).
opponent_has_no_point :- neg(opponent, Y).
opposition_is_winning :- pos(opposition, Y).
opposition_is_not_winning :- neg(opposition, Y).
compare(first_cause,X,Y) :- neg(first_cause,X),neg(Y,X), first_cause != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = first_cause.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(modernization, tibetan_culture).
pos(tibetan_culture, way_of_life).
pos(way_of_life, simple).
pos(way_of_life, rustic).
pos(way_of_life, rural).
neg(china, tibetan_culture).
pos(china, industrious).

Section 2 - General relationships:

relation(tibetan_culture, modernization).
relation(tibetan_culture, china).
relation(tibetan_culture, way_of_life).
relation(china, industrious).

Section 3 - Encoding:

tibetan_culture_is_good_because :- pos(tibetan_culture,Y).
tibetan_culture_is_bad_because :- neg(tibetan_culture,Y).
modernization_is_good_because :- pos(modernization,Y).
modernization_is_bad_because :- neg(modernization,Y).
compare(tibetan_culture,X,Y) :- neg(tibetan_culture,X),neg(Y,X), tibetan_culture != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = tibetan_culture.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(x_wing, star_wars_fan_base).
pos(star_wars, star_wars_fan_base).
pos(x_wing, rebel_alliance).
pos(star_trek_fans, enterprise).
pos(star_wars_franchise, star_wars_fans).
pos(x_wing, hyperdrive_rating_1).
pos(millenium_falcon, hyperdrive_rating_0.5).
pos(x_wing, consumables_1_week).
pos(x_wing, storage_pods).
pos(x_wing, shields).

neg(x_wing, only_a_make).
neg(star_wars_franchise, less_valuable_than_star_trek).
neg(star_wars_franchise, less_popular_than_star_trek).
neg(x_wing, unable_to_travel_long_distances).
neg(x_wing, unable_to_overwhelm_enterprise_shields).
neg(x_wing, unable_to_destroy_enterprise).
neg(x_wing, unable_to_flee_in_warp).

Section 2 - General relationships:

relation(x_wing, star_wars).
relation(enterprise, star_trek).
relation(x_wing, star_wars_fan_base).
relation(enterprise, star_trek_fans).
relation(star_wars_franchise, star_wars_fans).
relation(x_wing, hyperdrive).
relation(millenium_falcon, hyperdrive).
relation(x_wing, consumables).
relation(x_wing, storage_pods).
relation(x_wing, shields).
relation(x_wing, enterprise).

Section 3 - Encoding:

x_wing_is_good_because :- pos(x_wing, Y).
x_wing_is_bad_because :- neg(x_wing, Y).
compare(x_wing,X,Y) :- neg(x_wing,X),neg(Y,X), x_wing != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = x_wing.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(suburbs, safer).
pos(city, public_transportation).
pos(public_transportation, cheap).
pos(public_transportation, less_co2).
pos(city, cheaper).

% Section 2 - General relationships
relation(suburbs, city).
relation(city, suburbs).
relation(public_transportation, travel_time).
relation(public_transportation, fuel).
relation(public_transportation, global_warming).
relation(city, housing_costs).
relation(city, childcare_costs).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(con, credible_examples).
neg(con, supernatural_things).
neg(con, miracles).
neg(con, scientifically_inexplicable_things).
neg(con, warm_fuzzies).
neg(con, unlikely_things).
neg(con, things_went_in_favor).

pos(atheists, supernatural_things).
pos(credible_people, supernatural_things).

Section 2 - General relationships:

relation(con, atheists).
relation(con, credible_people).
relation(con, miracles).
relation(con, supernatural_things).
relation(con, warm_fuzzies).
relation(con, unlikely_things).
relation(con, things_went_in_favor).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(mccarthy, good_coach).
pos(lombardi, good_coach).
pos(belichick, good_coach).
neg(patriots, good_team).
pos(brady, good_qb).
pos(brady, rookie).
pos(patriots, superbowl_win).
pos(patriots, touchdown).

% Section 2 - General relationships
relation(mccarthy, coach).
relation(lombardi, coach).
relation(belichick, coach).
relation(patriots, team).
relation(brady, qb).
relation(brady, rookie).
relation(patriots, superbowl).
relation(patriots, touchdown).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(spongebob_squarepants, beating_patrick_star).
neg(opponent, humor).
neg(opponent, creativity).
pos(opponent, scientific_principles).
pos(humor, irony).
pos(creativity, out_of_the_box).
neg(opponent, out_of_the_box).
pos(humor, taking_sbsp_debate_seriously).
pos(opponent, taking_sbsp_debate_seriously).
pos(opponent, unfunny).

Section 2 - General relationships:

relation(spongebob_squarepants, patrick_star).
relation(opponent, humor).
relation(opponent, creativity).
relation(opponent, scientific_principles).
relation(humor, irony).
relation(creativity, out_of_the_box).
relation(opponent, out_of_the_box).
relation(humor, taking_sbsp_debate_seriously).
relation(opponent, taking_sbsp_debate_seriously).
relation(opponent, unfunny).

Section 3 - Encoding:

spongebob_squarepants_is_good_because :- pos(spongebob_squarepants, Y).
spongebob_squarepants_is_bad_because :- neg(spongebob_squarepants, Y).
opponent_is_good_because :- pos(opponent, Y).
opponent_is_bad_because :- neg(opponent, Y).
compare(spongebob_squarepants, opponent, X) :- neg(spongebob_squarepants, X), neg(opponent, X), spongebob_squarepants != opponent.
compare(opponent, spongebob_squarepants, X) :- neg(opponent, X), neg(opponent, X), opponent != spongebob_squarepants.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(gun_control, safe).
pos(gun_control, safe).
pos(tyrannical_government, oppression).
neg(gun_control, deterrent).
neg(women, armed).
pos(criminals, armed).
neg(victims, self_defense).
pos(criminals, zip_guns).

Section 2 - General relationships:

relation(gun_control, tyrannical_government).
relation(gun_control, crime).
relation(gun_control, women).
relation(gun_control, criminals).
relation(gun_control, victims).
relation(gun_control, self_defense).
relation(gun_control, zip_guns).

Section 3 - Encoding:

gun_control_is_good_because :- pos(gun_control, Y).
gun_control_is_bad_because :- neg(gun_control, Y).
compare(gun_control,X,Y) :- neg(gun_control,X),neg(Y,X), gun_control != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gun_control.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(abortion, good_mother_nature).
neg(abortion, affordable).
pos(abortion, deaths).

Section 2 - General relationships:

relation(abortion, sex).
relation(abortion, deaths).
relation(abortion, money).
relation(abortion, mother_nature).

Section 3 - Encoding:

abortion_is_bad_because :- neg(abortion,Y).
abortion_is_good_because :- pos(abortion,Y).
compare(abortion,X,Y) :- neg(abortion,X),neg(Y,X), abortion != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = abortion.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(government, criminal_organization).
neg(government, criminal_organization).
pos(sealand, government).
neg(sealand, criminal_organization).

Section 2 - General relationships:

relation(government, criminal_organization).
relation(sealand, government).

Section 3 - Encoding:

government_is_criminal_organization :- pos(government, criminal_organization).
government_is_not_criminal_organization :- neg(government, criminal_organization).
sealand_is_government :- pos(sealand, government).
sealand_is_not_criminal_organization :- neg(sealand, criminal_organization).
compare(government,X,Y) :- neg(government,X),neg(Y,X), government != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = government.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(hitler, flying_abilities).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos(hitler, working_more_explosive_bombs).
pos(hitler, creation_of_the_atomic_bomb).
pos(hitler, threaten_the_germans_to_stand_down).
pos(hitler, superior_flying_abilities).
pos(hitler, ignorant_of_the_weapons).
pos(hitler, obessed_in_wiping_out_the_jews_and_others).
pos(hitler, rally_a_nation).
pos(hitler, enemy).
pos(hitler, portaryed_as_the_jews_and_bolsheviks).
pos(hitler, cut_german_army_down).
pos(hitler, destroy_u_boats).
pos(hitler, take_full_blame_for_the_war).
pos(hitler, pay_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rotation_system).
pos(hitler, jews_and_others).
pos(hitler, atomic_bomb).
pos(hitler, u_boats).
pos(hitler, rebuilding_germany).
pos(hitler, paying_back_allied_countries).
pos(hitler, economic_collapse).
pos(hitler, stirct_regulations).
pos(hitler, rally_the_people).
pos(hitler, blame_loss_of_world_war_one).
pos(hitler, increase_the_strength_of_german_nation).
pos
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(learning_second_language, benefits).
neg(learning_second_language, time).
neg(learning_second_language, effort).
neg(everyone, good_at_learning_second_language).
neg(force_kids_to_learn_language, fair).
neg(force_kids_to_learn_language, child_strengths_in_other_areas).
neg(child_fails_at_language, child_forte).
neg(child_fails_at_language, child_devotes_more_time_to_language).
neg(child_fails_at_language, child_has_love_of_mathematics).
neg(child_fails_at_language, child_has_no_plans_of_travelling_abroad).
neg(child_fails_at_language, child_diverts_time_away_from_true_passion).
neg(child_fails_at_language, child_seeks_goal_that_nation_thinks_is_necessary).
neg(child_fails_at_language, child_seeks_goal_that_nation_thinks_is_fun).
neg(make_students_learn_language_up_until_end_of_high_school, fair).
neg(make_students_learn_language_up_until_end_of_high_school, negative_connotations).

Section 2 - General relationships:

relation(learning_second_language, benefits).
relation(learning_second_language, time).
relation(learning_second_language, effort).
relation(everyone, good_at_learning_second_language).
relation(force_kids_to_learn_language, fair).
relation(force_kids_to_learn_language, child_strengths_in_other_areas).
relation(child_fails_at_language, child_forte).
relation(child_fails_at_language, child_devotes_more_time_to_language).
relation(child_fails_at_language, child_has_love_of_mathematics).
relation(child_fails_at_language, child_has_no_plans_of_travelling_abroad).
relation(child_fails_at_language, child_diverts_time_away_from_true_passion).
relation(child_fails_at_language, child_seeks_goal_that_nation_thinks_is_necessary).
relation(child_fails_at_language, child_seeks_goal_that_nation_thinks_is_fun).
relation(make_students_learn_language_up_until_end_of_high_school, fair).
relation(make_students_learn_language_up_until_end_of_high_school, negative_connotations).

Section 3 - Encoding:

learning_second_language_is_good_because :- pos(learning_second_language, Y).
learning_second_language_is_bad_because :- neg(learning_second_language, Y).
force_kids_to_learn_language_is_good_because :- pos(force_kids_to_learn_language, Y).
force_kids_to_learn_language_is_bad_because :- neg(force_kids_to_learn_language, Y).
child_fails_at_language_is_good_because :- pos(child_fails_at_language, Y).
child_fails_at_language_is_bad_because :- neg(child_fails_at_language, Y).
make_students_learn_language_up_until_end_of_high_school_is_good_because :- pos(make_students_learn_language_up_until_end_of_high_school, Y).
make_students_learn_language_up_until_end_of_high_school_is_bad_because :- neg(make_students_learn_language_up_until_end_of_high_school, Y).
compare(learning_second_language,X,Y) :- neg(learning_second_language,X),neg(Y,X), learning_second_language != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = learning_second_language.
compare(force_kids_to_learn_language,X,Y) :- neg(force_kids_to_learn_language,X),neg(Y,X), force_kids_to_learn_language != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = force_kids_to_learn_language.
compare(child_fails_at_language,X,Y) :- neg(child_fails_at_language,X),neg(Y,X), child_fails_at_language != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = child_fails_at_language.
compare(make_students_learn_language_up_until_end_of_high_school,X,Y) :- neg(make_students_learn_language_up_until_end_of_high_school,X),neg(Y,X), make_students_learn_language_up_until_end_of_high_school != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = make_students_learn_language_up_until_end_of_high_school.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(i, best_debater).
neg(i, wrong).
neg(i, snarky_personality).

Section 2 - General relationships:

relation(i, ddo).
relation(i, debate).
relation(i, win_loss_record).
relation(i, elo_rating).

Section 3 - Encoding:

i_is_good_because :- pos(i, Y).
i_is_bad_because :- neg(i, Y).
compare(i,X,Y) :- neg(i,X),neg(Y,X), i != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = i.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(prostitution, legal_protection).
neg(prostitution, violent_black_market).
pos(alcohol_prohibition, legal_protection).
neg(alcohol_prohibition, violent_gang_culture).
pos(alcoholics_anonymous, reducing_alcohol_consumption).
pos(free_market, creating_jobs_and_wealth).
neg(prostitution, individual_choice).
pos(poverty, outlawing_prostitution).
pos(prostitution, sexual_slavery).
pos(prostitution, legal_protections).
neg(prostitution, violent_black_market).

% Section 2 - General relationships
relation(prostitution, government).
relation(prostitution, pimps).
relation(prostitution, clients).
relation(prostitution, poverty).
relation(prostitution, free_market).
relation(prostitution, sexual_slavery).
relation(prostitution, police).
relation(prostitution, women).
relation(prostitution, alcoholics_anonymous).
relation(prostitution, alcohol_prohibition).

% Section 3 - Encoding
prostitution_is_good_because :- pos(prostitution, Y).
prostitution_is_bad_because :- neg(prostitution, Y).
compare(prostitution,X,Y) :- neg(prostitution,X),neg(Y,X), prostitution != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = prostitution.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(world, end_in_2012).
pos(mayans, civilization).
neg(mayans, beliefs).
pos(god, omniscient).
pos(people, planning).
neg(people, planning_for_worst_things).
pos(people, planning_for_worst_things_because_bogus).
pos(iran, country).
neg(iran, likes_us).
pos(egypt, country).
neg(egypt, likes_us).
pos(nuclear_bombs, weapons).
pos(nuclear_bombs, can_blow_us_up).
pos(blue_star, star).
pos(new_presidents, people).
pos(new_presidents, can_start_anarchy).
pos(anarchy, can_spread_throughout_the_world).

Section 2 - General relationships:

relation(world, end_in_2012).
relation(mayans, civilization).
relation(mayans, beliefs).
relation(god, omniscient).
relation(people, planning).
relation(people, planning_for_worst_things).
relation(people, planning_for_worst_things_because_bogus).
relation(iran, country).
relation(iran, likes_us).
relation(egypt, country).
relation(egypt, likes_us).
relation(nuclear_bombs, weapons).
relation(nuclear_bombs, can_blow_us_up).
relation(blue_star, star).
relation(new_presidents, people).
relation(new_presidents, can_start_anarchy).
relation(anarchy, can_spread_throughout_the_world).

Section 3 - Encoding:

world_is_not_going_to_end_in_2012 :- neg(world, end_in_2012).
world_is_going_to_end_in_2012 :- pos(world, end_in_2012).
mayans_are_a_civilization :- pos(mayans, civilization).
mayans_are_not_a_civilization :- neg(mayans, civilization).
god_is_omniscient :- pos(god, omniscient).
god_is_not_omniscient :- neg(god, omniscient).
people_are_planning :- pos(people, planning).
people_are_not_planning :- neg(people, planning).
people_are_planning_for_worst_things :- pos(people, planning_for_worst_things).
people_are_not_planning_for_worst_things :- neg(people, planning_for_worst_things).
people_are_planning_for_worst_things_because_bogus :- pos(people, planning_for_worst_things_because_bogus).
people_are_not_planning_for_worst_things_because_bogus :- neg(people, planning_for_worst_things_because_bogus).
iran_is_a_country :- pos(iran, country).
iran_is_not_a_country :- neg(iran, country).
iran_likes_us :- pos(iran, likes_us).
iran_does_not_like_us :- neg(iran, likes_us).
egypt_is_a_country :- pos(egypt, country).
egypt_is_not_a_country :- neg(egypt, country).
egypt_likes_us :- pos(egypt, likes_us).
egypt_does_not_like_us :- neg(egypt, likes_us).
nuclear_bombs_are_weapons :- pos(nuclear_bombs, weapons).
nuclear_bombs_are_not_weapons :- neg(nuclear_bombs, weapons).
nuclear_bombs_can_blow_us_up :- pos(nuclear_bombs, can_blow_us_up).
nuclear_bombs_cannot_blow_us_up :- neg(nuclear_bombs, can_blow_us_up).
blue_star_is_a_star :- pos(blue_star, star).
blue_star_is_not_a_star :- neg(blue_star, star).
new_presidents_are_people :- pos(new_presidents, people).
new_presidents_are_not_people :- neg(new_presidents, people).
new_presidents_can_start_anarchy :- pos(new_presidents, can_start_anarchy).
new_presidents_cannot_start_anarchy :- neg(new_presidents, can_start_anarchy).
anarchy_can_spread_throughout_the_world :- pos(anarchy, can_spread_throughout_the_world).
anarchy_cannot_spread_throughout_the_world :- neg(anarchy, can_spread_throughout_the_world).

compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = world.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = mayans.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = people.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = iran.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = egypt.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = nuclear_bombs.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = blue_star.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = new_presidents.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = anarchy.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(technology, job_growth).
pos(technology, access_to_safer_employment).
pos(technology, new_employment_opportunities).
pos(technology, new_markets).
pos(technology, employment_through_managing).
pos(technology, employment_through_selling).
pos(technology, secure_high_quality_jobs).
pos(technology, more_jobs).
pos(technology, essential_for_youths).
pos(access_to_technology, meet_such_demands).

Section 2 - General relationships:

relation(technology, job_market).
relation(technology, employment).
relation(technology, youths).
relation(technology, unemployment).
relation(technology, underemployment).
relation(technology, informal_employment).
relation(technology, economic_growth).
relation(technology, population).
relation(technology, vulnerable_employment).
relation(technology, labour_market).
relation(technology, sub-saharan_africa).
relation(technology, madagascar).
relation(technology, tanzania).
relation(technology, men).
relation(technology, women).
relation(technology, ilo).
relation(technology, work4youth).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(argentine_british_relations, trade).
pos(argentine_british_relations, travel).
pos(argentine_british_relations, sporting_competitions).
pos(argentine_british_relations, immigration_issues).
pos(argentine_british_relations, plaza_de_mayo).
pos(argentine_british_relations, casa_posada).
pos(argentine_british_relations, latin_american_nations).
pos(argentine_british_relations, british_bank_hsbc).
pos(argentine_british_relations, ignorance).
pos(argentine_british_relations, arrogance).

Section 2 - General relationships:

relation(argentine_british_relations, british).
relation(argentine_british_relations, argentina).
relation(argentine_british_relations, south_america).
relation(argentine_british_relations, eu).
relation(argentine_british_relations, plaza_de_mayo).
relation(argentine_british_relations, casa_posada).
relation(argentine_british_relations, latin_american_nations).
relation(argentine_british_relations, british_bank_hsbc).
relation(argentine_british_relations, ignorance).
relation(argentine_british_relations, arrogance).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(sons_of_solidarity, sound_mind).
neg(sons_of_solidarity, mental_illness).
neg(sons_of_solidarity, religious_views).
pos(sons_of_solidarity, free_speech).
neg(sons_of_solidarity, hate_speech).
neg(sons_of_solidarity, mentally_ill).
neg(sons_of_solidarity, life).
neg(sons_of_solidarity, second_amendment).
neg(sons_of_solidarity, true_freedom_of_speech).
neg(sons_of_solidarity, freedom_of_religion).
neg(sons_of_solidarity, right_to_life).

% Section 2 - General relationships
relation(sons_of_solidarity, leben).
relation(sons_of_solidarity, death_penalty).
relation(sons_of_solidarity, abortion).
relation(sons_of_solidarity, euthanasia).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:
neg(bryan_mullins, roast_game).
neg(roast_game, vatican).
pos(family_member, children).
pos(pope, christians).

Section 2 - General relationships:
relation(bryan_mullins, roast_game).
relation(roast_game, vatican).
relation(family_member, children).
relation(pope, christians).

Section 3 - Encoding:
bryan_mullins_is_bad_because :- neg(bryan_mullins, Y).
bryan_mullins_is_good_because :- pos(bryan_mullins, Y).
roast_game_is_bad_because :- neg(roast_game, Y).
roast_game_is_good_because :- pos(roast_game, Y).
vatican_is_bad_because :- neg(vatican, Y).
vatican_is_good_because :- pos(vatican, Y).
family_member_is_bad_because :- neg(family_member, Y).
family_member_is_good_because :- pos(family_member, Y).
pope_is_bad_because :- neg(pope, Y).
pope_is_good_because :- pos(pope, Y).
compare(bryan_mullins,X,Y) :- neg(bryan_mullins,X),neg(Y,X), bryan_mullins != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = bryan_mullins.
compare(roast_game,X,Y) :- neg(roast_game,X),neg(Y,X), roast_game != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = roast_game.
compare(vatican,X,Y) :- neg(vatican,X),neg(Y,X), vatican != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = vatican.
compare(family_member,X,Y) :- neg(family_member,X),neg(Y,X), family_member != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = family_member.
compare(pope,X,Y) :- neg(pope,X),neg(Y,X), pope != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = pope.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(ideal_nclb, good_intentions).
neg(ideal_nclb, good_for_education).
neg(ideal_nclb, good_for_welfare).
pos(nclb, good_intentions).
neg(nclb, ideal).
pos(nclb, tests).
pos(nclb, grade_levels).
pos(nclb, teachers).
pos(nclb, students).
pos(nclb, ay).
pos(nclb, learning).
pos(nclb, bar).
pos(nclb, america).
pos(nclb, education_system).
pos(schools, facebook).
pos(schools, myspace).
pos(schools, music).
pos(schools, internet).
pos(schools, ay).
pos(schools, tests).
pos(schools, apathy).
pos(teachers, nclb).
pos(teachers, grade_levels).
pos(teachers, students).
pos(teachers, ability).
pos(teachers, willingness).
pos(students, nclb).
pos(students, grade_levels).
pos(students, teachers).
pos(students, ability).
pos(students, willingness).
pos(america, justice).
pos(america, fairness).

Section 2 - General relationships:

relation(ideal_nclb, nclb).
relation(ideal_nclb, education).
relation(ideal_nclb, welfare).
relation(ideal_nclb, schools).
relation(ideal_nclb, students).
relation(ideal_nclb, teachers).
relation(ideal_nclb, america).
relation(nclb, education).
relation(nclb, welfare).
relation(nclb, schools).
relation(nclb, students).
relation(nclb, teachers).
relation(nclb, america).
relation(schools, students).
relation(schools, teachers).
relation(schools, america).
relation(teachers, students).
relation(teachers, america).
relation(students, america).

Section 3 - Encoding:

ideal_nclb_is_good_because :- pos(ideal_nclb, Y).
ideal_nclb_is_bad_because :- neg(ideal_nclb, Y).
nclb_is_good_because :- pos(nclb, Y).
nclb_is_bad_because :- neg(nclb, Y).
compare(ideal_nclb,X,Y) :- neg(ideal_nclb,X),neg(Y,X), ideal_nclb != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = ideal_nclb.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(disabled, benefits).
neg(obese, benefits).
pos(obese, self_pity).
pos(obese, greed).
neg(obese, exercise).
neg(obese, healthy_diet).
pos(obese, gluttony).
pos(obese, laziness).
pos(disabled, unfortunate).
pos(disabled, deserving).

Section 2 - General relationships:

relation(obese, disabled).
relation(obese, benefits).
relation(obese, privileges).
relation(obese, taxpayer).
relation(obese, government).
relation(obese, public_transport).
relation(obese, seats).
relation(obese, food_resources).
relation(obese, world).
relation(obese, health).
relation(obese, third_world).
relation(obese, children).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.

obese_is_bad_because :- neg(obese,Y).
obese_is_good_because :- pos(obese,Y).
disabled_is_good_because :- pos(disabled,Y).
disabled_is_bad_because :- neg(disabled,Y).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(birt, minimum_wage).
pos(minimum_wage, unskilled_workers).
neg(minimum_wage, skilled_workers).
neg(minimum_wage, pressure_from_minimum_wage_workers).
pos(robots, reality).
pos(minimum_wage, development_and_implementation_of_robots).
neg(small_businesses, mechanical_labor).
neg(small_businesses, layoff_workers).
neg(small_businesses, close_down_business).
neg(small_businesses, eliminate_jobs).
neg(hyperinflation, good).
neg(hyperinflation, horrible).
pos(hyperinflation, civil_war).
pos(hyperinflation, revolutionary_war).
pos(hyperinflation, crises).
pos(hyperinflation, difficulty_for_the_government_to_tax_the_population).
pos(hyperinflation, rapid_and_continuing_increase_in_nominal_prices).
pos(hyperinflation, rapid_and_continuing_increase_in_the_supply_of_money).
pos(hyperinflation, nominal_cost_of_goods).
pos(raising_minimum_wage, layoffs).
pos(raising_minimum_wage, inflation).
pos(inflation, prices).
pos(inflation, currency_cost).
pos(raising_minimum_wage, hyperinflation).
pos(hyperinflation, bad_for_the_economy).

Section 2 - General relationships:

relation(birt, minimum_wage).
relation(minimum_wage, unskilled_workers).
relation(minimum_wage, skilled_workers).
relation(minimum_wage, pressure_from_minimum_wage_workers).
relation(minimum_wage, robots).
relation(robots, reality).
relation(minimum_wage, development_and_implementation_of_robots).
relation(small_businesses, mechanical_labor).
relation(small_businesses, layoff_workers).
relation(small_businesses, close_down_business).
relation(small_businesses, eliminate_jobs).
relation(hyperinflation, good).
relation(hyperinflation, horrible).
relation(hyperinflation, civil_war).
relation(hyperinflation, revolutionary_war).
relation(hyperinflation, crises).
relation(hyperinflation, difficulty_for_the_government_to_tax_the_population).
relation(hyperinflation, rapid_and_continuing_increase_in_nominal_prices).
relation(hyperinflation, rapid_and_continuing_increase_in_the_supply_of_money).
relation(hyperinflation, nominal_cost_of_goods).
relation(raising_minimum_wage, layoffs).
relation(raising_minimum_wage, inflation).
relation(inflation, prices).
relation(inflation, currency_cost).
relation(raising_minimum_wage, hyperinflation).
relation(hyperinflation, bad_for_the_economy).

Section 3 - Encoding:

birt_is_good_because :- pos(birt,Y).
birt_is_bad_because :- neg(birt,Y).
minimum_wage_is_good_because :- pos(minimum_wage,Y).
minimum_wage_is_bad_because :- neg(minimum_wage,Y).
robots_are_good_because :- pos(robots,Y).
robots_are_bad_because :- neg(robots,Y).
small_businesses_are_good_because :- pos(small_businesses,Y).
small_businesses_are_bad_because :- neg(small_businesses,Y).
hyperinflation_is_good_because :- pos(hyperinflation,Y).
hyperinflation_is_bad_because :- neg(hyperinflation,Y).
raising_minimum_wage_is_good_because :- pos(raising_minimum_wage,Y).
raising_minimum_wage_is_bad_because :- neg(raising_minimum_wage,Y).
compare(birt,X,Y) :- neg(birt,X),neg(Y,X), birt != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = birt.
compare(minimum_wage,X,Y) :- neg(minimum_wage,X),neg(Y,X), minimum_wage != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = minimum_wage.
compare(robots,X,Y) :- neg(robots,X),neg(Y,X), robots != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = robots.
compare(small_businesses,X,Y) :- neg(small_businesses,X),neg(Y,X), small_businesses != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = small_businesses.
compare(hyperinflation,X,Y) :- neg(hyperinflation,X),neg(Y,X), hyperinflation != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = hyperinflation.
compare(raising_minimum_wage,X,Y) :- neg(raising_minimum_wage,X),neg(Y,X), raising_minimum_wage != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = raising_minimum_wage.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(capital_punishment, eye_for_an_eye).
neg(government, hypercritical).
neg(capital_punishment, brutalised_society).
neg(capital_punishment, negative).
neg(capital_punishment, innocent_people).

pos(capital_punishment, positive).
pos(capital_punishment, inspiring).

Section 2 - General relationships:

relation(capital_punishment, eye_for_an_eye).
relation(capital_punishment, government).
relation(capital_punishment, society).
relation(capital_punishment, united_states).
relation(capital_punishment, criminals).

Section 3 - Encoding:

capital_punishment_is_bad_because :- neg(capital_punishment, Y).
capital_punishment_is_good_because :- pos(capital_punishment, Y).
compare(capital_punishment,X,Y) :- neg(capital_punishment,X),neg(Y,X), capital_punishment != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = capital_punishment.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(ballet, sport).
pos(apple, fruit).
pos(potato, fruit).
pos(ballet, art).
pos(singing, art).
pos(painting, art).
pos(sculpturing, art).

Section 2 - General relationships:

relation(ballet, sport).
relation(apple, potato).
relation(ballet, art).
relation(singing, art).
relation(painting, art).
relation(sculpturing, art).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(sex_before_marriage, appropriate).
pos(sex, creator_of_life).

Section 2 - General relationships:

relation(sex_before_marriage, bible).
relation(sex_before_marriage, united_states).
relation(sex_before_marriage, pregnancy).
relation(sex_before_marriage, abortion).
relation(sex_before_marriage, unwanted_pregnancies).

Section 3 - Encoding:

sex_before_marriage_is_not_okay_because :- neg(sex_before_marriage,Y).
sex_before_marriage_is_okay_because :- pos(sex_before_marriage,Y).
compare(sex_before_marriage,X,Y) :- neg(sex_before_marriage,X),neg(Y,X), sex_before_marriage != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = sex_before_marriage.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(communism, writer).
pos(communism, painter).
pos(communism, poet).
pos(communism, playwright).
pos(communism, artist).
pos(communism, critic).
pos(communism, culture).
pos(communism, catalyst).
pos(communism, design).
pos(communism, freedom).
pos(communism, starvation).
pos(communism, exploitation).
neg(communism, capitalism).
neg(communism, fascism).
neg(communism, lawyer).
neg(communism, businessman).
neg(communism, sappy_greeting_cards).
neg(communism, pathetic_slogans).
neg(communism, trade).
neg(communism, disinterest).
neg(communism, tragedy).
neg(communism, post_industrialist_world).
neg(communism, jobs).
neg(communism, money).
neg(communism, class).
neg(communism, state).
neg(communism, atrophy).
neg(communism, marxist_leninism).
neg(communism, socialist_state).
neg(communism, ussr).
neg(communism, china).
neg(communism, north_korea).
neg(communism, cuba).
neg(communism, vietnam).
neg(communism, laos).
neg(communism, bills).
neg(communism, super_powerful_nation).
neg(communism, ignorant).
neg(communism, source).

Section 2 - General relationships:

relation(communism, writer).
relation(communism, painter).
relation(communism, poet).
relation(communism, playwright).
relation(communism, artist).
relation(communism, critic).
relation(communism, culture).
relation(communism, catalyst).
relation(communism, design).
relation(communism, freedom).
relation(communism, starvation).
relation(communism, exploitation).
relation(communism, capitalism).
relation(communism, fascism).
relation(communism, lawyer).
relation(communism, businessman).
relation(communism, sappy_greeting_cards).
relation(communism, pathetic_slogans).
relation(communism, trade).
relation(communism, disinterest).
relation(communism, tragedy).
relation(communism, post_industrialist_world).
relation(communism, jobs).
relation(communism, money).
relation(communism, class).
relation(communism, state).
relation(communism, atrophy).
relation(communism, marxist_leninism).
relation(communism, socialist_state).
relation(communism, ussr).
relation(communism, china).
relation(communism, north_korea).
relation(communism, cuba).
relation(communism, vietnam).
relation(communism, laos).
relation(communism, bills).
relation(communism, super_powerful_nation).
relation(communism, ignorant).
relation(communism, source).

Section 3 - Encoding:

communism_is_good_because :- pos(communism,Y).
communism_is_bad_because :- neg(communism,Y).
compare(communism,X,Y) :- neg(communism,X),neg(Y,X), communism != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = communism.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(gift_economy, bartering_system).
pos(gift_economy, money_less_economy).
pos(gift_economy, service).
pos(gift_economy, shop).
pos(gift_economy, system).
pos(gift_economy, abuse).
pos(gift_economy, penalty).

Section 2 - General relationships:

relation(gift_economy, bartering_system).
relation(gift_economy, money_less_economy).
relation(gift_economy, service).
relation(gift_economy, shop).
relation(gift_economy, system).
relation(gift_economy, abuse).
relation(gift_economy, penalty).

Section 3 - Encoding:

gift_economy_is_good_because :- pos(gift_economy, Y).
gift_economy_is_bad_because :- neg(gift_economy, Y).
compare(gift_economy,X,Y) :- neg(gift_economy,X),neg(Y,X), gift_economy != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gift_economy.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(pro, argument).
pos(pro, definition).
pos(life, dream).
pos(experiences, objective_reality).
pos(dimension, energy).
pos(dimension, matter).
pos(universe, reality).
pos(god, dream).
pos(god, existence).

Section 2 - General relationships:

relation(pro, argument).
relation(life, dream).
relation(experiences, objective_reality).
relation(dimension, energy).
relation(dimension, matter).
relation(universe, reality).
relation(god, dream).
relation(god, existence).

Section 3 - Encoding:

pro_is_good_because :- pos(pro, Y).
pro_is_bad_because :- neg(pro, Y).
compare(pro,X,Y) :- neg(pro,X),neg(Y,X), pro != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = pro.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(god, existence).
pos(big_bang_theory, existence).
pos(fossils, existence).
pos(erosion, existence).
pos(cave_paintings, existence).
neg(holocaust, positive_thing).

% Section 2 - General relationships
relation(god, existence).
relation(big_bang_theory, existence).
relation(fossils, existence).
relation(erosion, existence).
relation(cave_paintings, existence).
relation(holocaust, positive_thing).

% Section 3 - Encoding
god_exists :- pos(god, existence).
god_does_not_exist :- neg(god, existence).
big_bang_theory_explains_existence :- pos(big_bang_theory, existence).
fossils_prove_existence :- pos(fossils, existence).
erosion_proves_existence :- pos(erosion, existence).
cave_paintings_prove_existence :- pos(cave_paintings, existence).
holocaust_is_positive :- pos(holocaust, positive_thing).

% Additional rules
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(donald_trump, conservative_libertarian_views).
pos(donald_trump, political_incorrectness).
pos(donald_trump, unique_opinions).
pos(donald_trump, cocky_attitude).
pos(donald_trump, defying_people).

Section 2 - General relationships:

relation(donald_trump, president).
relation(donald_trump, usa).
relation(donald_trump, american_status_quo).

Section 3 - Encoding:

donald_trump_is_good_because :- pos(donald_trump, Y).
donald_trump_is_bad_because :- neg(donald_trump, Y).
compare(donald_trump,X,Y) :- neg(donald_trump,X),neg(Y,X), donald_trump != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = donald_trump.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(predators, best_sequel_film).
pos(predators, good_storyline).
pos(predators, raw_feeling).
pos(arnold_schwarzenegger, best_actor).
neg(sequels, good_storyline).
neg(sequels, raw_feeling).
neg(sequels, good_characters).
neg(sequels, good_scenes).
neg(alien_vs_predators, good_plot).

Section 2 - General relationships:

relation(predators, sequels).
relation(predators, alien_vs_predators).
relation(arnold_schwarzenegger, predators).

Section 3 - Encoding:

predators_is_good_because :- pos(predators, Y).
predators_is_bad_because :- neg(predators, Y).
sequels_is_good_because :- pos(sequels, Y).
sequels_is_bad_because :- neg(sequels, Y).
compare(predators, X, Y) :- neg(predators, X), neg(Y, X), predators != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = predators.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(fcc, warning_labels).
pos(fda, warning_labels).
pos(mpaa, warning_labels).
pos(fcc, warning_labels).
pos(warning_labels, inform_viewers).
pos(warning_labels, reliable).
pos(warning_labels, credible).
pos(warning_labels, trustworthy).
pos(warning_labels, truthful).
pos(warning_labels, unbiased).
pos(warning_labels, competent).
pos(warning_labels, professional).
pos(warning_labels, sensationalize).

Section 2 - General relationships:

relation(fcc, news_programs).
relation(fda, food).
relation(mpaa, movies).
relation(fcc, late_night_tv_programs).
relation(warning_labels, tv_programs).
relation(warning_labels, tv_news_programs).
relation(warning_labels, viewers).
relation(warning_labels, tv_channels).
relation(warning_labels, news_outlets).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(united_states, respect).
pos(united_states, freedom).

% Section 2 - General relationships
relation(united_states, pledge_of_allegiance).
relation(united_states, flag).
relation(united_states, respect).
relation(united_states, freedom).
relation(united_states, america).
relation(united_states, texas).
relation(united_states, president_obama).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(atheist, no_god).
pos(atheist, evolution).
neg(atheist, god).
pos(christian_church, god).
pos(christian_church, churches).
pos(atheist, monument).
pos(atheist, copycat).
pos(atheist, serving_satan).

Section 2 - General relationships:

relation(atheist, satanist).
relation(atheist, god).
relation(atheist, christian_church).
relation(atheist, temples).
relation(atheist, religion).
relation(atheist, practice).
relation(atheist, belief).

Section 3 - Encoding:

atheist_is_good_because :- pos(atheist,Y).
atheist_is_bad_because :- neg(atheist,Y).
compare(atheist,X,Y) :- neg(atheist,X),neg(Y,X), atheist != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = atheist.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(munger, good_teacher).
neg(munger, good_ib_teacher).
neg(munger, good_grading).
neg(munger, good_satisfaction).

Section 2 - General relationships:

relation(munger, survey).
relation(munger, students).
relation(munger, grades).
relation(munger, effort).
relation(munger, work).

Section 3 - Encoding:

munger_is_bad_teacher :- neg(munger, X).
munger_is_good_teacher :- pos(munger, X).
compare(munger,X,Y) :- neg(munger,X),neg(Y,X), munger != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = munger.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(animals, inferior_to_humans).
pos(science, all_be_all).
pos(science, explained_everything).
pos(human_ignorance, greater_than_human_knowledge).
pos(humans, colonized_moon).
pos(humans, colonized_mars).
pos(humans, know_future).
pos(webpage, credibility).
pos(animal_kingdom, recognized).
pos(humans, belong_to_animal_kingdom).
pos(humans, space_flight).
pos(aliens, see_humans_as_different_kingdom).
pos(new_tool, illuminate_difference).
pos(humans, superior_to_animals).
pos(humans, invented_cat_wigs).

Section 2 - General relationships:

relation(animals, humans).
relation(science, everything).
relation(human_ignorance, human_knowledge).
relation(humans, earth).
relation(humans, moon).
relation(humans, mars).
relation(humans, future).
relation(webpage, credibility).
relation(animal_kingdom, humans).
relation(humans, space_flight).
relation(aliens, humans).
relation(new_tool, difference).
relation(humans, animals).
relation(humans, cat_wigs).

Section 3 - Encoding:

animals_are_inferior_to_humans :- pos(animals, inferior_to_humans).
science_is_not_the_end_all_be_all :- neg(science, all_be_all).
science_has_not_explained_everything :- neg(science, explained_everything).
human_ignorance_is_greater_than_human_knowledge :- pos(human_ignorance, greater_than_human_knowledge).
we_have_not_colonized_the_moon_nor_mars :- neg(humans, colonized_moon), neg(humans, colonized_mars).
we_cannot_know_the_future :- neg(humans, know_future).
webpage_credibility_is_destroyed :- neg(webpage, credibility).
animal_kingdom_was_not_recognized :- neg(animal_kingdom, recognized).
humans_may_not_belong_to_animal_kingdom :- neg(humans, belong_to_animal_kingdom).
humans_are_the_only_species_with_space_flight :- pos(humans, space_flight).
aliens_see_humans_as_a_different_kingdom :- pos(aliens, see_humans_as_different_kingdom).
new_tool_would_illuminate_the_difference :- pos(new_tool, illuminate_difference).
humans_are_superior_to_animals :- pos(humans, superior_to_animals).
humans_are_superior_to_animals_because_we_invented_cat_wigs :- pos(humans, invented_cat_wigs).
###DELIMITER###
 ```asp
pos(social_media, saved_millions_of_lives).
pos(social_media, rescued_lost_hiker).
pos(social_media, brought_ex_workers_to_the_attention_of_the_government).
pos(social_media, rescued_ex_workers).

relation(google_maps, lost_hiker).
relation(twitter, lost_hiker).
relation(facebook, lost_hiker).
relation(photograph, ex_workers).
relation(government, ex_workers).

social_media_is_important_because :- pos(social_media, Y).
compare(social_media,X,Y) :- neg(social_media,X),neg(Y,X), social_media != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = social_media.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(atonement_of_sins, immoral_doctrine).
pos(atonement_of_sins, illogical_doctrine).
pos(jesus_christ, gospel).
pos(jesus_christ, god).
pos(god, love).
pos(god, holiness).
pos(god, righteousness).
pos(god, law).
pos(god, punishment).
pos(god, death).
pos(god, separation).
pos(god, sin).
pos(god, grace).
pos(god, faith).
pos(jesus, god).
pos(jesus, flesh).
pos(jesus, divine).
pos(jesus, human).
pos(jesus, law).
pos(jesus, sacrifice).
pos(jesus, father).
pos(jesus, value).
pos(jesus, cleanse).
pos(jesus, offense).
pos(salvation, grace).
pos(salvation, faith).
pos(salvation, law).
pos(salvation, jesus).
pos(salvation, flesh).
pos(salvation, fulfillment).
pos(salvation, death).
pos(gospel_of_jesus, astounding_event).
pos(gospel_of_jesus, human_history).
pos(gospel_of_jesus, logical).
pos(gospel_of_jesus, necessary).

neg(atonement_of_sins, moral_doctrine).
neg(atonement_of_sins, logical_doctrine).
neg(opponent, comprehension).
neg(opponent, gospel).
neg(god, sinner).
neg(god, law_breaker).
neg(god, punishment).
neg(god, death).
neg(god, separation).
neg(god, sin).
neg(god, grace).
neg(god, faith).
neg(jesus, sin).
neg(jesus, law).
neg(jesus, sacrifice).
neg(jesus, value).
neg(jesus, cleanse).
neg(jesus, offense).
neg(salvation, grace).
neg(salvation, faith).
neg(salvation, law).
neg(salvation, jesus).
neg(salvation, flesh).
neg(salvation, fulfillment).
neg(salvation, death).
neg(gospel_of_jesus, astounding_event).
neg(gospel_of_jesus, human_history).
neg(gospel_of_jesus, logical).
neg(gospel_of_jesus, necessary).

Section 2 - General relationships:

relation(atonement_of_sins, opponent).
relation(atonement_of_sins, gospel).
relation(opponent, comprehension).
relation(opponent, gospel).
relation(god, love).
relation(god, holiness).
relation(god, righteousness).
relation(god, law).
relation(god, punishment).
relation(god, death).
relation(god, separation).
relation(god, sin).
relation(god, grace).
relation(god, faith).
relation(jesus, god).
relation(jesus, flesh).
relation(jesus, divine).
relation(jesus, human).
relation(jesus, law).
relation(jesus, sacrifice).
relation(jesus, father).
relation(jesus, value).
relation(jesus, cleanse).
relation(jesus, offense).
relation(salvation, grace).
relation(salvation, faith).
relation(salvation, law).
relation(salvation, jesus).
relation(salvation, flesh).
relation(salvation, fulfillment).
relation(salvation, death).
relation(gospel_of_jesus, astounding_event).
relation(gospel_of_jesus, human_history).
relation(gospel_of_jesus, logical).
relation(gospel_of_jesus, necessary).

Section 3 - Encoding:

atonement_of_sins_is_immoral_because :- pos(atonement_of_sins,Y).
atonement_of_sins_is_logical_because :- pos(atonement_of_sins,Y).
opponent_fails_because :- neg(opponent,Y).
god_is_love_because :- pos(god,Y).
god_is_holy_because :- pos(god,Y).
god_is_righteous_because :- pos(god,Y).
god_has_law_because :- pos(god,Y).
god_has_punishment_because :- pos(god,Y).
god_has_death_because :- pos(god,Y).
god_has_separation_because :- pos(god,Y).
god_has_sin_because :- pos(god,Y).
god_has_grace_because :- pos(god,Y).
god_has_faith_because :- pos(god,Y).
jesus_is_god_because :- pos(jesus,Y).
jesus_is_flesh_because :- pos(jesus,Y).
jesus_is_divine_because :- pos(jesus,Y).
jesus_is_human_because :- pos(jesus,Y).
jesus_has_law_because :- pos(jesus,Y).
jesus_has_sacrifice_because :- pos(jesus,Y).
jesus_has_father_because :- pos(jesus,Y).
jesus_has_value_because :- pos(jesus,Y).
jesus_has_cleanse_because :- pos(jesus,Y).
jesus_has_offense_because :- pos(jesus,Y).
salvation_is_grace_because :- pos(salvation,Y).
salvation_is_faith_because :- pos(salvation,Y).
salvation_is_law_because :- pos(salvation,Y).
salvation_is_jesus_because :- pos(salvation,Y).
salvation_is_flesh_because :- pos(salvation,Y).
salvation_is_fulfillment_because :- pos(salvation,Y).
salvation_is_death_because :- pos(salvation,Y).
gospel_of_jesus_is_astounding_event_because :- pos(gospel_of_jesus,Y).
gospel_of_jesus_is_human_history_because :- pos(gospel_of_jesus,Y).
gospel_of_jesus_is_logical_because :- pos(gospel_of_jesus,Y).
gospel_of_jesus_is_necessary_because :- pos(gospel_of_jesus,Y).

compare(atonement_of_sins,X,Y) :- neg(atonement_of_sins,X),neg(Y,X), atonement_of_sins != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = atonement_of_sins.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(australian_republic, accommodate_states).
pos(australian_republic, remain_monarchies).
pos(professor_george_winterton, federal_republican_constitution).
pos(federal_republican_constitution, accommodate_status).
pos(federal_republican_constitution, monarchal_states).
pos(federal_republican_constitution, republican_states).
pos(states, adopt_republican_mode).

Section 2 - General relationships:

relation(australian_republic, states).
relation(states, commonwealth).
relation(states, monarchies).
relation(professor_george_winterton, states).
relation(federal_republican_constitution, states).
relation(states, republican_mode).

Section 3 - Encoding:

accommodate_states :- pos(australian_republic, accommodate_states).
remain_monarchies :- pos(australian_republic, remain_monarchies).
federal_republican_constitution :- pos(professor_george_winterton, federal_republican_constitution).
accommodate_status :- pos(federal_republican_constitution, accommodate_status).
monarchal_states :- pos(federal_republican_constitution, monarchal_states).
republican_states :- pos(federal_republican_constitution, republican_states).
adopt_republican_mode :- pos(states, adopt_republican_mode).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(marriage, one_man_and_one_woman).
neg(gay_marriage, procreation).
pos(government, couples_private_life).
neg(gay_marriage, government_job).
pos(marriage, privilege).
neg(marriage, right_to_happiness).
pos(children, mother_and_father).
neg(gay_couple, child_rearing).
neg(gay_marriage, society_survival).

Section 2 - General relationships:

relation(gay_marriage, society).
relation(gay_marriage, country).
relation(homosexuals, procreation).
relation(society, procreation).
relation(religion, marriage).
relation(government, marriage).

Section 3 - Encoding:

marriage_is_one_man_and_one_woman :- pos(marriage, one_man_and_one_woman).
gay_marriage_is_not_procreation :- neg(gay_marriage, procreation).
government_respects_couples_private_life :- pos(government, couples_private_life).
gay_marriage_is_not_government_job :- neg(gay_marriage, government_job).
marriage_is_a_privilege :- pos(marriage, privilege).
marriage_is_not_a_right_to_happiness :- neg(marriage, right_to_happiness).
children_need_mother_and_father :- pos(children, mother_and_father).
gay_couple_can_raise_a_child :- neg(gay_couple, child_rearing).
gay_marriage_is_not_society_survival :- neg(gay_marriage, society_survival).
religion_has_a_say_in_marriage :- pos(religion, marriage).
government_should_not_force_marriage :- neg(government, marriage).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(personal_god, existence).
neg(opponent, debate_structure).
neg(opponent, conduct_points).
neg(opponent, opening_arguments).
neg(opponent, refutations).
neg(opponent, burden_of_proof).
neg(opponent, monotheism).
neg(opponent, exodus_event).
neg(opponent, bible).
neg(opponent, genealogical_records).
neg(opponent, miracles).
neg(opponent, doctors).
neg(opponent, medical_field).
neg(opponent, human_biology).
neg(opponent, science).
neg(opponent, ignorance).
neg(opponent, jesus).
neg(opponent, resurrection).
neg(opponent, personal_god_definition).
neg(opponent, semantics).
neg(opponent, christianity).
neg(opponent, angels).
neg(opponent, dreams).
neg(opponent, prophets).
neg(opponent, christ).

Section 2 - General relationships:

relation(opponent, debate_structure).
relation(opponent, conduct_points).
relation(opponent, opening_arguments).
relation(opponent, refutations).
relation(opponent, burden_of_proof).
relation(opponent, monotheism).
relation(opponent, exodus_event).
relation(opponent, bible).
relation(opponent, genealogical_records).
relation(opponent, miracles).
relation(opponent, doctors).
relation(opponent, medical_field).
relation(opponent, human_biology).
relation(opponent, science).
relation(opponent, ignorance).
relation(opponent, jesus).
relation(opponent, resurrection).
relation(opponent, personal_god_definition).
relation(opponent, semantics).
relation(opponent, christianity).
relation(opponent, angels).
relation(opponent, dreams).
relation(opponent, prophets).
relation(opponent, christ).

Section 3 - Encoding:

personal_god_exists :- pos(personal_god, existence).
personal_god_does_not_exist :- neg(personal_god, existence).
opponent_has_disregarded_debate_structure :- neg(opponent, debate_structure).
opponent_should_lose_conduct_points :- neg(opponent, conduct_points).
opponent_should_not_lose_conduct_points :- pos(opponent, conduct_points).
opponent_has_offered_rebuttals_in_opening_argument :- neg(opponent, opening_arguments).
opponent_has_not_offered_rebuttals_in_opening_argument :- pos(opponent, opening_arguments).
opponent_has_misunderstood_burden_of_proof :- neg(opponent, burden_of_proof).
opponent_has_correctly_understood_burden_of_proof :- pos(opponent, burden_of_proof).
monotheism_has_been_practiced_since_the_beginning_of_time :- pos(monotheism, existence).
exodus_event_is_irrelevant :- neg(exodus_event, relevance).
bible_is_a_written_record :- pos(bible, existence).
opponent_has_reduced_miracles_to_ignorant_behavior :- neg(opponent, miracles).
doctors_testify_that_miracles_exist :- pos(doctors, miracles).
miracles_are_not_an_argument_from_ignorance :- neg(miracles, ignorance).
miracles_are_an_argument_against_contradiction :- pos(miracles, contradiction).
opponent_has_not_defined_personal_god :- neg(opponent, personal_god_definition).
personal_god_interacts_with_humanity :- pos(personal_god, interaction).
personal_god_cares_about_each_person :- pos(personal_god, care).
opponent_is_using_semantics_to_refute_personal_god :- neg(opponent, personal_god_definition).
christ_was_resurrected :- pos(christ, resurrection).
christ_s_words_ring_true :- pos(christ, truth).
personal_god_yahweh_exists :- pos(personal_god, existence).
opponent_has_not_offered_rebuttals_towards_the_argument_for_christ_s_resurrection :- neg(opponent, christ_resurrection).
compare(opponent,X,Y) :- neg(opponent,X),neg(Y,X), opponent != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = opponent.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(execution, justified).
neg(execution, solve_problems).
neg(execution, make_world_better).
pos(life_time_sentence, reflect_on_himself).
pos(life_time_sentence, feel_bad).
neg(killing_criminal, make_victim_feel_better).
neg(capital_punishment, measureable_effect_on_crime_drop).
neg(death_penalty, deterrent_effect_on_potential_offenders).
neg(execution, deter_criminals).
neg(execution, make_criminal_rate_decline).
neg(execution, useful).
neg(execution, damaging_to_executed_person_family).

Section 2 - General relationships:

relation(execution, criminal).
relation(execution, victim).
relation(execution, crime).
relation(execution, world).
relation(capital_punishment, crime_drop).
relation(capital_punishment, potential_offenders).
relation(capital_punishment, lawmakers).
relation(death_penalty, world).
relation(execution, criminal_rate).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(everyone, lies).
pos(lies, false_impression).
pos(lies, misleading_impression).
pos(brain_dead_student, false_impression).
pos(brain_dead_student, misleading_impression).

Section 2 - General relationships:

relation(everyone, lies).
relation(lies, false_impression).
relation(lies, misleading_impression).
relation(brain_dead_student, false_impression).
relation(brain_dead_student, misleading_impression).

Section 3 - Encoding:

lies_are_bad :- pos(lies, Z).
lies_are_good :- neg(lies, Z).
brain_dead_student_is_bad_because :- pos(brain_dead_student, Z).
brain_dead_student_is_good_because :- neg(brain_dead_student, Z).
compare(lies,X,Y) :- neg(lies,X),neg(Y,X), lies != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = lies.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(equation, false).
pos(information, anti_matter).
pos(information, zero).
pos(something, one).
pos(matter, one).
pos(anti_matter, minus_one).
pos(equation, values).
pos(apple, two).
pos(apple, minus_one).
pos(radioactive_atom, zero).

Section 2 - General relationships:

relation(equation, zero).
relation(information, anti_matter).
relation(information, something).
relation(something, one).
relation(anti_matter, matter).
relation(equation, values).
relation(apple, two).
relation(apple, minus_one).
relation(radioactive_atom, zero).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(sailor_venus, seductive_charm).
pos(sailor_venus, sexy_character).
pos(sailor_venus, seductive_outfit).
pos(sailor_venus, named_after_roman_goddess_of_love_and_beauty).
pos(sailor_venus, power_element_love).
pos(sailor_venus, venus_love_me_chain_attack).
pos(sailor_venus, japanese).
pos(japanese, better_developed_education_system_than_americans).
pos(sailor_venus, more_experienced_in_art).
pos(sailor_venus, more_experienced_in_science).
pos(sailor_venus, more_experienced_in_music).
pos(sailor_venus, more_experienced_in_math).
pos(sailor_venus, younger_than_batman).
pos(sailor_venus, has_nine_very_close_very_loyal_friends).
pos(sailor_venus, saves_the_whole_universe).
pos(batman, older_than_sailor_venus).

neg(batman, seductive_charm).
neg(batman, sexy_character).
neg(batman, seductive_outfit).
neg(batman, named_after_roman_goddess_of_love_and_beauty).
neg(batman, power_element_love).
neg(batman, venus_love_me_chain_attack).
neg(batman, japanese).
neg(batman, better_developed_education_system_than_americans).
neg(batman, more_experienced_in_art).
neg(batman, more_experienced_in_science).
neg(batman, more_experienced_in_music).
neg(batman, more_experienced_in_math).
neg(batman, younger_than_sailor_venus).
neg(batman, has_nine_very_close_very_loyal_friends).
neg(batman, saves_the_whole_universe).
neg(batman, older_than_sailor_venus).

Section 2 - General relationships:

relation(sailor_venus, batman).
relation(sailor_venus, japanese).
relation(sailor_venus, americans).
relation(sailor_venus, art).
relation(sailor_venus, science).
relation(sailor_venus, music).
relation(sailor_venus, math).
relation(sailor_venus, batman).
relation(sailor_venus, heath_ledger).
relation(sailor_venus, joker).
relation(sailor_venus, dark_night).
relation(sailor_venus, universe).
relation(batman, sailor_venus).
relation(batman, japanese).
relation(batman, americans).
relation(batman, art).
relation(batman, science).
relation(batman, music).
relation(batman, math).
relation(batman, heath_ledger).
relation(batman, joker).
relation(batman, dark_night).
relation(batman, gotham_city).
relation(batman, universe).
relation(japanese, americans).
relation(japanese, art).
relation(japanese, science).
relation(japanese, music).
relation(japanese, math).
relation(heath_ledger, joker).
relation(heath_ledger, dark_night).
relation(joker, dark_night).

Section 3 - Encoding:

sailor_venus_is_good_because :- pos(sailor_venus, Y).
sailor_venus_is_bad_because :- neg(sailor_venus, Y).
batman_is_good_because :- pos(batman, Y).
batman_is_bad_because :- neg(batman, Y).
compare(sailor_venus, batman, Y) :- neg(sailor_venus, Y), neg(batman, Y), sailor_venus != batman.
compare(batman, sailor_venus, Y) :- neg(batman, Y), neg(batman, Y), sailor_venus != batman, sailor_venus = batman.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(minimum_wage, exploitation).
pos(minimum_wage, prevent_exploitation).
pos(workers, gain_value).
pos(workers, rise_wages).
pos(people, choice_of_work).
pos(businesses, compete_for_workers).
pos(businesses, raise_wages).
neg(minimum_wage, harm_people).
neg(minimum_wage, keep_people_out_of_workforce).
neg(unskilled_labor, worth_minimum_wage).
neg(minimum_wage, stop_businesses_from_expanding).

Section 2 - General relationships:

relation(minimum_wage, workers).
relation(minimum_wage, businesses).
relation(minimum_wage, economy).
relation(minimum_wage, unemployment).
relation(minimum_wage, free_market).

Section 3 - Encoding:

prevent_exploitation :- pos(minimum_wage, prevent_exploitation).
exploitation :- neg(minimum_wage, exploitation).
gain_value :- pos(workers, gain_value).
rise_wages :- pos(workers, rise_wages).
choice_of_work :- pos(people, choice_of_work).
compete_for_workers :- pos(businesses, compete_for_workers).
raise_wages :- pos(businesses, raise_wages).
harm_people :- neg(minimum_wage, harm_people).
keep_people_out_of_workforce :- neg(minimum_wage, keep_people_out_of_workforce).
worth_minimum_wage :- neg(unskilled_labor, worth_minimum_wage).
stop_businesses_from_expanding :- neg(minimum_wage, stop_businesses_from_expanding).
minimum_wage_is_good_because :- prevent_exploitation; gain_value; rise_wages; choice_of_work; compete_for_workers; raise_wages.
minimum_wage_is_bad_because :- harm_people; keep_people_out_of_workforce; worth_minimum_wage; stop_businesses_from_expanding.
compare(minimum_wage,X,Y) :- minimum_wage_is_bad_because,minimum_wage_is_good_because, minimum_wage != Y.
compare(X,Y,Z) :- minimum_wage_is_bad_because,minimum_wage_is_bad_because, Y != Z, Y = minimum_wage.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(russia, crimea).
neg(ukraine, aid).
neg(ukraine, liberation).
neg(ukraine, oppressed_nations).
neg(ukraine, middle_east).
neg(ukraine, euro).
neg(ukraine, russian_opinions).
neg(ukraine, tyrannical_police_state).
neg(ukraine, keep_to_themselves).
neg(us, operating_outside_our_own_nation).
neg(us, aid).
neg(us, intervention).
neg(everyone, intervention).
neg(everyone, sanction).
neg(you, freedom).
neg(you, aid).

Section 2 - General relationships:

relation(russia, crimea).
relation(ukraine, aid).
relation(ukraine, liberation).
relation(ukraine, oppressed_nations).
relation(ukraine, middle_east).
relation(ukraine, euro).
relation(ukraine, russian_opinions).
relation(ukraine, tyrannical_police_state).
relation(ukraine, keep_to_themselves).
relation(us, operating_outside_our_own_nation).
relation(us, aid).
relation(us, intervention).
relation(everyone, intervention).
relation(everyone, sanction).
relation(you, freedom).
relation(you, aid).

Section 3 - Encoding:

russia_has_right_to_crimea_because :- pos(russia, crimea).
ukraine_is_bad_because :- neg(ukraine, Y).
us_is_bad_because :- neg(us, Y).
everyone_is_bad_because :- neg(everyone, Y).
you_are_bad_because :- neg(you, Y).
compare(russia,X,Y) :- neg(russia,X),neg(Y,X), russia != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = russia.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(intelligent_design_science, species).
neg(evo_theory, species).
neg(pro, evidence).
neg(you, evidence).
neg(your_side, evidence).
pos(ignorance, you).
pos(faith, your_position).
pos(religion, your_position).
neg(science, your_position).
neg(evidence, your_side).

Section 2 - General relationships:

relation(intelligent_design_science, evo_theory).
relation(pro, you).
relation(you, pro).
relation(ignorance, you).
relation(faith, your_position).
relation(religion, your_position).
relation(science, your_position).
relation(evidence, your_side).

Section 3 - Encoding:

intelligent_design_science_is_good_because :- pos(intelligent_design_science,Y).
intelligent_design_science_is_bad_because :- neg(intelligent_design_science,Y).
evo_theory_is_good_because :- pos(evo_theory,Y).
evo_theory_is_bad_because :- neg(evo_theory,Y).
pro_is_good_because :- pos(pro,Y).
pro_is_bad_because :- neg(pro,Y).
you_are_good_because :- pos(you,Y).
you_are_bad_because :- neg(you,Y).
your_position_is_good_because :- pos(your_position,Y).
your_position_is_bad_because :- neg(your_position,Y).
your_side_is_good_because :- pos(your_side,Y).
your_side_is_bad_because :- neg(your_side,Y).
compare(intelligent_design_science,X,Y) :- neg(intelligent_design_science,X),neg(Y,X), intelligent_design_science != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = intelligent_design_science.
compare(evo_theory,X,Y) :- neg(evo_theory,X),neg(Y,X), evo_theory != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = evo_theory.
compare(pro,X,Y) :- neg(pro,X),neg(Y,X), pro != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = pro.
compare(you,X,Y) :- neg(you,X),neg(Y,X), you != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = you.
compare(your_position,X,Y) :- neg(your_position,X),neg(Y,X), your_position != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = your_position.
compare(your_side,X,Y) :- neg(your_side,X),neg(Y,X), your_side != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = your_side.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, warrior).
pos(god, peace monger).
neg(god, peaceful).

Section 2 - General relationships:

relation(ontological_argument, play_on_words).
relation(psychology, telling_not_to_do_something).
relation(bible, god).
relation(genesis, god).
relation(genesis, earth).
relation(god, earth).

Section 3 - Encoding:

god_is_warrior_because :- pos(god, warrior).
god_is_peace_monger_because :- pos(god, peace monger).
god_is_not_peaceful_because :- neg(god, peaceful).
compare(god, warrior, peace monger) :- pos(god, warrior), pos(god, peace monger), warrior != peace monger.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(american_jobs_act, infrastructure).
pos(american_jobs_act, jobs).
pos(financial_sector, wary).
neg(financial_sector, problems).
neg(lehman, businesses).
neg(sub_prime_crisis, businesses).
neg(recession, businesses).
pos(corporate_sector, health).
pos(corporate_sector, strength).
pos(ceos, windfall).
pos(ceos, competition).

% Section 2 - General relationships
relation(american_jobs_act, infrastructure).
relation(financial_sector, problems).
relation(lehman, sub_prime_crisis).
relation(recession, corporate_sector).
relation(ceos, windfall).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(american_jobs_act,X,Y) :- neg(american_jobs_act,X),neg(Y,X), american_jobs_act != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = american_jobs_act.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(hard_chair, spine).
pos(soft_chair, spine).
pos(soft_chair, kids).

Section 2 - General relationships:

relation(spine, injury).
relation(posture, importance).
relation(hard_chair, kids).
relation(soft_chair, comfort).
relation(soft_chair, attention).
relation(schools, little_things).
relation(schools, big_things).
relation(schools, fights).
relation(schools, bullies).
relation(schools, learning).

Section 3 - Encoding:

spine_is_injured_because :- neg(spine,X).
spine_is_not_injured_because :- pos(spine,X).
kids_are_comfortable_because :- pos(kids,X).
kids_are_not_comfortable_because :- neg(kids,X).
schools_worry_about_little_things_because :- pos(schools,X).
schools_dont_worry_about_little_things_because :- neg(schools,X).
schools_worry_about_big_things_because :- pos(schools,X).
schools_dont_worry_about_big_things_because :- neg(schools,X).
compare(spine,X,Y) :- neg(spine,X),neg(Y,X), spine != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = spine.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(baby, agnostic).
neg(baby, belief).
pos(atheist, lack_of_belief).
pos(agnostic, lack_of_faith).
pos(agnostic, lack_of_disbelief).
pos(atheist, reject_notion_of_god).
pos(atheist, lack_of_belief_in_god).
pos(atheist, negative_atheist).
pos(atheist, positive_atheist).
pos(atheist, strong_atheist).
pos(atheist, hard_atheist).
pos(atheist, weak_atheist).
pos(atheist, soft_atheist).

Section 2 - General relationships:

relation(baby, agnostic).
relation(baby, atheist).
relation(atheist, agnostic).
relation(atheist, god).
relation(atheist, belief).
relation(atheist, faith).
relation(atheist, disbelief).
relation(atheist, existence).
relation(atheist, awareness).
relation(atheist, notion).
relation(atheist, atheism).
relation(atheist, positive_atheism).
relation(atheist, negative_atheism).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(homework, annoyance).
pos(homework, responsibility).
pos(homework, revision).
pos(homework, strengthening).

Section 2 - General relationships:

relation(homework, study).
relation(homework, time).
relation(homework, knowledge).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(evolution, truth).
neg(creationism, truth).
neg(evolution, assumption).
pos(moses, primary_source).
neg(moses, god_phone).
pos(moses, prayer).
pos(god, speech).
pos(bible, source).
pos(thomas_aquinas, source).
pos(pro_evolution_website, source).
neg(war, survival).
pos(war, greed).
pos(war, conflict).
pos(war, human_understanding).
pos(pollution, man_made).
pos(pollution, natural_forms).
pos(evolution, adaptation).
neg(human, adaptation).
neg(human, survival).
pos(organisms, death).
pos(biblical_scholars, world_age).
neg(tectonic_plates, enough_time).
pos(god, first_cause).
pos(god, gravity).
pos(god, light).
pos(god, atoms).
neg(god, credit).

Section 2 - General relationships:

relation(evolution, creationism).
relation(evolution, assumption).
relation(moses, god_phone).
relation(moses, prayer).
relation(moses, god).
relation(bible, source).
relation(thomas_aquinas, source).
relation(pro_evolution_website, source).
relation(war, survival).
relation(war, greed).
relation(war, conflict).
relation(war, human_understanding).
relation(pollution, man_made).
relation(pollution, natural_forms).
relation(evolution, adaptation).
relation(human, adaptation).
relation(human, survival).
relation(organisms, death).
relation(biblical_scholars, world_age).
relation(tectonic_plates, enough_time).
relation(god, first_cause).
relation(god, gravity).
relation(god, light).
relation(god, atoms).
relation(god, credit).

Section 3 - Encoding:

evolution_is_true :- pos(evolution, truth).
creationism_is_false :- neg(creationism, truth).
evolution_is_not_assumption :- neg(evolution, assumption).
moses_is_primary_source :- pos(moses, primary_source).
moses_did_not_have_god_phone :- neg(moses, god_phone).
moses_prayed :- pos(moses, prayer).
god_spoke_to_moses :- pos(god, speech).
bible_is_source :- pos(bible, source).
thomas_aquinas_is_source :- pos(thomas_aquinas, source).
pro_evolution_website_is_source :- pos(pro_evolution_website, source).
wars_are_not_for_survival :- neg(war, survival).
wars_are_for_greed :- pos(war, greed).
wars_are_for_conflict :- pos(war, conflict).
wars_are_for_human_understanding :- pos(war, human_understanding).
pollution_is_man_made :- pos(pollution, man_made).
pollution_has_natural_forms :- pos(pollution, natural_forms).
evolution_is_for_adaptation :- pos(evolution, adaptation).
humans_are_not_adapting :- neg(human, adaptation).
humans_are_not_surviving :- neg(human, survival).
organisms_are_dying :- pos(organisms, death).
world_is_6000_to_8000_years_old :- pos(biblical_scholars, world_age).
tectonic_plates_do_not_have_enough_time :- neg(tectonic_plates, enough_time).
god_is_the_first_cause :- pos(god, first_cause).
god_created_gravity :- pos(god, gravity).
god_created_light :- pos(god, light).
god_created_atoms :- pos(god, atoms).
god_does_not_take_credit :- neg(god, credit).

compare(evolution, creationism, assumption) :- neg(evolution, assumption), neg(creationism, assumption), evolution != creationism.
compare(moses, god_phone, prayer) :- neg(moses, god_phone), neg(moses, prayer), god_phone != prayer, god_phone = moses.
compare(bible, thomas_aquinas, pro_evolution_website) :- neg(bible, thomas_aquinas), neg(bible, pro_evolution_website), thomas_aquinas != pro_evolution_website, thomas_aquinas = bible.
compare(war, greed, conflict) :- neg(war, greed), neg(war, conflict), greed != conflict, greed = war.
compare(pollution, man_made, natural_forms) :- neg(pollution, man_made), neg(pollution, natural_forms), man_made != natural_forms, man_made = pollution.
compare(evolution, adaptation, survival) :- neg(evolution, adaptation), neg(evolution, survival), adaptation != survival, adaptation = evolution.
compare(human, adaptation, survival) :- neg(human, adaptation), neg(human, survival), adaptation != survival, adaptation = human.
compare(organisms, death, survival) :- neg(organisms, death), neg(organisms, survival), death != survival, death = organisms.
compare(biblical_scholars, world_age, tectonic_plates) :- neg(biblical_scholars, world_age), neg(biblical_scholars, tectonic_plates), world_age != tectonic_plates, world_age = biblical_scholars.
compare(god, first_cause, gravity) :- neg(god, first_cause), neg(god, gravity), first_cause != gravity, first_cause = god.
compare(god, light, atoms) :- neg(god, light), neg(god, atoms), light != atoms, light = god.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(willie_mays, baseball_player).
pos(mickey_mantle, baseball_player).
pos(willie_mays, home_runs).
pos(mickey_mantle, home_runs).
pos(willie_mays, health).
pos(mickey_mantle, health).
pos(mickey_mantle, defensive_center_fielder).
pos(mickey_mantle, mvp_award).
pos(mickey_mantle, walks).
pos(mickey_mantle, playoff_batting_average).
pos(mickey_mantle, world_series_titles).
pos(mickey_mantle, natural_talent).
pos(mickey_mantle, offensive_numbers).
pos(willie_mays, media_darling).
pos(willie_mays, affable_personality).
pos(willie_mays, favorable_media_persona).
pos(willie_mays, great_player).
pos(mickey_mantle, very_good_defensive_center_fielder).
pos(mickey_mantle, mvp_like_offensive_numbers).
pos(mickey_mantle, led_league_in_walks).
pos(mickey_mantle, performed_much_better_in_the_playoffs).
pos(mickey_mantle, career_post_season_home_run).
pos(mickey_mantle, career_playoff_batting_average).
pos(mickey_mantle, world_series_titles).
pos(mickey_mantle, better_ball_player).
pos(mickey_mantle, great_player).

neg(willie_mays, health).
neg(mickey_mantle, health).
neg(willie_mays, mvp_award).
neg(willie_mays, walks).
neg(willie_mays, playoff_batting_average).
neg(willie_mays, world_series_titles).
neg(willie_mays, better_ball_player).
neg(mickey_mantle, media_darling).
neg(mickey_mantle, affable_personality).
neg(mickey_mantle, favorable_media_persona).
neg(mickey_mantle, great_player).
neg(mickey_mantle, very_good_defensive_center_fielder).
neg(mickey_mantle, mvp_like_offensive_numbers).
neg(mickey_mantle, led_league_in_walks).
neg(mickey_mantle, performed_much_better_in_the_playoffs).
neg(mickey_mantle, career_post_season_home_run).
neg(mickey_mantle, career_playoff_batting_average).
neg(mickey_mantle, world_series_titles).
neg(mickey_mantle, better_ball_player).
neg(mickey_mantle, great_player).

Section 2 - General relationships:

relation(willie_mays, mickey_mantle).
relation(willie_mays, home_runs).
relation(mickey_mantle, home_runs).
relation(willie_mays, health).
relation(mickey_mantle, health).
relation(mickey_mantle, defensive_center_fielder).
relation(mickey_mantle, mvp_award).
relation(mickey_mantle, walks).
relation(mickey_mantle, playoff_batting_average).
relation(mickey_mantle, world_series_titles).
relation(mickey_mantle, natural_talent).
relation(mickey_mantle, offensive_numbers).
relation(willie_mays, media_darling).
relation(willie_mays, affable_personality).
relation(willie_mays, favorable_media_persona).
relation(willie_mays, great_player).
relation(mickey_mantle, very_good_defensive_center_fielder).
relation(mickey_mantle, mvp_like_offensive_numbers).
relation(mickey_mantle, led_league_in_walks).
relation(mickey_mantle, performed_much_better_in_the_playoffs).
relation(mickey_mantle, career_post_season_home_run).
relation(mickey_mantle, career_playoff_batting_average).
relation(mickey_mantle, world_series_titles).
relation(mickey_mantle, better_ball_player).
relation(mickey_mantle, great_player).

Section 3 - Encoding:

willie_mays_is_good_because :- pos(willie_mays, Y).
willie_mays_is_bad_because :- neg(willie_mays, Y).
mickey_mantle_is_good_because :- pos(mickey_mantle, Y).
mickey_mantle_is_bad_because :- neg(mickey_mantle, Y).
compare(willie_mays, mickey_mantle, Y) :- neg(willie_mays, Y), neg(mickey_mantle, Y), willie_mays != mickey_mantle.
compare(willie_mays, Y, mickey_mantle) :- neg(willie_mays, Y), neg(willie_mays, mickey_mantle), Y != mickey_mantle, Y = willie_mays.
compare(mickey_mantle, willie_mays, Y) :- neg(mickey_mantle, Y), neg(mickey_mantle, willie_mays), mickey_mantle != willie_mays.
compare(mickey_mantle, Y, willie_mays) :- neg(mickey_mantle, Y), neg(mickey_mantle, willie_mays), Y != willie_mays, Y = mickey_mantle.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(psychology, scientific).

Section 2 - General relationships:

relation(psychology, experiments).
relation(experiments, people).
relation(people, thoughts).
relation(people, actions).
relation(psychologists, results).
relation(results, psychology).
relation(experiments, conclusions).
relation(conclusions, psychology).
relation(people, backgrounds).
relation(people, political_ideology).
relation(people, democratic_party).
relation(people, thoughts).
relation(people, actions).
relation(psychologists, results).
relation(results, psychology).

Section 3 - Encoding:

psychology_is_scientific_because :- pos(psychology, scientific).
psychology_is_not_scientific_because :- neg(psychology, scientific).
compare(psychology,X,Y) :- neg(psychology,X),neg(Y,X), psychology != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = psychology.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(trash_bags, safe).
neg(trash_bags, useful).
pos(trash_bags, rich_people).
pos(trash_bags, middle_class_people).

Section 2 - General relationships:

relation(trash_bags, rich_people).
relation(trash_bags, middle_class_people).
relation(rich_people, eco_friendly_garbage_decomposing_machine).
relation(rich_people, hole).
relation(middle_class_people, trash_bags).

Section 3 - Encoding:

trash_bags_are_good_because :- pos(trash_bags, Y).
trash_bags_are_bad_because :- neg(trash_bags, Y).
compare(trash_bags,X,Y) :- neg(trash_bags,X),neg(Y,X), trash_bags != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = trash_bags.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(bullying, special_rights).
neg(special_rights, innocent_people).
neg(opression, innocent_people).
neg(stopbullying_gov, all_innocent_people).
neg(care_based_morality, character).
neg(justice_based_morality, care_based_morality).
neg(bullying, self_esteem).
neg(opression, self_esteem).
neg(bullying, confidence).
neg(opression, confidence).

pos(bullying, opression).
pos(opression, ganging_up).
pos(ganging_up, conflict).
pos(ganging_up, bullying).
pos(care_based_morality, identity).
pos(justice_based_morality, freedom).
pos(justice_based_morality, resources).

Section 2 - General relationships:

relation(bullying, opression).
relation(opression, ganging_up).
relation(ganging_up, conflict).
relation(ganging_up, bullying).
relation(care_based_morality, identity).
relation(justice_based_morality, freedom).
relation(justice_based_morality, resources).
relation(bullying, self_esteem).
relation(opression, self_esteem).
relation(bullying, confidence).
relation(opression, confidence).

Section 3 - Encoding:

opression_is_bad_because :- neg(opression,Y).
bullying_is_bad_because :- neg(bullying,Y).
special_rights_is_bad_because :- neg(special_rights,Y).
care_based_morality_is_bad_because :- neg(care_based_morality,Y).
justice_based_morality_is_bad_because :- neg(justice_based_morality,Y).
stopbullying_gov_is_bad_because :- neg(stopbullying_gov,Y).
innocent_people_is_bad_because :- neg(innocent_people,Y).
self_esteem_is_bad_because :- neg(self_esteem,Y).
confidence_is_bad_because :- neg(confidence,Y).

opression_is_good_because :- pos(opression,Y).
bullying_is_good_because :- pos(bullying,Y).
special_rights_is_good_because :- pos(special_rights,Y).
care_based_morality_is_good_because :- pos(care_based_morality,Y).
justice_based_morality_is_good_because :- pos(justice_based_morality,Y).
stopbullying_gov_is_good_because :- pos(stopbullying_gov,Y).
innocent_people_is_good_because :- pos(innocent_people,Y).
self_esteem_is_good_because :- pos(self_esteem,Y).
confidence_is_good_because :- pos(confidence,Y).

compare(bullying,X,Y) :- neg(bullying,X),neg(Y,X), bullying != Y.
compare(opression,X,Y) :- neg(opression,X),neg(Y,X), opression != Y.
compare(special_rights,X,Y) :- neg(special_rights,X),neg(Y,X), special_rights != Y.
compare(care_based_morality,X,Y) :- neg(care_based_morality,X),neg(Y,X), care_based_morality != Y.
compare(justice_based_morality,X,Y) :- neg(justice_based_morality,X),neg(Y,X), justice_based_morality != Y.
compare(stopbullying_gov,X,Y) :- neg(stopbullying_gov,X),neg(Y,X), stopbullying_gov != Y.
compare(innocent_people,X,Y) :- neg(innocent_people,X),neg(Y,X), innocent_people != Y.
compare(self_esteem,X,Y) :- neg(self_esteem,X),neg(Y,X), self_esteem != Y.
compare(confidence,X,Y) :- neg(confidence,X),neg(Y,X), confidence != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(government_involvement, good_justification).

Section 2 - General relationships:

relation(government_involvement, organ_donation).
relation(government_involvement, pro_position).
relation(government_involvement, round_2).
relation(pro_position, round_2).
relation(pro_position, tainted).
relation(pro_position, topic).

Section 3 - Encoding:

compare(government_involvement,X,Y) :- neg(government_involvement,X),neg(Y,X), government_involvement != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(gun, protect).
pos(gun, proper_way).
neg(gun_laws, stronger).
neg(gun_laws, stronger, angry).
neg(gun_laws, stronger, people).
neg(gun_laws, stronger, gang).
neg(gun_laws, stronger, hunters).
neg(gun_laws, stronger, people_who_own_them).

Section 2 - General relationships:

relation(gun, permit).
relation(gun, government).
relation(gun, paperwork).
relation(gun, gun_shop).
relation(gun, background_check).
relation(gun, law).
relation(gun, america).
relation(gun, people).
relation(gun, gang).
relation(gun, hunter).
relation(gun, people_who_own_them).

Section 3 - Encoding:

gun_is_good_because :- pos(gun, Y).
gun_is_bad_because :- neg(gun, Y).
compare(gun,X,Y) :- neg(gun,X),neg(Y,X), gun != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gun.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(higher_power, energy).
pos(higher_power, big_bang).
pos(higher_power, ball_of_energy).
pos(science, evolution).
pos(science, animals).
pos(science, energy).

neg(higher_power, pocket_of_energy).
neg(higher_power, logic).

Section 2 - General relationships:

relation(higher_power, energy).
relation(higher_power, pocket_of_energy).
relation(higher_power, logic).
relation(higher_power, science).
relation(science, animals).
relation(science, energy).
relation(science, evolution).

Section 3 - Encoding:

higher_power_is_good_because :- pos(higher_power,Y).
higher_power_is_bad_because :- neg(higher_power,Y).
compare(higher_power,X,Y) :- neg(higher_power,X),neg(Y,X), higher_power != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = higher_power.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(incest, consenting_adults).

Section 2 - General relationships:

relation(incest, family_members).
relation(incest, close_relatives).
relation(incest, rape).
relation(incest, paedophilia).

Section 3 - Encoding:

incest_is_moral_because :- pos(incest, Y).
incest_is_immoral_because :- neg(incest, Y).
compare(incest,X,Y) :- neg(incest,X),neg(Y,X), incest != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = incest.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(gaddafi, war_crimes).
pos(gaddafi, war_crimes).
neg(obama, war_criminal).
pos(obama, war_criminal).
neg(ukraine, war_crimes).
pos(ukraine, war_crimes).
neg(russia, war_crimes).
pos(russia, war_crimes).
neg(misrata, war_crimes).
pos(misrata, war_crimes).
neg(libya, war_crimes).
pos(libya, war_crimes).
neg(dictators, war_crimes).
pos(dictators, war_crimes).
neg(rebels, war_crimes).
pos(rebels, war_crimes).
neg(usa, war_crimes).
pos(usa, war_crimes).

Section 2 - General relationships:

relation(gaddafi, libya).
relation(gaddafi, misrata).
relation(gaddafi, war_crimes).
relation(obama, usa).
relation(obama, war_crimes).
relation(ukraine, russia).
relation(ukraine, war_crimes).
relation(russia, ukraine).
relation(russia, war_crimes).
relation(misrata, libya).
relation(misrata, war_crimes).
relation(libya, gaddafi).
relation(libya, war_crimes).
relation(dictators, libya).
relation(dictators, war_crimes).
relation(rebels, libya).
relation(rebels, war_crimes).
relation(usa, obama).
relation(usa, war_crimes).

Section 3 - Encoding:

gaddafi_is_good_because :- pos(gaddafi,Y).
gaddafi_is_bad_because :- neg(gaddafi,Y).
obama_is_good_because :- pos(obama,Y).
obama_is_bad_because :- neg(obama,Y).
ukraine_is_good_because :- pos(ukraine,Y).
ukraine_is_bad_because :- neg(ukraine,Y).
russia_is_good_because :- pos(russia,Y).
russia_is_bad_because :- neg(russia,Y).
misrata_is_good_because :- pos(misrata,Y).
misrata_is_bad_because :- neg(misrata,Y).
libya_is_good_because :- pos(libya,Y).
libya_is_bad_because :- neg(libya,Y).
dictators_is_good_because :- pos(dictators,Y).
dictators_is_bad_because :- neg(dictators,Y).
rebels_is_good_because :- pos(rebels,Y).
rebels_is_bad_because :- neg(rebels,Y).
usa_is_good_because :- pos(usa,Y).
usa_is_bad_because :- neg(usa,Y).
compare(gaddafi,X,Y) :- neg(gaddafi,X),neg(Y,X), gaddafi != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gaddafi.
compare(obama,X,Y) :- neg(obama,X),neg(Y,X), obama != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = obama.
compare(ukraine,X,Y) :- neg(ukraine,X),neg(Y,X), ukraine != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = ukraine.
compare(russia,X,Y) :- neg(russia,X),neg(Y,X), russia != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = russia.
compare(misrata,X,Y) :- neg(misrata,X),neg(Y,X), misrata != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = misrata.
compare(libya,X,Y) :- neg(libya,X),neg(Y,X), libya != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = libya.
compare(dictators,X,Y) :- neg(dictators,X),neg(Y,X), dictators != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = dictators.
compare(rebels,X,Y) :- neg(rebels,X),neg(Y,X), rebels != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = rebels.
compare(usa,X,Y) :- neg(usa,X),neg(Y,X), usa != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = usa.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(strict_foods_and_nutrition_guidelines, public_schools).
neg(insufficient_calorie_intake, problems).
pos(healthy_food, taste).
neg(lax_job, healthy_food).
pos(cooking_classes, children).
pos(children, cooking).
pos(children, preparing_food).
pos(children, eating_food).
pos(bitter_foods, good_taste).
pos(adjustment_period, bitter_foods).
neg(school_nutritional_programs, lax).

Section 2 - General relationships:

relation(strict_foods_and_nutrition_guidelines, public_schools).
relation(insufficient_calorie_intake, problems).
relation(healthy_food, taste).
relation(lax_job, healthy_food).
relation(cooking_classes, children).
relation(children, cooking).
relation(children, preparing_food).
relation(children, eating_food).
relation(bitter_foods, good_taste).
relation(adjustment_period, bitter_foods).
relation(school_nutritional_programs, lax).

Section 3 - Encoding:

strict_foods_and_nutrition_guidelines_is_good_because :- pos(strict_foods_and_nutrition_guidelines, Y).
strict_foods_and_nutrition_guidelines_is_bad_because :- neg(strict_foods_and_nutrition_guidelines, Y).
insufficient_calorie_intake_is_good_because :- pos(insufficient_calorie_intake, Y).
insufficient_calorie_intake_is_bad_because :- neg(insufficient_calorie_intake, Y).
healthy_food_is_good_because :- pos(healthy_food, Y).
healthy_food_is_bad_because :- neg(healthy_food, Y).
lax_job_is_good_because :- pos(lax_job, Y).
lax_job_is_bad_because :- neg(lax_job, Y).
cooking_classes_is_good_because :- pos(cooking_classes, Y).
cooking_classes_is_bad_because :- neg(cooking_classes, Y).
children_is_good_because :- pos(children, Y).
children_is_bad_because :- neg(children, Y).
bitter_foods_is_good_because :- pos(bitter_foods, Y).
bitter_foods_is_bad_because :- neg(bitter_foods, Y).
adjustment_period_is_good_because :- pos(adjustment_period, Y).
adjustment_period_is_bad_because :- neg(adjustment_period, Y).
school_nutritional_programs_is_good_because :- pos(school_nutritional_programs, Y).
school_nutritional_programs_is_bad_because :- neg(school_nutritional_programs, Y).
compare(strict_foods_and_nutrition_guidelines,X,Y) :- neg(strict_foods_and_nutrition_guidelines,X),neg(Y,X), strict_foods_and_nutrition_guidelines != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = strict_foods_and_nutrition_guidelines.
compare(insufficient_calorie_intake,X,Y) :- neg(insufficient_calorie_intake,X),neg(Y,X), insufficient_calorie_intake != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = insufficient_calorie_intake.
compare(healthy_food,X,Y) :- neg(healthy_food,X),neg(Y,X), healthy_food != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = healthy_food.
compare(lax_job,X,Y) :- neg(lax_job,X),neg(Y,X), lax_job != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = lax_job.
compare(cooking_classes,X,Y) :- neg(cooking_classes,X),neg(Y,X), cooking_classes != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = cooking_classes.
compare(children,X,Y) :- neg(children,X),neg(Y,X), children != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = children.
compare(bitter_foods,X,Y) :- neg(bitter_foods,X),neg(Y,X), bitter_foods != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = bitter_foods.
compare(adjustment_period,X,Y) :- neg(adjustment_period,X),neg(Y,X), adjustment_period != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = adjustment_period.
compare(school_nutritional_programs,X,Y) :- neg(school_nutritional_programs,X),neg(Y,X), school_nutritional_programs != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = school_nutritional_programs.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(old_spongebob, good_cartoon).
neg(new_spongebob, good_cartoon).

Section 2 - General relationships:

relation(old_spongebob, new_spongebob).
relation(spongebob, cartoon).
relation(argument, time_waster).

Section 3 - Encoding:

old_spongebob_is_good_because :- pos(old_spongebob, Y).
old_spongebob_is_bad_because :- neg(old_spongebob, Y).
new_spongebob_is_good_because :- pos(new_spongebob, Y).
new_spongebob_is_bad_because :- neg(new_spongebob, Y).
compare(old_spongebob, new_spongebob, X) :- neg(old_spongebob, X), neg(new_spongebob, X), old_spongebob != new_spongebob.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(jesus, historical_model).
neg(sacred_texts, historical).
neg(texts, supernatural_events).
neg(christian_scholars, uniform_consensus).
neg(christian_scholars, historical_jesus).
neg(western_academia, non_christian_sacred_text).
neg(western_academia, historically_accurate_document).
neg(tacitus, evidence).
neg(christian_scholars, evidence).
neg(josephus, evidence).
neg(josephus, so_called_christ).
neg(josephus, amateurish).

Section 2 - General relationships:

relation(sacred_texts, historian).
relation(christian_scholars, jesus).
relation(christian_scholars, tacitus).
relation(christian_scholars, josephus).
relation(western_academia, christian_framework).
relation(tacitus, christian_beliefs).
relation(josephus, christian_perspective).

Section 3 - Encoding:

historical_model(jesus).
historical_model(X) :- pos(X,Y), neg(Y, historical).
historical_model(X) :- neg(X,Y), pos(Y, historical).

evidence(X) :- pos(X,Y), neg(Y, evidence).
evidence(X) :- neg(X,Y), pos(Y, evidence).

amateurish(X) :- pos(X,Y), neg(Y, amateurish).
amateurish(X) :- neg(X,Y), pos(Y, amateurish).

compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = X.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(god, universe).
neg(god, milky_way).
neg(god, body).
neg(fungi, water).
neg(plants, water).
neg(protists, water).

Section 2 - General relationships:

relation(god, universe).
relation(god, milky_way).
relation(god, body).
relation(fungi, water).
relation(plants, water).
relation(protists, water).

Section 3 - Encoding:

god_is_bad_because :- neg(god,Y).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(us_government, aid).
pos(us_government, security).
pos(us_government, democracy).
pos(us_government, human_rights).
pos(us_government, values).

% Section 2 - General relationships
relation(us_government, aid).
relation(us_government, budget).
relation(us_government, foreign_aid).
relation(us_government, americans).
relation(us_government, world).
relation(us_government, recession).
relation(us_government, unemployment).
relation(us_government, investment).
relation(us_government, security).
relation(us_government, democracy).
relation(us_government, human_rights).
relation(us_government, values).
relation(us_government, money).

% Section 3 - Encoding
us_government_is_good_because :- pos(us_government,Y).
us_government_is_bad_because :- neg(us_government,Y).
compare(us_government,X,Y) :- neg(us_government,X),neg(Y,X), us_government != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = us_government.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(young_earth_creationism, earth_age_less_than_100000_years).

Section 2 - General relationships:

relation(young_earth_creationism, earth_age).
relation(young_earth_creationism, burden_of_proof).
relation(young_earth_creationism, evidence).
relation(young_earth_creationism, scientific_evidence).
relation(young_earth_creationism, holy_book).

Section 3 - Encoding:

young_earth_creationism_is_wrong_because :- neg(young_earth_creationism, X).
young_earth_creationism_is_right_because :- pos(young_earth_creationism, X).
compare(young_earth_creationism,X,Y) :- neg(young_earth_creationism,X),neg(Y,X), young_earth_creationism != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = young_earth_creationism.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(people, freedom_of_expression).
pos(cosmetic_surgery, legal_argument).
pos(human_rights_act, freedom_of_expression).
pos(article_10_echr, freedom_of_expression).
pos(body, self_expression).
pos(cosmetic_surgery, self_expression).
pos(nhs, payment).
pos(cosmetic_surgery, payment).
pos(people, money).
pos(people, appearance).

Section 2 - General relationships:

relation(people, freedom_of_expression).
relation(cosmetic_surgery, legal_argument).
relation(human_rights_act, freedom_of_expression).
relation(article_10_echr, freedom_of_expression).
relation(body, self_expression).
relation(cosmetic_surgery, self_expression).
relation(nhs, payment).
relation(cosmetic_surgery, payment).
relation(people, money).
relation(people, appearance).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(boy, rad_chad).
neg(you, rad_chad).
neg(you, god).

% Section 2 - General relationships
relation(boy, god).
relation(you, rad_chad).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, all_powerful).
pos(god, all_knowing).
pos(god, all_loving).
pos(god, creator_of_universe).
neg(god, appeared_in_modern_days).
neg(god, proof_of_existence).
neg(god, abides_by_laws_of_science).

Section 2 - General relationships:

relation(atheism, god).
relation(atheism, strong_atheism).
relation(atheism, weak_atheism).
relation(god, laws_of_science).
relation(god, human_knowledge).
relation(god, sahara_desert).

Section 3 - Encoding:

atheism_is_true :- neg(god,Y).
god_is_fake :- neg(god,Y).
strong_atheism :- neg(god,Y).
weak_atheism :- neg(god,Y).
god_is_not_fake :- pos(god,Y).
god_is_not_all_powerful :- neg(god, all_powerful).
god_is_not_all_knowing :- neg(god, all_knowing).
god_is_not_all_loving :- neg(god, all_loving).
god_is_not_creator_of_universe :- neg(god, creator_of_universe).
god_appeared_in_modern_days :- pos(god, appeared_in_modern_days).
god_has_proof_of_existence :- pos(god, proof_of_existence).
god_abides_by_laws_of_science :- pos(god, abides_by_laws_of_science).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(beauty, opinion).
neg(beauty, definition).

Section 2 - General relationships:

relation(beauty, opinion).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(diet, cheap).
pos(diet, health).
pos(exercise, health).
neg(food_desert, affordable_food).
neg(food_desert, exercise).
neg(obesity, health).
pos(community_gardens, health).
pos(cultural_attitude, health).
neg(demeaning, health).
neg(adamance, health).

Section 2 - General relationships:

relation(diet, exercise).
relation(food_desert, obesity).
relation(government, food_desert).
relation(community_gardens, food_desert).
relation(cultural_attitude, obesity).
relation(demeaning, obesity).
relation(adamance, obesity).

Section 3 - Encoding:

diet_is_expensive :- neg(diet, cheap).
diet_is_healthy :- pos(diet, health).
exercise_is_healthy :- pos(exercise, health).
food_desert_has_no_affordable_food :- neg(food_desert, affordable_food).
food_desert_prevents_exercise :- neg(food_desert, exercise).
obesity_is_unhealthy :- neg(obesity, health).
community_gardens_promote_health :- pos(community_gardens, health).
cultural_attitude_affects_health :- pos(cultural_attitude, health).
demeaning_is_unhealthy :- neg(demeaning, health).
adamance_is_unhealthy :- neg(adamance, health).
compare(diet,X,Y) :- neg(diet,X),neg(Y,X), diet != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = diet.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(tv, child_development).
pos(tv, english_language).
pos(tv, simple_mathematics).

Section 2 - General relationships:

relation(tv, child).
relation(tv, child_development).
relation(tv, english_language).
relation(tv, simple_mathematics).
relation(tv, pbs_kids).
relation(pbs_kids, child_development).
relation(pbs_kids, english_language).
relation(pbs_kids, simple_mathematics).
relation(child, age).
relation(child, parent).
relation(parent, child_development).

Section 3 - Encoding:

child_is_good_because :- pos(child,Y).
child_is_bad_because :- neg(child,Y).
compare(child,X,Y) :- neg(child,X),neg(Y,X), child != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = child.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(religion, public_schools).
pos(religion, public_schools).

Section 2 - General relationships:

relation(religion, public_schools).
relation(religion, taxes).
relation(religion, time).
relation(religion, math).
relation(religion, social_studies).
relation(religion, language_arts).
relation(religion, science).
relation(religion, physics).
relation(religion, chemistry).
relation(religion, minds).
relation(religion, god).
relation(religion, christian).

Section 3 - Encoding:

religion_is_good_because :- pos(religion, Y).
religion_is_bad_because :- neg(religion, Y).
compare(religion,X,Y) :- neg(religion,X),neg(Y,X), religion != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = religion.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(guantanamo_detainees, torture).

% Section 2 - General relationships
relation(guantanamo_detainees, excessive_force).
relation(excessive_force, transportation).
relation(excessive_force, initial_reaction_forces).
relation(excessive_force, force_feeding).
relation(force_feeding, hunger_strikes).
relation(force_feeding, torture).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, bible).
pos(god, logic).
pos(god, rational_thinking).
pos(god, truth).

Section 2 - General relationships:

relation(god, bible).
relation(god, logic).
relation(god, rational_thinking).
relation(god, truth).

Section 3 - Encoding:

god_is_good_because :- pos(god,Y).
god_is_bad_because :- neg(god,Y).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(gay_marriage, constitution).
pos(gay_marriage, federal_legislature).
pos(gay_marriage, homosexuals).
pos(gay_marriage, people).
pos(gay_marriage, country).
pos(gay_marriage, government).
pos(gay_marriage, best_interests).
pos(gay_marriage, discrimination).
pos(gay_marriage, segregation).
pos(gay_marriage, religion).
pos(gay_marriage, bias).
neg(gay_marriage, religion).
neg(gay_marriage, bias).

Section 2 - General relationships:

relation(gay_marriage, constitution).
relation(gay_marriage, federal_legislature).
relation(gay_marriage, homosexuals).
relation(gay_marriage, people).
relation(gay_marriage, country).
relation(gay_marriage, government).
relation(gay_marriage, best_interests).
relation(gay_marriage, discrimination).
relation(gay_marriage, segregation).
relation(gay_marriage, religion).
relation(gay_marriage, bias).

Section 3 - Encoding:

gay_marriage_is_good_because :- pos(gay_marriage, Y).
gay_marriage_is_bad_because :- neg(gay_marriage, Y).
compare(gay_marriage, X, Y) :- neg(gay_marriage, X), neg(Y, X), gay_marriage != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = gay_marriage.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(animal_testing, rights).
pos(animals, freedom).
pos(animals, life).
pos(animals, happiness).
pos(animals, protection).

Section 2 - General relationships:

relation(animal_testing, rights).
relation(animal_testing, environment).
relation(animal_testing, diseases).
relation(animal_testing, humans).
relation(animal_testing, animals).
relation(animal_testing, inaccuracy).
relation(animal_testing, alternative).

Section 3 - Encoding:

rights_are_violated :- neg(animal_testing, rights).
rights_are_respected :- pos(animal_testing, rights).
environment_is_harmful :- neg(animal_testing, environment).
environment_is_safe :- pos(animal_testing, environment).
diseases_are_cured :- pos(animal_testing, diseases).
diseases_are_not_cured :- neg(animal_testing, diseases).
animal_testing_is_replaceable :- pos(animal_testing, alternative).
animal_testing_is_not_replaceable :- neg(animal_testing, alternative).
animal_testing_is_inaccurate :- pos(animal_testing, inaccuracy).
animal_testing_is_not_inaccurate :- neg(animal_testing, inaccuracy).
compare(animal_testing, X, Y) :- neg(animal_testing, X), neg(Y, X), animal_testing != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = animal_testing.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(step_in, monitor_parent_talking_insultingly_to_child).
neg(step_in, stop_verbal_abuse).
pos(mental_illness, reason_for_parent_talking_insultingly_to_child).
pos(child_in_trouble, reason_for_parent_talking_insultingly_to_child).
neg(report_to_anyone, parent_has_mental_illness).
neg(step_in, child_in_trouble_and_being_punished).

Section 2 - General relationships:

relation(step_in, monitor_parent_talking_insultingly_to_child).
relation(step_in, stop_verbal_abuse).
relation(mental_illness, reason_for_parent_talking_insultingly_to_child).
relation(child_in_trouble, reason_for_parent_talking_insultingly_to_child).
relation(report_to_anyone, parent_has_mental_illness).
relation(step_in, child_in_trouble_and_being_punished).

Section 3 - Encoding:

step_in_is_good_because :- pos(step_in, Y).
step_in_is_bad_because :- neg(step_in, Y).
compare(step_in,X,Y) :- neg(step_in,X),neg(Y,X), step_in != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = step_in.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(yasuo, broken).
pos(yasuo, balanced).
pos(yasuo, annoying).
neg(yasuo, great).

Section 2 - General relationships:

relation(yasuo, low_elo).
relation(yasuo, teammates).
relation(yasuo, win_rate).
relation(yasuo, teemo).
relation(yasuo, people).

Section 3 - Encoding:

yasuo_is_broken_because :- neg(yasuo, X).
yasuo_is_not_broken_because :- pos(yasuo, X).
compare(yasuo,X,Y) :- neg(yasuo,X),neg(Y,X), yasuo != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = yasuo.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, existence).
neg(con, troll_debate).

Section 2 - General relationships:

relation(con, one).
relation(con, three).
relation(con, zero).
relation(con, two).
relation(con, nature).
relation(con, machine).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(atheism, belief).
pos(disbelief, belief).
pos(belief, theistic_assertion).
pos(science, christianity).
pos(doubt, belief).
pos(doubt, god).
neg(god, false).
pos(theism, imaginary_claims).
neg(knowledge, future).
pos(knowledge, truth).
pos(truth, past).
pos(neutral_position, dont_know).
pos(belief, neutral_position).
pos(doubt, belief).
pos(doubt, disbelief).
pos(dont_know, certain).

% Section 2 - General relationships
relation(atheism, disbelief).
relation(disbelief, belief).
relation(belief, theistic_assertion).
relation(science, christianity).
relation(doubt, belief).
relation(doubt, god).
relation(theism, imaginary_claims).
relation(knowledge, truth).
relation(truth, past).
relation(neutral_position, dont_know).
relation(belief, neutral_position).
relation(doubt, belief).
relation(doubt, disbelief).
relation(dont_know, certain).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(mike_huckabee, republican_candidate).
pos(mike_huckabee, conservative).
pos(mike_huckabee, speaking_style).
pos(mike_huckabee, charisma).
pos(mike_huckabee, sincerity).
pos(mike_huckabee, vision).

Section 2 - General relationships:

relation(mike_huckabee, bill_clinton).
relation(mike_huckabee, republican).
relation(mike_huckabee, american).

Section 3 - Encoding:

mike_huckabee_is_good_because :- pos(mike_huckabee, Y).
mike_huckabee_is_bad_because :- neg(mike_huckabee, Y).
compare(mike_huckabee,X,Y) :- neg(mike_huckabee,X),neg(Y,X), mike_huckabee != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = mike_huckabee.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(socialist_policies, america).
pos(franklin_d_roosevelt, socialist_president).
pos(franklin_d_roosevelt, stimulus).
pos(franklin_d_roosevelt, increased_rights_of_the_worker).
pos(franklin_d_roosevelt, allowed_more_rights_for_unions).
pos(adolf_hitler, resurrect_german_economy).
pos(adolf_hitler, national_socialism).
pos(soviet_union, reversing_faults_of_capitalism).
pos(soviet_union, modernized_failed_state).

neg(absolute_capitalism, stimulus).
neg(upper_class, created_jobs).
neg(conservatives, created_jobs).
neg(democratic_politicians, created_jobs).
neg(capitalism, reversing_faults).
neg(capitalism, modernized_failed_state).

% Section 2 - General relationships
relation(socialist_policies, america).
relation(franklin_d_roosevelt, united_states).
relation(franklin_d_roosevelt, depression).
relation(franklin_d_roosevelt, stimulus).
relation(franklin_d_roosevelt, economy).
relation(franklin_d_roosevelt, jobs).
relation(franklin_d_roosevelt, upper_class).
relation(franklin_d_roosevelt, conservatives).
relation(franklin_d_roosevelt, democratic_politicians).
relation(franklin_d_roosevelt, government).
relation(franklin_d_roosevelt, rights_of_the_worker).
relation(franklin_d_roosevelt, unions).
relation(adolf_hitler, german_economy).
relation(adolf_hitler, national_socialism).
relation(adolf_hitler, economy).
relation(soviet_union, capitalism).
relation(soviet_union, failed_state).
relation(soviet_union, world_war).

% Section 3 - Encoding
socialist_policies_are_good_because :- pos(socialist_policies, Y).
socialist_policies_are_bad_because :- neg(socialist_policies, Y).
compare(socialist_policies,X,Y) :- neg(socialist_policies,X),neg(Y,X), socialist_policies != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = socialist_policies.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(society, male_dominated).
pos(society, male_dominated).
neg(woman, asking_for_rape).
pos(woman, asking_for_rape).
neg(broque_turner, real_time).
pos(broque_turner, real_time).
neg(rapist, charged_with_rape).
pos(rapist, charged_with_rape).
neg(women, justice_if_raped_by_spouse).
pos(women, justice_if_raped_by_spouse).
neg(women, right_to_be_paid_the_same_as_a_man).
pos(women, right_to_be_paid_the_same_as_a_man).
neg(women, decide_what_birth_control_they_use).
pos(women, decide_what_birth_control_they_use).
neg(rape_or_spousal_abuse_victim, use_force_to_save_her_life).
pos(rape_or_spousal_abuse_victim, use_force_to_save_her_life).
neg(girls, struggle_in_school).
pos(girls, struggle_in_school).
neg(hillary, elected).
pos(hillary, elected).

Section 2 - General relationships:

relation(society, male_dominated).
relation(woman, asking_for_rape).
relation(broque_turner, real_time).
relation(rapist, charged_with_rape).
relation(women, justice_if_raped_by_spouse).
relation(women, right_to_be_paid_the_same_as_a_man).
relation(women, decide_what_birth_control_they_use).
relation(rape_or_spousal_abuse_victim, use_force_to_save_her_life).
relation(girls, struggle_in_school).
relation(hillary, elected).

Section 3 - Encoding:

society_is_not_male_dominated :- neg(society, male_dominated).
society_is_male_dominated :- pos(society, male_dominated).
woman_is_asking_for_rape :- neg(woman, asking_for_rape).
woman_is_not_asking_for_rape :- pos(woman, asking_for_rape).
broque_turner_got_real_time :- neg(broque_turner, real_time).
broque_turner_did_not_get_real_time :- pos(broque_turner, real_time).
rapist_was_charged_with_rape :- neg(rapist, charged_with_rape).
rapist_was_not_charged_with_rape :- pos(rapist, charged_with_rape).
women_were_denied_justice_if_raped_by_spouse :- neg(women, justice_if_raped_by_spouse).
women_were_not_denied_justice_if_raped_by_spouse :- pos(women, justice_if_raped_by_spouse).
women_do_not_have_the_right_to_be_paid_the_same_as_a_man :- neg(women, right_to_be_paid_the_same_as_a_man).
women_have_the_right_to_be_paid_the_same_as_a_man :- pos(women, right_to_be_paid_the_same_as_a_man).
women_do_not_decide_what_birth_control_they_use :- neg(women, decide_what_birth_control_they_use).
women_decide_what_birth_control_they_use :- pos(women, decide_what_birth_control_they_use).
rape_or_spousal_abuse_victim_cannot_use_force_to_save_her_life :- neg(rape_or_spousal_abuse_victim, use_force_to_save_her_life).
rape_or_spousal_abuse_victim_can_use_force_to_save_her_life :- pos(rape_or_spousal_abuse_victim, use_force_to_save_her_life).
girls_do_not_struggle_in_school :- neg(girls, struggle_in_school).
girls_struggle_in_school :- pos(girls, struggle_in_school).
hillary_was_elected :- neg(hillary, elected).
hillary_was_not_elected :- pos(hillary, elected).
compare(society,X,Y) :- neg(society,X),neg(Y,X), society != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = society.
compare(woman,X,Y) :- neg(woman,X),neg(Y,X), woman != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = woman.
compare(broque_turner,X,Y) :- neg(broque_turner,X),neg(Y,X), broque_turner != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = broque_turner.
compare(rapist,X,Y) :- neg(rapist,X),neg(Y,X), rapist != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = rapist.
compare(women,X,Y) :- neg(women,X),neg(Y,X), women != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = women.
compare(rape_or_spousal_abuse_victim,X,Y) :- neg(rape_or_spousal_abuse_victim,X),neg(Y,X), rape_or_spousal_abuse_victim != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = rape_or_spousal_abuse_victim.
compare(girls,X,Y) :- neg(girls,X),neg(Y,X), girls != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = girls.
compare(hillary,X,Y) :- neg(hillary,X),neg(Y,X), hillary != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = hillary.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(certificate, achievement).
neg(certificate, self_worth).
pos(self_worth, experience).
pos(experience, self_worth).
pos(experience, stepping_stone).
neg(certificate, self_esteem).
pos(self_esteem, self_worth).

Section 2 - General relationships:

relation(certificate, self_worth).
relation(certificate, experience).
relation(self_worth, experience).
relation(self_worth, stepping_stone).
relation(self_worth, self_esteem).

Section 3 - Encoding:

certificate_is_good_because :- pos(certificate,Y).
certificate_is_bad_because :- neg(certificate,Y).
compare(certificate,X,Y) :- neg(certificate,X),neg(Y,X), certificate != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = certificate.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(isosceles_triangle, two_equal_sides).
neg(three_four_five_right_triangle, isosceles_triangle).

Section 2 - General relationships:

relation(perpendicular_bisector, angle_bisector).
relation(angle_bisector, side).
relation(perpendicular_bisector, side).
relation(three_four_five_right_triangle, triangle).
relation(isosceles_triangle, triangle).
relation(scenario_one, scenario_three).
relation(scenario_two, scenario_three).
relation(scenario_three, external_intersection).
relation(external_intersection, scenario_three).
relation(ob, oc).
relation(oe, of).
relation(aoe, aof).

Section 3 - Encoding:

isosceles_triangle :- pos(X, two_equal_sides).
not_isosceles_triangle :- neg(X, two_equal_sides).
compare(isosceles_triangle, X, Y) :- neg(isosceles_triangle, X), neg(Y, X), isosceles_triangle != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = isosceles_triangle.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(individual, human).
pos(individual, sexual_orientation).
pos(supreme_court, gay_marriage).
pos(supreme_court, fair_treatment).
pos(speaker, equality).
pos(speaker, tolerance).
pos(speaker, difference).
pos(speaker, homosexual_people).
pos(speaker, homosexual).

neg(individual, choice).
neg(individual, homosexuality).

Section 2 - General relationships:

relation(individual, choice).
relation(individual, homosexuality).
relation(speaker, supreme_court).
relation(speaker, gay_marriage).
relation(speaker, equality).
relation(speaker, tolerance).
relation(speaker, difference).
relation(speaker, homosexual_people).
relation(speaker, homosexual).

Section 3 - Encoding:

individual_chooses_homosexuality :- choice(individual, homosexuality).
individual_doesnt_choose_homosexuality :- neg(individual, choice), neg(individual, homosexuality).
compare(individual, choice, homosexuality) :- individual_chooses_homosexuality, individual_doesnt_choose_homosexuality.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(ducks, watching).
neg(ducks, stupid).
pos(ducks, scary).

Section 2 - General relationships:

relation(ducks, mind).
relation(ducks, time).
relation(ducks, comment).
relation(ducks, way).
relation(ducks, excited).
relation(ducks, able).
relation(ducks, willing).
relation(ducks, issue).
relation(ducks, available).
relation(ducks, half).
relation(ducks, day).
relation(ducks, time).
relation(ducks, room).
relation(ducks, voice).
relation(ducks, reason).
relation(ducks, piano).
relation(ducks, years).
relation(ducks, morning).
relation(ducks, life).
relation(ducks, point).
relation(ducks, thing).
relation(ducks, weeks).
relation(ducks, train).

Section 3 - Encoding:

ducks_are_good_because :- pos(ducks, Y).
ducks_are_bad_because :- neg(ducks, Y).
compare(ducks,X,Y) :- neg(ducks,X),neg(Y,X), ducks != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = ducks.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(cso, good_governance_practices).
neg(cso, oversimplification).
neg(corrupt_semi_democracies, guarantee).
neg(societal_actors, co_opted).
neg(societal_actors, corrupted).
neg(non_democratic_powers, legitimation).
pos(non_democratic_powers, public_eye).
neg(non_democratic_powers, better_practices).
neg(non_democratic_powers, good_governance).
pos(civil_society, desirable).
pos(democratisation, civil_society).
neg(counterproductive_reaction, civil_society).

Section 2 - General relationships:

relation(cso, good_governance_practices).
relation(cso, oversimplification).
relation(corrupt_semi_democracies, guarantee).
relation(societal_actors, co_opted).
relation(societal_actors, corrupted).
relation(non_democratic_powers, legitimation).
relation(non_democratic_powers, public_eye).
relation(non_democratic_powers, better_practices).
relation(non_democratic_powers, good_governance).
relation(civil_society, desirable).
relation(democratisation, civil_society).
relation(counterproductive_reaction, civil_society).

Section 3 - Encoding:

cso_is_good_because :- pos(cso,Y).
cso_is_bad_because :- neg(cso,Y).
compare(cso,X,Y) :- neg(cso,X),neg(Y,X), cso != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = cso.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(eagles, draft_desean_jackson).
pos(desean_jackson, speedy_receiver).
pos(reggie_brown, speedy_receiver).
pos(kevin_curtis, speedy_receiver).
pos(desean_jackson, mediocre_receiver).
pos(desean_jackson, exceptional_kr_pr_ability).
pos(ted_ginn_jr, mediocre_receiver).
pos(ted_ginn_jr, exceptional_kr_pr_ability).
pos(brady_quinn, good_qb).
pos(brady_quinn, help_franchise).
pos(eagles, tall_possession_receiver).
pos(sweed, new_dimension).
pos(kelly, new_dimension).
pos(hardy, new_dimension).
pos(eagles, best_wr).
pos(eagles, draft_best_wr).
pos(eagles, avoid_draft_desean_jackson).
pos(eagles, avoid_draft_mediocre_receiver).
pos(eagles, avoid_draft_exceptional_kr_pr_ability).
pos(eagles, avoid_draft_kick_returner).
pos(eagles, avoid_draft_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability).
pos(eagles, avoid_draft_desean_jackson_kick_returner).
pos(eagles, avoid_draft_desean_jackson_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_exceptional_kr_pr_ability_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_mediocre_receiver_kick_returner_2nd_round_talent).
pos(eagles, avoid_draft_desean_jackson_exceptional_kr_pr_ability_kick_returner_2nd_round_talent).
pos(ea
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(big_breasts, desirable).
pos(big_breasts, favorable).
pos(big_breasts, healthy).
pos(big_breasts, proportional).
pos(big_breasts, rack).

Section 2 - General relationships:

relation(big_breasts, men).
relation(big_breasts, women).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(stoic_principles, control).
neg(stoic_principles, apathy).
pos(pain, pleasure).
pos(caring, loved_ones).
neg(apathy, life).

Section 2 - General relationships:

relation(stoic_principles, control).
relation(stoic_principles, apathy).
relation(pain, pleasure).
relation(caring, loved_ones).
relation(apathy, life).

Section 3 - Encoding:

stoic_principles_is_good_because :- pos(stoic_principles, Y).
stoic_principles_is_bad_because :- neg(stoic_principles, Y).
compare(stoic_principles,X,Y) :- neg(stoic_principles,X),neg(Y,X), stoic_principles != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = stoic_principles.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(king_kong, deserving_of_victory).
pos(king_kong, won).
pos(king_kong, pinned_v_rex_to_the_ground).
pos(monkeys, could_pull_off_a_surprise_and_win).
pos(monkeys, more_shots_on_goal).
pos(king_kong, intelligent).

neg(v_rex, deserving_of_victory).
neg(v_rex, could_fight_back).
neg(v_rex, could_respond).
neg(v_rex, realistic).

Section 2 - General relationships:

relation(king_kong, v_rex).
relation(humans, monkeys).
relation(king_kong, deserving_of_victory).
relation(v_rex, deserving_of_victory).
relation(king_kong, won).
relation(king_kong, pinned_v_rex_to_the_ground).
relation(monkeys, could_pull_off_a_surprise_and_win).
relation(monkeys, more_shots_on_goal).
relation(king_kong, intelligent).
relation(v_rex, could_fight_back).
relation(v_rex, could_respond).
relation(v_rex, realistic).

Section 3 - Encoding:

deserving_of_victory(king_kong) :- pos(king_kong, Y).
deserving_of_victory(v_rex) :- pos(v_rex, Y).
could_fight_back(v_rex) :- pos(v_rex, Y).
could_respond(v_rex) :- pos(v_rex, Y).
realistic(v_rex) :- pos(v_rex, Y).
compare(king_kong, v_rex, Y) :- neg(king_kong, Y), neg(v_rex, Y), king_kong != v_rex.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = king_kong.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(morality, objectivity).
pos(morality, facts).
pos(morality, axioms).

Section 2 - General relationships:

relation(morality, objectivity).
relation(morality, facts).
relation(morality, axioms).

Section 3 - Encoding:

morality_is_objective :- pos(morality,Y).
morality_is_not_objective :- neg(morality,Y).
compare(morality,X,Y) :- neg(morality,X),neg(Y,X), morality != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = morality.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(intent, cause_mental_and_physical_harm).
pos(intent, enjoyment).
pos(murder, feel_enjoyment).
pos(rape, intent_to_cause_harm).
pos(rape, physical_harm).
pos(rape, psychological_harm).
pos(touch_a_child_inappropriately, intent_to_cause_harm).
pos(touch_a_child_inappropriately, psychological_harm).
pos(pedophilia, devastating_to_a_child).
pos(pedophilia, psychological_harm).
pos(pedophilia, emotional_harm).
pos(pedophilia, ruin_a_childs_life).
pos(animals, barbaric_piece_of_human_flesh).
pos(animals, mentally_unstable_brain).
pos(animals, not_fit_for_society).
pos(humans, reasonable_and_socially_fit_people).

neg(murder, human_life).
neg(murder, illegal).
neg(murder, immoral).
neg(imprisonment, humane).
neg(rape, human_life).
neg(rape, illegal).
neg(rape, immoral).
neg(pedophilia, human_life).
neg(pedophilia, illegal).
neg(pedophilia, immoral).

Section 2 - General relationships:

relation(intent, cause_mental_and_physical_harm).
relation(intent, enjoyment).
relation(murder, feel_enjoyment).
relation(murder, human_life).
relation(rape, intent_to_cause_harm).
relation(rape, physical_harm).
relation(rape, psychological_harm).
relation(rape, human_life).
relation(touch_a_child_inappropriately, intent_to_cause_harm).
relation(touch_a_child_inappropriately, psychological_harm).
relation(pedophilia, devastating_to_a_child).
relation(pedophilia, psychological_harm).
relation(pedophilia, emotional_harm).
relation(pedophilia, ruin_a_childs_life).
relation(animals, barbaric_piece_of_human_flesh).
relation(animals, mentally_unstable_brain).
relation(animals, not_fit_for_society).
relation(humans, reasonable_and_socially_fit_people).

Section 3 - Encoding:

pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(native_language_structure, world_view).
pos(linguistic_relativity, world_view).
pos(philosopher, theory).
pos(philosopher, argument).
pos(argument, theory).
pos(argument, debate).
neg(opponent, fair).
neg(opponent, honest).
neg(opponent, original).
neg(opponent, debater).
neg(opponent, philosopher).
neg(opponent, argument).
neg(opponent, theory).
neg(opponent, position).
neg(opponent, change).
neg(opponent, copy).
neg(opponent, paste).
neg(opponent, plagiarism).
neg(opponent, disqualification).
neg(opponent, vote).
neg(opponent, con).
neg(opponent, forfeit).
neg(opponent, accept).
neg(opponent, debate).
neg(opponent, ddo).
neg(opponent, lying).
neg(opponent, phony).
neg(opponent, communication).
neg(opponent, reality).
neg(opponent, language).
neg(opponent, symbols).
neg(opponent, ideas).
neg(opponent, speaker).
neg(opponent, interpreter).
neg(opponent, mind).
neg(opponent, definition).
neg(opponent, reality).
neg(opponent, philosophy).
neg(opponent, attributes).
neg(opponent, agreement).
neg(opponent, belief).
neg(opponent, assertion).
neg(opponent, vote).
neg(opponent, categorization).
neg(opponent, description).
neg(opponent, articulation).
neg(opponent, theory).
neg(opponent, wack).
neg(opponent, vote).
neg(opponent, con).
neg(opponent, disqualification).

Section 2 - General relationships:

relation(native_language_structure, world_view).
relation(linguistic_relativity, world_view).
relation(philosopher, theory).
relation(philosopher, argument).
relation(argument, theory).
relation(argument, debate).
relation(opponent, fair).
relation(opponent, honest).
relation(opponent, original).
relation(opponent, debater).
relation(opponent, philosopher).
relation(opponent, argument).
relation(opponent, theory).
relation(opponent, position).
relation(opponent, change).
relation(opponent, copy).
relation(opponent, paste).
relation(opponent, plagiarism).
relation(opponent, disqualification).
relation(opponent, vote).
relation(opponent, con).
relation(opponent, forfeit).
relation(opponent, accept).
relation(opponent, debate).
relation(opponent, ddo).
relation(opponent, lying).
relation(opponent, phony).
relation(opponent, communication).
relation(opponent, reality).
relation(opponent, language).
relation(opponent, symbols).
relation(opponent, ideas).
relation(opponent, speaker).
relation(opponent, interpreter).
relation(opponent, mind).
relation(opponent, definition).
relation(opponent, reality).
relation(opponent, philosophy).
relation(opponent, attributes).
relation(opponent, agreement).
relation(opponent, belief).
relation(opponent, assertion).
relation(opponent, vote).
relation(opponent, categorization).
relation(opponent, description).
relation(opponent, articulation).
relation(opponent, theory).
relation(opponent, wack).
relation(opponent, vote).
relation(opponent, con).
relation(opponent, disqualification).

Section 3 - Encoding:

philosopher_is_good_because :- pos(philosopher,Y).
philosopher_is_bad_because :- neg(philosopher,Y).
opponent_is_good_because :- pos(opponent,Y).
opponent_is_bad_because :- neg(opponent,Y).
compare(philosopher,X,Y) :- neg(philosopher,X),neg(Y,X), philosopher != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = philosopher.
compare(opponent,X,Y) :- neg(opponent,X),neg(Y,X), opponent != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = opponent.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(new_deal, prolonged_great_depression).
neg(new_deal, effective).
neg(new_deal, role_model_in_public_policy).

Section 2 - General relationships:

relation(new_deal, great_depression).
relation(new_deal, economic_history).
relation(new_deal, nation).
relation(new_deal, public_policy).
relation(new_deal, wake_forest_university).
relation(new_deal, wikipedia).
relation(new_deal, ipad).
relation(new_deal, confidence_level).
relation(new_deal, historians).
relation(new_deal, economists).
relation(new_deal, telecommunications_directory).
relation(new_deal, economics_history_association).
relation(new_deal, survey).
relation(new_deal, whaples).
relation(new_deal, consensus).

Section 3 - Encoding:

new_deal_is_bad_because :- pos(new_deal, Y).
new_deal_is_good_because :- neg(new_deal, Y).
compare(new_deal,X,Y) :- neg(new_deal,X),neg(Y,X), new_deal != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = new_deal.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(empirical_evidence, support_assertion_god_exists).
neg(empirical_evidence, support_assertion_god_exists).

Section 2 - General relationships:

relation(empirical_evidence, assertion_god_exists).
relation(empirical_evidence, peer_reviewed_study).
relation(peer_reviewed_study, religious_group).

Section 3 - Encoding:

empirical_evidence_support_assertion_god_exists :- pos(empirical_evidence, support_assertion_god_exists).
empirical_evidence_not_support_assertion_god_exists :- neg(empirical_evidence, support_assertion_god_exists).
compare(empirical_evidence,X,Y) :- neg(empirical_evidence,X),neg(Y,X), empirical_evidence != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = empirical_evidence.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(jueteng, eradicate).
neg(jueteng, legalize).

Section 2 - General relationships:

relation(jueteng, eradicate).
relation(jueteng, legalize).

Section 3 - Encoding:

eradicate_is_good_because :- pos(jueteng, Y).
eradicate_is_bad_because :- neg(jueteng, Y).
legalize_is_good_because :- pos(jueteng, Y).
legalize_is_bad_because :- neg(jueteng, Y).
compare(jueteng,X,Y) :- neg(jueteng,X),neg(Y,X), jueteng != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = jueteng.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(video_games, art).
pos(creators, creativity).
pos(creators, imagination).
pos(final_fantasy_series, graphics).
pos(final_fantasy_series, storyline).
pos(halo_series, graphics).
pos(halo_series, storyline).
pos(legend_of_zelda_series, graphics).
pos(legend_of_zelda_series, storyline).
pos(mass_effect, graphics).
pos(mass_effect, storyline).
pos(half_life_2, graphics).
pos(half_life_2, storyline).
pos(portal, graphics).
pos(portal, storyline).
pos(halo_3, creativity).
pos(halo_3, intuition).
pos(mona_lisa, creativity).
pos(mona_lisa, intuition).

% Section 2 - General relationships
relation(video_games, art).
relation(creators, video_games).
relation(final_fantasy_series, video_games).
relation(halo_series, video_games).
relation(legend_of_zelda_series, video_games).
relation(mass_effect, video_games).
relation(half_life_2, video_games).
relation(portal, video_games).
relation(halo_3, video_games).
relation(mona_lisa, art).

% Section 3 - Encoding
art_is_beautiful :- pos(X, beautiful).
art_is_creative :- pos(X, creativity).
art_is_intuitive :- pos(X, intuition).
video_game_is_art :- art_is_beautiful, art_is_creative, art_is_intuitive.
```
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(theistic_evolution, explain_humans_animals).
pos(theistic_evolution, better_than_regular_creationalism).
neg(regular_creationalism, explain_humans_animals).
pos(skulls, show_evolution_process).
pos(dna, proof_of_evolution).
neg(god, know_what_planned).
pos(mutations, start_evolution).
pos(increased_number_of_people, born_with_two_sets_of_dna).
pos(increased_number_of_people, next_step_in_human_evolution).
pos(mutations, trigger_evolution).
pos(evolution_of_human_skull, keep_changing).
pos(evolution_of_human_skull, look_like_skulls_we_have_today).
pos(mutations_of_dna, evolve).
pos(selective_breeding, evolve).
neg(god, exist).
pos(god, create_universe).
pos(god, create_elements).
pos(god, create_cells).
pos(god, create_chicken_ancestor).
pos(chicken_ancestor, evolve_into_chicken).
pos(creationism, correct).
neg(creationism, correct).
pos(adam, human).
pos(eve, human).
pos(bible, say_not_go_date_relative).

% Section 2 - General relationships
relation(theistic_evolution, regular_creationalism).
relation(skulls, evolution_process).
relation(dna, evolution).
relation(god, evolution).
relation(mutations, evolution).
relation(increased_number_of_people, evolution).
relation(evolution_of_human_skull, skulls).
relation(mutations_of_dna, evolution).
relation(selective_breeding, evolution).
relation(god, universe).
relation(god, elements).
relation(god, cells).
relation(god, chicken).
relation(chicken_ancestor, chicken).
relation(creationism, adam).
relation(creationism, eve).
relation(creationism, bible).
relation(adam, eve).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(spanking, understand).
pos(spanking, stop).
pos(spanking, mentally_stable).
pos(spanking, moderation).
neg(spanking, psychological_damage).
neg(spanking, mental_problems).
neg(abusing, psychological_damage).
neg(abusing, social_effects).

Section 2 - General relationships:

relation(spanking, children).
relation(spanking, abusing).
relation(spanking, psychologist).
relation(spanking, dyslexia).
relation(spanking, ancient_greek_proverb).
relation(spanking, moderation).

Section 3 - Encoding:

spanking_is_good_because :- pos(spanking, Y).
spanking_is_bad_because :- neg(spanking, Y).
compare(spanking,X,Y) :- neg(spanking,X),neg(Y,X), spanking != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = spanking.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, love).
pos(god, salvation).
pos(atheist, soup_kitchen).
pos(atheist, love).
neg(god, evil).
neg(god, heaven).
neg(atheist, heaven).

Section 2 - General relationships:

relation(god, evil).
relation(god, salvation).
relation(god, atheist).
relation(god, universe).
relation(god, big_bang).
relation(god, dna).
relation(god, human_body).
relation(god, watch).
relation(god, existence).
relation(god, mind).
relation(god, reality).

Section 3 - Encoding:

god_is_good_because :- pos(god,Y).
god_is_bad_because :- neg(god,Y).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(information, matter).
pos(information, energy).
neg(information, metaphysical).

Section 2 - General relationships:

relation(information, matter).
relation(information, energy).
relation(information, metaphysical).
relation(physical_laws, moral_guidelines).
relation(sacrifice, moral_necessity).
relation(sacrifice, subjective_opinion).
relation(language, culture).
relation(language, time).
relation(language, people).
relation(language, world).
relation(language, type).
relation(culture, morals).
relation(culture, abortion).
relation(culture, universal_moral_thread).
relation(barbarous, civil).
relation(society, moral_standard).
relation(society, external_influence).

Section 3 - Encoding:

information_is_metaphysical :- neg(information, metaphysical).
information_is_not_metaphysical :- pos(information, metaphysical).
physical_laws_cause_moral_guidelines :- relation(physical_laws, moral_guidelines).
physical_laws_do_not_cause_moral_guidelines :- neg(physical_laws, moral_guidelines).
sacrifice_is_moral_necessity :- relation(sacrifice, moral_necessity).
sacrifice_is_not_moral_necessity :- neg(sacrifice, moral_necessity).
sacrifice_is_subjective_opinion :- relation(sacrifice, subjective_opinion).
sacrifice_is_not_subjective_opinion :- neg(sacrifice, subjective_opinion).
all_cultures_have_same_language :- relation(language, culture), relation(language, time), relation(language, people), relation(language, world), relation(language, type).
all_cultures_do_not_have_same_language :- neg(relation(language, culture)), neg(relation(language, time)), neg(relation(language, people)), neg(relation(language, world)), neg(relation(language, type)).
different_cultures_have_different_views_on_morals :- relation(culture, morals).
different_cultures_do_not_have_different_views_on_morals :- neg(relation(culture, morals)).
barbarous_and_civil_are_relative_terms :- neg(relation(barbarous, civil)).
barbarous_and_civil_are_not_relative_terms :- relation(barbarous, civil).
society_becomes_more_civil_with_external_influence :- relation(society, external_influence).
society_does_not_become_more_civil_with_external_influence :- neg(relation(society, external_influence)).
first_society_learnt_to_become_civil_with_external_influence :- relation(society, external_influence).
first_society_did_not_learn_to_become_civil_with_external_influence :- neg(relation(society, external_influence)).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(loved_ones, happy).
pos(loved_ones, peaceful).
pos(loved_ones, support).
pos(loved_ones, euthanasia).
pos(euthanasia, happy).
pos(euthanasia, peaceful).
pos(euthanasia, support).
neg(loved_ones, pain).
neg(euthanasia, pain).
neg(euthanasia, cowardly).

Section 2 - General relationships:

relation(euthanasia, pain).
relation(euthanasia, loved_ones).
relation(euthanasia, cowardly).

Section 3 - Encoding:

euthanasia_is_good_because :- pos(euthanasia, Y).
euthanasia_is_bad_because :- neg(euthanasia, Y).
compare(euthanasia,X,Y) :- neg(euthanasia,X),neg(Y,X), euthanasia != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = euthanasia.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(yahweh, benevolent).
pos(yahweh, mighty).
pos(yahweh, jealous).
neg(stoning_of_gays, kosher).
pos(bible, moral_guide).
pos(bible, jews).
pos(love_thy_neighbor, jews).
neg(heathen, killed).
neg(moses, old_age).
neg(moses, circumcizing).

% Section 2 - General relationships
relation(yahweh, bible).
relation(yahweh, jews).
relation(yahweh, love_thy_neighbor).
relation(yahweh, heathens).
relation(yahweh, moses).
relation(yahweh, plague).
relation(yahweh, stillbirthing).
relation(yahweh, lightning_strikes).
relation(yahweh, fires).
relation(yahweh, floods).
relation(yahweh, cities).
relation(yahweh, rapist).
relation(yahweh, dogs).
relation(yahweh, women).
relation(yahweh, children).
relation(yahweh, babies).
relation(yahweh, hell).
relation(yahweh, satan).

% Section 3 - Encoding
yahweh_is_malevolent_because :- neg(yahweh, benevolent).
yahweh_is_not_malevolent_because :- pos(yahweh, benevolent).
compare(yahweh,X,Y) :- neg(yahweh,X),neg(Y,X), yahweh != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = yahweh.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(separation_of_church_and_state, severely_violated).
pos(taxation_of_churches, not_severe).
pos(taxation_of_churches, force_beliefs_of_christianity).
pos(taxation_of_churches, abusing_extra_money).
pos(government, not_intruding_on_ceremonies).
pos(government, collecting_money).
pos(government, not_shutting_down_churches).

Section 2 - General relationships:

relation(churches, separation_of_church_and_state).
relation(churches, taxation_of_churches).
relation(churches, government).
relation(kentucky, bibles).
relation(kentucky, public_schools).
relation(kentucky, family_of_jewish_children).
relation(family_of_jewish_children, harassment).
relation(family_of_jewish_children, promotion_of_christian_beliefs).
relation(family_of_jewish_children, essay).
relation(essay, why_jesus_loves_me).
relation(taxation_of_churches, beliefs_of_christianity).
relation(taxation_of_churches, jews).
relation(taxation_of_churches, muslims).
relation(taxation_of_churches, abusing_extra_money).
relation(government, ceremonies_of_the_religious).
relation(government, money).
relation(government, churches).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(tag_team, popular_lyrics).
pos(tag_team, well_known_lyrics).
pos(tag_team, old_school).
pos(tag_team, hype).
pos(tag_team, underground_sound).
pos(tag_team, hardcore).
pos(tag_team, mad_skill).
pos(tag_team, ill).
pos(tag_team, grill).
pos(tag_team, microphone).
pos(tag_team, party_people).
pos(tag_team, dc).
pos(tag_team, steve_rolln).
pos(tag_team, whoomp_there_it_is).
pos(tag_team, double_o_d_d_y).
pos(tag_team, undertaker).
pos(tag_team, old_school).
pos(tag_team, shovel).
pos(tag_team, three_to_the_two_and_one_mic_check).
pos(tag_team, mesh_of_steel).

% Section 2 - General relationships
relation(tag_team, lyrics).
relation(tag_team, music).
relation(tag_team, party).
relation(tag_team, dancing).
relation(tag_team, underground).
relation(tag_team, flow).
relation(tag_team, microphone).
relation(tag_team, dc).
relation(tag_team, steve_rolln).
relation(tag_team, whoomp_there_it_is).
relation(tag_team, double_o_d_d_y).
relation(tag_team, undertaker).
relation(tag_team, old_school).
relation(tag_team, shovel).
relation(tag_team, three_to_the_two_and_one_mic_check).
relation(tag_team, mesh_of_steel).

% Section 3 - Encoding
tag_team_is_good_because :- pos(tag_team,Y).
tag_team_is_bad_because :- neg(tag_team,Y).
compare(tag_team,X,Y) :- neg(tag_team,X),neg(Y,X), tag_team != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = tag_team.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(undertale, pacifist_path).
neg(undertale, original).
neg(undertale, good_characters).
neg(undertale, good_plot).
neg(undertale, good_ending_system).
neg(undertale, good_karma_meter).

Section 2 - General relationships:

relation(undertale, pacifist_path).
relation(undertale, original).
relation(undertale, characters).
relation(undertale, plot).
relation(undertale, ending_system).
relation(undertale, karma_meter).

Section 3 - Encoding:

undertale_is_bad_because :- neg(undertale,Y).
undertale_is_good_because :- pos(undertale,Y).
compare(undertale,X,Y) :- neg(undertale,X),neg(Y,X), undertale != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = undertale.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(making_love, rationality).
pos(having_sex, rationality).

% Section 2 - General relationships
relation(making_love, having_sex).
relation(rationality, logic).
relation(rationality, reason).
relation(rationality, biology).
relation(making_love, biology).

% Section 3 - Encoding
compare(making_love, having_sex, rationality) :- neg(making_love, rationality), neg(having_sex, rationality).
compare(making_love, having_sex, biology) :- neg(making_love, biology), neg(having_sex, biology).
```
###DELIMITER###
 Section 1 - Negative and positive relationships:
pos(fast_food, saves_time).
neg(fast_food, makes_us_fat).
neg(fat_bodies, do_as_much).
pos(convenience, saves_time).

Section 2 - General relationships:
relation(fast_food, saves_time).
relation(fast_food, makes_us_fat).
relation(fat_bodies, do_as_much).
relation(convenience, saves_time).

Section 3 - Encoding:
saves_time_is_good_because :- pos(saves_time,Y).
saves_time_is_bad_because :- neg(saves_time,Y).
makes_us_fat_is_good_because :- pos(makes_us_fat,Y).
makes_us_fat_is_bad_because :- neg(makes_us_fat,Y).
do_as_much_is_good_because :- pos(do_as_much,Y).
do_as_much_is_bad_because :- neg(do_as_much,Y).
convenience_is_good_because :- pos(convenience,Y).
convenience_is_bad_because :- neg(convenience,Y).
compare(fast_food,X,Y) :- neg(fast_food,X),neg(Y,X), fast_food != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = fast_food.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(god, love).
pos(god, holy).
pos(god, just).
pos(god, righteous).
pos(god, perfect).
pos(god, good).
neg(mankind, god).
neg(mankind, glory).
neg(mankind, law).

% Section 2 - General relationships
relation(god, christ).
relation(god, gospel).
relation(god, salvation).
relation(god, wrath).
relation(gospel, humility).
relation(gospel, salvation).
relation(gospel, christ).
relation(christ, death).
relation(christ, burial).
relation(christ, resurrection).
relation(mankind, depravity).
relation(mankind, sin).
relation(mankind, arrogance).
relation(mankind, glory).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(gay, marry).

Section 2 - General relationships:

relation(gay, marry).
relation(marry, join).
relation(join, marriage).
relation(marriage, formal).
relation(formal, union).
relation(union, man).
relation(union, woman).
relation(man, husband).
relation(woman, wife).

Section 3 - Encoding:

gay_can_marry :- pos(gay, marry).
gay_cannot_marry :- neg(gay, marry).
compare(gay,X,Y) :- neg(gay,X),neg(Y,X), gay != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gay.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(battle_of_vienna, famous_battle).
pos(battle_of_tours, famous_battle).
pos(battle_of_vienna, close_battle).
pos(muslims, move).
pos(muslims, claim).
pos(muslims, flag).
pos(muslims, ottoman_empire).
pos(ottomans, siege).
pos(ottomans, battle).
pos(ottomans, dallying).
pos(ottomans, wait).
pos(ottomans, epic_battle).
pos(mustafa_pasha, commander).
pos(mustafa_pasha, force).
pos(mustafa_pasha, ottoman_troops).
pos(vienna, protection).
pos(vienna, germans).
pos(pasha, lost_window).
pos(pasha, defensive).
pos(relief_force, arrival).
pos(relief_force, germans).
pos(relief_force, poles).
pos(battle, prove).
pos(pasha, waste_time).
pos(pasha, attack).
pos(vienna, fallen).
pos(pasha, stronghold).
pos(ottomans, reinforcements).
pos(ottomans, lost_men).
pos(europeans, lost_men).

neg(ottomans, claim).
neg(ottomans, europe).
neg(ottomans, flag).
neg(ottomans, ottoman_empire).
neg(ottomans, siege).
neg(ottomans, battle).
neg(ottomans, dallying).
neg(ottomans, wait).
neg(ottomans, epic_battle).
neg(mustafa_pasha, commander).
neg(mustafa_pasha, force).
neg(mustafa_pasha, ottoman_troops).
neg(vienna, protection).
neg(vienna, germans).
neg(pasha, lost_window).
neg(pasha, defensive).
neg(relief_force, arrival).
neg(relief_force, germans).
neg(relief_force, poles).
neg(battle, prove).
neg(pasha, waste_time).
neg(pasha, attack).
neg(vienna, fallen).
neg(pasha, stronghold).
neg(ottomans, reinforcements).
neg(ottomans, lost_men).
neg(europeans, lost_men).

Section 2 - General relationships:

relation(battle_of_vienna, battle_of_tours).
relation(muslims, move).
relation(muslims, claim).
relation(muslims, flag).
relation(muslims, ottoman_empire).
relation(ottomans, siege).
relation(ottomans, battle).
relation(ottomans, dallying).
relation(ottomans, wait).
relation(ottomans, epic_battle).
relation(mustafa_pasha, commander).
relation(mustafa_pasha, force).
relation(mustafa_pasha, ottoman_troops).
relation(vienna, protection).
relation(vienna, germans).
relation(pasha, lost_window).
relation(pasha, defensive).
relation(relief_force, arrival).
relation(relief_force, germans).
relation(relief_force, poles).
relation(battle, prove).
relation(pasha, waste_time).
relation(pasha, attack).
relation(vienna, fallen).
relation(pasha, stronghold).
relation(ottomans, reinforcements).
relation(ottomans, lost_men).
relation(europeans, lost_men).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(worship_stars, calvin_cambridge).
neg(worship_stars, kohai).
neg(worship_stars, scarletghost).
neg(worship_stars, samian96).
neg(worship_stars, darknes).
pos(stars, massive).
pos(stars, luminous).
pos(stars, ball).
pos(stars, plasma).
pos(stars, gravity).
pos(rational, reason).
pos(burden_of_proof, shared).
pos(con, build).
pos(con, argue).
pos(con, win).
pos(god, better).
pos(god, rational).

% Section 2 - General relationships
relation(stars, worship).
relation(god, worship).
relation(burden_of_proof, con).
relation(con, burden_of_proof).
relation(con, god).

% Section 3 - Encoding
worship_stars_is_good_because :- pos(worship_stars, Y).
worship_stars_is_bad_because :- neg(worship_stars, Y).
compare(worship_stars,X,Y) :- neg(worship_stars,X),neg(Y,X), worship_stars != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = worship_stars.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(women, important_role).
pos(women, useful_role).
pos(every_person, equal_role).
pos(every_job, dignity).
pos(women, equal_status).
pos(women, equal_roles).

Section 2 - General relationships:

relation(women, society).
relation(men, society).
relation(women, role).
relation(men, role).
relation(women, status).
relation(men, status).
relation(women, dignity).
relation(men, dignity).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(important_subjects, mandatory).
neg(education_system, broad).
pos(freedom, courses).
pos(mathematics, core_subjects).
pos(science, core_subjects).
pos(language, core_subjects).
pos(reading_comprehension, core_subjects).
pos(art, education).
pos(music, education).
pos(pe, education).

Section 2 - General relationships:

relation(important_subjects, mandatory).
relation(education_system, broad).
relation(freedom, courses).
relation(mathematics, core_subjects).
relation(science, core_subjects).
relation(language, core_subjects).
relation(reading_comprehension, core_subjects).
relation(art, education).
relation(music, education).
relation(pe, education).

Section 3 - Encoding:

mandatory_is_good_because :- pos(mandatory,Y).
mandatory_is_bad_because :- neg(mandatory,Y).
broad_is_good_because :- pos(broad,Y).
broad_is_bad_because :- neg(broad,Y).
freedom_is_good_because :- pos(freedom,Y).
freedom_is_bad_because :- neg(freedom,Y).
compare(mandatory,X,Y) :- neg(mandatory,X),neg(Y,X), mandatory != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = mandatory.
compare(broad,X,Y) :- neg(broad,X),neg(Y,X), broad != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = broad.
compare(freedom,X,Y) :- neg(freedom,X),neg(Y,X), freedom != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = freedom.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(red_states, secede).
neg(blue_states, communism).
neg(blue_states, socialism).
neg(government, overstepping_power).
neg(government, small_government).
neg(conservatives, small_government).
neg(social_conservatism, small_government).
neg(red_states, education).
neg(red_states, pre_professional_training).

Section 2 - General relationships:

relation(red_states, blue_states).
relation(government, power).
relation(government, marriage).
relation(government, definition).
relation(government, people).
relation(government, small_government).
relation(government, authoritarianism).
relation(government, social_conservatism).
relation(government, education).
relation(red_states, education).
relation(blue_states, education).

Section 3 - Encoding:

red_states_are_good_because :- pos(red_states, X).
red_states_are_bad_because :- neg(red_states, X).
blue_states_are_good_because :- pos(blue_states, X).
blue_states_are_bad_because :- neg(blue_states, X).
government_is_good_because :- pos(government, X).
government_is_bad_because :- neg(government, X).
compare(red_states, X, Y) :- neg(red_states, X), neg(Y, X), red_states != Y.
compare(blue_states, X, Y) :- neg(blue_states, X), neg(Y, X), blue_states != Y.
compare(government, X, Y) :- neg(government, X), neg(Y, X), government != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(vaccines, untrustworthy).
neg(vaccines, harmful).
pos(government_approved_vaccinations, reliable).
pos(government_approved_vaccinations, protection).
pos(government_approved_vaccinations, compensation).
pos(government_approved_vaccinations, herd_immunity).

Section 2 - General relationships:

relation(government_approved_vaccinations, allergies).
relation(government_approved_vaccinations, orange_juice).
relation(orange_juice, grocery_store).
relation(orange_juice, expiration_date).
relation(orange_juice, compensation).
relation(orange_juice, better_orange_juice).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(avengers, destroy).
pos(avengers, justice_league).
pos(avengers, earth_616).
pos(justice_league, earth_one).
pos(avengers, iron_man).
pos(avengers, captain_america).
pos(avengers, hulk).
pos(avengers, thor).
pos(avengers, hawkeye).
pos(avengers, scarlet_witch).
pos(avengers, black_widow).
pos(justice_league, batman).
pos(justice_league, superman).
pos(justice_league, flash).
pos(justice_league, cyborg).
pos(justice_league, aqua_man).
pos(justice_league, wonder_women).
pos(justice_league, green_arrow).

Section 2 - General relationships:

relation(avengers, justice_league).
relation(avengers, earth_616).
relation(justice_league, earth_one).
relation(avengers, iron_man).
relation(avengers, captain_america).
relation(avengers, hulk).
relation(avengers, thor).
relation(avengers, hawkeye).
relation(avengers, scarlet_witch).
relation(avengers, black_widow).
relation(justice_league, batman).
relation(justice_league, superman).
relation(justice_league, flash).
relation(justice_league, cyborg).
relation(justice_league, aqua_man).
relation(justice_league, wonder_women).
relation(justice_league, green_arrow).

Section 3 - Encoding:

avengers_can_destroy_justice_league :- pos(avengers, destroy), pos(avengers, justice_league).
justice_league_can_destroy_avengers :- pos(justice_league, destroy), pos(justice_league, avengers).
compare(avengers, justice_league, X) :- neg(avengers, X), neg(justice_league, X), avengers != justice_league.
###DELIMITER###
 Section 1 - Negative and positive relationships:
neg(alcohol, moderation).
pos(alcohol, legal).
pos(alcohol, available).

Section 2 - General relationships:
relation(alcohol, teenager).
relation(alcohol, age).
relation(alcohol, party).
relation(alcohol, ill).
relation(alcohol, world).

Section 3 - Encoding:
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(semi_intelligent_life, other_planets).
neg(pro, conclusion).
pos(pro, debate).
pos(author, conclusion).
pos(author, first_round).
pos(author, side).
pos(author, universe).
pos(author, faith).
neg(author, odds).
neg(author, contact).

Section 2 - General relationships:

relation(semi_intelligent_life, other_planets).
relation(pro, conclusion).
relation(author, debate).
relation(author, first_round).
relation(author, side).
relation(author, universe).
relation(author, faith).
relation(author, odds).
relation(author, contact).

Section 3 - Encoding:

semi_intelligent_life_exists_because :- pos(semi_intelligent_life, other_planets).
semi_intelligent_life_does_not_exist_because :- neg(semi_intelligent_life, other_planets).
pro_is_good_because :- pos(pro, Y).
pro_is_bad_because :- neg(pro, Y).
author_is_good_because :- pos(author, Y).
author_is_bad_because :- neg(author, Y).
compare(semi_intelligent_life,X,Y) :- neg(semi_intelligent_life,X),neg(Y,X), semi_intelligent_life != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = semi_intelligent_life.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(christian_god, real).
neg(false_gods, real).
pos(false_gods, invented_by_men).
pos(false_gods, inspired_by_demons).
pos(false_gods, deceive_people).
neg(false_gods, true_god).
neg(false_gods, living_god).
pos(people, sinned_against_god).
pos(god, holy).
pos(god, righteous).
pos(god, punish_sinner).
pos(god, punish_law_breaker).
neg(god, no_law).
pos(law, punishment).
pos(breaking_law, death).
pos(breaking_law, separation_from_god).
pos(sinners, need_escape_from_god).
neg(sinners, keep_law_of_god).
pos(jesus, god_in_flesh).
pos(jesus, divine).
pos(jesus, human).
pos(jesus, made_under_law).
pos(jesus, fulfilled_law).
pos(jesus, sacrifice_to_god).
pos(jesus, cleanse_people_from_sins).
pos(jesus, undo_offense_to_god).

Section 2 - General relationships:

relation(christian_god, false_gods).
relation(false_gods, people).
relation(people, god).
relation(god, law).
relation(law, breaking_law).
relation(breaking_law, sinners).
relation(sinners, jesus).
relation(jesus, sacrifice_to_god).

Section 3 - Encoding:

christian_god_is_real_because :- pos(christian_god, real).
false_gods_are_not_real_because :- neg(false_gods, real).
false_gods_are_invented_by_men_because :- pos(false_gods, invented_by_men).
false_gods_are_inspired_by_demons_because :- pos(false_gods, inspired_by_demons).
false_gods_deceive_people_because :- pos(false_gods, deceive_people).
false_gods_are_not_true_god_because :- neg(false_gods, true_god).
false_gods_are_not_living_god_because :- neg(false_gods, living_god).
people_have_sinned_against_god_because :- pos(people, sinned_against_god).
god_is_holy_because :- pos(god, holy).
god_is_righteous_because :- pos(god, righteous).
god_must_punish_sinner_because :- pos(god, punish_sinner).
god_must_punish_law_breaker_because :- pos(god, punish_law_breaker).
god_has_no_law_because :- neg(god, no_law).
law_has_punishment_because :- pos(law, punishment).
breaking_law_is_death_because :- pos(breaking_law, death).
breaking_law_is_separation_from_god_because :- pos(breaking_law, separation_from_god).
sinners_need_escape_from_god_because :- pos(sinners, need_escape_from_god).
sinners_cannot_keep_law_of_god_because :- neg(sinners, keep_law_of_god).
jesus_is_god_in_flesh_because :- pos(jesus, god_in_flesh).
jesus_is_divine_because :- pos(jesus, divine).
jesus_is_human_because :- pos(jesus, human).
jesus_was_made_under_law_because :- pos(jesus, made_under_law).
jesus_fulfilled_law_because :- pos(jesus, fulfilled_law).
jesus_sacrifice_to_god_because :- pos(jesus, sacrifice_to_god).
jesus_can_cleanse_people_from_sins_because :- pos(jesus, cleanse_people_from_sins).
jesus_can_undo_offense_to_god_because :- pos(jesus, undo_offense_to_god).
compare(christian_god,X,Y) :- neg(christian_god,X),neg(Y,X), christian_god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = christian_god.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(jesus, hell).
pos(jesus, saved).
pos(god, creation).
pos(god, pleasure).
pos(god, will).
pos(jesus, judgement).
pos(god, decided).

% Section 2 - General relationships
relation(jesus, god).
relation(jesus, judgement).
relation(god, creation).
relation(jesus, will).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(advertising, patient_awareness).
pos(patient_awareness, appropriate_medication).
pos(advertising, patient_knowledge).
pos(advertising, innovation).
pos(advertising, patient_request).
pos(advertising, patient_doctor_relationship).
pos(advertising, patient_health_interest).
pos(herceptin, breast_cancer_damage).
pos(herceptin, patient_access).
pos(herceptin, patient_information).
pos(herceptin, patient_push).
pos(herceptin, patient_authorization).
pos(herceptin, patient_doctor_relationship).
pos(herceptin, patient_health_interest).
pos(patient_doctor_relationship, appropriate_medication).
pos(patient_doctor_relationship, patient_health_interest).
pos(patient_health_interest, appropriate_medication).
pos(patient_health_interest, patient_doctor_relationship).
pos(patient_knowledge, appropriate_medication).
pos(patient_knowledge, patient_request).
pos(patient_knowledge, patient_doctor_relationship).
pos(patient_knowledge, patient_health_interest).
pos(patient_request, appropriate_medication).
pos(patient_request, patient_doctor_relationship).
pos(patient_request, patient_health_interest).
pos(appropriate_medication, patient_health_interest).
pos(appropriate_medication, patient_doctor_relationship).
pos(patient_doctor_relationship, patient_health_interest).
pos(patient_health_interest, patient_doctor_relationship).

neg(private_medical_insurance_firms, patient_information).
neg(national_health_services, patient_information).
neg(private_medical_insurance_firms, patient_access).
neg(national_health_services, patient_access).
neg(private_medical_insurance_firms, patient_push).
neg(national_health_services, patient_push).
neg(private_medical_insurance_firms, patient_authorization).
neg(national_health_services, patient_authorization).
neg(private_medical_insurance_firms, patient_doctor_relationship).
neg(national_health_services, patient_doctor_relationship).
neg(private_medical_insurance_firms, patient_health_interest).
neg(national_health_services, patient_health_interest).
neg(private_medical_insurance_firms, appropriate_medication).
neg(national_health_services, appropriate_medication).
neg(private_medical_insurance_firms, patient_knowledge).
neg(national_health_services, patient_knowledge).
neg(private_medical_insurance_firms, patient_request).
neg(national_health_services, patient_request).
neg(private_medical_insurance_firms, innovation).
neg(national_health_services, innovation).
neg(private_medical_insurance_firms, advertising).
neg(national_health_services, advertising).
neg(private_medical_insurance_firms, patient_awareness).
neg(national_health_services, patient_awareness).
neg(private_medical_insurance_firms, herceptin).
neg(national_health_services, herceptin).

Section 2 - General relationships:

relation(advertising, patient_awareness).
relation(advertising, patient_knowledge).
relation(advertising, innovation).
relation(advertising, patient_request).
relation(advertising, patient_doctor_relationship).
relation(advertising, patient_health_interest).
relation(herceptin, breast_cancer_damage).
relation(herceptin, patient_access).
relation(herceptin, patient_information).
relation(herceptin, patient_push).
relation(herceptin, patient_authorization).
relation(herceptin, patient_doctor_relationship).
relation(herceptin, patient_health_interest).
relation(patient_doctor_relationship, appropriate_medication).
relation(patient_doctor_relationship, patient_health_interest).
relation(patient_health_interest, appropriate_medication).
relation(patient_health_interest, patient_doctor_relationship).
relation(patient_knowledge, appropriate_medication).
relation(patient_knowledge, patient_request).
relation(patient_knowledge, patient_doctor_relationship).
relation(patient_knowledge, patient_health_interest).
relation(patient_request, appropriate_medication).
relation(patient_request, patient_doctor_relationship).
relation(patient_request, patient_health_interest).
relation(appropriate_medication, patient_health_interest).
relation(appropriate_medication, patient_doctor_relationship).
relation(patient_doctor_relationship, patient_health_interest).
relation(patient_health_interest, patient_doctor_relationship).
relation(private_medical_insurance_firms, patient_information).
relation(private_medical_insurance_firms, patient_access).
relation(private_medical_insurance_firms, patient_push).
relation(private_medical_insurance_firms, patient_authorization).
relation(private_medical_insurance_firms, patient_doctor_relationship).
relation(private_medical_insurance_firms, patient_health_interest).
relation(private_medical_insurance_firms, appropriate_medication).
relation(private_medical_insurance_firms, patient_knowledge).
relation(private_medical_insurance_firms, patient_request).
relation(private_medical_insurance_firms, innovation).
relation(private_medical_insurance_firms, advertising).
relation(private_medical_insurance_firms, patient_awareness).
relation(private_medical_insurance_firms, herceptin).
relation(national_health_services, patient_information).
relation(national_health_services, patient_access).
relation(national_health_services, patient_push).
relation(national_health_services, patient_authorization).
relation(national_health_services, patient_doctor_relationship).
relation(national_health_services, patient_health_interest).
relation(national_health_services, appropriate_medication).
relation(national_health_services, patient_knowledge).
relation(national_health_services, patient_request).
relation(national_health_services, innovation).
relation(national_health_services, advertising).
relation(national_health_services, patient_awareness).
relation(national_health_services, herceptin).

Section 3 - Encoding:

advertising_is_good_because :- pos(advertising,Y).
advertising_is_bad_because :- neg(advertising,Y).
herceptin_is_good_because :- pos(herceptin,Y).
herceptin_is_bad_because :- neg(herceptin,Y).
patient_doctor_relationship_is_good_because :- pos(patient_doctor_relationship,Y).
patient_doctor_relationship_is_bad_because :- neg(patient_doctor_relationship,Y).
patient_health_interest_is_good_because :- pos(patient_health_interest,Y).
patient_health_interest_is_bad_because :- neg(patient_health_interest,Y).
patient_information_is_good_because :- pos(patient_information,Y).
patient_information_is_bad_because :- neg(patient_information,Y).
patient_knowledge_is_good_because :- pos(patient_knowledge,Y).
patient_knowledge_is_bad_because :- neg(patient_knowledge,Y).
patient_request_is_good_because :- pos(patient_request,Y).
patient_request_is_bad_because :- neg(patient_request,Y).
appropriate_medication_is_good_because :- pos(appropriate_medication,Y).
appropriate_medication_is_bad_because :- neg(appropriate_medication,Y).
innovation_is_good_because :- pos(innovation,Y).
innovation_is_bad_because :- neg(innovation,Y).
private_medical_insurance_firms_is_good_because :- pos(private_medical_insurance_firms,Y).
private_medical_insurance_firms_is_bad_because :- neg(private_medical_insurance_firms,Y).
national_health_services_is_good_because :- pos(national_health_services,Y).
national_health_services_is_bad_because :- neg(national_health_services,Y).
compare(advertising,X,Y) :- neg(advertising,X),neg(Y,X), advertising != Y.
compare(herceptin,X,Y) :- neg(herceptin,X),neg(Y,X), herceptin != Y.
compare(patient_doctor_relationship,X,Y) :- neg(patient_doctor_relationship,X),neg(Y,X), patient_doctor_relationship != Y.
compare(patient_health_interest,X,Y) :- neg(patient_health_interest,X),neg(Y,X), patient_health_interest != Y.
compare(patient_information,X,Y) :- neg(patient_information,X),neg(Y,X), patient_information != Y.
compare(patient_knowledge,X,Y) :- neg(patient_knowledge,X),neg(Y,X), patient_knowledge != Y.
compare(patient_request,X,Y) :- neg(patient_request,X),neg(Y,X), patient_request != Y.
compare(appropriate_medication,X,Y) :- neg(appropriate_medication,X),neg(Y,X), appropriate_medication != Y.
compare(innovation,X,Y) :- neg(innovation,X),neg(Y,X), innovation != Y.
compare(private_medical_insurance_firms,X,Y) :- neg(private_medical_insurance_firms,X),neg(Y,X), private_medical_insurance_firms != Y.
compare(national_health_services,X,Y) :- neg(national_health_services,X),neg(Y,X), national_health_services != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(abstinence_only, saving_sex_for_marriage).
pos(abstinence_education, public_health_strategy).
pos(abstinence_education, risk_avoidance).
pos(abstinence_education, helping_young_people).
pos(abstinence_education, avoiding_exposure_to_harm).
pos(abstinence_education, reducing_risks_of_out_of_wedlock_pregnancy).
pos(abstinence_education, reducing_risks_of_sexually_transmitted_diseases).
pos(saving_sex_for_marriage, best_choice_for_health_and_happiness).
pos(remaining_faithful, best_choice_for_health_and_happiness).

Section 2 - General relationships:

relation(abstinence_only, abstinence_education).
relation(abstinence_only, saving_sex_for_marriage).
relation(abstinence_education, public_health_strategy).
relation(abstinence_education, risk_avoidance).
relation(abstinence_education, helping_young_people).
relation(abstinence_education, avoiding_exposure_to_harm).
relation(abstinence_education, reducing_risks_of_out_of_wedlock_pregnancy).
relation(abstinence_education, reducing_risks_of_sexually_transmitted_diseases).
relation(saving_sex_for_marriage, best_choice_for_health_and_happiness).
relation(remaining_faithful, best_choice_for_health_and_happiness).

Section 3 - Encoding:

abstinence_only_is_good_because :- pos(abstinence_only, Y).
abstinence_only_is_bad_because :- neg(abstinence_only, Y).
compare(abstinence_only,X,Y) :- neg(abstinence_only,X),neg(Y,X), abstinence_only != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = abstinence_only.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(modern_video_games, little_to_no_sexism).
neg(gta_strip_club, sexism).
pos(gta_strip_club, real_world_events).
neg(prostitution, exploitative).
neg(prostitution, objectifies_women).
neg(gta, sexism).
pos(gta, displays_sexism).
neg(prostitution, normalises_it).
neg(prostitution, makes_it_seem_more_acceptable).
neg(prostitution, disconnects_people_from_the_harsh_reality_of_desperate_women_involved_in_prostitution).
neg(gta, realistic).
pos(bbc, created_a_few_interesting_videos_on_youtube_regarding_the_lives_of_female_uk_university_students_forced_into_prostitution_to_make_ends_meet).
pos(gta, detracts_from_the_real_life_issue).
pos(overt_sexism, decreased_in_recent_years).
pos(call_of_duty_franchise, adding_female_characters_in_modern_games).
neg(damsel_in_distress_convention, serious).
pos(damsel_in_distress_convention, a_part_of_the_underlying_sexism_of_most_video_games).
neg(princess, saving_mario).
neg(fifa, offers_nearly_as_many_features_as_its_male_counterpart).
pos(fifa, represents_the_clear_gap_in_popularity_between_male_and_female_football).
pos(fifa, a_fully_fledged_female_game_option_could_encourage_many_young_gamers_into_looking_into_supporting_real_female_football).
pos(online_and_multiplayer_modes, sexism_is_obviously_community_driven).
neg(game_developer, can_easily_solve_sexism_on_online_and_multiplayer_modes).
pos(game_developer, can_ban_sexist_users).
pos(female_gamers, receive_abuse).
pos(female_gamers, receive_serious_harassment).
pos(female_gamers, receive_sexual_comments).
pos(male_gamers, receive_abuse).
pos(female_gamers, are_often_targeted_and_singled_out_based_on_gender).

% Section 2 - General relationships
relation(modern_video_games, sexism).
relation(gta_strip_club, real_world_events).
relation(gta_strip_club, sexism).
relation(prostitution, exploitative).
relation(prostitution, objectifies_women).
relation(gta, sexism).
relation(gta, displays_sexism).
relation(prostitution, normalises_it).
relation(prostitution, makes_it_seem_more_acceptable).
relation(prostitution, disconnects_people_from_the_harsh_reality_of_desperate_women_involved_in_prostitution).
relation(gta, realistic).
relation(bbc, created_a_few_interesting_videos_on_youtube_regarding_the_lives_of_female_uk_university_students_forced_into_prostitution_to_make_ends_meet).
relation(gta, detracts_from_the_real_life_issue).
relation(overt_sexism, decreased_in_recent_years).
relation(call_of_duty_franchise, adding_female_characters_in_modern_games).
relation(damsel_in_distress_convention, serious).
relation(damsel_in_distress_convention, a_part_of_the_underlying_sexism_of_most_video_games).
relation(princess, saving_mario).
relation(fifa, offers_nearly_as_many_features_as_its_male_counterpart).
relation(fifa, represents_the_clear_gap_in_popularity_between_male_and_female_football).
relation(fifa, a_fully_fledged_female_game_option_could_encourage_many_young_gamers_into_looking_into_supporting_real_female_football).
relation(online_and_multiplayer_modes, sexism_is_obviously_community_driven).
relation(game_developer, can_easily_solve_sexism_on_online_and_multiplayer_modes).
relation(game_developer, can_ban_sexist_users).
relation(female_gamers, receive_abuse).
relation(female_gamers, receive_serious_harassment).
relation(female_gamers, receive_sexual_comments).
relation(male_gamers, receive_abuse).
relation(female_gamers, are_often_targeted_and_singled_out_based_on_gender).

% Section 3 - Encoding
modern_video_games_is_good_because :- pos(modern_video_games, Y).
modern_video_games_is_bad_because :- neg(modern_video_games, Y).
compare(modern_video_games,X,Y) :- neg(modern_video_games,X),neg(Y,X), modern_video_games != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = modern_video_games.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(video_games, communication).
pos(video_games, hand_eye_coordination).
pos(video_games, simulation).
pos(video_games, rehabilitation).
pos(video_games, fun).
pos(video_games, linking).
pos(xbox_360, communication).
pos(xbox_360, fun).
pos(xbox_360, hobby).
pos(halo_3, communication).
pos(halo_3, fun).
pos(halo_3, hobby).
pos(wii, rehabilitation).
pos(wii, fun).
pos(wii, freedom).
pos(wii, pain_relief).

neg(video_games, obesity).
neg(video_games, psychopath).

Section 2 - General relationships:

relation(video_games, obesity).
relation(video_games, psychopath).
relation(video_games, communication).
relation(video_games, hand_eye_coordination).
relation(video_games, simulation).
relation(video_games, rehabilitation).
relation(video_games, fun).
relation(video_games, linking).
relation(xbox_360, communication).
relation(xbox_360, fun).
relation(xbox_360, hobby).
relation(halo_3, communication).
relation(halo_3, fun).
relation(halo_3, hobby).
relation(wii, rehabilitation).
relation(wii, fun).
relation(wii, freedom).
relation(wii, pain_relief).

Section 3 - Encoding:

video_games_are_good_because :- pos(video_games, Y).
video_games_are_bad_because :- neg(video_games, Y).
compare(video_games,X,Y) :- neg(video_games,X),neg(Y,X), video_games != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = video_games.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(white_people, opinions).
neg(white_people, acceptance).
pos(black_people, white_people).
neg(white_people, world).
neg(white_people, economy).

Section 2 - General relationships:

relation(white_people, opinions).
relation(white_people, acceptance).
relation(black_people, white_people).
relation(white_people, world).
relation(white_people, economy).

Section 3 - Encoding:

white_people_are_bad_because :- neg(white_people,Y).
white_people_are_good_because :- pos(white_people,Y).
compare(white_people,X,Y) :- neg(white_people,X),neg(Y,X), white_people != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = white_people.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(childless_people, educating_children).
neg(people_who_take_care_of_their_health, people_who_drink_and_smoke_and_eat_to_excess).
pos(direct_tax, incentive_for_people_to_use_less_of_society’s_resources).

Section 2 - General relationships:

relation(income_tax, equitable_society).
relation(childless_people, educating_children).
relation(people_who_take_care_of_their_health, people_who_drink_and_smoke_and_eat_to_excess).
relation(direct_tax, safety_net).
relation(direct_tax, incentive_for_people_to_use_less_of_society’s_resources).
relation(indirect_taxation, funding_nhs).
relation(indirect_taxation, running_public_transport).
relation(direct_taxation, revenue).
relation(indirect_taxation, revenue).

Section 3 - Encoding:

elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(hitchens_razor, evidence).
pos(hitchens_razor, burden_of_proof).
neg(you, valid_argument).
neg(you, evidence).
neg(you, refutation).
pos(you, opinion).
neg(you, instigator).

Section 2 - General relationships:

relation(hitchens_razor, evidence).
relation(hitchens_razor, burden_of_proof).
relation(you, valid_argument).
relation(you, evidence).
relation(you, refutation).
relation(you, opinion).
relation(you, instigator).

Section 3 - Encoding:

hitchens_razor_is_good_because :- pos(hitchens_razor, Y).
hitchens_razor_is_bad_because :- neg(hitchens_razor, Y).
you_are_good_because :- pos(you, Y).
you_are_bad_because :- neg(you, Y).
compare(hitchens_razor,X,Y) :- neg(hitchens_razor,X),neg(Y,X), hitchens_razor != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = hitchens_razor.
compare(you,X,Y) :- neg(you,X),neg(Y,X), you != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = you.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(english_in_northern_us, normans).
pos(english_in_southern_us, anglo_saxons).
neg(names, meaning).
pos(weiler, german_name).
neg(weiler, german_ancestry).
pos(opponent, evidence).

Section 2 - General relationships:

relation(english_in_northern_us, normans).
relation(english_in_southern_us, anglo_saxons).
relation(names, meaning).
relation(weiler, german_name).
relation(weiler, german_ancestry).
relation(opponent, evidence).

Section 3 - Encoding:

english_in_northern_us_is_good_because :- pos(english_in_northern_us,Y).
english_in_northern_us_is_bad_because :- neg(english_in_northern_us,Y).
english_in_southern_us_is_good_because :- pos(english_in_southern_us,Y).
english_in_southern_us_is_bad_because :- neg(english_in_southern_us,Y).
names_are_good_because :- pos(names,Y).
names_are_bad_because :- neg(names,Y).
weiler_is_good_because :- pos(weiler,Y).
weiler_is_bad_because :- neg(weiler,Y).
opponent_is_good_because :- pos(opponent,Y).
opponent_is_bad_because :- neg(opponent,Y).
compare(english_in_northern_us,X,Y) :- neg(english_in_northern_us,X),neg(Y,X), english_in_northern_us != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = english_in_northern_us.
compare(english_in_southern_us,X,Y) :- neg(english_in_southern_us,X),neg(Y,X), english_in_southern_us != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = english_in_southern_us.
compare(names,X,Y) :- neg(names,X),neg(Y,X), names != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = names.
compare(weiler,X,Y) :- neg(weiler,X),neg(Y,X), weiler != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = weiler.
compare(opponent,X,Y) :- neg(opponent,X),neg(Y,X), opponent != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = opponent.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(classical_education, small_class_size).
pos(classical_education, one_on_one_tutoring).
pos(classical_education, weekly_meetings).
pos(classical_education, debate).
pos(classical_education, rhetoric).
pos(classical_education, grammar).
pos(classical_education, research).
pos(classical_education, exposition).
pos(classical_education, composition).
pos(classical_education, logic).
neg(public_school, small_class_size).
neg(public_school, one_on_one_tutoring).
neg(public_school, weekly_meetings).
neg(public_school, in_depth_teaching).

Section 2 - General relationships:

relation(classical_education, public_school).
relation(classical_education, small_class_size).
relation(classical_education, one_on_one_tutoring).
relation(classical_education, weekly_meetings).
relation(classical_education, debate).
relation(classical_education, rhetoric).
relation(classical_education, grammar).
relation(classical_education, research).
relation(classical_education, exposition).
relation(classical_education, composition).
relation(classical_education, logic).
relation(public_school, large_class_size).
relation(public_school, teacher_demonstrates_problems).

Section 3 - Encoding:

classical_education_is_good_because :- pos(classical_education, Y).
classical_education_is_bad_because :- neg(classical_education, Y).
public_school_is_good_because :- pos(public_school, Y).
public_school_is_bad_because :- neg(public_school, Y).
compare(classical_education, public_school, Y) :- neg(classical_education, Y), neg(public_school, Y), classical_education != public_school.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(abortion, murder).
pos(abortion, ending_the_life_of_an_innocent_entity).
pos(abortion, termination_of_pregnancy).
pos(abortion, potential_life).
pos(abortion, unborn_fetus).
pos(abortion, potential_baby).
pos(abortion, a_mother_is_still_a_mother_even_if_the_fetus_isn't_existing).
pos(abortion, there's_a_process_from_embryo_fetus_and_to_a_baby).
pos(abortion, abortion_clinics_are_committing_homicide).
pos(abortion, the_determinate_of_whether_the_baby_is_alive_or_not_is_whether_the_mother_wants_the_baby).
pos(abortion, want_is_necessary_for_a_life_to_be_valuable).

neg(abortion, giving_an_early_term_birth).
neg(abortion, giving_the_baby_a_chance_to_survive).
neg(abortion, ending_of_a_life).
neg(abortion, a_being).
neg(abortion, survived).
neg(abortion, a_person's_brain_does_not_exist_simply_because_it_is_inside_their_head).
neg(abortion, die).
neg(abortion, anything_to_work_on).
neg(abortion, fully_exists).
neg(abortion, lives).
neg(abortion, severe_scoliosis).
neg(abortion, a_person_is_a_being_that_has_certain_capacities_or_attributes_such_as_reason_morality_consciousness_or_self_consciousness).
neg(abortion, people_with_disabilities_and_conditions).
neg(abortion, they_couldn't_support_the_baby).
neg(abortion, adoption_would_be_a_great_solution).
neg(abortion, there_is_no_thought_put_into_ending_a_baby's_life).
neg(abortion, malicious_intent).
neg(abortion, premeditation).
neg(abortion, doctors_who_feel_sorry_for_aborting_a_baby_instead_of_feeling_satisfied_thinking_yes_i_killed_it).
neg(abortion, the_mother's_decision).
neg(abortion, a_baby_be_alive_even_if_the_mother_doesn't_want_the_baby).
neg(abortion, it_would_be_okay_for_someone_to_kill_their_2_year_old_child_because_they_do_not_want_he_she).

Section 2 - General relationships:

relation(abortion, murder).
relation(abortion, ending_the_life_of_an_innocent_entity).
relation(abortion, termination_of_pregnancy).
relation(abortion, potential_life).
relation(abortion, unborn_fetus).
relation(abortion, potential_baby).
relation(abortion, a_mother_is_still_a_mother_even_if_the_fetus_isn't_existing).
relation(abortion, there's_a_process_from_embryo_fetus_and_to_a_baby).
relation(abortion, abortion_clinics_are_committing_homicide).
relation(abortion, the_determinate_of_whether_the_baby_is_alive_or_not_is_whether_the_mother_wants_the_baby).
relation(abortion, want_is_necessary_for_a_life_to_be_valuable).
relation(abortion, giving_an_early_term_birth).
relation(abortion, giving_the_baby_a_chance_to_survive).
relation(abortion, ending_of_a_life).
relation(abortion, a_being).
relation(abortion, survived).
relation(abortion, a_person's_brain_does_not_exist_simply_because_it_is_inside_their_head).
relation(abortion, die).
relation(abortion, anything_to_work_on).
relation(abortion, fully_exists).
relation(abortion, lives).
relation(abortion, severe_scoliosis).
relation(abortion, a_person_is_a_being_that_has_certain_capacities_or_attributes_such_as_reason_morality_consciousness_or_self_consciousness).
relation(abortion, people_with_disabilities_and_conditions).
relation(abortion, they_couldn't_support_the_baby).
relation(abortion, adoption_would_be_a_great_solution).
relation(abortion, there_is_no_thought_put_into_ending_a_baby's_life).
relation(abortion, malicious_intent).
relation(abortion, premeditation).
relation(abortion, doctors_who_feel_sorry_for_aborting_a_baby_instead_of_feeling_satisfied_thinking_yes_i_killed_it).
relation(abortion, the_mother's_decision).
relation(abortion, a_baby_be_alive_even_if_the_mother_doesn't_want_the_baby).
relation(abortion, it_would_be_okay_for_someone_to_kill_their_2_year_old_child_because_they_do_not_want_he_she).

Section 3 - Encoding:

abortion_is_murder :- pos(abortion, murder).
abortion_is_not_murder :- neg(abortion, murder).
abortion_is_ending_the_life_of_an_innocent_entity :- pos(abortion, ending_the_life_of_an_innocent_entity).
abortion_is_not_ending_the_life_of_an_innocent_entity :- neg(abortion, ending_the_life_of_an_innocent_entity).
abortion_is_termination_of_pregnancy :- pos(abortion, termination_of_pregnancy).
abortion_is_not_termination_of_pregnancy :- neg(abortion, termination_of_pregnancy).
abortion_is_potential_life :- pos(abortion, potential_life).
abortion_is_not_potential_life :- neg(abortion, potential_life).
abortion_is_unborn_fetus :- pos(abortion, unborn_fetus).
abortion_is_not_unborn_fetus :- neg(abortion, unborn_fetus).
abortion_is_potential_baby :- pos(abortion, potential_baby).
abortion_is_not_potential_baby :- neg(abortion, potential_baby).
abortion_is_a_mother_is_still_a_mother_even_if_the_fetus_isn't_existing :- pos(abortion, a_mother_is_still_a_mother_even_if_the_fetus_isn't_existing).
abortion_is_not_a_mother_is_still_a_mother_even_if_the_fetus_isn't_existing :- neg(abortion, a_mother_is_still_a_mother_even_if_the_fetus_isn't_existing).
abortion_is_there's_a_process_from_embryo_fetus_and_to_a_baby :- pos(abortion, there's_a_process_from_embryo_fetus_and_to_a_baby).
abortion_is_not_there's_a_process_from_embryo_fetus_and_to_a_baby :- neg(abortion, there's_a_process_from_embryo_fetus_and_to_a_baby).
abortion_is_abortion_clinics_are_committing_homicide :- pos(abortion, abortion_clinics_are_committing_homicide).
abortion_is_not_abortion_clinics_are_committing_homicide :- neg(abortion, abortion_clinics_are_committing_homicide).
abortion_is_the_determinate_of_whether_the_baby_is_alive_or_not_is_whether_the_mother_wants_the_baby :- pos(abortion, the_determinate_of_whether_the_baby_is_alive_or_not_is_whether_the_mother_wants_the_baby).
abortion_is_not_the_determinate_of_whether_the_baby_is_alive_or_not_is_whether_the_mother_wants_the_baby :- neg(abortion, the_determinate_of_whether_the_baby_is_alive_or_not_is_whether_the_mother_wants_the_baby).
abortion_is_want_is_necessary_for_a_life_to_be_valuable :- pos(abortion, want_is_necessary_for_a_life_to_be_valuable).
abortion_is_not_want_is_necessary_for_a_life_to_be_valuable :- neg(abortion, want_is_necessary_for_a_life_to_be_valuable).
abortion_is_giving_an_early_term_birth :- pos(abortion, giving_an_early_term_birth).
abortion_is_not_giving_an_early_term_birth :- neg(abortion, giving_an_early_term_birth).
abortion_is_giving_the_baby_a_chance_to_survive :- pos(abortion, giving_the_baby_a_chance_to_survive).
abortion_is_not_giving_the_baby_a_chance_to_survive :- neg(abortion, giving_the_baby_a_chance_to_survive).
abortion_is_ending_of_a_life :- pos(abortion, ending_of_a_life).
abortion_is_not_ending_of_a_life :- neg(abortion, ending_of_a_life).
abortion_is_a_being :- pos(abortion, a_being).
abortion_is_not_a_being :- neg(abortion, a_being).
abortion_is_survived :- pos(abortion, survived).
abortion_is_not_survived :- neg(abortion, survived).
abortion_is_a_person's_brain_does_not_exist_simply_because_it_is_inside_their_head :- pos(abortion, a_person's_brain_does_not_exist_simply_because_it_is_inside_their_head).
abortion_is_not_a_person's_brain_does_not_exist_simply_because_it_is_inside_their_head :- neg(abortion, a_person's_brain_does_not_exist_simply_because_it_is_inside_their_head).
abortion_is_die :- pos(abortion, die).
abortion_is_not_die :- neg(abortion, die).
abortion_is_anything_to_work_on :- pos(abortion, anything_to_work_on).
abortion_is_not_anything_to_work_on :- neg(abortion, anything_to_work_on).
abortion_is_fully_exists :- pos(abortion, fully_exists).
abortion_is_not_fully_exists :- neg(abortion, fully_exists).
abortion_is_lives :- pos(abortion, lives).
abortion_is_not_lives :- neg(abortion, lives).
abortion_is_severe_scoliosis :- pos(abortion, severe_scoliosis).
abortion_is_not_severe_scoliosis :- neg(abortion, severe_scoliosis).
abortion_is_a_person_is_a_being_that_has_certain_capacities_or_attributes_such_as_reason_morality_consciousness_or_self_consciousness :- pos(abortion, a_person_is_a_being_that_has_certain_capacities_or_attributes_such_as_reason_morality_consciousness_or_self_consciousness).
abortion_is_not_a_person_is_a_being_that_has_certain_capacities_or_attributes_such_as_reason_morality_consciousness_or_self_consciousness :- neg(abortion, a_person_is_a_being_that_has_certain_capacities_or_attributes_such_as_reason_morality_consciousness_or_self_consciousness).
abortion_is_people_with_disabilities_and_conditions :- pos(abortion, people_with_disabilities_and_conditions).
abortion_is_not_people_with_disabilities_and_conditions :- neg(abortion, people_with_disabilities_and_conditions).
abortion_is_they_couldn't_support_the_baby :- pos(abortion, they_couldn't_support_the_baby).
abortion_is_not_they_couldn't_support_the_baby :- neg(abortion, they_couldn't_support_the_baby).
abortion_is_adoption_would_be_a_great_solution :- pos(abortion, adoption_would_be_a_great_solution).
abortion_is_not_adoption_would_be_a_great_solution :- neg(abortion, adoption_would_be_a_great_solution).
abortion_is_there_is_no_thought_put_into_ending_a_baby's_life :- pos(abortion, there_is_no_thought_put_into_ending_a_baby's_life).
abortion_is_not_there_is_no_thought_put_into_ending_a_baby's_life :- neg(abortion, there_is_no_thought_put_into_ending_a_baby's_life).
abortion_is_malicious_intent :- pos(abortion, malicious_intent).
abortion_is_not_malicious_intent :- neg(abortion, malicious_intent).
abortion_is_premeditation :- pos(abortion, premeditation).
abortion_is_not_premeditation :- neg(abortion, premeditation).
abortion_is_doctors_who_feel_sorry_for_aborting_a_baby_instead_of_feeling_satisfied_thinking_yes_i_killed_it :- pos(abortion, doctors_who_feel_sorry_for_aborting_a_baby_instead_of_feeling_satisfied_thinking_yes_i_killed_it).
abortion_is_not_doctors_who_feel_sorry_for_aborting_a_baby_instead_of_feeling_satisfied_thinking_yes_i_killed_it :- neg(abortion, doctors_who_feel_sorry_for_aborting_a_baby_instead_of_feeling_satisfied_thinking_yes_i_killed_it).
abortion_is_the_mother's_decision :- pos(abortion, the_mother's_decision).
abortion_is_not_the_mother's_decision :- neg(abortion, the_mother's_decision).
abortion_is_a_baby_be_alive_even_if_the_mother_doesn't_want_the_baby :- pos(abortion, a_baby_be_alive_even_if_the_mother_doesn't_want_the_baby).
abortion_is_not_a_baby_be_alive_even_if_the_mother_doesn't_want_the_baby :- neg(abortion, a_baby_be_alive_even_if_the_mother_doesn't_want_the_baby).
abortion_is_it_would_be_okay_for_someone_to_kill_their_2_year_old_child_because_they_do_not_want_he_she :- pos(abortion, it_would_be_okay_for_someone_to_kill_their_2_year_old_child_because_they_do_not_want_he_she).
abortion_is_not_it_would_be_okay_for_someone_to_kill_their_2_year_old_child_because_they_do_not_want_he_she :- neg(abortion, it_would_be_okay_for_someone_to_kill_their_2_year_old_child_because_they_do_not_want_he_she).

compare(abortion,X,Y) :- neg(abortion,X),neg(abortion,Y), abortion != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = abortion.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(national_health_care_system, american_society).
neg(national_health_care_system, apathy).
neg(national_health_care_system, well_being).
neg(national_health_care_system, taxes).
neg(national_health_care_system, bourgeois).

Section 2 - General relationships:

relation(national_health_care_system, american_society).
relation(national_health_care_system, apathy).
relation(national_health_care_system, well_being).
relation(national_health_care_system, taxes).
relation(national_health_care_system, bourgeois).

Section 3 - Encoding:

national_health_care_system_is_bad_because :- neg(national_health_care_system, Y).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(king_dedede, good_recovery).
pos(king_dedede, good_aerial_mobility).
pos(king_dedede, good_range).
pos(king_dedede, good_knockback).
pos(king_dedede, massive_damage).
pos(king_dedede, good_edge_guarding).
pos(king_dedede, gordo).

Section 2 - General relationships:

relation(king_dedede, weight).
relation(king_dedede, jumps).
relation(king_dedede, attacks).
relation(king_dedede, side_smash).
relation(king_dedede, dash_attack).
relation(king_dedede, throws).
relation(king_dedede, edge).
relation(king_dedede, gordo).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(king_dedede,X,Y) :- neg(king_dedede,X),neg(Y,X), king_dedede != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = king_dedede.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(keystone_xl_pipeline, job_creation).
pos(transcanada, money).
neg(transcanada, harm).
neg(keystone_xl_pipeline, environmental_damages).

Section 2 - General relationships:

relation(keystone_xl_pipeline, job_creation).
relation(transcanada, keystone_xl_pipeline).
relation(keystone_xl_pipeline, environmental_damages).
relation(keystone_xl_pipeline, midwest_oil_pipelines).
relation(keystone_xl_pipeline, long_term_contributions).

Section 3 - Encoding:

keystone_xl_pipeline_is_good_because :- pos(keystone_xl_pipeline, Y).
keystone_xl_pipeline_is_bad_because :- neg(keystone_xl_pipeline, Y).
compare(keystone_xl_pipeline,X,Y) :- neg(keystone_xl_pipeline,X),neg(Y,X), keystone_xl_pipeline != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = keystone_xl_pipeline.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(animal_lovers, bio_medical_research).
pos(bio_medical_research, advancement).
pos(bio_medical_research, well_being).
pos(humans, bio_medical_research).

% Section 2 - General relationships
relation(animals, bio_medical_research).
relation(bio_medical_research, humans).
relation(younglawyer, bio_medical_research).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(shakespeare, educated).
pos(shakespeare, high_level_vocabulary).
neg(shakespeare, poor_hand_writing).
neg(shakespeare, poor_spelling).
neg(shakespeare, parents_knew_how_to_write).
neg(shakespeare, unfinished_plays_destroyed).
neg(shakespeare, mentioned_unfinished_plays_in_will).

Section 2 - General relationships:

relation(shakespeare, grammar_school).
relation(shakespeare, editors).
relation(shakespeare, unfinished_plays).
relation(shakespeare, parents).
relation(shakespeare, will).

Section 3 - Encoding:

shakespeare_is_fraud_because :- neg(shakespeare, educated).
shakespeare_is_not_fraud_because :- pos(shakespeare, high_level_vocabulary).
compare(shakespeare,X,Y) :- neg(shakespeare,X),neg(Y,X), shakespeare != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = shakespeare.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(federal_reserve, interest).
neg(federal_reserve, inflation).
neg(federal_reserve, average_joe).
neg(fiat_currency, worth).
neg(fiat_currency, value).
neg(fiat_currency, stability).
neg(fiat_currency, life_span).
neg(fiat_currency, intrinsic_value).
neg(banksters, control).
neg(banksters, power).
neg(banksters, transparency).
neg(government, control).
neg(government, power).
neg(government, transparency).
neg(silver, intrinsic_value).
neg(gold, intrinsic_value).
neg(silver, stability).
neg(gold, stability).
neg(silver, value).
neg(gold, value).
neg(silver, worth).
neg(gold, worth).
neg(silver, life_span).
neg(gold, life_span).

pos(federal_reserve, dissolution).
pos(federal_reserve, transparency).
pos(government, control).
pos(government, power).
pos(government, transparency).
pos(silver, intrinsic_value).
pos(gold, intrinsic_value).
pos(silver, stability).
pos(gold, stability).
pos(silver, value).
pos(gold, value).
pos(silver, worth).
pos(gold, worth).
pos(silver, life_span).
pos(gold, life_span).
pos(average_joe, fiat_currency).
pos(average_joe, inflation).
pos(average_joe, hyperinflation).
pos(average_joe, transparency).
pos(average_joe, real_money).

Section 2 - General relationships:

relation(federal_reserve, interest).
relation(federal_reserve, inflation).
relation(federal_reserve, average_joe).
relation(federal_reserve, fiat_currency).
relation(federal_reserve, banksters).
relation(federal_reserve, government).
relation(federal_reserve, silver).
relation(federal_reserve, gold).
relation(fiat_currency, worth).
relation(fiat_currency, value).
relation(fiat_currency, stability).
relation(fiat_currency, life_span).
relation(fiat_currency, intrinsic_value).
relation(banksters, control).
relation(banksters, power).
relation(banksters, transparency).
relation(government, control).
relation(government, power).
relation(government, transparency).
relation(silver, intrinsic_value).
relation(gold, intrinsic_value).
relation(silver, stability).
relation(gold, stability).
relation(silver, value).
relation(gold, value).
relation(silver, worth).
relation(gold, worth).
relation(silver, life_span).
relation(gold, life_span).
relation(average_joe, fiat_currency).
relation(average_joe, inflation).
relation(average_joe, hyperinflation).
relation(average_joe, transparency).
relation(average_joe, real_money).

Section 3 - Encoding:

federal_reserve_is_bad_because :- neg(federal_reserve,Y).
federal_reserve_is_good_because :- pos(federal_reserve,Y).
fiat_currency_is_bad_because :- neg(fiat_currency,Y).
fiat_currency_is_good_because :- pos(fiat_currency,Y).
average_joe_is_bad_because :- neg(average_joe,Y).
average_joe_is_good_because :- pos(average_joe,Y).
compare(federal_reserve,X,Y) :- neg(federal_reserve,X),neg(Y,X), federal_reserve != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = federal_reserve.
compare(fiat_currency,X,Y) :- neg(fiat_currency,X),neg(Y,X), fiat_currency != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = fiat_currency.
compare(average_joe,X,Y) :- neg(average_joe,X),neg(Y,X), average_joe != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = average_joe.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(censorship, stupid).

Section 2 - General relationships:

relation(grandma, mini-strokes).
relation(grandma, toledo).
relation(grandma, hospital).
relation(grandma, akron).
relation(grandma, tia).
relation(grandma, uncle).
relation(grandma, grandpa).
relation(grandma, crappy_debate).

Section 3 - Encoding:

neg(censorship, smart).
neg(grandma, healthy).
pos(grandma, home).
pos(grandma, family).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(physical_discipline, discipline).
neg(physical_discipline, abuse).
pos(abuse, violence).
pos(violence, action).
pos(action, consequence).

Section 2 - General relationships:

relation(physical_discipline, children).
relation(discipline, abuse).
relation(abuse, violence).
relation(violence, action).
relation(action, consequence).

Section 3 - Encoding:

discipline_is_good_because :- pos(discipline, Y).
discipline_is_bad_because :- neg(discipline, Y).
compare(discipline,X,Y) :- neg(discipline,X),neg(Y,X), discipline != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = discipline.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(social_contract_theory, society_origins).
pos(social_contract_theory, power_relations).
pos(social_contract_theory, individual_consent).
pos(social_contract_theory, protection_of_rights).

Section 2 - General relationships:

relation(social_contract_theory, society).
relation(social_contract_theory, individuals).
relation(social_contract_theory, power).
relation(social_contract_theory, legitimacy).
relation(social_contract_theory, hobbes).
relation(social_contract_theory, locke).
relation(social_contract_theory, rousseau).
relation(social_contract_theory, rawls).
relation(social_contract_theory, political_philosophy).
relation(social_contract_theory, viability).

Section 3 - Encoding:

social_contract_theory_is_viable :- pos(social_contract_theory, Y).
social_contract_theory_is_not_viable :- neg(social_contract_theory, Y).
compare(social_contract_theory,X,Y) :- neg(social_contract_theory,X),neg(Y,X), social_contract_theory != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = social_contract_theory.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(opponent, sense).
pos(opponent, clown).
pos(opponent, cupcake).
pos(opponent, balloon).
neg(opponent, hi).
neg(opponent, vandalism).
pos(me, stress).
pos(me, anger).
pos(me, inanimate_objects).
pos(me, throwing).
pos(me, unicycle).
pos(me, car).
pos(me, cops).

Section 2 - General relationships:

relation(me, opponent).
relation(me, inanimate_objects).
relation(opponent, inanimate_objects).
relation(opponent, clown).
relation(opponent, cupcake).
relation(opponent, balloon).
relation(opponent, hi).
relation(opponent, vandalism).
relation(me, stress).
relation(me, anger).
relation(me, throwing).
relation(me, unicycle).
relation(me, car).
relation(me, cops).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, existence).
neg(god, existence).
pos(bible, facts).
neg(bible, facts).
pos(bible, source).
neg(bible, source).
pos(male_nipples, sexual_pleasure).
neg(male_nipples, sexual_pleasure).
pos(evolution, traits).
neg(evolution, traits).
pos(random_mutation, unguided).
neg(random_mutation, unguided).
pos(intelligent_design, guided).
neg(intelligent_design, guided).

Section 2 - General relationships:

relation(god, existence).
relation(bible, facts).
relation(bible, source).
relation(male_nipples, sexual_pleasure).
relation(evolution, traits).
relation(random_mutation, unguided).
relation(intelligent_design, guided).

Section 3 - Encoding:

god_exists :- pos(god, existence).
god_does_not_exist :- neg(god, existence).
bible_is_valid :- pos(bible, source).
bible_is_not_valid :- neg(bible, source).
male_nipples_are_for_sexual_pleasure :- pos(male_nipples, sexual_pleasure).
male_nipples_are_not_for_sexual_pleasure :- neg(male_nipples, sexual_pleasure).
evolution_gives_traits :- pos(evolution, traits).
evolution_does_not_give_traits :- neg(evolution, traits).
random_mutation_is_unguided :- pos(random_mutation, unguided).
random_mutation_is_not_unguided :- neg(random_mutation, unguided).
intelligent_design_is_guided :- pos(intelligent_design, guided).
intelligent_design_is_not_guided :- neg(intelligent_design, guided).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(hell, not_scare_tactic).
pos(hell, not_used_as_scare_tactic).
pos(hell, can_be_used_as_scare_tactic).
pos(hell, not_the_way_it_is_to_be_used).
pos(hell, not_the_proper_use_for_it).
pos(sinners, go_to_hell).
pos(sinners, can_be_saved).
pos(sinners, have_to_make_the_choice).
pos(christian_family_member, hold_on_to_the_belief_of_hell).
pos(christian_family_member, tell_non_saved_family_members).

neg(hell, purposely_send_them_to_hell).
neg(hell, not_what_you_think_it_is).

Section 2 - General relationships:

relation(hell, scare_tactic).
relation(hell, fear_tactic).
relation(hell, sinners).
relation(sinners, hell).
relation(christian_family_member, hell).
relation(christian_family_member, non_saved_family_members).

Section 3 - Encoding:

hell_is_not_scare_tactic :- pos(hell, not_scare_tactic).
hell_is_not_scare_tactic :- pos(hell, not_used_as_scare_tactic).
hell_is_not_scare_tactic :- pos(hell, can_be_used_as_scare_tactic).
hell_is_not_scare_tactic :- pos(hell, not_the_way_it_is_to_be_used).
hell_is_not_scare_tactic :- pos(hell, not_the_proper_use_for_it).
sinners_go_to_hell :- pos(sinners, go_to_hell).
sinners_can_be_saved :- pos(sinners, can_be_saved).
sinners_have_to_make_the_choice :- pos(sinners, have_to_make_the_choice).
christian_family_member_hold_on_to_the_belief_of_hell :- pos(christian_family_member, hold_on_to_the_belief_of_hell).
christian_family_member_tell_non_saved_family_members :- pos(christian_family_member, tell_non_saved_family_members).

compare(hell,X,Y) :- neg(hell,X),neg(Y,X), hell != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = hell.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(un, jurisdiction_over_nuclear_power).
neg(opposition, un_jurisdiction_over_nuclear_power).
pos(npt, nuclear_installations_under_iaea).
pos(npt, civilian_nuclear_power_monopolized).
pos(npt, un_sanctions_for_non_npt_countries).
neg(opposition, domestic_civilian_nuclear_power).
pos(npt, civilian_nuclear_programs_without_proliferation).
neg(npt, civilian_nuclear_programs_without_proliferation).
pos(north_korea, imported_nuclear_technology_under_npt).
pos(north_korea, withdrew_from_npt).
pos(north_korea, declared_nuclear_weapon_state).
pos(opposition, statistics_on_nuclear_programs_and_weapons).

Section 2 - General relationships:

relation(un, npt).
relation(npt, nuclear_installations).
relation(npt, civilian_nuclear_power).
relation(npt, nuclear_weapons).
relation(npt, north_korea).
relation(opposition, npt).
relation(opposition, un).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(dance, sport).
neg(dance, weak).
neg(dance, only_for_girls).
neg(dance, guys_are_weak).

Section 2 - General relationships:

relation(dance, sport).
relation(dance, competition_routines).
relation(dance, practices).
relation(dance, sweat).
relation(dance, hard_work).
relation(dance, breaks).
relation(dance, youtube).
relation(dance, guy_dancers).
relation(dance, tricks).
relation(dance, stunts).
relation(dance, eye).
relation(dance, face).
relation(dance, kick).
relation(dance, tall).

Section 3 - Encoding:

dance_is_sport_because :- pos(dance,Y).
dance_is_not_sport_because :- neg(dance,Y).
compare(dance,X,Y) :- neg(dance,X),neg(Y,X), dance != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = dance.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(eu_expansion, economic_benefits).
pos(eu_expansion, political_benefits).
pos(eu_expansion, eastern_europe).
neg(eastern_europe, communist_rule).
neg(belarus, authoritarian_governments).
neg(ukraine, authoritarian_governments).

Section 2 - General relationships:

relation(eu_expansion, eastern_europe).
relation(eastern_europe, ussr).
relation(eastern_europe, usa).
relation(eastern_europe, britain).
relation(eastern_europe, belarus).
relation(eastern_europe, ukraine).
relation(eu_expansion, central_and_eastern_europe).

Section 3 - Encoding:

eu_expansion_is_good_because :- pos(eu_expansion, Y).
eu_expansion_is_bad_because :- neg(eu_expansion, Y).
compare(eu_expansion,X,Y) :- neg(eu_expansion,X),neg(Y,X), eu_expansion != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = eu_expansion.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(freedom_of_choice, nuclear_bombs).
neg(freedom_of_choice, kill_human_being).
pos(society, implications).
pos(environment, clean).
neg(money, environment).

Section 2 - General relationships:

relation(freedom_of_choice, nuclear_bombs).
relation(freedom_of_choice, kill_human_being).
relation(society, implications).
relation(environment, clean).
relation(money, environment).

Section 3 - Encoding:

elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(death_penalty, innocent_people).
pos(innocent_people, victims).
pos(state, judicial_system).

Section 2 - General relationships:

relation(death_penalty, innocent_people).
relation(innocent_people, state).
relation(state, judicial_system).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(big_business, profit).
neg(big_business, community_interests).
pos(gm_companies, profit).
neg(gm_companies, health).
pos(terminator_seeds, profit).
neg(terminator_seeds, health).
pos(pest_and_herbicide_resistance, profit).
neg(pest_and_herbicide_resistance, health).
pos(licensing_of_genes, profit).
neg(licensing_of_genes, health).
pos(pollution_of_water_supplies, profit).
neg(pollution_of_water_supplies, health).
pos(continued_sale_of_tobacco, profit).
neg(continued_sale_of_tobacco, health).
pos(continued_sale_of_dioxins, profit).
neg(continued_sale_of_dioxins, health).
pos(continued_sale_of_asbestos, profit).
neg(continued_sale_of_asbestos, health).

Section 2 - General relationships:

relation(big_business, legislative_framework).
relation(big_business, historical_behaviour).
relation(big_business, gm_companies).
relation(gm_companies, terminator_seeds).
relation(gm_companies, pest_and_herbicide_resistance).
relation(gm_companies, licensing_of_genes).
relation(pollution_of_water_supplies, corporations).
relation(continued_sale_of_tobacco, corporations).
relation(continued_sale_of_dioxins, corporations).
relation(continued_sale_of_asbestos, corporations).
relation(tobacco, health_service).
relation(tobacco, public_health_system).
relation(terminator_seeds, intellectual_property).
relation(terminator_seeds, monsanto).
relation(terminator_seeds, united_states_patents).
relation(terminator_seeds, federal_law).

Section 3 - Encoding:

big_business_is_bad_because :- neg(big_business,Y).
gm_companies_are_bad_because :- neg(gm_companies,Y).
terminator_seeds_are_bad_because :- neg(terminator_seeds,Y).
pest_and_herbicide_resistance_are_bad_because :- neg(pest_and_herbicide_resistance,Y).
licensing_of_genes_are_bad_because :- neg(licensing_of_genes,Y).
pollution_of_water_supplies_are_bad_because :- neg(pollution_of_water_supplies,Y).
continued_sale_of_tobacco_are_bad_because :- neg(continued_sale_of_tobacco,Y).
continued_sale_of_dioxins_are_bad_because :- neg(continued_sale_of_dioxins,Y).
continued_sale_of_asbestos_are_bad_because :- neg(continued_sale_of_asbestos,Y).
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = X.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(consciousness, physical_properties).
pos(consciousness, existence).
pos(particles, consciousness).
pos(conscious_beings, consciousness).
pos(particles, consciousness).
pos(universe, particles).

Section 2 - General relationships:

relation(consciousness, physical_properties).
relation(consciousness, existence).
relation(particles, consciousness).
relation(conscious_beings, consciousness).
relation(particles, consciousness).
relation(universe, particles).

Section 3 - Encoding:

consciousness_is_physical_property :- pos(consciousness, physical_properties).
consciousness_exists :- pos(consciousness, existence).
particles_have_consciousness :- pos(particles, consciousness).
conscious_beings_have_consciousness :- pos(conscious_beings, consciousness).
particles_can_share_consciousness :- pos(particles, consciousness).
universe_is_made_from_particles :- pos(universe, particles).
universe_is_collective_consciousness :- pos(universe, collective_consciousness).
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(god, perfect).
neg(god, all_powerful).
neg(god, understanding_of_free_will).
neg(god, clarity).
neg(god, consistent).
neg(god, planning).
neg(god, flexible_specifications).

pos(god, incompetence).
pos(god, mis_management).
pos(god, cheating).

Section 2 - General relationships:

relation(god, humanity).
relation(god, adam_and_eve).
relation(god, the_flood).
relation(god, babel).
relation(god, three_religions).
relation(god, ten_commandments).
relation(god, denominations).
relation(god, physical_creations).
relation(god, science).
relation(god, universe).

Section 3 - Encoding:

incompetence_because :- neg(god,X).
incompetence_because :- pos(god,X).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(human_cloning, enable_infertile_couples_to_have_children).

Section 2 - General relationships:

relation(human_cloning, infertile_couples).
relation(human_cloning, children).
relation(infertility_treatments, percentages).
relation(infertility_treatments, success).
relation(infertility_treatments, couples).
relation(infertility_treatments, time).
relation(infertility_treatments, money).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(streaming_students, academic_aptitude).
pos(educational_system, youths).
pos(youths, mental_acuity).
pos(youths, mental_capacity).
pos(youths, segregation).
pos(youths, discrimination).
pos(youths, egotistic_nature).
pos(youths, condescension).
pos(ludwig_wittgenstein, egomaniacal_geniuses).
pos(ludwig_wittgenstein, society).
pos(ludwig_wittgenstein, lesser_educated_people).
pos(ludwig_wittgenstein, more_intellectual_students).
pos(ludwig_wittgenstein, impossibly_high_standard).
pos(ludwig_wittgenstein, original_philosophy).
pos(ludwig_wittgenstein, wealth).
pos(ludwig_wittgenstein, frugally).
pos(ludwig_wittgenstein, charitable_means).
pos(immanuel_kant, genius).
pos(immanuel_kant, groundbreaking_philosopher).
pos(immanuel_kant, tirelessly).
pos(immanuel_kant, very_high_educational_standards).
pos(immanuel_kant, culturally_developed).
pos(immanuel_kant, siblings).
pos(immanuel_kant, unworthy_society).
pos(immanuel_kant, earnings).
pos(immanuel_kant, sisters).
pos(snobbish_people, sacrifices).
pos(snobbish_people, greater_good).
pos(mother, computer).

neg(streaming_students, academic_aptitude).
neg(educational_system, youths).
neg(youths, mental_acuity).
neg(youths, mental_capacity).
neg(youths, segregation).
neg(youths, discrimination).
neg(youths, egotistic_nature).
neg(youths, condescension).
neg(ludwig_wittgenstein, egomaniacal_geniuses).
neg(ludwig_wittgenstein, society).
neg(ludwig_wittgenstein, lesser_educated_people).
neg(ludwig_wittgenstein, more_intellectual_students).
neg(ludwig_wittgenstein, impossibly_high_standard).
neg(ludwig_wittgenstein, original_philosophy).
neg(ludwig_wittgenstein, wealth).
neg(ludwig_wittgenstein, frugally).
neg(ludwig_wittgenstein, charitable_means).
neg(immanuel_kant, genius).
neg(immanuel_kant, groundbreaking_philosopher).
neg(immanuel_kant, tirelessly).
neg(immanuel_kant, very_high_educational_standards).
neg(immanuel_kant, culturally_developed).
neg(immanuel_kant, siblings).
neg(immanuel_kant, unworthy_society).
neg(immanuel_kant, earnings).
neg(immanuel_kant, sisters).
neg(snobbish_people, sacrifices).
neg(snobbish_people, greater_good).
neg(mother, computer).

Section 2 - General relationships:

relation(streaming_students, academic_aptitude).
relation(educational_system, youths).
relation(youths, mental_acuity).
relation(youths, mental_capacity).
relation(youths, segregation).
relation(youths, discrimination).
relation(youths, egotistic_nature).
relation(youths, condescension).
relation(ludwig_wittgenstein, egomaniacal_geniuses).
relation(ludwig_wittgenstein, society).
relation(ludwig_wittgenstein, lesser_educated_people).
relation(ludwig_wittgenstein, more_intellectual_students).
relation(ludwig_wittgenstein, impossibly_high_standard).
relation(ludwig_wittgenstein, original_philosophy).
relation(ludwig_wittgenstein, wealth).
relation(ludwig_wittgenstein, frugally).
relation(ludwig_wittgenstein, charitable_means).
relation(immanuel_kant, genius).
relation(immanuel_kant, groundbreaking_philosopher).
relation(immanuel_kant, tirelessly).
relation(immanuel_kant, very_high_educational_standards).
relation(immanuel_kant, culturally_developed).
relation(immanuel_kant, siblings).
relation(immanuel_kant, unworthy_society).
relation(immanuel_kant, earnings).
relation(immanuel_kant, sisters).
relation(snobbish_people, sacrifices).
relation(snobbish_people, greater_good).
relation(mother, computer).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(spiders, vicious).
pos(spiders, feisty).
pos(spiders, mean).

Section 2 - General relationships:

relation(spiders, bites).
relation(spiders, red_welts).
relation(spiders, pus).
relation(spiders, web).
relation(spiders, jumping).
relation(spiders, black_widow).
relation(spiders, dog).
relation(spiders, death).

Section 3 - Encoding:

spiders_are_vicious :- neg(spiders, vicious).
spiders_are_not_vicious :- pos(spiders, vicious).
compare(spiders,X,Y) :- neg(spiders,X),neg(Y,X), spiders != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = spiders.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(cameras, safer_place).
neg(cameras, teachers_getting_laid_off).

Section 2 - General relationships:

relation(cameras, students).
relation(cameras, teachers).
relation(cameras, money).
relation(cameras, americans).
relation(cameras, bulling).
relation(cameras, drugs).
relation(cameras, protection).
relation(cameras, kentucky).

Section 3 - Encoding:

cameras_are_good_because :- pos(cameras, Y).
cameras_are_bad_because :- neg(cameras, Y).
compare(cameras,X,Y) :- neg(cameras,X),neg(Y,X), cameras != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = cameras.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(wikipedia, accurate_resource).
neg(wikipedia, inaccurate).
neg(wikipedia, unreliable).
pos(wikipedia, flawless).
neg(wikipedia, perfect).
pos(wikipedia, grammar_mistake).
pos(wikipedia, network).
neg(wikipedia, vandalized).
neg(wikipedia, edited).
neg(wikipedia, misinformed_people).
pos(wikipedia, complex_class_system).
pos(wikipedia, important_articles).
pos(wikipedia, qualified_people).
pos(wikipedia, george_washington).
pos(wikipedia, semi_protected).
neg(wikipedia, unconfirmed_users).
pos(wikipedia, protection_policy).
pos(wikipedia, confirmed_user).
neg(wikipedia, difficult).
pos(wikipedia, account).
pos(wikipedia, edits).
pos(wikipedia, autoconfirmed).
pos(wikipedia, popular_data).
pos(wikipedia, named_accounts).
neg(wikipedia, false_data).
pos(wikipedia, reviewers).
pos(wikipedia, encyclopedia_britannica).
pos(wikipedia, accurate).
pos(britannica, accurate).
pos(nature, science_journal).
pos(nature, study).
pos(nature, experts).
pos(nature, articles).
pos(nature, random_topics).
pos(nature, major_errors).
pos(nature, minor_errors).
pos(wikipedia, diversity).
pos(wikipedia, magnitude).
pos(wikipedia, free).

Section 2 - General relationships:

relation(wikipedia, internet).
relation(wikipedia, encyclopedia_britannica).
relation(wikipedia, battle_of_bunker_hill).
relation(wikipedia, school_teachers).
relation(wikipedia, false_information).
relation(wikipedia, nature).
relation(wikipedia, britannica).

Section 3 - Encoding:

wikipedia_is_accurate_because :- pos(wikipedia, Y).
wikipedia_is_inaccurate_because :- neg(wikipedia, Y).
compare(wikipedia,X,Y) :- neg(wikipedia,X),neg(Y,X), wikipedia != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = wikipedia.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(religious_symbols, choice).
pos(muslim_women, modesty).
pos(muslim_women, privacy).
pos(modesty, personal_judgement).
pos(muslim_women, discrimination).
neg(veil, oppression).
neg(muslim_women, force).
neg(muslim_women, comfort).

Section 2 - General relationships:

relation(veil, modesty).
relation(veil, privacy).
relation(muslim_women, veil).
relation(muslim_women, modesty).
relation(muslim_women, privacy).
relation(muslim_women, belgium).
relation(muslim_women, discrimination).

Section 3 - Encoding:

modesty_is_personal :- pos(modesty, personal_judgement).
muslim_women_are_modest :- pos(muslim_women, modesty).
muslim_women_value_privacy :- pos(muslim_women, privacy).
veil_is_symbol_of_modesty :- pos(veil, modesty).
veil_is_symbol_of_privacy :- pos(veil, privacy).
muslim_women_are_discriminated :- pos(muslim_women, discrimination).
muslim_women_oppose_veil_ban :- pos(muslim_women, discrimination).
veil_ban_is_discriminatory :- pos(muslim_women, discrimination).

compare(muslim_women, X, Y) :- neg(muslim_women, X), neg(Y, X), muslim_women != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = muslim_women.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(you, sarcasm).
pos(you, genuine_regret).
neg(rich_people, ethics).
neg(rich_people, morality).
pos(rich_people, rights).
pos(you, passion).
pos(you, philanthropy).
pos(us_private_aid, us_governmental_aid).

% Section 2 - General relationships
relation(redistribution, wealth).
relation(you, debate).
relation(you, distaste).
relation(rich_people, money).
relation(rich_people, people).
relation(rich_people, need).
relation(you, passion).
relation(you, world).
relation(people, philanthropy).
relation(us_private_aid, world).
relation(time, knowledge).
relation(force, time).
relation(force, knowledge).
relation(opponent, debate).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(exams, snapshot_in_time).
neg(exams, desired_results).
pos(exams, stress).
neg(exams, suicide).
pos(exams, motivation).
neg(exams, accurately_measure_strengths_or_weaknesses).
pos(exams, students_capabilities).
neg(exams, high_exam_result).

Section 2 - General relationships:

relation(exams, affirmative_side).
relation(exams, stress).
relation(exams, students).
relation(exams, final_results).
relation(exams, art_student).
relation(exams, folio).
relation(exams, artwork).
relation(exams, class_time).
relation(exams, required_knowledge).

Section 3 - Encoding:

exams_are_good_because :- pos(exams, Y).
exams_are_bad_because :- neg(exams, Y).
compare(exams,X,Y) :- neg(exams,X),neg(Y,X), exams != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = exams.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(opponent, argument).
neg(opponent, reasonable_rule).
pos(opponent, low_elo).
pos(me, accepted_debate).
pos(me, willing_to_debate).
pos(me, educational_debates).
pos(me, intellectual_benefit).
pos(me, conscious_decision).
pos(me, public_benefit).
pos(me, lengthy_responses).
pos(me, willing_to_explore).
pos(me, previous_arguments).

Section 2 - General relationships:

relation(me, opponent).
relation(me, debate).
relation(me, rule).
relation(me, elo).
relation(me, public).
relation(opponent, argument).
relation(opponent, rule).
relation(opponent, elo).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(government, protecting_people).
pos(government, protecting_itself).
pos(government, doing_what_they_want).
neg(government, self_defense).
pos(government, making_money).

Section 2 - General relationships:

relation(government, people).
relation(government, gun_regulations).
relation(government, self_defense_weapons).
relation(government, nations_best_interest).

Section 3 - Encoding:

protecting_people_is_good :- pos(government, protecting_people).
protecting_people_is_bad :- neg(government, protecting_people).
doing_what_they_want_is_good :- pos(government, doing_what_they_want).
doing_what_they_want_is_bad :- neg(government, doing_what_they_want).
making_money_is_good :- pos(government, making_money).
making_money_is_bad :- neg(government, making_money).
compare(government,X,Y) :- neg(government,X),neg(Y,X), government != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = government.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(kids, attention).
pos(melodrama, attention).
neg(kids, sadness).
neg(melodrama, sadness).

% Section 2 - General relationships
relation(kids, melodrama).
relation(kids, sadness).
relation(kids, attention).
relation(melodrama, sadness).
relation(melodrama, attention).
relation(sadness, attention).

% Section 3 - Encoding
relation(X,Y) :- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(us_schools, important_information).
neg(us_schools, egyptian_burial_practices).
pos(us_schools, recent_history).
pos(us_schools, future).
pos(us_schools, cpr).
pos(us_schools, changing_a_tire).
pos(us_schools, technology).
pos(us_schools, software).
pos(us_schools, systems).
pos(us_schools, html).
pos(us_schools, java).
pos(us_schools, science).
pos(us_schools, engineering).
pos(us_schools, math).
pos(us_schools, english).

Section 2 - General relationships:

relation(us_schools, students).
relation(us_schools, art).
relation(us_schools, music).
relation(us_schools, world).
relation(world, software).
relation(world, systems).
relation(world, html).
relation(world, java).
relation(world, codes).
relation(world, people).
relation(world, future).
relation(educational_system, science).
relation(educational_system, technology).
relation(educational_system, engineering).
relation(educational_system, math).
relation(educational_system, english).

Section 3 - Encoding:

us_schools_are_good_because :- pos(us_schools, Y).
us_schools_are_bad_because :- neg(us_schools, Y).
compare(us_schools,X,Y) :- neg(us_schools,X),neg(Y,X), us_schools != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = us_schools.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(americans, right_to_life).
pos(americans, liberty).
pos(americans, pursuit_of_happiness).
neg(euthanasia_denial, right_to_life).
neg(euthanasia_denial, happiness).
neg(mercy_denial, liberty).

Section 2 - General relationships:

relation(euthanasia, america).
relation(euthanasia_denial, dying_patient).
relation(mercy_denial, dying_patient).

Section 3 - Encoding:

right_to_life_because :- pos(X, right_to_life).
liberty_because :- pos(X, liberty).
happiness_because :- pos(X, happiness).
euthanasia_denial_because :- neg(X, right_to_life).
euthanasia_denial_because :- neg(X, happiness).
mercy_denial_because :- neg(X, liberty).
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = euthanasia_denial.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(rapper_1, good_records).
pos(rapper_1, money).
pos(rapper_1, sleep).
pos(rapper_1, saint).
pos(rapper_1, craziness).
neg(rapper_2, good_looks).
neg(rapper_2, mental_health).
neg(rapper_2, weight).
neg(rapper_2, intelligence).
neg(rapper_2, honesty).
neg(rapper_2, soul).
neg(rapper_2, talent).
neg(rapper_2, success).

% Section 2 - General relationships
relation(rapper_1, rapper_2).
relation(rapper_1, records).
relation(rapper_1, money).
relation(rapper_1, sleep).
relation(rapper_1, saint).
relation(rapper_1, craziness).
relation(rapper_2, looks).
relation(rapper_2, mental_health).
relation(rapper_2, weight).
relation(rapper_2, intelligence).
relation(rapper_2, honesty).
relation(rapper_2, soul).
relation(rapper_2, talent).
relation(rapper_2, success).

% Section 3 - Encoding
rapper_1_is_good_because :- pos(rapper_1, Y).
rapper_1_is_bad_because :- neg(rapper_1, Y).
rapper_2_is_good_because :- pos(rapper_2, Y).
rapper_2_is_bad_because :- neg(rapper_2, Y).
compare(rapper_1, rapper_2, Y) :- neg(rapper_1, Y), neg(rapper_2, Y), rapper_1 != rapper_2.
compare(rapper_2, rapper_1, Y) :- neg(rapper_2, Y), neg(rapper_1, Y), rapper_2 != rapper_1.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, holy_scripture).

Section 2 - General relationships:

relation(god, holy_scripture).
relation(god, super_atom).
relation(god, big_bang).
relation(god, matter).
relation(god, universe).

Section 3 - Encoding:

god_exists :- pos(god,Y).
god_does_not_exist :- neg(god,Y).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(referendum, important_constitutional_changes).
pos(referendum, nation's_future_sovereignty).
pos(referendum, important_issues).
pos(referendum, ruling_government).
pos(referendum, will_of_the_people).
neg(referendum, fear_of_rejection).
neg(referendum, logistics).

Section 2 - General relationships:

relation(referendum, eu_treaties).
relation(referendum, war_on_iraq).
relation(referendum, legality).

Section 3 - Encoding:

referendum_is_good_because :- pos(referendum, Y).
referendum_is_bad_because :- neg(referendum, Y).
compare(referendum,X,Y) :- neg(referendum,X),neg(Y,X), referendum != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = referendum.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(four_year_old_girls, dating_adult_men).
pos(four_year_old_girls, playing_with_adult_men).
pos(four_year_old_girls, making_their_own_choices).
pos(four_year_old_girls, spending_time_with_people_they_like).
pos(four_year_old_girls, exploring_themselves).
pos(four_year_old_girls, exploring_others).
pos(four_year_old_girls, spending_time_with_adults).
pos(four_year_old_girls, playing_with_sixty_year_old_men).
neg(family, toxic_influence).
neg(family, bad_influence).

Section 2 - General relationships:

relation(four_year_old_girls, dating_adult_men).
relation(four_year_old_girls, playing_with_adult_men).
relation(four_year_old_girls, making_their_own_choices).
relation(four_year_old_girls, spending_time_with_people_they_like).
relation(four_year_old_girls, exploring_themselves).
relation(four_year_old_girls, exploring_others).
relation(four_year_old_girls, spending_time_with_adults).
relation(four_year_old_girls, playing_with_sixty_year_old_men).
relation(family, toxic_influence).
relation(family, bad_influence).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(four_year_old_girls,X,Y) :- neg(four_year_old_girls,X),neg(Y,X), four_year_old_girls != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = four_year_old_girls.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(university, intelligent_people).
pos(free_university, intelligent_people).

Section 2 - General relationships:

relation(university, free).
relation(university, united_states).
relation(university, united_kingdom).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(wonderking, thousands_of_players).
neg(wonderking, mature_party_quests).
neg(wonderking, good_graphics).
pos(maplestory, thousands_of_players).
pos(maplestory, mature_party_quests).
pos(maplestory, good_graphics).
pos(combat_arms, good_graphics).
pos(call_of_duty, good_graphics).
neg(wonderking, good_graphics).
neg(gameboy_advance, good_graphics).

Section 2 - General relationships:

relation(wonderking, maplestory).
relation(wonderking, combat_arms).
relation(wonderking, call_of_duty).
relation(wonderking, gameboy_advance).

Section 3 - Encoding:

wonderking_is_good_because :- pos(wonderking, Y).
wonderking_is_bad_because :- neg(wonderking, Y).
compare(wonderking, X, Y) :- neg(wonderking, X), neg(Y, X), wonderking != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = wonderking.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(hr_violation, objectively_determined_criteria).
pos(general_assembly, set_criteria).
pos(hr_council, general_assembly).
pos(hr_council, elect_members).
pos(hr_council, statute).
pos(hr_council, vote).
pos(hr_council, actions).
pos(hr_council, strategies).
pos(hr_council, recommendations).
pos(hr_council, agree_criteria).
pos(hr_council, agree_statute).
pos(hr_council, malfunction).
pos(hr_council, stop_bloc_voting).
pos(hr_council, avoid_prosecution).
pos(hr_council, ignore_violations).
pos(hr_council, solve_problems).
pos(hr_council, effectiveness).
pos(hr_council, sufficient_benefits).
pos(hr_council, intergovernmental_structure).
pos(hr_council, cooperation).
pos(hr_council, genocide).
pos(hr_council, massive_pleas).
pos(hr_council, citizens).
pos(hr_council, mechanisms).
pos(hr_council, status_quo).
pos(hr_council, major_hr_violators).
pos(hr_council, obvious_violations).
pos(hr_council, partially_limiting_politization).

% Section 2 - General relationships
relation(hr_council, general_assembly).
relation(hr_council, security_council).
relation(hr_council, united_nations).
relation(hr_council, bloc_voting).
relation(hr_council, hr_violators).
relation(hr_council, prosecution).
relation(hr_council, politicization).
relation(hr_council, effectiveness).
relation(hr_council, intergovernmental_structure).
relation(hr_council, cooperation).
relation(hr_council, genocide).
relation(hr_council, massive_pleas).
relation(hr_council, citizens).
relation(hr_council, mechanisms).
relation(hr_council, status_quo).
relation(hr_council, major_hr_violators).
relation(hr_council, obvious_violations).
relation(hr_council, partially_limiting_politization).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(terrorists, our_media).
neg(terrorists, our_people).
neg(terrorists, climate_of_fear).
neg(government, public).
neg(government, truth).
neg(terrorism, people).
pos(london_underground, july_7th_bombings).
pos(air_travel, 9/11).

Section 2 - General relationships:

relation(terrorists, media).
relation(terrorists, people).
relation(terrorists, fear).
relation(government, public).
relation(government, truth).
relation(terrorism, people).
relation(london_underground, july_7th_bombings).
relation(air_travel, 9/11).

Section 3 - Encoding:

terrorists_use_media_to_terrify_people :- neg(terrorists, our_media), neg(terrorists, our_people), neg(terrorists, climate_of_fear).
preventing_public_from_dealing_with_terrifying_realities_is_doomed_to_failure :- neg(government, public), neg(government, truth).
people_manage_to_find_out_about_terrorist_attacks :- neg(terrorism, people).
fear_is_spread_when_public_dont_feel_the_government_is_telling_them_the_truth :- neg(government, public), neg(government, truth).
people_rarely_change_their_behaviour_as_a_result_of_fear_generated_by_terrorism :- neg(terrorism, people).
use_of_london_underground_revived_rapidly_after_the_july_7th_bombings :- pos(london_underground, july_7th_bombings).
use_of_air_travel_soon_recovered_from_the_impact_of_9/11 :- pos(air_travel, 9/11).
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(you, frown).
neg(you, drown).
neg(this, debate).
pos(this, bait).
pos(this, performance).
pos(this, beating).
pos(this, convenience).
pos(this, rap).
pos(i, win).

Section 2 - General relationships:

relation(you, frown).
relation(you, drown).
relation(this, debate).
relation(this, bait).
relation(this, performance).
relation(this, beating).
relation(this, convenience).
relation(this, rap).
relation(i, win).

Section 3 - Encoding:

you_are_good_because :- pos(you, Y).
you_are_bad_because :- neg(you, Y).
this_is_good_because :- pos(this, Y).
this_is_bad_because :- neg(this, Y).
i_am_good_because :- pos(i, Y).
i_am_bad_because :- neg(i, Y).
compare(you,X,Y) :- neg(you,X),neg(Y,X), you != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = you.
compare(this,X,Y) :- neg(this,X),neg(Y,X), this != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = this.
compare(i,X,Y) :- neg(i,X),neg(Y,X), i != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = i.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(us_hegemony, good).
pos(good_hegemon, get_un_bodies).
pos(us_hegemony, get_un_bodies).
pos(us_hegemony, deal_with_opposition).
pos(us, establish_league_of_nations).
pos(us, establish_nato).
pos(us, end_wwii).
pos(us, start_vietnam).
pos(us, uphold_tr_corollary).
pos(us, front_runners_for_war_on_drugs).
pos(us, front_runners_for_war_on_arms).
neg(soviet_russia, pay_attention_to_lon).
neg(soviet_russia, pay_attention_to_un).

% Section 2 - General relationships
relation(us_hegemony, backlash).
relation(us_hegemony, opposition).
relation(us_hegemony, us).
relation(us_hegemony, un).
relation(us_hegemony, soviet_russia).
relation(us_hegemony, nuclear_proliferation).
relation(us, hegemon).
relation(us, world_politics).
relation(us, league_of_nations).
relation(us, nato).
relation(us, wwii).
relation(us, vietnam).
relation(us, tr_corollary).
relation(us, war_on_drugs).
relation(us, war_on_arms).
relation(soviet_russia, lon).
relation(soviet_russia, un).
relation(nuclear_proliferation, threat).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(obama, chance_to_become_prez).
pos(obama, unity_among_race).
pos(obama, accept_all).
pos(obama, show_better_than_hate).
pos(obama, come_together).
pos(obama, remove_differences).
neg(obama, tackle_issue_head_on).

Section 2 - General relationships:

relation(obama, reverend_wright_scandal).
relation(obama, judgement).
relation(obama, american_domestic_policy).
relation(obama, american_foreign_policy).
relation(obama, controversial_remarks).
relation(obama, political_views).
relation(obama, uncle).
relation(obama, racy_statements).
relation(obama, speech).
relation(obama, race).
relation(obama, reverend_wright).
relation(obama, national_polls).
relation(obama, usa_today_gallup_polls).
relation(obama, mccain).
relation(obama, newsweek).
relation(obama, cnn_poll).
relation(obama, hillary).
relation(obama, undecided_voters).
relation(obama, democrat_voters).
relation(obama, rev_wright_issue).

Section 3 - Encoding:

obama_has_chance_to_become_prez :- pos(obama, X).
obama_does_not_have_chance_to_become_prez :- neg(obama, X).
obama_is_good_because :- pos(obama, Y).
obama_is_bad_because :- neg(obama, Y).
compare(obama,X,Y) :- neg(obama,X),neg(Y,X), obama != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = obama.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(putin, democracy).
pos(putin, economic_policies).
neg(putin, human_rights).
neg(putin, international_security).
pos(putin, support_of_russian_populace).
pos(putin, popularity_ratings).

Section 2 - General relationships:

relation(putin, iran).
relation(putin, sudan).
relation(putin, cia).
relation(putin, press).
relation(putin, bush).
relation(putin, elections).
relation(putin, electoral_fraud).
relation(putin, russian_populace).
relation(putin, values).
relation(putin, constitution).
relation(putin, free_liberal_democratic_states).

Section 3 - Encoding:

democracy(putin) :- pos(putin, X).
not_democracy(putin) :- neg(putin, X).
compare(putin,X,Y) :- neg(putin,X),neg(Y,X), putin != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = putin.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(societal_morality, constitution).
pos(constitution, greater_good).
pos(supreme_court, founding_fathers).
pos(supreme_court, constitution).
pos(supreme_court, viable_definition).
pos(websters, supreme_court).

neg(abortion, societal_morality).
neg(abortion, constitution).
neg(abortion, greater_good).
neg(supreme_court, random_definition).
neg(supreme_court, founding_fathers).
neg(supreme_court, viable_definition).
neg(websters, supreme_court).

Section 2 - General relationships:

relation(abortion, societal_morality).
relation(abortion, constitution).
relation(abortion, greater_good).
relation(supreme_court, founding_fathers).
relation(supreme_court, constitution).
relation(supreme_court, viable_definition).
relation(websters, supreme_court).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(measure, details).
neg(measure, application).
neg(measure, practicality).
neg(measure, discrimination).
pos(religion, hierarchy).
pos(religion, priest).
pos(religion, minister).
pos(religion, prayer_leader).
pos(religion, teacher).
pos(religion, preacher).
pos(religion, pastor).
pos(person, faith).
pos(person, leadership).
pos(person, employment).
pos(person, living).
pos(person, eligibility).
pos(person, sunday_school).
pos(person, bible_study).

Section 2 - General relationships:

relation(measure, details).
relation(measure, application).
relation(measure, practicality).
relation(measure, discrimination).
relation(religion, hierarchy).
relation(religion, priest).
relation(religion, minister).
relation(religion, prayer_leader).
relation(religion, teacher).
relation(religion, preacher).
relation(religion, pastor).
relation(person, faith).
relation(person, leadership).
relation(person, employment).
relation(person, living).
relation(person, eligibility).
relation(person, sunday_school).
relation(person, bible_study).

Section 3 - Encoding:

measure_is_good_because :- pos(measure, Y).
measure_is_bad_because :- neg(measure, Y).
compare(measure,X,Y) :- neg(measure,X),neg(Y,X), measure != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = measure.

religion_is_good_because :- pos(religion, Y).
religion_is_bad_because :- neg(religion, Y).
compare(religion,X,Y) :- neg(religion,X),neg(Y,X), religion != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = religion.

person_is_good_because :- pos(person, Y).
person_is_bad_because :- neg(person, Y).
compare(person,X,Y) :- neg(person,X),neg(Y,X), person != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = person.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(eu, will).
pos(eu, defend).
pos(euro, important_point).
pos(euro, agreed_elements).
pos(euro, instruments).
pos(euro, european_institutions).
pos(euro, council).
pos(euro, commission).
pos(euro, european_central_bank).
pos(euro, euro_area_member_states).
pos(euro, decision).

% Section 2 - General relationships
relation(eu, euro).
relation(euro, eu).
relation(euro, instruments).
relation(euro, european_institutions).
relation(euro, council).
relation(euro, commission).
relation(euro, european_central_bank).
relation(euro, euro_area_member_states).
relation(euro, decision).

% Section 3 - Encoding
eu_is_good_because :- pos(eu,Y).
eu_is_bad_because :- neg(eu,Y).
compare(eu,X,Y) :- neg(eu,X),neg(Y,X), eu != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = eu.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(saudi_arabia, middle_eastern_countries).
pos(iraq, middle_eastern_countries).
pos(iran, middle_eastern_countries).
pos(countries_ending_with_istan, middle_eastern_countries).
pos(middle_eastern_countries, similar_religions).
pos(tarzan, good_point).

neg(saudi_arabia, asia).
neg(iraq, asia).
neg(iran, asia).
neg(countries_ending_with_istan, asia).
neg(middle_eastern_countries, asia).
neg(tarzan, answering_the_debate).

Section 2 - General relationships:

relation(saudi_arabia, iraq).
relation(saudi_arabia, iran).
relation(saudi_arabia, countries_ending_with_istan).
relation(iraq, iran).
relation(iraq, countries_ending_with_istan).
relation(iran, countries_ending_with_istan).
relation(middle_eastern_countries, countries_ending_with_istan).
relation(tarzan, debate).

Section 3 - Encoding:

saudi_arabia_is_good_because :- pos(saudi_arabia, Y).
saudi_arabia_is_bad_because :- neg(saudi_arabia, Y).
iraq_is_good_because :- pos(iraq, Y).
iraq_is_bad_because :- neg(iraq, Y).
iran_is_good_because :- pos(iran, Y).
iran_is_bad_because :- neg(iran, Y).
countries_ending_with_istan_is_good_because :- pos(countries_ending_with_istan, Y).
countries_ending_with_istan_is_bad_because :- neg(countries_ending_with_istan, Y).
middle_eastern_countries_is_good_because :- pos(middle_eastern_countries, Y).
middle_eastern_countries_is_bad_because :- neg(middle_eastern_countries, Y).
tarzan_is_good_because :- pos(tarzan, Y).
tarzan_is_bad_because :- neg(tarzan, Y).
compare(saudi_arabia,X,Y) :- neg(saudi_arabia,X),neg(Y,X), saudi_arabia != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = saudi_arabia.
compare(iraq,X,Y) :- neg(iraq,X),neg(Y,X), iraq != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = iraq.
compare(iran,X,Y) :- neg(iran,X),neg(Y,X), iran != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = iran.
compare(countries_ending_with_istan,X,Y) :- neg(countries_ending_with_istan,X),neg(Y,X), countries_ending_with_istan != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = countries_ending_with_istan.
compare(middle_eastern_countries,X,Y) :- neg(middle_eastern_countries,X),neg(Y,X), middle_eastern_countries != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = middle_eastern_countries.
compare(tarzan,X,Y) :- neg(tarzan,X),neg(Y,X), tarzan != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = tarzan.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(background_check, keep_guns_out_of_dangerous_people).
pos(background_check, best_approach_to_end_gun_violence).
pos(background_check, does_not_violate_2n_amendment).
pos(gun_regulation_like_in_germany, lowest_gun_death).
pos(gun_regulation_like_in_germany, strong_background_check).
pos(gun_regulation_like_in_germany, safety_storage_on_guns).
pos(gun_regulation_like_in_germany, gun_registry_and_gun_license).
pos(gun_regulation_like_in_germany, banned_fully_automatic_weapon).
pos(gun_regulation_like_in_germany, banned_semi_atuomatic_weapon_that_cannot_be_used_for_hunting_and_sports).
pos(trump, not_dangerous).
pos(government, not_dangerous).
pos(america, independent_democratic_country).
pos(america, no_slavery).
pos(america, no_colonies).
pos(hunting, right).
pos(self_defense, right).

neg(assault_weapon_ban, stupid_movement).
neg(terrorist, well_regulated_militia).
neg(criminals, well_regulated_militia).
neg(domestic_abusers, well_regulated_militia).
neg(mental_ill, well_regulated_militia).
neg(concealed_carry_permit, legal_in_germany).
neg(self_defense, legal_in_germany).

Section 2 - General relationships:

relation(background_check, gun_violence).
relation(background_check, gun_sales).
relation(background_check, dangerous_people).
relation(gun_regulation, gun_death).
relation(gun_regulation, germany).
relation(gun_regulation, hunting).
relation(gun_regulation, sports).
relation(gun_regulation, fully_automatic_weapon).
relation(gun_regulation, semi_atuomatic_weapon).
relation(gun_regulation, self_defense).
relation(gun_regulation, concealed_carry_permit).
relation(trump, government).
relation(america, government).
relation(america, slavery).
relation(america, colonies).
relation(america, tyrannical_government).

Section 3 - Encoding:

background_check_is_good_because :- pos(background_check,Y).
background_check_is_bad_because :- neg(background_check,Y).
gun_regulation_like_in_germany_is_good_because :- pos(gun_regulation_like_in_germany,Y).
gun_regulation_like_in_germany_is_bad_because :- neg(gun_regulation_like_in_germany,Y).
compare(background_check,X,Y) :- neg(background_check,X),neg(Y,X), background_check != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = background_check.
compare(gun_regulation_like_in_germany,X,Y) :- neg(gun_regulation_like_in_germany,X),neg(Y,X), gun_regulation_like_in_germany != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gun_regulation_like_in_germany.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(opponent, rigorous_philosophical_debate).
neg(opponent, posted_rules).
pos(rules, link).
pos(link, all_rules_of_the_game).
neg(i, lost_the_game).
pos(i, thinking_about_the_game).
neg(i, lost_the_game_at_time_of_accepting_debate).
neg(i, lost_the_game_at_time_of_reading_debate).
pos(most_people, dont_know_about_these_rules).
pos(game, mind_game).
pos(i, made_up_game).
pos(made_up_game, rules).
pos(made_up_game, power).

Section 2 - General relationships:

relation(i, opponent).
relation(i, game).
relation(opponent, game).
relation(rules, game).
relation(i, debate).
relation(i, link).
relation(link, rules).
relation(i, time).
relation(i, debate).
relation(i, time).
relation(i, debate).
relation(i, time).
relation(i, game).
relation(i, time).
relation(i, game).
relation(i, debate).
relation(i, game).
relation(i, made_up_game).
relation(made_up_game, game).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.

i_did_not_lose_the_game_because :- pos(i,Y).
i_lost_the_game_because :- neg(i,Y).
compare(i,X,Y) :- neg(i,X),neg(Y,X), i != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = i.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(catholicism, god).
pos(catholicism, jesus).
neg(catholicism, obey_god_word).
pos(satan, acknowledge_god).
neg(satan, obey_god).
pos(catholics, acknowledge_god).
neg(catholics, obey_god).
pos(catholic_canon, apocryphal_books).
pos(bible, human_rights).
pos(jesus, head_of_church).
pos(bible, church).
neg(bible, idolatry).
pos(christmas, pagan_celebration).
pos(catholic_religion, pagan_roots).

Section 2 - General relationships:

relation(catholicism, christianity).
relation(catholics, christians).
relation(catholic_canon, old_testament).
relation(bible, politics).
relation(bible, government).
relation(bible, church).
relation(jesus, church).
relation(bible, idolatry).
relation(christmas, catholic_religion).

Section 3 - Encoding:

catholicism_is_not_christianity :- neg(catholicism, christianity).
catholics_are_not_christians :- neg(catholics, christians).
catholic_canon_has_apocryphal_books :- pos(catholic_canon, apocryphal_books).
bible_speaks_of_human_rights :- pos(bible, human_rights).
jesus_is_head_of_church :- pos(jesus, head_of_church).
bible_warns_against_idolatry :- neg(bible, idolatry).
christmas_is_a_pagan_celebration :- pos(christmas, pagan_celebration).
catholic_religion_has_pagan_roots :- pos(catholic_religion, pagan_roots).
false_christian_doctrine_cannot_be_christian :- neg(false_christian_doctrine, christian).
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(banning_collisions, fair_advantage).
pos(banning_collisions, unfair_advantage).
pos(ricky_doyle, buster_posey_injury_unfortunate_but_home_plate_collisions_still_have_place_in_baseball).
pos(ricky_doyle, nesn).
pos(ricky_doyle, may_29th_2011).
pos(collisions, home_plate).
neg(collisions, necessary).
pos(collisions, sparingly).
neg(regulating_collisions, unnecessary_advantage).
pos(regulating_collisions, baserunner).
pos(regulating_collisions, catcher).
pos(close_play_situations, baserunner).
pos(close_play_situations, catcher).
pos(major_league_baseball, rule).
pos(major_league_baseball, runners).
pos(major_league_baseball, contact).
pos(major_league_baseball, catcher).
pos(major_league_baseball, slide_or_avoid_rule).
pos(major_league_baseball, amateur_baseball).
pos(major_league_baseball, advantage).
pos(catcher, course_of_action).
pos(catcher, baserunner).
pos(catcher, peace_of_mind).
pos(catcher, ensuing_collision).
pos(baserunner, straight_path).
pos(baserunner, most_sacred_ground).
pos(baserunner, baseball_diamond).

% Section 2 - General relationships
relation(banning_collisions, fair_advantage).
relation(banning_collisions, unfair_advantage).
relation(ricky_doyle, buster_posey_injury_unfortunate_but_home_plate_collisions_still_have_place_in_baseball).
relation(ricky_doyle, nesn).
relation(ricky_doyle, may_29th_2011).
relation(collisions, home_plate).
relation(collisions, necessary).
relation(collisions, sparingly).
relation(regulating_collisions, unnecessary_advantage).
relation(regulating_collisions, baserunner).
relation(regulating_collisions, catcher).
relation(close_play_situations, baserunner).
relation(close_play_situations, catcher).
relation(major_league_baseball, rule).
relation(major_league_baseball, runners).
relation(major_league_baseball, contact).
relation(major_league_baseball, catcher).
relation(major_league_baseball, slide_or_avoid_rule).
relation(major_league_baseball, amateur_baseball).
relation(major_league_baseball, advantage).
relation(catcher, course_of_action).
relation(catcher, baserunner).
relation(catcher, peace_of_mind).
relation(catcher, ensuing_collision).
relation(baserunner, straight_path).
relation(baserunner, most_sacred_ground).
relation(baserunner, baseball_diamond).

% Section 3 - Encoding
banning_collisions_is_good_because :- pos(banning_collisions, Y).
banning_collisions_is_bad_because :- neg(banning_collisions, Y).
compare(banning_collisions,X,Y) :- neg(banning_collisions,X),neg(Y,X), banning_collisions != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = banning_collisions.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(gay, love).
pos(relationship, love).
pos(relationship, two_guys).
pos(relationship, two_girls).
pos(twaimz, love).
pos(twaimz, haters).
pos(god, heterosexuality).
pos(god, adam_and_eve).
pos(heterosexuality, god).
pos(heterosexuality, adam_and_eve).
pos(heterosexuality, females).
pos(heterosexuality, straight_people).
pos(heterosexuality, bi_people).
pos(heterosexuality, pan_people).
pos(heterosexuality, any_other_sexuality).
pos(heterosexuality, same_gender).
pos(heterosexuality, slight_bit).
pos(heterosexuality, equally_accepted).

neg(gay, haters).
neg(homosexual, christian_church).
neg(homosexuality, god).
neg(homosexuality, adam_and_steve).
neg(homosexuality, heterophobic_people).
neg(homosexuality, females).
neg(homosexuality, straight_people).
neg(homosexuality, bi_people).
neg(homosexuality, pan_people).
neg(homosexuality, any_other_sexuality).
neg(homosexuality, same_gender).
neg(homosexuality, slight_bit).
neg(homosexuality, equally_accepted).

Section 2 - General relationships:

relation(gay, love).
relation(relationship, love).
relation(relationship, two_guys).
relation(relationship, two_girls).
relation(twaimz, love).
relation(twaimz, haters).
relation(god, heterosexuality).
relation(god, adam_and_eve).
relation(heterosexuality, god).
relation(heterosexuality, adam_and_eve).
relation(heterosexuality, females).
relation(heterosexuality, straight_people).
relation(heterosexuality, bi_people).
relation(heterosexuality, pan_people).
relation(heterosexuality, any_other_sexuality).
relation(heterosexuality, same_gender).
relation(heterosexuality, slight_bit).
relation(heterosexuality, equally_accepted).
relation(homosexuality, god).
relation(homosexuality, adam_and_steve).
relation(homosexuality, heterophobic_people).
relation(homosexuality, females).
relation(homosexuality, straight_people).
relation(homosexuality, bi_people).
relation(homosexuality, pan_people).
relation(homosexuality, any_other_sexuality).
relation(homosexuality, same_gender).
relation(homosexuality, slight_bit).
relation(homosexuality, equally_accepted).

Section 3 - Encoding:

gay_is_good_because :- pos(gay, Y).
gay_is_bad_because :- neg(gay, Y).
compare(gay,X,Y) :- neg(gay,X),neg(Y,X), gay != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gay.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(global_warming, good).
pos(global_warming, bad).
pos(humans, adapting).
pos(humans, evolving).
pos(humans, smart).

Section 2 - General relationships:

relation(global_warming, humans).
relation(global_warming, ice_sheets).
relation(global_warming, younger_generations).

Section 3 - Encoding:

global_warming_is_bad_because :- pos(global_warming, Y).
global_warming_is_good_because :- neg(global_warming, Y).
humans_are_adapting_because :- pos(humans, Y).
humans_are_not_adapting_because :- neg(humans, Y).
compare(global_warming,X,Y) :- neg(global_warming,X),neg(Y,X), global_warming != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = global_warming.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, universe).
pos(god, everything).
pos(god, creator).
pos(god, all_knowing).
pos(god, all_powerful).
pos(god, american).

Section 2 - General relationships:

relation(god, hairs).
relation(god, pets).
relation(god, flowers).
relation(god, grass).
relation(god, freckles).
relation(god, teeth).

Section 3 - Encoding:

god_is_good_because :- pos(god, Y).
god_is_bad_because :- neg(god, Y).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(law_abiding_citizens, guns).
pos(law_abiding_citizens, united_states).
pos(switzerland, law_abiding_citizens).
pos(switzerland, guns).
pos(switzerland, lower_crime_rate).
pos(united_states, crime_rate).
pos(united_states, guns).
pos(united_states, law_abiding_citizens).
pos(united_states, safer).
neg(criminals, guns).
neg(criminals, law_abiding_citizens).
neg(guns, illegal).
neg(guns, united_states).
neg(law_abiding_citizens, guns).
neg(united_states, safer).

Section 2 - General relationships:

relation(black_market, criminals).
relation(black_market, guns).
relation(crime_rate, united_states).
relation(guns, criminals).
relation(guns, law_abiding_citizens).
relation(guns, united_states).
relation(law_abiding_citizens, guns).
relation(law_abiding_citizens, united_states).
relation(switzerland, crime_rate).
relation(switzerland, guns).
relation(switzerland, law_abiding_citizens).
relation(united_states, crime_rate).
relation(united_states, guns).
relation(united_states, law_abiding_citizens).

Section 3 - Encoding:

law_abiding_citizens_should_have_guns_because :- pos(law_abiding_citizens, guns).
law_abiding_citizens_should_not_have_guns_because :- neg(law_abiding_citizens, guns).
compare(law_abiding_citizens, X, Y) :- neg(law_abiding_citizens, X), neg(Y, X), law_abiding_citizens != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = law_abiding_citizens.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(and_or, abomination).
neg(and_or, english_language).
neg(and_or, real_english_options).
neg(and_or, mental_laziness).
neg(and_or, confusion).

Section 2 - General relationships:

relation(and_or, english_language).
relation(and_or, papers).
relation(and_or, books).
relation(and_or, articles).
relation(and_or, spoken_word).
relation(and_or, legal_documents).
relation(and_or, real_english_options).
relation(and_or, mental_laziness).
relation(and_or, confusion).

Section 3 - Encoding:

and_or_is_bad_because :- neg(and_or, Y).
compare(and_or, X, Y) :- neg(and_or, X), neg(Y, X), and_or != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(affirmative_action, more_diversity).
pos(affirmative_action, more_equal_opportunity).
pos(affirmative_action, less_discrimination).
pos(affirmative_action, tiebreaker).
pos(affirmative_action, qualified_candidates).
pos(affirmative_action, more_qualified_candidates).
pos(affirmative_action, equally_qualified_candidates).
pos(affirmative_action, underrepresented_minorities).
pos(affirmative_action, equally_active_in_community).
pos(affirmative_action, same_gpa).
pos(affirmative_action, same_sports).
pos(affirmative_action, same_act_sat_scores).
pos(affirmative_action, larger_state_universities).
pos(affirmative_action, larger_yield_of_students).
pos(affirmative_action, change_of_current_system).
pos(affirmative_action, constitutional).

neg(affirmative_action, discrimination_in_reverse).
neg(affirmative_action, not_qualified_candidates).
neg(affirmative_action, resentment).
neg(affirmative_action, cultural_enrichment).
neg(affirmative_action, unconstitutional).

Section 2 - General relationships:

relation(affirmative_action, diversity).
relation(affirmative_action, college_admissions).
relation(affirmative_action, college_institutions).
relation(affirmative_action, minority_groups).
relation(affirmative_action, qualified_candidates).
relation(affirmative_action, equally_qualified_candidates).
relation(affirmative_action, more_qualified_candidates).
relation(affirmative_action, underrepresented_minorities).
relation(affirmative_action, high_standing_wealthy_members).
relation(affirmative_action, cultural_diversity).
relation(affirmative_action, cultural_enrichment).
relation(affirmative_action, equally_active_in_community).
relation(affirmative_action, same_gpa).
relation(affirmative_action, same_sports).
relation(affirmative_action, same_act_sat_scores).
relation(affirmative_action, larger_state_universities).
relation(affirmative_action, larger_yield_of_students).
relation(affirmative_action, change_of_current_system).
relation(affirmative_action, constitutional).

Section 3 - Encoding:

affirmative_action_is_good_because :- pos(affirmative_action, Y).
affirmative_action_is_bad_because :- neg(affirmative_action, Y).
compare(affirmative_action, X, Y) :- neg(affirmative_action, X), neg(Y, X), affirmative_action != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = affirmative_action.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(shulk, feelings).
pos(fictional_characters, feelings).
pos(fictional_characters, emotions).
neg(fictional_characters, consciousness).
neg(fictional_characters, conscious_decisions).
neg(fictional_characters, response_system).

Section 2 - General relationships:

relation(shulk, feelings).
relation(fictional_characters, feelings).
relation(fictional_characters, emotions).
relation(fictional_characters, consciousness).
relation(fictional_characters, conscious_decisions).
relation(fictional_characters, response_system).

Section 3 - Encoding:

shulk_can_feel_because :- pos(shulk,Y).
shulk_cannot_feel_because :- neg(shulk,Y).
fictional_characters_can_feel_because :- pos(fictional_characters,Y).
fictional_characters_cannot_feel_because :- neg(fictional_characters,Y).
compare(shulk,X,Y) :- neg(shulk,X),neg(Y,X), shulk != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = shulk.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(jesus, socialist).
neg(capitalist_societies, jesus).
neg(capitalist_societies, religion).
neg(capitalist_societies, workers).
pos(jesus, wealth_inequality).
neg(jesus, rich_man).
pos(jesus, corruption).
pos(jesus, inequality).
pos(jesus, aristocratic_wealth).
pos(jesus, feudal_imperialist_system).
pos(jesus, equality).
pos(jesus, harmony).
pos(jesus, equal_distribution).
pos(jesus, wealth).
pos(jesus, resources).
pos(jesus, sharing).
pos(jesus, caring).
pos(jesus, poor).
pos(jesus, sick).
pos(jesus, oppressed).

% Section 2 - General relationships
relation(jesus, wealth_inequality).
relation(jesus, rich_man).
relation(jesus, corruption).
relation(jesus, inequality).
relation(jesus, aristocratic_wealth).
relation(jesus, feudal_imperialist_system).
relation(jesus, equality).
relation(jesus, harmony).
relation(jesus, equal_distribution).
relation(jesus, wealth).
relation(jesus, resources).
relation(jesus, sharing).
relation(jesus, caring).
relation(jesus, poor).
relation(jesus, sick).
relation(jesus, oppressed).

% Section 3 - Encoding
jesus_is_good_because :- pos(jesus, Y).
jesus_is_bad_because :- neg(jesus, Y).
compare(jesus,X,Y) :- neg(jesus,X),neg(Y,X), jesus != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = jesus.
```
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(us_companies, tariff).
neg(donald_trump, us_companies).
neg(donald_trump, presidential_responsibilities).
neg(donald_trump, american_people).
neg(donald_trump, us_constitution).
neg(donald_trump, federal_government).
neg(donald_trump, taxation).
neg(donald_trump, separation).
neg(donald_trump, us_court_system).
neg(donald_trump, retail_business).
neg(donald_trump, negotiation).
neg(donald_trump, free_trade).
neg(donald_trump, taxpayer).
neg(donald_trump, manufacturing).
neg(donald_trump, labor_wages).
neg(donald_trump, mobility).
neg(donald_trump, industry).
neg(donald_trump, economy).
neg(donald_trump, product).
neg(donald_trump, selling_point).

pos(donald_trump, republic).
pos(donald_trump, religious_monarchy).
pos(donald_trump, england).
pos(donald_trump, parliament).
pos(donald_trump, strategy).
pos(donald_trump, united_states).
pos(donald_trump, constitution).
pos(donald_trump, american_people).
pos(donald_trump, regulations).
pos(donald_trump, issues).
pos(donald_trump, taxation).
pos(donald_trump, separation).
pos(donald_trump, negotiator).
pos(donald_trump, future).
pos(donald_trump, commitment).
pos(donald_trump, representation).
pos(donald_trump, opportunity).

% Section 2 - General relationships
relation(donald_trump, us_companies).
relation(donald_trump, tariff).
relation(donald_trump, republic).
relation(donald_trump, religious_monarchy).
relation(donald_trump, england).
relation(donald_trump, parliament).
relation(donald_trump, strategy).
relation(donald_trump, negotiation).
relation(donald_trump, united_states).
relation(donald_trump, constitution).
relation(donald_trump, american_people).
relation(donald_trump, regulations).
relation(donald_trump, issues).
relation(donald_trump, taxation).
relation(donald_trump, separation).
relation(donald_trump, negotiator).
relation(donald_trump, future).
relation(donald_trump, commitment).
relation(donald_trump, representation).
relation(donald_trump, opportunity).

% Section 3 - Encoding
donald_trump_is_good_because :- pos(donald_trump, Y).
donald_trump_is_bad_because :- neg(donald_trump, Y).
compare(donald_trump,X,Y) :- neg(donald_trump,X),neg(Y,X), donald_trump != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = donald_trump.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(money, political_communication).
pos(donating_money, political_engagement).
pos(donating_money, political_expression).
pos(donating_money, first_amendment).
pos(burning_flag, first_amendment).

Section 2 - General relationships:

relation(money, political_communication).
relation(donating_money, political_engagement).
relation(donating_money, political_expression).
relation(donating_money, first_amendment).
relation(burning_flag, first_amendment).

Section 3 - Encoding:

neg(donating_money, political_communication) :- neg(money, political_communication).
neg(donating_money, political_engagement) :- neg(money, political_engagement).
neg(donating_money, political_expression) :- neg(money, political_expression).
neg(donating_money, first_amendment) :- neg(money, first_amendment).
neg(burning_flag, first_amendment) :- neg(money, first_amendment).

compare(donating_money,X,Y) :- neg(donating_money,X),neg(Y,X), donating_money != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = donating_money.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(venezuela, low_income_families).
pos(venezuela, heating_oil).
pos(citgo, venezuela).
pos(government, strategic_oil_reserves).
pos(government, american_needs).
pos(government, crisis).
pos(government, depression).
pos(government, war).
pos(government, free_enterprise).
pos(oil_companies, foreign_ownership).
pos(oil_companies, american_ownership).
pos(oil_companies, foreign_contingent).
pos(oil_companies, venezuela).
pos(bush, strategic_reserves).
pos(bush, american_oil).
pos(bush, american_energy_policy).
pos(bush, free_enterprise).
pos(bush, truth).

neg(government, chavez).
neg(government, cut_price_heating_oil).
neg(government, free_heating_oil).
neg(government, strategic_oil_reserves).
neg(government, american_needs).
neg(government, crisis).
neg(government, depression).
neg(government, war).
neg(government, high_heating_oil_prices).
neg(government, vermont).
neg(government, crisis_model).
neg(government, administration).
neg(government, oil_industry).
neg(government, foreign_owned).
neg(government, private_companies).
neg(government, free_enterprise).
neg(oil_companies, american_owned).
neg(oil_companies, american_ownership).
neg(oil_companies, foreign_contingent).
neg(oil_companies, foreign_owned).
neg(oil_companies, venezuela).
neg(bush, strategic_reserves).
neg(bush, american_oil).
neg(bush, american_energy_policy).
neg(bush, free_enterprise).
neg(bush, truth).

Section 2 - General relationships:

relation(venezuela, low_income_families).
relation(venezuela, heating_oil).
relation(venezuela, citgo).
relation(citgo, venezuela).
relation(government, strategic_oil_reserves).
relation(government, american_needs).
relation(government, crisis).
relation(government, depression).
relation(government, war).
relation(government, high_heating_oil_prices).
relation(government, vermont).
relation(government, crisis_model).
relation(government, administration).
relation(government, oil_industry).
relation(government, foreign_owned).
relation(government, private_companies).
relation(government, free_enterprise).
relation(oil_companies, american_owned).
relation(oil_companies, american_ownership).
relation(oil_companies, foreign_contingent).
relation(oil_companies, foreign_owned).
relation(oil_companies, venezuela).
relation(bush, strategic_reserves).
relation(bush, american_oil).
relation(bush, american_energy_policy).
relation(bush, free_enterprise).
relation(bush, truth).

Section 3 - Encoding:

venezuela_is_good_because :- pos(venezuela,Y).
venezuela_is_bad_because :- neg(venezuela,Y).
citgo_is_good_because :- pos(citgo,Y).
citgo_is_bad_because :- neg(citgo,Y).
government_is_good_because :- pos(government,Y).
government_is_bad_because :- neg(government,Y).
oil_companies_are_good_because :- pos(oil_companies,Y).
oil_companies_are_bad_because :- neg(oil_companies,Y).
bush_is_good_because :- pos(bush,Y).
bush_is_bad_because :- neg(bush,Y).
compare(venezuela,X,Y) :- neg(venezuela,X),neg(Y,X), venezuela != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = venezuela.
compare(citgo,X,Y) :- neg(citgo,X),neg(Y,X), citgo != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = citgo.
compare(government,X,Y) :- neg(government,X),neg(Y,X), government != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = government.
compare(oil_companies,X,Y) :- neg(oil_companies,X),neg(Y,X), oil_companies != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = oil_companies.
compare(bush,X,Y) :- neg(bush,X),neg(Y,X), bush != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = bush.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(capitalism, get_a_piece_of_the_pie).
neg(capitalism, right_for_our_people).
neg(capitalism, right_for_our_country).
neg(capitalism, wealth_of_the_earth_belongs_to_all_men).
neg(capitalism, economically_efficient).
pos(socialism, redistribute_wealth).
pos(socialism, means_of_production_are_at_the_service_of_the_whole_of_society).
pos(socialism, all_can_benefit).
pos(socialism, none_will_go_without).
pos(socialism, aid_their_fellow_man).
pos(socialism, share_wealth_and_material_amongst_the_community).
pos(socialism, support_all).
pos(socialism, leaving_none_behind).

% Section 2 - General relationships
relation(socialism, capitalism).
relation(capitalism, wealth).
relation(wealth, earth).
relation(wealth, men).
relation(capitalism, property).
relation(property, people).
relation(capitalism, incentive).
relation(capitalism, land).
relation(socialism, means_of_production).
relation(socialism, society).
relation(socialism, benefit).
relation(socialism, life).
relation(socialism, state_of_being).

% Section 3 - Encoding
elon_is_good_because :- pos(socialism,Y).
elon_is_bad_because :- neg(socialism,Y).
compare(socialism,X,Y) :- neg(socialism,X),neg(Y,X), socialism != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = socialism.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(school_uniforms, prevent_brand_driven_consumerism).
pos(school_uniforms, minimize_differences_among_student_body).
pos(school_uniforms, foster_sense_of_common_identity).
pos(school_uniforms, reinforce_student_focus_on_education).
pos(school_uniforms, restrict_students_clothing_options).
pos(school_uniforms, prevent_problems_from_individualized_dress).
pos(school_uniforms, minimize_bullying_because_of_appearances).
pos(school_uniforms, retain_sense_of_style).
pos(school_uniforms, prevent_students_from_being_judged_for_inability_to_afford_brand_names).
pos(school_uniforms, prevent_students_from_dressing_provocatively).
pos(school_uniforms, solve_problem_of_what_am_i_going_to_wear).
pos(school_uniforms, preempt_challenge_of_choosing_apparel).
pos(school_uniforms, prevent_dress_code_violations).
pos(school_uniforms, greatly_reduced_violence).
pos(school_uniforms, greatly_reduced_other_issues_in_the_school).
pos(school_uniforms, reduced_crimes_by_at_least_90_percent).
pos(school_uniforms, reduced_suspensions_by_at_least_90_percent).
pos(school_uniforms, reduced_sex_offenses_by_at_least_90_percent).
pos(school_uniforms, reduced_vandalism_by_almost_70_percent).

Section 2 - General relationships:

relation(school_uniforms, students).
relation(school_uniforms, educational_institution).
relation(school_uniforms, brand_driven_consumerism).
relation(school_uniforms, student_body).
relation(school_uniforms, sense_of_common_identity).
relation(school_uniforms, student_focus_on_education).
relation(school_uniforms, outward_appearance).
relation(school_uniforms, individualized_dress).
relation(school_uniforms, bullying).
relation(school_uniforms, sense_of_style).
relation(school_uniforms, ability_to_afford_brand_names).
relation(school_uniforms, provocative_dressing).
relation(school_uniforms, purpose_of_attending_school).
relation(school_uniforms, education).
relation(school_uniforms, problem_of_what_am_i_going_to_wear).
relation(school_uniforms, challenge_of_choosing_apparel).
relation(school_uniforms, dress_code_violations).
relation(school_uniforms, violence).
relation(school_uniforms, other_issues_in_the_school).
relation(school_uniforms, crimes).
relation(school_uniforms, suspensions).
relation(school_uniforms, sex_offenses).
relation(school_uniforms, vandalism).

Section 3 - Encoding:

school_uniforms_are_useful_because :- pos(school_uniforms,Y).
school_uniforms_are_not_useful_because :- neg(school_uniforms,Y).
compare(school_uniforms,X,Y) :- neg(school_uniforms,X),neg(Y,X), school_uniforms != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = school_uniforms.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(bacterial_flagellum, molecular_machine).
pos(bacterial_flagellum, function_propel_bacteria).
pos(bacterial_flagellum, function_micro_world).
pos(bacterial_flagellum, components_50).
pos(bacterial_flagellum, components_natural_assembly_impossible).
pos(bacterial_flagellum, components_intelligent_mind_assembly).
pos(bacterial_flagellum, natural_selection_explanation_challenge).
pos(bacterial_flagellum, natural_selection_explanation_intelligence_prohibition).

Section 2 - General relationships:

relation(bacterial_flagellum, molecular_machine).
relation(bacterial_flagellum, function_propel_bacteria).
relation(bacterial_flagellum, function_micro_world).
relation(bacterial_flagellum, components_50).
relation(bacterial_flagellum, components_natural_assembly_impossible).
relation(bacterial_flagellum, components_intelligent_mind_assembly).
relation(bacterial_flagellum, natural_selection_explanation_challenge).
relation(bacterial_flagellum, natural_selection_explanation_intelligence_prohibition).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(ps3, controller).
pos(ps3, slim).
pos(ps3, narrow_spaces).
pos(ps3, better).
neg(xbox_360, controller).
neg(xbox_360, bulky).
neg(xbox_360, better).

Section 2 - General relationships:

relation(ps3, controller).
relation(ps3, xbox_360).
relation(ps3, slim).
relation(ps3, narrow_spaces).
relation(ps3, better).

Section 3 - Encoding:

ps3_is_good_because :- pos(ps3,Y).
ps3_is_bad_because :- neg(ps3,Y).
compare(ps3,X,Y) :- neg(ps3,X),neg(Y,X), ps3 != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = ps3.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(democracy, freedom_of_speech).
pos(democracy, right_to_choose_government).
neg(autocracy, freedom_of_speech).
neg(autocracy, right_to_choose_government).
pos(democracy, decision_taken_by_group).
neg(autocracy, decision_taken_by_group).
pos(democracy, leadership_not_taken_over_from_generation_to_generation).
neg(autocracy, leadership_not_taken_over_from_generation_to_generation).
pos(democracy, reduced_risk_of_government_cheating).
neg(autocracy, reduced_risk_of_government_cheating).

% Section 2 - General relationships
relation(democracy, autocracy).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(opponent, good_rapper).
neg(opponent, good_battle_rapper).
neg(opponent, good_rhymer).
neg(opponent, good_poet).
neg(opponent, good_writer).
neg(opponent, good_thinker).
neg(opponent, good_reader).
neg(opponent, good_listener).
neg(opponent, good_speaker).
neg(opponent, good_performer).
neg(opponent, good_entertainer).
neg(opponent, good_artist).
neg(opponent, good_musician).
neg(opponent, good_singer).
neg(opponent, good_dancer).
neg(opponent, good_actor).
neg(opponent, good_comedian).
neg(opponent, good_athlete).
neg(opponent, good_sportsman).
neg(opponent, good_gamer).
neg(opponent, good_student).
neg(opponent, good_teacher).
neg(opponent, good_doctor).
neg(opponent, good_lawyer).
neg(opponent, good_engineer).
neg(opponent, good_scientist).
neg(opponent, good_businessman).
neg(opponent, good_politician).
neg(opponent, good_leader).
neg(opponent, good_person).
neg(opponent, good_friend).
neg(opponent, good_lover).
neg(opponent, good_husband).
neg(opponent, good_father).
neg(opponent, good_son).
neg(opponent, good_brother).
neg(opponent, good_uncle).
neg(opponent, good_nephew).
neg(opponent, good_cousin).
neg(opponent, good_grandson).
neg(opponent, good_grandfather).
neg(opponent, good_great_grandson).
neg(opponent, good_great_grandfather).
neg(opponent, good_human).
neg(opponent, good_being).
neg(opponent, good_soul).
neg(opponent, good_spirit).
neg(opponent, good_energy).
neg(opponent, good_vibes).
neg(opponent, good_karma).
neg(opponent, good_luck).
neg(opponent, good_fortune).
neg(opponent, good_blessings).
neg(opponent, good_wishes).
neg(opponent, good_intentions).
neg(opponent, good_thoughts).
neg(opponent, good_feelings).
neg(opponent, good_emotions).
neg(opponent, good_desires).
neg(opponent, good_hopes).
neg(opponent, good_dreams).
neg(opponent, good_goals).
neg(opponent, good_ambitions).
neg(opponent, good_aspirations).
neg(opponent, good_motivations).
neg(opponent, good_intentions).
neg(opponent, good_actions).
neg(opponent, good_deeds).
neg(opponent, good_achievements).
neg(opponent, good_accomplishments).
neg(opponent, good_successes).
neg(opponent, good_victories).
neg(opponent, good_triumphs).
neg(opponent, good_glories).
neg(opponent, good_honors).
neg(opponent, good_awards).
neg(opponent, good_recognitions).
neg(opponent, good_appreciations).
neg(opponent, good_thanks).
neg(opponent, good_praises).
neg(opponent, good_compliments).
neg(opponent, good_flattery).
neg(opponent, good_admiration).
neg(opponent, good_respect).
neg(opponent, good_love).
neg(opponent, good_affection).
neg(opponent, good_care).
neg(opponent, good_concern).
neg(opponent, good_support).
neg(opponent, good_encouragement).
neg(opponent, good_inspiration).
neg(opponent, good_motivation).
neg(opponent, good_guidance).
neg(opponent, good_leadership).
neg(opponent, good_mentorship).
neg(opponent, good_coaching).
neg(opponent, good_teaching).
neg(opponent, good_training).
neg(opponent, good_education).
neg(opponent, good_learning).
neg(opponent, good_development).
neg(opponent, good_growth).
neg(opponent, good_progress).
neg(opponent, good_improvement).
neg(opponent, good_change).
neg(opponent, good_transformation).
neg(opponent, good_evolution).
neg(opponent, good_revolution).
neg(opponent, good_reformation).
neg(opponent, good_restoration).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation).
neg(opponent, good_recovery).
neg(opponent, good_healing).
neg(opponent, good_repair).
neg(opponent, good_restoration).
neg(opponent, good_reconstruction).
neg(opponent, good_rebuilding).
neg(opponent, good_revival).
neg(opponent, good_renewal).
neg(opponent, good_rebirth).
neg(opponent, good_resurrection).
neg(opponent, good_regeneration).
neg(opponent, good_rejuvenation).
neg(opponent, good_rehabilitation
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(government_insurance, cost_of_delivering_services).
neg(government_insurance, cost_of_doing_business).
neg(insurance, care).
pos(insurance, means_of_paying).
pos(doctors, health_insurance).
pos(doctors, means_of_paying).
pos(patient, doctor).

Section 2 - General relationships:

relation(free_market, government_sponsored_healthcare).
relation(money, industry).
relation(patient, doctor).
relation(insurance, physicians).
relation(doctors, health_insurance).
relation(doctors, means_of_paying).
relation(patient, care).
relation(government_insurance, cost_of_delivering_services).
relation(government_insurance, cost_of_doing_business).
relation(insurance, care).

Section 3 - Encoding:

government_insurance_is_bad_because :- neg(government_insurance,Y).
insurance_is_bad_because :- neg(insurance,Y).
doctors_are_good_because :- pos(doctors,Y).
patient_is_good_because :- pos(patient,Y).
compare(government_insurance,X,Y) :- neg(government_insurance,X),neg(Y,X), government_insurance != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = government_insurance.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(health_bill, health_reform).
neg(health_bill, health_reform_delay).
pos(health_reform, obama).
pos(health_reform, clinton).
neg(health_reform, health_costs).

Section 2 - General relationships:

relation(health_bill, health_reform).
relation(health_reform, obama).
relation(health_reform, clinton).
relation(health_reform, health_costs).

Section 3 - Encoding:

health_bill_is_good_because :- pos(health_bill,Y).
health_bill_is_bad_because :- neg(health_bill,Y).
compare(health_bill,X,Y) :- neg(health_bill,X),neg(Y,X), health_bill != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = health_bill.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(vaccines, severe_side_effects).
neg(vaccines, indigenous_to_the_body).
neg(vaccines, generalized_response).
neg(vaccines, immune_system).
neg(vaccines, autism).
pos(vaccines, risk_assessment).
pos(vaccines, individual_choice).
pos(vaccines, antibody_production).

% Section 2 - General relationships
relation(vaccines, side_effects).
relation(vaccines, bloodstream).
relation(vaccines, immune_response).
relation(vaccines, autism_spectrum_disorder).
relation(vaccines, thimerosal).
relation(thimerosal, autism).
relation(thimerosal, mercury).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(vaccines,X,Y) :- neg(vaccines,X),neg(Y,X), vaccines != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = vaccines.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(you, bad).
neg(you, good).
neg(you, happy).
neg(you, mad).
neg(you, try).
pos(me, good).
pos(me, happy).
pos(me, try).
pos(me, mad).

Section 2 - General relationships:

relation(you, raps).
relation(me, raps).
relation(you, lines).
relation(me, lines).
relation(you, flow).
relation(me, flow).
relation(you, tongue).
relation(me, tongue).
relation(you, pad).
relation(me, pad).

Section 3 - Encoding:

you_are_bad_because :- neg(you,Y).
you_are_good_because :- pos(you,Y).
me_is_bad_because :- neg(me,Y).
me_is_good_because :- pos(me,Y).
compare(you,X,Y) :- neg(you,X),neg(Y,X), you != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = you.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(hitler, eugenics).
neg(hitler, jews).
pos(hitler, germans).
pos(hitler, german_motherland).
neg(hitler, genetic_defects).
neg(hitler, disease).
neg(hitler, crime).
neg(hitler, holocaust).
pos(hitler, racial_groups).
pos(hitler, ethnic_groups).
pos(hitler, sexual_groups).
pos(hitler, political_groups).

Section 2 - General relationships:

relation(hitler, eugenics).
relation(hitler, jews).
relation(hitler, germans).
relation(hitler, german_motherland).
relation(hitler, genetic_defects).
relation(hitler, disease).
relation(hitler, crime).
relation(hitler, holocaust).
relation(hitler, racial_groups).
relation(hitler, ethnic_groups).
relation(hitler, sexual_groups).
relation(hitler, political_groups).
relation(hitler, purge).
relation(hitler, dystopia).
relation(hitler, mein_kampf).

Section 3 - Encoding:

hitler_is_good_because :- pos(hitler,Y).
hitler_is_bad_because :- neg(hitler,Y).
compare(hitler,X,Y) :- neg(hitler,X),neg(Y,X), hitler != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = hitler.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(voting_age, ignorance).
neg(voting_age, maturity).
pos(ignorance, age).
pos(maturity, age).
pos(government, weed_out).
neg(government, ignorance).
neg(government, maturity).
pos(government, age).
pos(taxation, representation).

Section 2 - General relationships:

relation(voting_age, ignorance).
relation(voting_age, maturity).
relation(ignorance, age).
relation(maturity, age).
relation(government, weed_out).
relation(government, ignorance).
relation(government, maturity).
relation(government, age).
relation(taxation, representation).

Section 3 - Encoding:

weed_out_by_age :- pos(government, weed_out), pos(government, age).
weed_out_by_ignorance :- pos(government, weed_out), pos(government, ignorance).
weed_out_by_maturity :- pos(government, weed_out), pos(government, maturity).
unfair :- weed_out_by_age, neg(ignorance, age), neg(maturity, age).
contradictory :- weed_out_by_age, pos(taxation, representation).
compare(voting_age, ignorance, maturity) :- neg(voting_age, ignorance), neg(voting_age, maturity), voting_age != ignorance, voting_age != maturity.
###DELIMITER###
 Section 1 - Negative and positive relationships:
pos(english, primary_language).
pos(simple_english, primary_language).
pos(english, spoken_language).
pos(simple_english, spoken_language).

Section 2 - General relationships:
relation(english, primary_language).
relation(simple_english, primary_language).
relation(english, spoken_language).
relation(simple_english, spoken_language).
relation(opponent, english).

Section 3 - Encoding:
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(term_limits, value_of_experience_in_governance).
pos(term_limits, disaster).
pos(california, term_limits).
pos(california, fiscal_crisis).
pos(well_liked_local_physician's_assistant, medical_care).
neg(well_liked_local_physician's_assistant, budget).
pos(budget, time_to_learn).
neg(well_liked_local_physician's_assistant, full_time_budget_politics).
pos(well_liked_local_physician's_assistant, raising_money).
pos(well_liked_local_physician's_assistant, dealing_with_constituent_service).
pos(well_liked_local_physician's_assistant, reading_up_on_other_bills).
pos(well_liked_local_physician's_assistant, traveling_back_and_forth_from_her_district).
pos(eight_years, time_to_get_the_budget).
pos(twelve_years, time_to_get_the_budget).
pos(more_than_twelve_years, time_to_get_the_budget).
neg(six_years, time_to_get_the_budget).

% Section 2 - General relationships
relation(term_limits, value_of_experience_in_governance).
relation(term_limits, disaster).
relation(california, term_limits).
relation(california, fiscal_crisis).
relation(well_liked_local_physician's_assistant, medical_care).
relation(well_liked_local_physician's_assistant, budget).
relation(well_liked_local_physician's_assistant, time_to_learn).
relation(well_liked_local_physician's_assistant, full_time_budget_politics).
relation(well_liked_local_physician's_assistant, raising_money).
relation(well_liked_local_physician's_assistant, dealing_with_constituent_service).
relation(well_liked_local_physician's_assistant, reading_up_on_other_bills).
relation(well_liked_local_physician's_assistant, traveling_back_and_forth_from_her_district).
relation(eight_years, time_to_get_the_budget).
relation(twelve_years, time_to_get_the_budget).
relation(more_than_twelve_years, time_to_get_the_budget).
relation(six_years, time_to_get_the_budget).

% Section 3 - Encoding
term_limits_are_bad_because :- neg(term_limits,Y).
term_limits_are_good_because :- pos(term_limits,Y).
compare(term_limits,X,Y) :- neg(term_limits,X),neg(Y,X), term_limits != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = term_limits.
```
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(obama, evil).
pos(bush, invaded_terrorists).
neg(obama, obamacare).
pos(bush, cut_taxes_rich).
neg(obama, taxes_poor_increased).
pos(obama, muslim).

% Section 2 - General relationships
relation(obama, iraq).
relation(obama, afghanistan).
relation(obama, osama).
relation(obama, tea_party_patriots).

% Section 3 - Encoding
obama_is_good_because :- pos(obama, Y).
obama_is_bad_because :- neg(obama, Y).
compare(obama,X,Y) :- neg(obama,X),neg(Y,X), obama != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = obama.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(bernie_sanders, socialist).
neg(democratic_socialism, socialism).
pos(democratic_socialism, capitalist).
pos(democratic_socialism, healthcare).
pos(democratic_socialism, education).
pos(democratic_socialism, working_class).
pos(democratic_socialism, taxes).
pos(democratic_socialism, rich).
pos(amazon, profit).
pos(amazon, taxes).

Section 2 - General relationships:

relation(bernie_sanders, democratic_socialism).
relation(democratic_socialism, socialism).
relation(democratic_socialism, capitalism).
relation(democratic_socialism, healthcare).
relation(democratic_socialism, education).
relation(democratic_socialism, working_class).
relation(democratic_socialism, taxes).
relation(democratic_socialism, rich).
relation(amazon, profit).
relation(amazon, taxes).

Section 3 - Encoding:

bernie_is_socialist :- pos(bernie_sanders, socialist).
bernie_is_not_socialist :- neg(bernie_sanders, socialist).
democratic_socialism_is_socialism :- pos(democratic_socialism, socialism).
democratic_socialism_is_not_socialism :- neg(democratic_socialism, socialism).
democratic_socialism_is_capitalist :- pos(democratic_socialism, capitalist).
democratic_socialism_is_not_capitalist :- neg(democratic_socialism, capitalist).
democratic_socialism_supports_healthcare :- pos(democratic_socialism, healthcare).
democratic_socialism_does_not_support_healthcare :- neg(democratic_socialism, healthcare).
democratic_socialism_supports_education :- pos(democratic_socialism, education).
democratic_socialism_does_not_support_education :- neg(democratic_socialism, education).
democratic_socialism_supports_working_class :- pos(democratic_socialism, working_class).
democratic_socialism_does_not_support_working_class :- neg(democratic_socialism, working_class).
democratic_socialism_supports_taxes :- pos(democratic_socialism, taxes).
democratic_socialism_does_not_support_taxes :- neg(democratic_socialism, taxes).
democratic_socialism_supports_rich :- pos(democratic_socialism, rich).
democratic_socialism_does_not_support_rich :- neg(democratic_socialism, rich).
amazon_made_profit :- pos(amazon, profit).
amazon_did_not_pay_taxes :- neg(amazon, taxes).
compare(bernie_sanders, democratic_socialism, socialism) :- neg(bernie_sanders, democratic_socialism), neg(socialism, democratic_socialism), bernie_sanders != socialism.
compare(democratic_socialism, socialism, capitalism) :- neg(democratic_socialism, socialism), neg(democratic_socialism, capitalism), socialism != capitalism, socialism = democratic_socialism.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(stupidity, stupid_idea_or_act).
neg(stupidity, doubting_myself).
pos(doubting, lack_confidence_in).
neg(doubting, stupid_idea_or_act).
pos(drinking_alcohol, stupid_idea_or_act).
neg(drinking_alcohol, doubting_myself).

Section 2 - General relationships:

relation(stupidity, doubting).
relation(stupidity, drinking_alcohol).

Section 3 - Encoding:

stupidity_is_not_doubting :- neg(stupidity, doubting).
doubting_is_not_stupidity :- neg(doubting, stupidity).
drinking_alcohol_is_not_doubting :- neg(drinking_alcohol, doubting).
drinking_alcohol_is_not_stupidity :- neg(drinking_alcohol, stupidity).
compare(stupidity, doubting, drinking_alcohol) :- neg(stupidity, doubting), neg(drinking_alcohol, doubting), stupidity != drinking_alcohol.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(marriage, perfect_person).
neg(marriage, splitting_up).
neg(marriage, suicide).
neg(society, marriage).
neg(society, promises).
pos(marriage, promise).
pos(society, war).
pos(society, suicide).
pos(society, promises).
pos(society, marriage).
pos(boyfriend_girlfriend_situation, splitting_up).
pos(boyfriend_girlfriend_situation, perfect_person).
pos(non_married_relationships, sex_life).
pos(non_married_relationships, happiness).
pos(singles, sex_life).
pos(married_people, sex_life).

Section 2 - General relationships:

relation(marriage, perfect_person).
relation(marriage, splitting_up).
relation(marriage, suicide).
relation(society, marriage).
relation(society, promises).
relation(society, war).
relation(boyfriend_girlfriend_situation, splitting_up).
relation(boyfriend_girlfriend_situation, perfect_person).
relation(non_married_relationships, sex_life).
relation(non_married_relationships, happiness).
relation(singles, sex_life).
relation(married_people, sex_life).

Section 3 - Encoding:

marriage_is_bad_because :- neg(marriage,Y).
marriage_is_good_because :- pos(marriage,Y).
compare(marriage,X,Y) :- neg(marriage,X),neg(Y,X), marriage != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = marriage.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(islam, terrorism).
pos(islam, peace).
neg(bible, violence).
pos(quran, violence).

% Section 2 - General relationships
relation(islam, terrorism).
relation(islam, bible).
relation(quran, bible).
relation(islam, peace).

% Section 3 - Encoding
relation(X,Y) :- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(naturalism, natural_laws).
pos(naturalism, natural_universe).
pos(naturalists, natural_laws).
pos(naturalists, natural_universe).
pos(humans, supernatural).

Section 2 - General relationships:

relation(naturalism, humans).
relation(naturalists, humans).

Section 3 - Encoding:

naturalism_is_good_because :- pos(naturalism, Y).
naturalism_is_bad_because :- neg(naturalism, Y).
compare(naturalism,X,Y) :- neg(naturalism,X),neg(Y,X), naturalism != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = naturalism.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(mayor, people).
neg(opponent, argument).
neg(opponent, proof).
neg(opponent, slight).
neg(opponent, necessary).
neg(opponent, good).
neg(opponent, candidate).
neg(opponent, point).

Section 2 - General relationships:

relation(mayor, term).
relation(mayor, people).
relation(opponent, argument).
relation(opponent, proof).
relation(opponent, slight).
relation(opponent, necessary).
relation(opponent, good).
relation(opponent, candidate).
relation(opponent, point).

Section 3 - Encoding:

mayor_is_good_because :- pos(mayor,Y).
mayor_is_bad_because :- neg(mayor,Y).
opponent_is_good_because :- pos(opponent,Y).
opponent_is_bad_because :- neg(opponent,Y).
compare(mayor,X,Y) :- neg(mayor,X),neg(Y,X), mayor != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = mayor.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(religion, public_schools).
pos(public_schools, educating).
neg(public_schools, discussing_personal_religious_beliefs).
pos(private_non_secular_school, exposing_to_religion).
pos(children, attending_public_school).
neg(parents, wondering_if_exposed_to_religious_belief).
pos(me, discussing_religion_with_my_son).
pos(son, making_an_educated_decision).
neg(santa, bringing_presents).
neg(tooth_fairy, leaving_money_under_pillow).
pos(religion, being_revered_in_today's_society).
pos(young_child, believing_in_religion).
neg(school, allowing_teacher_to_tell_student_there_is_no_god).
pos(parents, having_a_fit_if_teacher_says_there_is_no_god).
neg(me, being_okay_with_teacher_implying_there_is_a_god).
pos(all_religions, being_included_in_schools).
pos(atheism, being_included_in_schools).
neg(parent, being_okay_with_teacher_telling_students_satanism_is_the_one_true_religion).
neg(me, being_sarcastic).
pos(religion, being_a_personal_belief).
neg(religion, being_needed_in_public_schools).
neg(me, being_able_to_afford_a_private_school).
pos(public_schools, educating_children).
neg(public_schools, implicating_the_existence_of_a_god).

Section 2 - General relationships:

relation(religion, public_schools).
relation(public_schools, educating).
relation(public_schools, discussing_personal_religious_beliefs).
relation(private_non_secular_school, exposing_to_religion).
relation(children, attending_public_school).
relation(parents, wondering_if_exposed_to_religious_belief).
relation(me, discussing_religion_with_my_son).
relation(son, making_an_educated_decision).
relation(santa, bringing_presents).
relation(tooth_fairy, leaving_money_under_pillow).
relation(religion, being_revered_in_today's_society).
relation(young_child, believing_in_religion).
relation(school, allowing_teacher_to_tell_student_there_is_no_god).
relation(parents, having_a_fit_if_teacher_says_there_is_no_god).
relation(me, being_okay_with_teacher_implying_there_is_a_god).
relation(all_religions, being_included_in_schools).
relation(atheism, being_included_in_schools).
relation(parent, being_okay_with_teacher_telling_students_satanism_is_the_one_true_religion).
relation(me, being_sarcastic).
relation(religion, being_a_personal_belief).
relation(religion, being_needed_in_public_schools).
relation(me, being_able_to_afford_a_private_school).
relation(public_schools, educating_children).
relation(public_schools, implicating_the_existence_of_a_god).

Section 3 - Encoding:

religion_is_bad_in_public_schools :- neg(religion,Y), relation(religion,Y).
religion_is_good_in_public_schools :- pos(religion,Y), relation(religion,Y).
public_schools_are_for_educating :- pos(public_schools, educating).
public_schools_are_not_for_discussing_personal_religious_beliefs :- neg(public_schools, discussing_personal_religious_beliefs).
parent_should_enroll_child_in_private_non_secular_school :- pos(private_non_secular_school, exposing_to_religion), neg(public_schools, exposing_to_religion).
parents_should_not_have_to_wonder_if_exposed_to_religious_belief :- neg(parents, wondering_if_exposed_to_religious_belief).
i_should_be_the_one_to_discuss_religion_with_my_son :- pos(me, discussing_religion_with_my_son).
son_should_be_old_enough_to_make_an_educated_decision :- pos(son, making_an_educated_decision).
religion_is_revered_in_today's_society :- pos(religion, being_revered_in_today's_society).
young_child_will_be_inclined_to_believe_in_religion :- pos(young_child, believing_in_religion).
school_would_not_allow_teacher_to_tell_student_there_is_no_god :- neg(school, allowing_teacher_to_tell_student_there_is_no_god).
parents_would_have_a_fit_if_teacher_says_there_is_no_god :- pos(parents, having_a_fit_if_teacher_says_there_is_no_god).
i_should_not_have_to_be_okay_with_teacher_implying_there_is_a_god :- neg(me, being_okay_with_teacher_implying_there_is_a_god).
all_religions_and_atheism_must_be_included_in_schools :- pos(all_religions, being_included_in_schools), pos(atheism, being_included_in_schools).
no_parent_would_be_okay_with_teacher_telling_students_satanism_is_the_one_true_religion :- neg(parent, being_okay_with_teacher_telling_students_satanism_is_the_one_true_religion).
i_was_not_being_sarcastic :- neg(me, being_sarcastic).
religion_is_a_personal_belief :- pos(religion, being_a_personal_belief).
religion_is_not_needed_in_public_schools :- neg(religion, being_needed_in_public_schools).
i_cannot_afford_a_private_school :- neg(me, being_able_to_afford_a_private_school).
public_schools_only_purpose_is_to_educate_children :- pos(public_schools, educating_children).
public_schools_should_not_implicate_the_existence_of_a_god :- neg(public_schools, implicating_the_existence_of_a_god).
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(harry_styles, best_member_of_one_direction).
neg(harry_styles, best_looking_member_of_one_direction).
pos(harry_styles, messy_hair).
pos(zayn, takes_care_of_himself).

Section 2 - General relationships:

relation(harry_styles, one_direction).
relation(harry_styles, hair).
relation(zayn, hair).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(xbox_360, four_gb).
pos(xbox_360, exclusives).
pos(xbox_360, better_community).
pos(xbox_360, bigger_community).
pos(xbox_360, kids_friendly).
pos(xbox_360, sales).
pos(xbox_360, game_version_ratio).
pos(xbox_360, great_tech_support).
pos(xbox_360, kinect).
pos(xbox_360, top_selling_game).
pos(xbox_360, surf_web).
pos(xbox_360, create_avatar).
pos(xbox_360, user_friendly).
pos(xbox_360, high_tech_security_system).
pos(xbox_360, polished_dashboard).
pos(xbox_360, quick_addons_demos_game_content_upload).
pos(xbox_360, xbox_live_parties).
pos(ps3, sixty_gb_hard_drive).
pos(ps3, blue_ray).
pos(ps3, games_dont_break_easy).

neg(xbox_360, four_gb).
neg(xbox_360, sales).
neg(ps3, better_community).
neg(ps3, bigger_community).
neg(ps3, kids_friendly).
neg(ps3, great_tech_support).
neg(ps3, kinect).
neg(ps3, top_selling_game).
neg(ps3, user_friendly).
neg(ps3, high_tech_security_system).
neg(ps3, polished_dashboard).
neg(ps3, quick_addons_demos_game_content_upload).
neg(ps3, xbox_live_parties).
neg(ps3, games_dont_break_easy).

Section 2 - General relationships:

relation(xbox_360, hard_drive).
relation(xbox_360, games).
relation(xbox_360, community).
relation(xbox_360, sales).
relation(xbox_360, blue_ray).
relation(xbox_360, kinect).
relation(xbox_360, web).
relation(xbox_360, avatar).
relation(xbox_360, security_system).
relation(xbox_360, dashboard).
relation(xbox_360, addons).
relation(xbox_360, demos).
relation(xbox_360, game_content).
relation(xbox_360, updates).
relation(xbox_360, parties).
relation(ps3, hard_drive).
relation(ps3, games).
relation(ps3, community).
relation(ps3, sales).
relation(ps3, blue_ray).
relation(ps3, kinect).
relation(ps3, web).
relation(ps3, avatar).
relation(ps3, security_system).
relation(ps3, dashboard).
relation(ps3, addons).
relation(ps3, demos).
relation(ps3, game_content).
relation(ps3, updates).
relation(ps3, parties).

Section 3 - Encoding:

xbox_360_is_good_because :- pos(xbox_360,Y).
xbox_360_is_bad_because :- neg(xbox_360,Y).
ps3_is_good_because :- pos(ps3,Y).
ps3_is_bad_because :- neg(ps3,Y).
compare(xbox_360,ps3,Y) :- neg(xbox_360,Y),neg(ps3,Y), xbox_360 != ps3.
compare(ps3,xbox_360,Y) :- neg(ps3,Y),neg(ps3,Y), ps3 != xbox_360.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(abortion, removing_fetus).
pos(abortion, fetus).
pos(abortion, three_months).
pos(abortion, us).
pos(abortion, good_decisions).
pos(abortion, consequences).
pos(abortion, ones_own_actions).
pos(abortion, poor_choices).
pos(abortion, effects).
pos(abortion, important_life_decision).
pos(abortion, life).
pos(abortion, unhealthy).
pos(abortion, involved).
pos(abortion, practice).
pos(abortion, continue).

neg(abortion, aforementioned_terms).
neg(abortion, rape).
neg(abortion, mothers_life).
neg(abortion, illegal).
neg(abortion, abhorrent).
neg(abortion, twenty_four_weeks).
neg(abortion, heart).
neg(abortion, brain).
neg(abortion, vital_organs).
neg(abortion, forming).
neg(abortion, formed).
neg(abortion, first_trimester).

Section 2 - General relationships:

relation(abortion, removing_fetus).
relation(abortion, fetus).
relation(abortion, three_months).
relation(abortion, us).
relation(abortion, good_decisions).
relation(abortion, consequences).
relation(abortion, ones_own_actions).
relation(abortion, poor_choices).
relation(abortion, effects).
relation(abortion, important_life_decision).
relation(abortion, life).
relation(abortion, unhealthy).
relation(abortion, involved).
relation(abortion, practice).
relation(abortion, continue).
relation(abortion, aforementioned_terms).
relation(abortion, rape).
relation(abortion, mothers_life).
relation(abortion, illegal).
relation(abortion, abhorrent).
relation(abortion, twenty_four_weeks).
relation(abortion, heart).
relation(abortion, brain).
relation(abortion, vital_organs).
relation(abortion, forming).
relation(abortion, formed).
relation(abortion, first_trimester).

Section 3 - Encoding:

abortion_is_good_because :- pos(abortion, Y).
abortion_is_bad_because :- neg(abortion, Y).
compare(abortion,X,Y) :- neg(abortion,X),neg(Y,X), abortion != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = abortion.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(ussr, battle_hardened_soldiers).
pos(ussr, battle_ready_soldiers).
pos(ussr, nuclear_weapons).
pos(russia, nuclear_weapons).
pos(ussr, advantage).
neg(us, allies).
neg(us, allies_war).
neg(us, response).

Section 2 - General relationships:

relation(ussr, us).
relation(us, ussr).
relation(us, allies).
relation(ussr, allies).
relation(us, nuclear_weapons).
relation(russia, nuclear_weapons).
relation(us, advantage).

Section 3 - Encoding:

ussr_is_good_because :- pos(ussr,Y).
ussr_is_bad_because :- neg(ussr,Y).
us_is_good_because :- pos(us,Y).
us_is_bad_because :- neg(us,Y).
compare(ussr,us,X) :- neg(ussr,X),neg(us,X), ussr != us.
compare(us,ussr,X) :- neg(us,X),neg(us,X), ussr != us.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(united_states_federal_government, power_to_legalize_industrial_hemp).
pos(necessary_and_proper_clause, power_to_make_all_laws).
pos(necessary_and_proper_clause, elastic_clause).
pos(congress, power_to_make_all_laws).
pos(congress, power_to_stretch_its_powers).
pos(hemp, alternative_energies).
pos(congress, power_to_regulate_commerce).
pos(united_states, power_to_legalize_industrial_hemp).

Section 2 - General relationships:

relation(united_states_federal_government, power_to_legalize_industrial_hemp).
relation(necessary_and_proper_clause, congress).
relation(necessary_and_proper_clause, power_to_make_all_laws).
relation(congress, power_to_stretch_its_powers).
relation(hemp, alternative_energies).
relation(congress, power_to_regulate_commerce).
relation(united_states, power_to_legalize_industrial_hemp).

Section 3 - Encoding:

united_states_federal_government_has_power_to_legalize_industrial_hemp :- pos(united_states_federal_government, power_to_legalize_industrial_hemp).
united_states_federal_government_does_not_have_power_to_legalize_industrial_hemp :- neg(united_states_federal_government, power_to_legalize_industrial_hemp).
necessary_and_proper_clause_gives_congress_power_to_make_all_laws :- pos(necessary_and_proper_clause, power_to_make_all_laws).
necessary_and_proper_clause_does_not_give_congress_power_to_make_all_laws :- neg(necessary_and_proper_clause, power_to_make_all_laws).
congress_has_power_to_stretch_its_powers :- pos(congress, power_to_stretch_its_powers).
congress_does_not_have_power_to_stretch_its_powers :- neg(congress, power_to_stretch_its_powers).
hemp_can_be_used_for_alternative_energies :- pos(hemp, alternative_energies).
hemp_cannot_be_used_for_alternative_energies :- neg(hemp, alternative_energies).
congress_has_power_to_regulate_commerce :- pos(congress, power_to_regulate_commerce).
congress_does_not_have_power_to_regulate_commerce :- neg(congress, power_to_regulate_commerce).
united_states_has_power_to_legalize_industrial_hemp :- pos(united_states, power_to_legalize_industrial_hemp).
united_states_does_not_have_power_to_legalize_industrial_hemp :- neg(united_states, power_to_legalize_industrial_hemp).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(infinity, winning).
pos(infinity, five_circlets).
pos(two_hands, being_gifted).
pos(book, earth).
pos(book, fire).
pos(book, water).
pos(book, air).
pos(many_strategies, many_lifestyles).

Section 2 - General relationships:

relation(infinity, five_circlets).
relation(two_hands, being_gifted).
relation(book, earth).
relation(book, fire).
relation(book, water).
relation(book, air).
relation(many_strategies, many_lifestyles).

Section 3 - Encoding:

infinity_is_good_because :- pos(infinity, Y).
infinity_is_bad_because :- neg(infinity, Y).
five_circlets_is_good_because :- pos(five_circlets, Y).
five_circlets_is_bad_because :- neg(five_circlets, Y).
two_hands_is_good_because :- pos(two_hands, Y).
two_hands_is_bad_because :- neg(two_hands, Y).
book_is_good_because :- pos(book, Y).
book_is_bad_because :- neg(book, Y).
many_strategies_is_good_because :- pos(many_strategies, Y).
many_strategies_is_bad_because :- neg(many_strategies, Y).
compare(infinity,X,Y) :- neg(infinity,X),neg(Y,X), infinity != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = infinity.
compare(five_circlets,X,Y) :- neg(five_circlets,X),neg(Y,X), five_circlets != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = five_circlets.
compare(two_hands,X,Y) :- neg(two_hands,X),neg(Y,X), two_hands != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = two_hands.
compare(book,X,Y) :- neg(book,X),neg(Y,X), book != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = book.
compare(many_strategies,X,Y) :- neg(many_strategies,X),neg(Y,X), many_strategies != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = many_strategies.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(governor_northam, racism).
neg(governor_northam, crime).
neg(governor_northam, violence).
neg(governor_northam, extreme_circumstances).
neg(governor_northam, sexual_assault).
pos(governor_northam, first_amendment).
pos(governor_northam, abortion).
pos(governor_northam, elected_official).

Section 2 - General relationships:

relation(governor_northam, abortion).
relation(governor_northam, first_amendment).
relation(governor_northam, elected_official).
relation(governor_northam, racism).
relation(governor_northam, crime).
relation(governor_northam, violence).
relation(governor_northam, extreme_circumstances).
relation(governor_northam, sexual_assault).
relation(governor_northam, lieutenant_governor_justin_fairfax).

Section 3 - Encoding:

governor_northam_is_good_because :- pos(governor_northam, Y).
governor_northam_is_bad_because :- neg(governor_northam, Y).
compare(governor_northam,X,Y) :- neg(governor_northam,X),neg(Y,X), governor_northam != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = governor_northam.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(balanced_budget_amendment, balanced_budget).
pos(balanced_budget_amendment, congress).
pos(balanced_budget_amendment, senate).
pos(balanced_budget_amendment, defense_spending).
pos(balanced_budget_amendment, war).
pos(balanced_budget, revenue).
pos(balanced_budget, spending).
pos(should, proper).
pos(adopt, place).

Section 2 - General relationships:

relation(balanced_budget_amendment, congress).
relation(balanced_budget_amendment, senate).
relation(balanced_budget_amendment, defense_spending).
relation(balanced_budget_amendment, war).
relation(balanced_budget, revenue).
relation(balanced_budget, spending).
relation(should, proper).
relation(adopt, place).

Section 3 - Encoding:

balanced_budget_amendment_is_good_because :- pos(balanced_budget_amendment, Y).
balanced_budget_amendment_is_bad_because :- neg(balanced_budget_amendment, Y).
compare(balanced_budget_amendment,X,Y) :- neg(balanced_budget_amendment,X),neg(Y,X), balanced_budget_amendment != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = balanced_budget_amendment.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(military, benefit_american_people).
neg(congress, benefit_american_people).
pos(military, choice).
neg(rich_men, choice).
pos(military, end_wars_for_politics).
neg(vietnam, direct_threat_to_us).
pos(ww2, defending_ourselves).
neg(congress, unbiased).
pos(military, different_views).
neg(congress, sees_opinions_of_american).

Section 2 - General relationships:

relation(military, war).
relation(government, war).
relation(opponent, points).
relation(military, declaration_of_war).
relation(american_people, war).
relation(congress, war).
relation(rich_men, war).
relation(military, politics).
relation(vietnam, war).
relation(ww2, war).
relation(congress, opinions_of_american).
relation(military, views).
relation(congress, american).

Section 3 - Encoding:

benefit_american_people(X) :- pos(X,Y), Y = benefit_american_people.
benefit_american_people(X) :- neg(Y,Z), Y = benefit_american_people, pos(X,Z).
choice(X) :- pos(X,Y), Y = choice.
choice(X) :- neg(Y,Z), Y = choice, pos(X,Z).
end_wars_for_politics(X) :- pos(X,Y), Y = end_wars_for_politics.
end_wars_for_politics(X) :- neg(Y,Z), Y = end_wars_for_politics, pos(X,Z).
defending_ourselves(X) :- pos(X,Y), Y = defending_ourselves.
defending_ourselves(X) :- neg(Y,Z), Y = defending_ourselves, pos(X,Z).
unbiased(X) :- pos(X,Y), Y = unbiased.
unbiased(X) :- neg(Y,Z), Y = unbiased, pos(X,Z).
different_views(X) :- pos(X,Y), Y = different_views.
different_views(X) :- neg(Y,Z), Y = different_views, pos(X,Z).
sees_opinions_of_american(X) :- pos(X,Y), Y = sees_opinions_of_american.
sees_opinions_of_american(X) :- neg(Y,Z), Y = sees_opinions_of_american, pos(X,Z).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(phone, educational_purposes).
pos(phone, research).
pos(phone, emergency).
pos(phone, call).
pos(phone, ebooks).
pos(phone, education).

Section 2 - General relationships:

relation(phone, school).
relation(phone, student).
relation(phone, teacher).
relation(phone, class).
relation(phone, ebook).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(un_standing_army, respond_contemporary_crises).
neg(un_standing_army, alter_injustice_un_security_council).
neg(un_standing_army, alter_veto_system_un_security_council).
neg(un_standing_army, resolve_problem).
neg(un_standing_army, solve_underlying_political_causes).
neg(un_standing_army, respond_more_effectively).
neg(un_standing_army, deploy_quickly).
neg(un_standing_army, prevent_bloodshed).
neg(un_standing_army, avert_catastrophe).
neg(un_standing_army, stop_massacre).
neg(un_standing_army, prevent_genocide).
neg(un_standing_army, prevent_crimes_against_humanity).

Section 2 - General relationships:

relation(un_standing_army, un_security_council).
relation(un_standing_army, western_countries).
relation(un_standing_army, srebrenica).
relation(un_standing_army, somalia).
relation(un_standing_army, rwanda).
relation(un_standing_army, bosnian_muslim_men).
relation(un_standing_army, serbian_troops).
relation(un_standing_army, un_member_states).
relation(un_standing_army, national_disputes).
relation(un_standing_army, international_disputes).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(adolf_hitler, all_hate).

Section 2 - General relationships:

relation(adolf_hitler, actions).
relation(adolf_hitler, genocide).
relation(adolf_hitler, war).
relation(adolf_hitler, truth).
relation(adolf_hitler, blind_fury).
relation(adolf_hitler, ignorance).

Section 3 - Encoding:

adolf_hitler_is_good_because :- pos(adolf_hitler,Y).
adolf_hitler_is_bad_because :- neg(adolf_hitler,Y).
compare(adolf_hitler,X,Y) :- neg(adolf_hitler,X),neg(Y,X), adolf_hitler != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = adolf_hitler.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(god, omnipotent_creator).
neg(appendix, useful).
neg(appendix, safe).
neg(human, perfect).
neg(human, physically_perfect).
neg(human, flawless).
neg(human, without_defects).
neg(human, without_mistakes).
neg(human, without_design_flaws).
neg(evolution, perfect).
neg(evolution, flawless).
neg(evolution, without_defects).
neg(evolution, without_mistakes).
neg(evolution, without_design_flaws).
neg(evolution, omnipotent_creator).
neg(evolution, fixes_mistakes).
neg(evolution, corrects_mistakes).
neg(evolution, eliminates_mistakes).
neg(evolution, removes_mistakes).
neg(evolution, perfects_itself).
neg(evolution, improves_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself).
neg(evolution, enhances_itself).
neg(evolution, upgrades_itself).
neg(evolution, evolves_itself).
neg(evolution, develops_itself).
neg(evolution, grows_itself).
neg(evolution, matures_itself).
neg(evolution, advances_itself).
neg(evolution, progresses_itself).
neg(evolution, optimizes_itself
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(western_museums, requests).
pos(repatriate, cultural_artefacts).
pos(debating, rebuttal).
pos(debating, defending).
pos(arguments, rebuttal).
pos(arguments, defending).
pos(arguments, summation).
pos(evidence, points).
pos(museum, objects).
pos(museum, historical).
pos(museum, scientific).
pos(museum, artistic).
pos(museum, cultural).
pos(museum, interest).
pos(museum, stored).
pos(museum, exhibited).
pos(repatriate, country).
pos(repatriate, origin).
pos(artefacts, human).
pos(artefacts, cultural).
pos(artefacts, historical).
pos(comments, section).
pos(comments, adjustment).

neg(debating, one_round).
neg(rebuttal, one_round).
neg(defending, one_round).
neg(arguments, one_round).
neg(summation, one_round).
neg(evidence, new).
neg(points, new).
neg(comments, properly).

Section 2 - General relationships:

relation(western_museums, requests).
relation(western_museums, repatriate).
relation(western_museums, cultural_artefacts).
relation(debating, rebuttal).
relation(debating, defending).
relation(arguments, rebuttal).
relation(arguments, defending).
relation(arguments, summation).
relation(evidence, points).
relation(museum, objects).
relation(museum, historical).
relation(museum, scientific).
relation(museum, artistic).
relation(museum, cultural).
relation(museum, interest).
relation(museum, stored).
relation(museum, exhibited).
relation(repatriate, country).
relation(repatriate, origin).
relation(artefacts, human).
relation(artefacts, cultural).
relation(artefacts, historical).
relation(comments, section).
relation(comments, adjustment).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(hillary_clinton, legal_immigration).
neg(hillary_clinton, black_lives_matter).
neg(hillary_clinton, gay_marriage).
neg(hillary_clinton, refugees).
neg(hillary_clinton, illegal_immigrants).
neg(hillary_clinton, open_jobs).
neg(hillary_clinton, middle_class).
neg(hillary_clinton, economy).
neg(hillary_clinton, jobs).
neg(hillary_clinton, god).
neg(hillary_clinton, mexicans).
neg(hillary_clinton, taxes).

pos(hillary_clinton, president).
pos(hillary_clinton, united_states).
pos(hillary_clinton, strict_regulations).
pos(hillary_clinton, donald_trump).
pos(hillary_clinton, reagan).
pos(hillary_clinton, economy).
pos(hillary_clinton, jobs).

pos(donald_trump, law_and_order).
pos(donald_trump, productivity).
pos(donald_trump, america).
pos(donald_trump, god).
pos(donald_trump, mexicans).
pos(donald_trump, taxes).
pos(donald_trump, jobs).

Section 2 - General relationships:

relation(hillary_clinton, immigration).
relation(hillary_clinton, black_lives_matter).
relation(hillary_clinton, minorities).
relation(hillary_clinton, gay_marriage).
relation(hillary_clinton, taxes).
relation(hillary_clinton, refugees).
relation(hillary_clinton, illegal_immigrants).
relation(hillary_clinton, open_jobs).
relation(hillary_clinton, middle_class).
relation(hillary_clinton, economy).
relation(hillary_clinton, jobs).
relation(hillary_clinton, god).
relation(hillary_clinton, mexicans).

relation(donald_trump, immigration).
relation(donald_trump, law_and_order).
relation(donald_trump, productivity).
relation(donald_trump, america).
relation(donald_trump, gay_marriage).
relation(donald_trump, taxes).
relation(donald_trump, jobs).
relation(donald_trump, god).
relation(donald_trump, mexicans).

Section 3 - Encoding:

hillary_is_good_because :- pos(hillary,Y).
hillary_is_bad_because :- neg(hillary,Y).
compare(hillary,X,Y) :- neg(hillary,X),neg(Y,X), hillary != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = hillary.

donald_is_good_because :- pos(donald,Y).
donald_is_bad_because :- neg(donald,Y).
compare(donald,X,Y) :- neg(donald,X),neg(Y,X), donald != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = donald.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(ethics_classes, discussion_based_class).
pos(ethics_classes, exploring_own_decision_making).
pos(ethics_classes, no_prejudice).
pos(ethics_classes, secularism).
pos(ethics_classes, good_alternative).
pos(ethics_classes, respect_all_ways_of_deriving_meaning).
pos(ethics_classes, solid_base).
pos(ethics_classes, high_school).
pos(australia, decline_in_religious_following).
pos(europe, highly_secularized_society).
pos(ethics_classes, exploring_a_child_s_personal_response).

neg(ethics_classes, single_set_of_morals).
neg(ethics_classes, governed_by_their_teacher).
neg(ethics_classes, miss_understanding_of_the_concept).
neg(ethics_classes, definition_to_which_he_agreed).
neg(ethics_classes, teachers_disagreeing_with_curriculum).
neg(ethics_classes, prejudicing_students).
neg(ethics_classes, negative_aspects_of_certain_religions).
neg(ethics_classes, preference_others).
neg(australia, moving_towards_a_more_secular_society).
neg(adherents_dot_com, unbiased).
neg(special_religious_education, everything_that_ethics_classes_do).
neg(special_religious_education, exploring_a_child_s_personal_response).
neg(primary_school, place_to_be_doing_this).

Section 2 - General relationships:

relation(ethics_classes, discussion_based_class).
relation(ethics_classes, exploring_own_decision_making).
relation(ethics_classes, no_prejudice).
relation(ethics_classes, secularism).
relation(ethics_classes, good_alternative).
relation(ethics_classes, respect_all_ways_of_deriving_meaning).
relation(ethics_classes, solid_base).
relation(ethics_classes, high_school).
relation(australia, decline_in_religious_following).
relation(europe, highly_secularized_society).
relation(ethics_classes, exploring_a_child_s_personal_response).
relation(ethics_classes, single_set_of_morals).
relation(ethics_classes, governed_by_their_teacher).
relation(ethics_classes, miss_understanding_of_the_concept).
relation(ethics_classes, definition_to_which_he_agreed).
relation(ethics_classes, teachers_disagreeing_with_curriculum).
relation(ethics_classes, prejudicing_students).
relation(ethics_classes, negative_aspects_of_certain_religions).
relation(ethics_classes, preference_others).
relation(australia, moving_towards_a_more_secular_society).
relation(adherents_dot_com, unbiased).
relation(special_religious_education, everything_that_ethics_classes_do).
relation(special_religious_education, exploring_a_child_s_personal_response).
relation(primary_school, place_to_be_doing_this).

Section 3 - Encoding:

ethics_classes_are_good_because :- pos(ethics_classes,Y).
ethics_classes_are_bad_because :- neg(ethics_classes,Y).
compare(ethics_classes,X,Y) :- neg(ethics_classes,X),neg(Y,X), ethics_classes != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = ethics_classes.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(reporting_abuse, losing_place_on_the_team).
pos(strong_message, understanding_unacceptability_of_abuse).
pos(anonymous_tip_offs, worry_of_being_blamed_for_the_repercussions).
pos(witness_protection, worry_of_being_blamed_for_the_repercussions).
pos(compensating_lack_of_earnings, abuse).
pos(risk_of_using_harsh_methods, abuse).
pos(understanding_unacceptability_of_abuse, harsh_methods).

Section 2 - General relationships:

relation(reporting_abuse, losing_place_on_the_team).
relation(strong_message, understanding_unacceptability_of_abuse).
relation(anonymous_tip_offs, worry_of_being_blamed_for_the_repercussions).
relation(witness_protection, worry_of_being_blamed_for_the_repercussions).
relation(compensating_lack_of_earnings, abuse).
relation(risk_of_using_harsh_methods, abuse).
relation(understanding_unacceptability_of_abuse, harsh_methods).

Section 3 - Encoding:

reporting_abuse_is_good_because :- pos(reporting_abuse, Y).
reporting_abuse_is_bad_because :- neg(reporting_abuse, Y).
compare(reporting_abuse,X,Y) :- neg(reporting_abuse,X),neg(Y,X), reporting_abuse != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = reporting_abuse.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(rap_battle_12, starting_sooner).
neg(rap_battle_11, completed).
pos(rap_battle_12, no_copy_and_pasting).
pos(rap_battle_12, fight_hard).
neg(someone, forfeits_a_round).
neg(debate, freezes).
pos(opponent, go_first).
neg(opponent, scared).

Section 2 - General relationships:

relation(rap_battle_12, rules).
relation(rap_battle_12, challenge).
relation(rap_battle_12, round).
relation(rap_battle_12, debate).
relation(opponent, rap_battle_12).

Section 3 - Encoding:

starting_sooner_because :- pos(rap_battle_12, starting_sooner).
starting_sooner_because :- neg(rap_battle_11, completed).
no_copy_and_pasting_because :- pos(rap_battle_12, no_copy_and_pasting).
fight_hard_because :- pos(rap_battle_12, fight_hard).
forfeits_a_round_because :- neg(someone, forfeits_a_round).
debate_freezes_because :- neg(debate, freezes).
opponent_go_first_because :- pos(opponent, go_first).
opponent_go_first_because :- neg(opponent, scared).
compare(rap_battle_12,X,Y) :- neg(rap_battle_12,X),neg(Y,X), rap_battle_12 != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = rap_battle_12.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(political_parties, nation).
neg(prime_minister, muslims).
neg(prime_minister, nation).
neg(indian_forces, kashmir_region).
neg(indian_forces, kashmiris).

Section 2 - General relationships:

relation(political_parties, nation).
relation(prime_minister, muslims).
relation(prime_minister, nation).
relation(indian_forces, kashmir_region).
relation(indian_forces, kashmiris).

Section 3 - Encoding:

political_parties_are_bad_because :- neg(political_parties,Y).
prime_minister_is_bad_because :- neg(prime_minister,Y).
indian_forces_are_bad_because :- neg(indian_forces,Y).
compare(political_parties,X,Y) :- neg(political_parties,X),neg(Y,X), political_parties != Y.
compare(prime_minister,X,Y) :- neg(prime_minister,X),neg(prime_minister,Y), X != Y, X = prime_minister.
compare(indian_forces,X,Y) :- neg(indian_forces,X),neg(indian_forces,Y), X != Y, X = indian_forces.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(gun_bans, work).
pos(good_people, follow_laws).
neg(bad_people, follow_laws).
neg(criminals, follow_laws).
neg(gun_laws, stop_criminals).
pos(gun_laws, keep_law_abiding_citizens_from_owning_guns).
neg(government, track_millions_of_illegal_immigrants).

Section 2 - General relationships:

relation(gun_bans, good_people).
relation(gun_bans, criminals).
relation(gun_laws, criminals).
relation(gun_laws, law_abiding_citizens).
relation(government, gun_laws).
relation(government, criminals).
relation(government, illegal_immigrants).
relation(chicago, gun_control).
relation(chicago, gun_murder_rates).

Section 3 - Encoding:

gun_bans_are_bad_because :- neg(gun_bans, X).
gun_bans_are_good_because :- pos(gun_bans, X).
compare(gun_bans,X,Y) :- neg(gun_bans,X),neg(Y,X), gun_bans != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gun_bans.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(con, human).
pos(con, pillow).
pos(pillow, anonymity).
pos(pillow, evidence).
pos(pillow, confirmation).

Section 2 - General relationships:

relation(con, internet).
relation(con, anonymity).
relation(pillow, evidence).
relation(pillow, confirmation).
relation(pillow, human).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(barack_obama, first_amendment).
pos(barack_obama, freedom_of_speech).
pos(barack_obama, sixth_amendment).
pos(barack_obama, bill_of_rights).
pos(barack_obama, constitution).
pos(barack_obama, executive_order).
pos(barack_obama, nsa).
pos(barack_obama, nsa_spying).
pos(barack_obama, police).
pos(barack_obama, protesters).
pos(barack_obama, right_to_freedom_of_speech).
pos(barack_obama, us_constitution).
pos(barack_obama, us_government).
pos(barack_obama, us_news).
pos(barack_obama, us_citizen).
pos(barack_obama, fox_news).
pos(barack_obama, bbc).
pos(barack_obama, cnn).
pos(barack_obama, nbc).
pos(barack_obama, dod).
pos(barack_obama, aclu).
pos(barack_obama, fbi).
pos(barack_obama, cia).
pos(barack_obama, midnight_raid).
pos(barack_obama, peaceful_protesters).
pos(barack_obama, right_wing_nut_job_propaganda_mills).
pos(barack_obama, nation_wide_police_operation).
pos(barack_obama, ineffectual).
pos(barack_obama, impeachment).
pos(barack_obama, ignorance).
pos(barack_obama, shear_ignorance).
pos(barack_obama, responsibility).
pos(barack_obama, obama_administration).
pos(barack_obama, obama_knew).
pos(barack_obama, obama_lacked_the_power).
pos(barack_obama, obama_was_ignorant).
pos(barack_obama, obama_is_good_because).
pos(barack_obama, obama_is_bad_because).

neg(barack_obama, first_amendment).
neg(barack_obama, freedom_of_speech).
neg(barack_obama, sixth_amendment).
neg(barack_obama, bill_of_rights).
neg(barack_obama, constitution).
neg(barack_obama, executive_order).
neg(barack_obama, nsa).
neg(barack_obama, nsa_spying).
neg(barack_obama, police).
neg(barack_obama, protesters).
neg(barack_obama, right_to_freedom_of_speech).
neg(barack_obama, us_constitution).
neg(barack_obama, us_government).
neg(barack_obama, us_news).
neg(barack_obama, us_citizen).
neg(barack_obama, fox_news).
neg(barack_obama, bbc).
neg(barack_obama, cnn).
neg(barack_obama, nbc).
neg(barack_obama, dod).
neg(barack_obama, aclu).
neg(barack_obama, fbi).
neg(barack_obama, cia).
neg(barack_obama, midnight_raid).
neg(barack_obama, peaceful_protesters).
neg(barack_obama, right_wing_nut_job_propaganda_mills).
neg(barack_obama, nation_wide_police_operation).
neg(barack_obama, ineffectual).
neg(barack_obama, impeachment).
neg(barack_obama, ignorance).
neg(barack_obama, shear_ignorance).
neg(barack_obama, responsibility).
neg(barack_obama, obama_administration).
neg(barack_obama, obama_knew).
neg(barack_obama, obama_lacked_the_power).
neg(barack_obama, obama_was_ignorant).
neg(barack_obama, obama_is_good_because).
neg(barack_obama, obama_is_bad_because).

Section 2 - General relationships:

relation(barack_obama, first_amendment).
relation(barack_obama, freedom_of_speech).
relation(barack_obama, sixth_amendment).
relation(barack_obama, bill_of_rights).
relation(barack_obama, constitution).
relation(barack_obama, executive_order).
relation(barack_obama, nsa).
relation(barack_obama, nsa_spying).
relation(barack_obama, police).
relation(barack_obama, protesters).
relation(barack_obama, right_to_freedom_of_speech).
relation(barack_obama, us_constitution).
relation(barack_obama, us_government).
relation(barack_obama, us_news).
relation(barack_obama, us_citizen).
relation(barack_obama, fox_news).
relation(barack_obama, bbc).
relation(barack_obama, cnn).
relation(barack_obama, nbc).
relation(barack_obama, dod).
relation(barack_obama, aclu).
relation(barack_obama, fbi).
relation(barack_obama, cia).
relation(barack_obama, midnight_raid).
relation(barack_obama, peaceful_protesters).
relation(barack_obama, right_wing_nut_job_propaganda_mills).
relation(barack_obama, nation_wide_police_operation).
relation(barack_obama, ineffectual).
relation(barack_obama, impeachment).
relation(barack_obama, ignorance).
relation(barack_obama, shear_ignorance).
relation(barack_obama, responsibility).
relation(barack_obama, obama_administration).
relation(barack_obama, obama_knew).
relation(barack_obama, obama_lacked_the_power).
relation(barack_obama, obama_was_ignorant).
relation(barack_obama, obama_is_good_because).
relation(barack_obama, obama_is_bad_because).

Section 3 - Encoding:

obama_is_good_because :- pos(barack_obama,Y).
obama_is_bad_because :- neg(barack_obama,Y).
compare(barack_obama,X,Y) :- neg(barack_obama,X),neg(barack_obama,Y), barack_obama != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = barack_obama.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(juvenile, violent_felonies).
pos(violent_felonies, adults).
pos(mistakes, accidental_nature).
pos(arguments, focus).
pos(juveniles, violent).
pos(juveniles, violent_crimes).
pos(violent_crimes, murder).
pos(violent_crimes, rape).
pos(violent_crimes, robbery).
pos(violent_crimes, aggravated_assault).
pos(violent_attack, felonious_violent_act).
pos(felonious_violent_act, adult).
pos(innocence, act).

neg(juveniles, adults).
neg(juveniles, mature).
neg(juveniles, innocence).

Section 2 - General relationships:

relation(united_states, juveniles).
relation(united_states, violent_felonies).
relation(united_states, adults).
relation(united_states, violent_crimes).
relation(united_states, murder).
relation(united_states, rape).
relation(united_states, robbery).
relation(united_states, aggravated_assault).
relation(united_states, violent_attack).
relation(united_states, felonious_violent_act).
relation(united_states, innocence).
relation(juveniles, violent_felonies).
relation(juveniles, adults).
relation(juveniles, violent_crimes).
relation(juveniles, murder).
relation(juveniles, rape).
relation(juveniles, robbery).
relation(juveniles, aggravated_assault).
relation(juveniles, violent_attack).
relation(juveniles, felonious_violent_act).
relation(juveniles, innocence).
relation(violent_felonies, adults).
relation(violent_felonies, violent_crimes).
relation(violent_felonies, murder).
relation(violent_felonies, rape).
relation(violent_felonies, robbery).
relation(violent_felonies, aggravated_assault).
relation(violent_felonies, violent_attack).
relation(violent_felonies, felonious_violent_act).
relation(violent_felonies, innocence).
relation(adults, violent_felonies).
relation(adults, violent_crimes).
relation(adults, murder).
relation(adults, rape).
relation(adults, robbery).
relation(adults, aggravated_assault).
relation(adults, violent_attack).
relation(adults, felonious_violent_act).
relation(adults, innocence).
relation(violent_crimes, murder).
relation(violent_crimes, rape).
relation(violent_crimes, robbery).
relation(violent_crimes, aggravated_assault).
relation(violent_crimes, violent_attack).
relation(violent_crimes, felonious_violent_act).
relation(violent_crimes, innocence).
relation(murder, violent_crimes).
relation(murder, violent_attack).
relation(murder, felonious_violent_act).
relation(murder, innocence).
relation(rape, violent_crimes).
relation(rape, violent_attack).
relation(rape, felonious_violent_act).
relation(rape, innocence).
relation(robbery, violent_crimes).
relation(robbery, violent_attack).
relation(robbery, felonious_violent_act).
relation(robbery, innocence).
relation(aggravated_assault, violent_crimes).
relation(aggravated_assault, violent_attack).
relation(aggravated_assault, felonious_violent_act).
relation(aggravated_assault, innocence).
relation(violent_attack, felonious_violent_act).
relation(violent_attack, innocence).
relation(felonious_violent_act, innocence).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(man, governor).
pos(man, seduce).
pos(man, enslaved).
pos(man, military_experience).
pos(man, music_program).
neg(man, human).
neg(man, eat).
neg(man, drink).
neg(man, sunlight).

Section 2 - General relationships:

relation(man, politics).
relation(man, high_school).
relation(man, girl).
relation(man, office).
relation(man, administration).
relation(man, world).
relation(man, pokemon).
relation(man, charizard).
relation(man, battle).
relation(man, boss).
relation(man, soldier).
relation(man, president).
relation(man, sunlight).
relation(man, skin).
relation(man, eyes).
relation(man, time).
relation(man, snowman).

Section 3 - Encoding:

governor_of_washington(man) :- pos(man, governor).
seduce_18_year_old_girl(man) :- pos(man, seduce).
enslaved_pokemon(man) :- pos(man, enslaved).
military_experience(man) :- pos(man, military_experience).
increase_funding_for_music_program(man) :- pos(man, music_program).
not_human(man) :- neg(man, human).
not_eat(man) :- neg(man, eat).
not_drink(man) :- neg(man, drink).
not_sunlight(man) :- neg(man, sunlight).
snowman(man) :- neg(man, human), not_eat(man), not_drink(man), not_sunlight(man).
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(west, entire_generation).
pos(fundamentalist_clerics, influence).
pos(iraq, professionally_trained_army).
pos(iraq, police_force).
pos(iraq, democratically_elected_government).
pos(iraq, people).
pos(iraq, security_forces).
pos(iraq, law).
neg(iraq, personal_armies).
neg(iraq, local_strong_men).
neg(iraq, national_strong_men).
pos(iraq, jobs).
pos(iraq, ability).
neg(iraq, political_loyalty).

Section 2 - General relationships:

relation(entire_generation, west).
relation(fundamentalist_clerics, influence).
relation(iraq, professionally_trained_army).
relation(iraq, police_force).
relation(iraq, democratically_elected_government).
relation(iraq, people).
relation(iraq, security_forces).
relation(iraq, law).
relation(iraq, personal_armies).
relation(iraq, local_strong_men).
relation(iraq, national_strong_men).
relation(iraq, jobs).
relation(iraq, ability).
relation(iraq, political_loyalty).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(sadomasochistic_sex, risk).
pos(sadomasochistic_sex, participant).
pos(participant, hazards).
pos(participant, consent).
pos(government, citizen).
pos(citizen, recklessness).
pos(individual, sexual_stimulation).
pos(individual, plastic_bag).
pos(individual, head).
pos(law, opinion).
pos(sadomasochism, physical_risk).
pos(sadomasochism, participant).
pos(safe_words, agreement).
pos(safe_words, announcement).
pos(safe_words, s_and_m_session).
pos(safe_words, withdrawal).
pos(safe_words, consent).
pos(participants, terms).
pos(participants, encounter).
pos(participants, possibility).
pos(participants, pain).
pos(participants, reluctance).
pos(participants, activity).
pos(safe_words, abuse).
pos(safe_words, consent).

neg(sadomasochistic_sex, meaningful_consent).
neg(sadomasochism, completely_free_of_risk).
neg(government, legislation).
neg(individual, disturbance).
neg(law, deterrent).
neg(sadomasochism, relatively_free_of_physical_risk).
neg(participants, patronizing_assumption).
neg(participants, consideration).
neg(safe_words, inadvertent).

Section 2 - General relationships:

relation(sadomasochistic_sex, risk).
relation(sadomasochistic_sex, participant).
relation(participant, hazards).
relation(participant, consent).
relation(government, citizen).
relation(citizen, recklessness).
relation(individual, sexual_stimulation).
relation(individual, plastic_bag).
relation(individual, head).
relation(law, opinion).
relation(sadomasochism, physical_risk).
relation(sadomasochism, participant).
relation(safe_words, agreement).
relation(safe_words, announcement).
relation(safe_words, s_and_m_session).
relation(safe_words, withdrawal).
relation(safe_words, consent).
relation(participants, terms).
relation(participants, encounter).
relation(participants, possibility).
relation(participants, pain).
relation(participants, reluctance).
relation(participants, activity).
relation(safe_words, abuse).
relation(safe_words, consent).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(bailout_plan, end_debt_crisis).
neg(bailout_plan, end_u_s_bond_market_crisis).
neg(bailout_plan, enough_to_end_debt_crisis).
pos(bailout_plan, drop_in_the_bucket).

Section 2 - General relationships:

relation(bailout_plan, debt_crisis).
relation(bailout_plan, u_s_bond_market).
relation(bailout_plan, administration).
relation(bailout_plan, congress).
relation(bailout_plan, financial_industry).

Section 3 - Encoding:

bailout_plan_is_good_because :- pos(bailout_plan, Y).
bailout_plan_is_bad_because :- neg(bailout_plan, Y).
compare(bailout_plan,X,Y) :- neg(bailout_plan,X),neg(Y,X), bailout_plan != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = bailout_plan.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(ronald_mcdonald, tasty_food).
neg(burger_king, tasty_food).
pos(ronald_mcdonald, clean_restaurant).
neg(burger_king, clean_restaurant).
pos(ronald_mcdonald, kid_friendly).
neg(burger_king, kid_friendly).
pos(ronald_mcdonald, good_customer_service).
neg(burger_king, good_customer_service).
pos(ronald_mcdonald, innovative_menu).
neg(burger_king, innovative_menu).

% Section 2 - General relationships
relation(ronald_mcdonald, burger_king).
relation(burger_king, ronald_mcdonald).
relation(ronald_mcdonald, mcdonalds).
relation(burger_king, mcdonalds).
relation(ronald_mcdonald, playland).
relation(burger_king, playland).
relation(ronald_mcdonald, customers).
relation(burger_king, customers).
relation(ronald_mcdonald, employees).
relation(burger_king, employees).
relation(ronald_mcdonald, food).
relation(burger_king, food).
relation(ronald_mcdonald, restaurant).
relation(burger_king, restaurant).
relation(ronald_mcdonald, creator).
relation(burger_king, creator).
relation(ronald_mcdonald, james_mclamore).
relation(burger_king, james_mclamore).

% Section 3 - Encoding
ronald_mcdonald_is_good_because :- pos(ronald_mcdonald, Y).
ronald_mcdonald_is_bad_because :- neg(ronald_mcdonald, Y).
burger_king_is_good_because :- pos(burger_king, Y).
burger_king_is_bad_because :- neg(burger_king, Y).
compare(ronald_mcdonald, burger_king, X) :- neg(ronald_mcdonald, X), neg(burger_king, X), ronald_mcdonald != burger_king.
compare(burger_king, ronald_mcdonald, X) :- neg(burger_king, X), neg(burger_king, X), ronald_mcdonald != burger_king.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(supreme_court, constitution).
pos(supreme_court, legislation).
pos(supreme_court, document).
pos(supreme_court, reason).
pos(supreme_court, constitutionally_sound).
pos(9th_amendment, rights).
pos(9th_amendment, protection).
pos(9th_amendment, scope).
pos(9th_amendment, existence).
pos(9th_amendment, current).
pos(9th_amendment, right_to_privacy).
pos(14th_amendment, system).
pos(14th_amendment, establishment).
pos(14th_amendment, laws).
pos(14th_amendment, brown).
pos(non_domination_principle, fairness).
pos(non_domination_principle, options).
pos(non_domination_principle, people).
pos(non_domination_principle, important).
pos(gay, rights).
pos(gay, couples).
pos(gay, harm).
pos(gay, legislation).
pos(gay, governor_brewer).
pos(gay, 9th_amendment).
pos(gay, 14th_amendment).
pos(gay, non_domination_principle).

neg(opponent, argument).
neg(opponent, constitution).
neg(opponent, basis).
neg(opponent, rights).
neg(opponent, literal).
neg(opponent, 9th_amendment).
neg(opponent, 14th_amendment).
neg(opponent, current).
neg(opponent, important).

Section 2 - General relationships:

relation(supreme_court, legislation).
relation(supreme_court, constitution).
relation(supreme_court, document).
relation(supreme_court, reason).
relation(supreme_court, constitutionally_sound).
relation(9th_amendment, rights).
relation(9th_amendment, protection).
relation(9th_amendment, scope).
relation(9th_amendment, existence).
relation(9th_amendment, current).
relation(9th_amendment, right_to_privacy).
relation(14th_amendment, system).
relation(14th_amendment, establishment).
relation(14th_amendment, laws).
relation(14th_amendment, brown).
relation(non_domination_principle, fairness).
relation(non_domination_principle, options).
relation(non_domination_principle, people).
relation(non_domination_principle, important).
relation(gay, rights).
relation(gay, couples).
relation(gay, harm).
relation(gay, legislation).
relation(gay, governor_brewer).
relation(gay, 9th_amendment).
relation(gay, 14th_amendment).
relation(gay, non_domination_principle).

Section 3 - Encoding:

supreme_court_is_good_because :- pos(supreme_court,Y).
supreme_court_is_bad_because :- neg(supreme_court,Y).
opponent_is_good_because :- pos(opponent,Y).
opponent_is_bad_because :- neg(opponent,Y).
gay_is_good_because :- pos(gay,Y).
gay_is_bad_because :- neg(gay,Y).
9th_amendment_is_good_because :- pos(9th_amendment,Y).
9th_amendment_is_bad_because :- neg(9th_amendment,Y).
14th_amendment_is_good_because :- pos(14th_amendment,Y).
14th_amendment_is_bad_because :- neg(14th_amendment,Y).
non_domination_principle_is_good_because :- pos(non_domination_principle,Y).
non_domination_principle_is_bad_because :- neg(non_domination_principle,Y).
compare(supreme_court,X,Y) :- neg(supreme_court,X),neg(Y,X), supreme_court != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = supreme_court.
compare(opponent,X,Y) :- neg(opponent,X),neg(Y,X), opponent != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = opponent.
compare(gay,X,Y) :- neg(gay,X),neg(Y,X), gay != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gay.
compare(9th_amendment,X,Y) :- neg(9th_amendment,X),neg(Y,X), 9th_amendment != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = 9th_amendment.
compare(14th_amendment,X,Y) :- neg(14th_amendment,X),neg(Y,X), 14th_amendment != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = 14th_amendment.
compare(non_domination_principle,X,Y) :- neg(non_domination_principle,X),neg(Y,X), non_domination_principle != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = non_domination_principle.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(feminism, equality).
neg(radical_feminists, equality).
pos(radical_feminists, eradicate_male_power).
pos(radical_feminists, female_supremacy).
neg(feminism, female_supremacy).
pos(feminism, equal_rights).
pos(feminism, equal_opportunities).
pos(feminists, battle_inequalities).

Section 2 - General relationships:

relation(feminism, equality).
relation(radical_feminists, equality).
relation(radical_feminists, male_power).
relation(radical_feminists, female_supremacy).
relation(feminism, female_supremacy).
relation(feminism, equal_rights).
relation(feminism, equal_opportunities).
relation(feminists, inequalities).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(public_schools, entrance_exams).
neg(kids, stress).
neg(kids, failure).
neg(parents, nervousness).
neg(parents, insecurity).
neg(kids, success).

Section 2 - General relationships:

relation(public_schools, entrance_exams).
relation(kids, stress).
relation(kids, failure).
relation(parents, nervousness).
relation(parents, insecurity).
relation(kids, success).

Section 3 - Encoding:

public_schools_should_not_have_entrance_exams :- neg(public_schools, entrance_exams).
public_schools_should_have_entrance_exams :- pos(public_schools, entrance_exams).
compare(public_schools,X,Y) :- neg(public_schools,X),neg(Y,X), public_schools != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = public_schools.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(intelligent_design, most_likely_hypothesis).
pos(intelligent_design, origin_of_life).
pos(codes, source_of_intelligence).
pos(codes, human_made).
pos(codes, intelligently_designed).

neg(functional_dna, natural_means).
neg(scientific_understanding, functional_dna).

Section 2 - General relationships:

relation(intelligent_design, origin_of_life).
relation(functional_dna, natural_means).
relation(scientific_understanding, functional_dna).
relation(codes, source_of_intelligence).
relation(codes, human_made).
relation(codes, intelligently_designed).

Section 3 - Encoding:

intelligent_design_is_most_likely_hypothesis :- pos(intelligent_design, most_likely_hypothesis).
intelligent_design_is_not_most_likely_hypothesis :- neg(intelligent_design, most_likely_hypothesis).
functional_dna_can_arise_by_natural_means :- neg(functional_dna, natural_means).
functional_dna_cannot_arise_by_natural_means :- pos(functional_dna, natural_means).
scientific_understanding_of_functional_dna :- pos(scientific_understanding, functional_dna).
no_scientific_understanding_of_functional_dna :- neg(scientific_understanding, functional_dna).
codes_are_formed_from_source_of_intelligence :- pos(codes, source_of_intelligence).
codes_are_not_formed_from_source_of_intelligence :- neg(codes, source_of_intelligence).
codes_are_human_made :- pos(codes, human_made).
codes_are_not_human_made :- neg(codes, human_made).
codes_are_intelligently_designed :- pos(codes, intelligently_designed).
codes_are_not_intelligently_designed :- neg(codes, intelligently_designed).
compare(intelligent_design,X,Y) :- neg(intelligent_design,X),neg(Y,X), intelligent_design != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = intelligent_design.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(pianists, skill).
pos(pianists, melody).
pos(pianists, voice).
pos(pianists, harmony).
pos(pianists, improvisation).
pos(pianists, complexity).
pos(pianists, playing_both_melody_and_voice).
pos(pianists, playing_by_themselves).
pos(pianists, finger_plucking).
pos(pianists, yuja_wang).
pos(pianists, flight_of_the_bumblebee).

neg(guitarists, skill).
neg(guitarists, melody).
neg(guitarists, voice).
neg(guitarists, harmony).
neg(guitarists, improvisation).
neg(guitarists, complexity).
neg(guitarists, playing_both_melody_and_voice).
neg(guitarists, playing_by_themselves).
neg(guitarists, finger_plucking).
neg(guitarists, yuja_wang).
neg(guitarists, flight_of_the_bumblebee).

Section 2 - General relationships:

relation(pianists, guitarists).
relation(pianists, songs).
relation(pianists, complexity).
relation(pianists, finger_plucking).
relation(pianists, frets).
relation(pianists, notes).
relation(pianists, harmony).
relation(pianists, improvisation).
relation(pianists, yuja_wang).
relation(pianists, flight_of_the_bumblebee).
relation(guitarists, songs).
relation(guitarists, complexity).
relation(guitarists, finger_plucking).
relation(guitarists, frets).
relation(guitarists, notes).
relation(guitarists, harmony).
relation(guitarists, improvisation).
relation(guitarists, yuja_wang).
relation(guitarists, flight_of_the_bumblebee).

Section 3 - Encoding:

pianists_are_more_skilled_than_guitarists :- pos(pianists,X), neg(guitarists,X).
pianists_are_more_complex_than_guitarists :- pos(pianists,X), neg(guitarists,X).
pianists_can_play_by_themselves :- pos(pianists, playing_by_themselves).
guitarists_are_usually_used_as_accompaniment :- neg(guitarists, playing_by_themselves).
pianists_have_the_skill_to_play_both_melody_and_voice_better_than_guitarists :- pos(pianists, playing_both_melody_and_voice), neg(guitarists, playing_both_melody_and_voice).
pianists_have_more_skill_in_harmony_than_guitarists :- pos(pianists, harmony), neg(guitarists, harmony).
pianists_can_improvise_better_than_guitarists :- pos(pianists, improvisation), neg(guitarists, improvisation).
pianists_can_play_flight_of_the_bumblebee_better_than_guitarists :- pos(pianists, flight_of_the_bumblebee), neg(guitarists, flight_of_the_bumblebee).
compare(pianists, guitarists, X) :- neg(pianists, X), neg(guitarists, X), pianists != guitarists.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = pianists.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(unilateralism, stability).
pos(unilateralism, consultation).
pos(unilateralism, discussion).
pos(unilateralism, action).
pos(war, defense).
pos(war, freedom).
pos(war, oppression).

Section 2 - General relationships:

relation(unilateralism, war).
relation(war, country).
relation(war, nation).
relation(war, oppression).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(video_gaming, bad_for_you).
pos(video_gaming, stimulation).
neg(bad_posture, good_for_you).
neg(violent_video_games, good_for_you).
pos(video_gaming, benefits).

Section 2 - General relationships:

relation(video_gaming, stimulation).
relation(bad_posture, video_gaming).
relation(violent_video_games, violence).
relation(video_gaming, benefits).

Section 3 - Encoding:

video_gaming_is_good_because :- pos(video_gaming, Y).
video_gaming_is_bad_because :- neg(video_gaming, Y).
compare(video_gaming,X,Y) :- neg(video_gaming,X),neg(Y,X), video_gaming != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = video_gaming.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(mgs3, bomb).
neg(mgs3, bomb).
pos(mgs3, controls).
neg(mgs3, controls).
pos(gow2, controls).
pos(gow, plot).
pos(gow, ratings).
pos(gow, game_play).
pos(gow, graphics).
pos(gow, characters).
pos(gow, action_sequences).
pos(gow, sequel).

Section 2 - General relationships:

relation(mgs3, bomb).
relation(mgs3, controls).
relation(mgs3, gow2).
relation(mgs3, plot).
relation(mgs3, characters).
relation(mgs3, graphics).
relation(mgs3, game_play).
relation(mgs3, action_sequences).
relation(mgs3, sequel).
relation(gow, plot).
relation(gow, ratings).
relation(gow, game_play).
relation(gow, graphics).
relation(gow, characters).
relation(gow, action_sequences).
relation(gow, sequel).

Section 3 - Encoding:

bomb_because :- pos(mgs3, bomb).
not_bomb_because :- neg(mgs3, bomb).
controls_good_because :- pos(mgs3, controls).
controls_bad_because :- neg(mgs3, controls).
compare(mgs3,X,Y) :- neg(mgs3,X),neg(Y,X), mgs3 != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = mgs3.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(homosexuals, rape).
pos(rape, rape).

% Section 2 - General relationships
relation(homosexuals, rape).

% Section 3 - Encoding
neg(X, rape) :- relation(X, Y), neg(Y, rape).
neg(X, rape) :- neg(Y, rape), neg(X, Y).
pos(X, rape) :- relation(X, Y), pos(Y, rape).
pos(X, rape) :- pos(Y, rape), pos(X, Y).
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(airport_security_profiling, single_out_passengers).
pos(airport_security_profiling, extra_security_searches).
neg(airport_security_personnel, profile_airline_passengers).
neg(airport_security_personnel, special_scrutiny).
pos(moslem_and_middle_eastern_countries, good_decent_innocent_people).
neg(moslem_and_middle_eastern_countries, crimes).
pos(airport_security_officials, temporarily_justified).
pos(airport_security_officials, doing_so).
pos(terrorist_act, committed_or_attempted).
pos(terrorist_act, foreigners).
pos(terrorist_act, u_s).
pos(terrorist_act, world_trade_center_car_bomb).
pos(terrorist_act, september_11).
pos(terrorist_act, unsuccessful_conspiracies).
pos(middle_east, terrorist_act).
pos(algeria, terrorist_act).
pos(pakistan, terrorist_act).
pos(september_11, cost_thousands_of_lives).
pos(september_11, significantly_disrupt_our_way_of_life).
pos(airport_security_officials, focus_most_of_our_attention).
pos(airport_security_officials, people).
pos(airport_security_officials, fit_the_profile).
pos(airport_security_officials, those_most_likely_to_attempt_another_september_11).
neg(profiling, any_group).
neg(profiling, our_ideals_and_values).
pos(next_group_of_hijackers, might_not_fit_the_profile).
pos(somalia, al_qaeda_cells).
pos(indonesia, al_qaeda_cells).
pos(aum_shinrikyo, japanese_sect).
pos(aum_shinrikyo, released_a_deadly_chemical).
pos(aum_shinrikyo, tokyo_subway).
pos(timothy_mcveigh, all_american_guys).
pos(terry_nichols, all_american_guys).
pos(timothy_mcveigh, blew_up_the_federal_building).
pos(timothy_mcveigh, oklahoma_city).
pos(airport_security_personnel, act_professionally).
pos(airport_security_personnel, act_courteously).
neg(airport_security_personnel, harass_and_humiliate).
neg(airport_security_personnel, innocent_decent_people).
pos(airport_security_profiling, protect_one_of_our_natural_right).
pos(airport_security_profiling, life).

Section 2 - General relationships:

relation(airport_security, profiling).
relation(airport_security, airline_passengers).
relation(airport_security, moslem_and_middle_eastern_countries).
relation(airport_security, september_11).
relation(airport_security, terrorist_act).
relation(airport_security, middle_east).
relation(airport_security, algeria).
relation(airport_security, pakistan).
relation(airport_security, our_ideals_and_values).
relation(airport_security, next_group_of_hijackers).
relation(airport_security, somalia).
relation(airport_security, indonesia).
relation(airport_security, aum_shinrikyo).
relation(airport_security, timothy_mcveigh).
relation(airport_security, terry_nichols).
relation(airport_security, life).

Section 3 - Encoding:

airport_security_profiling_is_good_because :- pos(airport_security_profiling,Y).
airport_security_profiling_is_bad_because :- neg(airport_security_profiling,Y).
compare(airport_security_profiling,X,Y) :- neg(airport_security_profiling,X),neg(Y,X), airport_security_profiling != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = airport_security_profiling.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(world, misery).
neg(world, cruelty).
neg(poverty, life).
pos(children, innocence).

Section 2 - General relationships:

relation(children, world).
relation(children, poverty).
relation(children, misery).
relation(children, innocence).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(bible, divine).
pos(bible, devoted_to_god).
pos(bible, venerated_as_sacred).
pos(bible, good).
pos(bible, righteous).
pos(bible, sacred).
pos(bible, inspired_work).

Section 2 - General relationships:

relation(bible, god).
relation(bible, man).
relation(bible, documents).
relation(bible, flag).
relation(bible, white_cloth).
relation(bible, wood).
relation(bible, blue_red_dye).
relation(bible, stack_of_documents).
relation(bible, validity).
relation(bible, biblical_interpretation).
relation(bible, existence_of_god).

Section 3 - Encoding:

divine_because :- pos(bible, divine).
devoted_to_god_because :- pos(bible, devoted_to_god).
venerated_as_sacred_because :- pos(bible, venerated_as_sacred).
good_because :- pos(bible, good).
righteous_because :- pos(bible, righteous).
sacred_because :- pos(bible, sacred).
inspired_work_because :- pos(bible, inspired_work).

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(bible,X,Y) :- neg(bible,X),neg(Y,X), bible != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = bible.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(school_uniforms, lessen_bullying).
pos(school_uniforms, increase_bullying).
pos(school_districts, violence_rates).
pos(texas_southern_university, study).
pos(texas_southern_university_study, bullying_incidents).
pos(texas_southern_university_study, mandatory_uniform_wearing).
pos(southwest_journal_of_criminal_justice, study).
pos(southwest_journal_of_criminal_justice_study, assaults).
pos(southwest_journal_of_criminal_justice_study, introduction_of_school_uniforms).
pos(office_of_education_evaluation_and_management_of_the_miami_dade_county, study).
pos(office_of_education_evaluation_and_management_of_the_miami_dade_county_study, violence).
pos(office_of_education_evaluation_and_management_of_the_miami_dade_county_study, middle_schools).
pos(office_of_education_evaluation_and_management_of_the_miami_dade_county_study, students).
pos(office_of_education_evaluation_and_management_of_the_miami_dade_county_study, uniforms).

Section 2 - General relationships:

relation(school_uniforms, bullying).
relation(school_uniforms, violence).
relation(school_districts, violence_rates).
relation(texas_southern_university, study).
relation(texas_southern_university_study, bullying_incidents).
relation(texas_southern_university_study, mandatory_uniform_wearing).
relation(southwest_journal_of_criminal_justice, study).
relation(southwest_journal_of_criminal_justice_study, assaults).
relation(southwest_journal_of_criminal_justice_study, introduction_of_school_uniforms).
relation(office_of_education_evaluation_and_management_of_the_miami_dade_county, study).
relation(office_of_education_evaluation_and_management_of_the_miami_dade_county_study, violence).
relation(office_of_education_evaluation_and_management_of_the_miami_dade_county_study, middle_schools).
relation(office_of_education_evaluation_and_management_of_the_miami_dade_county_study, students).
relation(office_of_education_evaluation_and_management_of_the_miami_dade_county_study, uniforms).

Section 3 - Encoding:

school_uniforms_increase_bullying :- pos(school_uniforms, increase_bullying).
school_uniforms_decrease_bullying :- neg(school_uniforms, increase_bullying).
violence_increase_after_uniforms :- pos(office_of_education_evaluation_and_management_of_the_miami_dade_county_study, violence).
violence_decrease_after_uniforms :- neg(office_of_education_evaluation_and_management_of_the_miami_dade_county_study, violence).
compare(school_uniforms,X,Y) :- pos(school_uniforms,X),neg(school_uniforms,Y), school_uniforms != Y.
compare(X,Y,Z) :- pos(X,Y),pos(X,Z), Y != Z, Y = school_uniforms.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(gun_control, innocent_civilians).
neg(gun_control, constitution).
neg(gun_control, criminals).
pos(gun_control, innocent_civilians).
pos(gun_control, constitution).
pos(gun_control, criminals).

Section 2 - General relationships:

relation(gun_control, criminals).
relation(gun_control, innocent_civilians).
relation(gun_control, constitution).

Section 3 - Encoding:

gun_control_is_good_because :- pos(gun_control, Y).
gun_control_is_bad_because :- neg(gun_control, Y).
compare(gun_control,X,Y) :- neg(gun_control,X),neg(Y,X), gun_control != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gun_control.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(capitalist_party_of_georgia, wealth).
pos(capitalist_party_of_georgia, freedom).
pos(milton_friedman, economic_freedom).
pos(milton_friedman, political_freedom).
pos(capitalist_party_of_georgia, smaller_government).
pos(capitalist_party_of_georgia, less_intrusive_government).
pos(capitalist_party_of_georgia, political_freedom).
pos(capitalist_party_of_georgia, economic_freedom).
pos(capitalism, creativity).
pos(capitalism, ideas).
pos(capitalism, economic_freedom).
pos(capitalism, independence).
pos(capitalism, determination_to_work).
neg(communism, freedom).
neg(communism, creativity).
neg(communism, ideas).
neg(communism, economic_freedom).
neg(communism, independence).
neg(communism, determination_to_work).
neg(communism, hope).

Section 2 - General relationships:

relation(capitalist_party_of_georgia, wealth).
relation(capitalist_party_of_georgia, freedom).
relation(milton_friedman, economic_freedom).
relation(milton_friedman, political_freedom).
relation(capitalist_party_of_georgia, smaller_government).
relation(capitalist_party_of_georgia, less_intrusive_government).
relation(capitalist_party_of_georgia, political_freedom).
relation(capitalist_party_of_georgia, economic_freedom).
relation(capitalism, creativity).
relation(capitalism, ideas).
relation(capitalism, economic_freedom).
relation(capitalism, independence).
relation(capitalism, determination_to_work).
relation(communism, freedom).
relation(communism, creativity).
relation(communism, ideas).
relation(communism, economic_freedom).
relation(communism, independence).
relation(communism, determination_to_work).
relation(communism, hope).

Section 3 - Encoding:

capitalist_party_of_georgia_is_good_because :- pos(capitalist_party_of_georgia, Y).
capitalist_party_of_georgia_is_bad_because :- neg(capitalist_party_of_georgia, Y).
communism_is_good_because :- pos(communism, Y).
communism_is_bad_because :- neg(communism, Y).
compare(capitalist_party_of_georgia, X, Y) :- neg(capitalist_party_of_georgia, X), neg(Y, X), capitalist_party_of_georgia != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = capitalist_party_of_georgia.
compare(communism, X, Y) :- neg(communism, X), neg(Y, X), communism != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = communism.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(earth_derived_quantum_evidence, cosmic_origin_theory).
neg(con, coherent_theory).
neg(con, quantative_description).
neg(con, mathematical_formulation).
neg(con, measuring_etheric_phenomena).
neg(con, testable_hypothesis).
neg(con, understanding_modern_cosmology).
neg(con, quantum_mechanics_reliant_on_modern_cosmology).
neg(con, modern_cosmology_uses_quantum_derived_data).
neg(con, quantum_mechanical_observations_accurate_around_earth).
neg(con, con_theory_explains_modern_cosmology_and_general_relativity).
neg(con, formal_education_on_modern_cosmology).

Section 2 - General relationships:

relation(earth_derived_quantum_evidence, cosmic_origin_theory).
relation(con, theory).
relation(con, woo).
relation(con, ying_and_yang_disturbance).
relation(con, focal_anamoly).
relation(con, first_causal_space).
relation(con, uniform_elemental_ether).
relation(con, pseudoscientific_notions).
relation(con, modern_cosmology).
relation(con, quantum_mechanics).
relation(con, quantum_mechanical_observations).
relation(con, planet_earth).
relation(con, extragalactic_distances).
relation(con, cosmological_models).
relation(con, scientific_experts).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(department_of_education, local_education).
neg(common_core, local_education).
pos(common_core, federal_government).
pos(department_of_education, federal_government).

% Section 2 - General relationships
relation(department_of_education, common_core).
relation(federal_government, department_of_education).
relation(federal_government, common_core).
relation(federal_government, states).
relation(states, local_education).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(campaign_financing, democratic_system).
pos(campaign_financing, big_business).
pos(federal_politicians, money).
pos(banking_sector, money).
pos(top_1_percent, money).
pos(top_1_percent, influence).
pos(money, influence).
pos(public_financing, democratic_system).
pos(public_financing, average_voter).
pos(cap, democratic_system).
pos(cap, average_voter).

Section 2 - General relationships:

relation(campaign_financing, democratic_system).
relation(campaign_financing, big_business).
relation(federal_politicians, money).
relation(banking_sector, money).
relation(top_1_percent, money).
relation(top_1_percent, influence).
relation(money, influence).
relation(public_financing, democratic_system).
relation(public_financing, average_voter).
relation(cap, democratic_system).
relation(cap, average_voter).

Section 3 - Encoding:

campaign_financing_is_bad_because :- neg(campaign_financing, X).
campaign_financing_is_good_because :- pos(campaign_financing, X).
compare(campaign_financing, X, Y) :- neg(campaign_financing, X), neg(Y, X), campaign_financing != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = campaign_financing.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(prostitution, dark_alleyway).
pos(prostitution, illegal).
pos(prostitution, women).
neg(prostitution, degrading).
neg(prostitution, open).
neg(prostitution, secret).
neg(prostitution, murdered).
neg(prostitution, kidnapped).
pos(prostitution, hiv).
pos(prostitution, std).
pos(prostitution, disease).
pos(prostitution, society).
neg(prostitution, curable).
pos(prostitution, jail).
pos(prostitution, danger).

Section 2 - General relationships:

relation(prostitution, women).
relation(prostitution, police).
relation(prostitution, men).
relation(prostitution, clients).
relation(prostitution, population).

Section 3 - Encoding:

prostitution_is_good_because :- pos(prostitution, Y).
prostitution_is_bad_because :- neg(prostitution, Y).
compare(prostitution,X,Y) :- neg(prostitution,X),neg(Y,X), prostitution != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = prostitution.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(procrastination, focus).
pos(procrastination, drive).
pos(procrastination, time).
pos(procrastination, pressure).

Section 2 - General relationships:

relation(procrastination, high schoolers).
relation(procrastination, jobs).
relation(procrastination, pressure).

Section 3 - Encoding:

procrastination_is_good_because :- pos(procrastination, Y).
procrastination_is_bad_because :- neg(procrastination, Y).
compare(procrastination,X,Y) :- neg(procrastination,X),neg(Y,X), procrastination != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = procrastination.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(unconventional_oil, local_communities).
pos(unconventional_oil, land).
pos(unconventional_oil, water).
pos(land, people).
pos(water, people).
neg(unconventional_oil, health).
neg(increased_rates_of_cancer, health).
neg(boom_town_development, local_communities).
neg(oil_workers, local_communities).

Section 2 - General relationships:

relation(unconventional_oil, land).
relation(unconventional_oil, water).
relation(unconventional_oil, people).
relation(unconventional_oil, health).
relation(unconventional_oil, increased_rates_of_cancer).
relation(unconventional_oil, boom_town_development).
relation(unconventional_oil, oil_workers).
relation(unconventional_oil, local_communities).
relation(canada, first_nations).
relation(first_nations, oil_sands).
relation(shell_canada, oil_sands).

Section 3 - Encoding:

unconventional_oil_is_bad_because :- neg(unconventional_oil, Y).
unconventional_oil_is_good_because :- pos(unconventional_oil, Y).
compare(unconventional_oil,X,Y) :- neg(unconventional_oil,X),neg(Y,X), unconventional_oil != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = unconventional_oil.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(muslim_ban, good_reason).
neg(europe, muslim_immigrants).
neg(muslim_terrorists, europe).
neg(middle_eastern_muslim_countries, own_people).
neg(middle_eastern_muslim_countries, islam).
neg(islam, non_muslims).
neg(middle_eastern_countries, terrorists).
neg(terrorists, united_states).

Section 2 - General relationships:

relation(muslim_ban, europe).
relation(muslim_ban, muslim_terrorists).
relation(muslim_ban, middle_eastern_muslim_countries).
relation(muslim_ban, islam).
relation(muslim_ban, terrorists).
relation(muslim_ban, united_states).

Section 3 - Encoding:

muslim_ban_is_good_because :- pos(muslim_ban, Y).
muslim_ban_is_bad_because :- neg(muslim_ban, Y).
compare(muslim_ban,X,Y) :- neg(muslim_ban,X),neg(Y,X), muslim_ban != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = muslim_ban.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(wife, husband).
neg(wife, social_idiot).
neg(wife, work).
neg(wife, you).
neg(you, work).
neg(you, society).
neg(you, communication).
pos(wife, isolation).
pos(wife, vampire).
pos(wife, cave).
pos(wife, solitude).
pos(wife, harley).
pos(wife, cookout).
pos(wife, kfc).
pos(wife, hamburger).
pos(wife, food).
pos(you, cookout).
pos(you, kfc).

% Section 2 - General relationships
relation(wife, you).
relation(wife, harley).
relation(wife, society).
relation(you, work).
relation(you, society).
relation(you, cookout).
relation(you, kfc).

% Section 3 - Encoding
wife_is_good_because :- pos(wife,Y).
wife_is_bad_because :- neg(wife,Y).
you_is_good_because :- pos(you,Y).
you_is_bad_because :- neg(you,Y).
compare(wife,X,Y) :- neg(wife,X),neg(Y,X), wife != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = wife.
compare(you,X,Y) :- neg(you,X),neg(Y,X), you != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = you.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(ds, fun).
pos(ds, entertainment).
pos(music, entertainment).
pos(music, more_people_like).
pos(music, not_kiddy).
pos(mp3, more_music_comes_out_each_day).
pos(mp3, longer_timeframe).
neg(ds, abuse).
neg(ds, gaming_company).
neg(ds, can_t_manage_the_world).
neg(ds, limited_choices).
neg(ds, not_fun_to_everyone).
neg(ds, not_enough_ds_for_anyone).
neg(ds, not_enough_people_have_them).
neg(ds, will_die_when_enough_people_have_them).

Section 2 - General relationships:

relation(ds, fun).
relation(ds, abuse).
relation(ds, gaming_company).
relation(ds, can_t_manage_the_world).
relation(ds, limited_choices).
relation(ds, not_fun_to_everyone).
relation(ds, not_enough_ds_for_anyone).
relation(ds, not_enough_people_have_them).
relation(ds, will_die_when_enough_people_have_them).
relation(music, entertainment).
relation(music, more_people_like).
relation(music, not_kiddy).
relation(mp3, more_music_comes_out_each_day).
relation(mp3, longer_timeframe).

Section 3 - Encoding:

ds_is_good_because :- pos(ds, Y).
ds_is_bad_because :- neg(ds, Y).
compare(ds,X,Y) :- neg(ds,X),neg(Y,X), ds != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = ds.
###DELIMITER###
 Section 1 - Negative and positive relationships:
neg(love, real).
pos(love, emotion).
pos(love, nature).
pos(love, existence).
pos(love, specie).
pos(love, destiny).
pos(love, happy).
neg(love, novels).
neg(love, movies).
neg(love, television_series).
neg(love, creator).
neg(love, desires).
neg(love, misconceptions).

Section 2 - General relationships:
relation(love, emotion).
relation(love, nature).
relation(love, specie).
relation(love, destiny).
relation(love, happy).
relation(love, novels).
relation(love, movies).
relation(love, television_series).
relation(love, creator).
relation(love, desires).
relation(love, misconceptions).

Section 3 - Encoding:
love_is_not_real :- neg(love, real).
love_is_real :- pos(love, real).
love_is_emotion :- pos(love, emotion).
love_is_nature :- pos(love, nature).
love_is_specie :- pos(love, specie).
love_is_destiny :- pos(love, destiny).
love_is_happy :- pos(love, happy).
love_is_not_novels :- neg(love, novels).
love_is_not_movies :- neg(love, movies).
love_is_not_television_series :- neg(love, television_series).
love_is_not_creator :- neg(love, creator).
love_is_not_desires :- neg(love, desires).
love_is_not_misconceptions :- neg(love, misconceptions).
compare(love,X,Y) :- neg(love,X),neg(Y,X), love != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = love.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(trump, good_president).
neg(trump, clean).
neg(god, clean).
pos(trump, win).
pos(god, win).
pos(god, omnipotent).
pos(god, omniscient).
pos(god, omnipresent).
pos(god, creator).
pos(god, right).
pos(god, wrong).
pos(god, suffering).
pos(god, pain).
pos(god, horror).
pos(god, christ).
pos(christ, suffering).
pos(christ, pain).
pos(christ, horror).

Section 2 - General relationships:

relation(trump, god).
relation(trump, win).
relation(god, win).
relation(god, right).
relation(god, wrong).
relation(god, suffering).
relation(god, pain).
relation(god, horror).
relation(god, christ).
relation(christ, suffering).
relation(christ, pain).
relation(christ, horror).

Section 3 - Encoding:

trump_is_bad_because :- neg(trump,Y).
trump_is_good_because :- pos(trump,Y).
god_is_bad_because :- neg(god,Y).
god_is_good_because :- pos(god,Y).
compare(trump,X,Y) :- neg(trump,X),neg(Y,X), trump != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = trump.
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(polygamy, ethical_practice).
neg(polygamous_marriage, judicial_clarity).
neg(polygamous_marriage, legal_recognition).
pos(plural_civil_unions, legal_benefits).
neg(plural_civil_unions, actual_marriage).

Section 2 - General relationships:

relation(polygamy, ethicalness).
relation(polygamy, legality).
relation(polygamous_marriage, judicial_clarity).
relation(polygamous_marriage, legal_recognition).
relation(plural_civil_unions, marriage).
relation(plural_civil_unions, legal_benefits).

Section 3 - Encoding:

ethical_polygamy :- pos(polygamy, ethical_practice).
legal_polygamy :- ethical_polygamy, neg(polygamous_marriage, judicial_clarity).
compare(polygamy, X, Y) :- neg(polygamy, X), neg(Y, X), polygamy != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(river, same).
pos(river, fish).
pos(river, rocks).
pos(river, water).
pos(person, nose).
pos(person, eyes).
pos(person, organs).
pos(person, personality).

neg(river, completely_different).
neg(person, completely_different).

Section 2 - General relationships:

relation(river, fish).
relation(river, rocks).
relation(river, water).
relation(person, nose).
relation(person, eyes).
relation(person, organs).
relation(person, personality).

Section 3 - Encoding:

river_is_same_because :- pos(river,Y).
river_is_different_because :- neg(river,Y).
person_is_same_because :- pos(person,Y).
person_is_different_because :- neg(person,Y).
compare(river,X,Y) :- neg(river,X),neg(Y,X), river != Y.
compare(person,X,Y) :- neg(person,X),neg(person,Y), person != Y.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(man_made_global_warming, hoax).
pos(temperature, increase).
pos(earth, warming).
pos(scientists, increase).
pos(temperature, recording).
pos(temperature, evident_increase).
pos(hybrid_cars, decrease).
pos(temperature, sun).
pos(air, tire).
pos(air_filter, carbon_dioxide).
pos(heater, carbon_dioxide).
pos(recycling, carbon_dioxide).
pos(organic_foods, carbon_dioxide).
pos(carpooling, carbon_dioxide).
pos(ice_age, temperature).
pos(global_warming, serious_problem).

% Section 2 - General relationships
relation(man_made_global_warming, hoax).
relation(temperature, increase).
relation(earth, warming).
relation(scientists, increase).
relation(temperature, recording).
relation(temperature, evident_increase).
relation(hybrid_cars, decrease).
relation(temperature, sun).
relation(air, tire).
relation(air_filter, carbon_dioxide).
relation(heater, carbon_dioxide).
relation(recycling, carbon_dioxide).
relation(organic_foods, carbon_dioxide).
relation(carpooling, carbon_dioxide).
relation(ice_age, temperature).
relation(global_warming, serious_problem).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(education, enhance_mental_abilities).
pos(english, basic_communication_skills).
pos(mathematics, basic_numeracy).

% Section 2 - General relationships
relation(english, mathematics).
relation(english, basic_communication_skills).
relation(mathematics, basic_numeracy).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(state_schools, diverse_society).
neg(state_schools, christian).
neg(christian, diverse_society).
neg(education, religion).
neg(child, humiliation).

Section 2 - General relationships:

relation(schools, religion).
relation(schools, christian).
relation(schools, community).
relation(schools, education).
relation(education, child).
relation(child, school).

Section 3 - Encoding:

state_schools_are_bad_because :- neg(state_schools,Y).
christian_is_bad_because :- neg(christian,Y).
education_is_bad_because :- neg(education,Y).
child_is_bad_because :- neg(child,Y).
compare(state_schools,X,Y) :- neg(state_schools,X),neg(Y,X), state_schools != Y.
compare(christian,X,Y) :- neg(christian,X),neg(Y,X), christian != Y.
compare(education,X,Y) :- neg(education,X),neg(Y,X), education != Y.
compare(child,X,Y) :- neg(child,X),neg(Y,X), child != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(opinion_polls, political_decision_making_process).
neg(opinion_polls, political_marketing).
neg(opinion_polls, party_philosophy).
neg(opinion_polls, honest_citizen_engagement).
neg(opinion_polls, real_policy).
pos(symbol_politics, opinion_polls).

Section 2 - General relationships:

relation(opinion_polls, elections).
relation(opinion_polls, politicians).
relation(opinion_polls, strategies).
relation(opinion_polls, executive).
relation(opinion_polls, public_opinion).

Section 3 - Encoding:

opinion_polls_are_bad_because :- neg(opinion_polls, Y).
opinion_polls_are_good_because :- pos(opinion_polls, Y).
compare(opinion_polls,X,Y) :- neg(opinion_polls,X),neg(Y,X), opinion_polls != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = opinion_polls.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(religion, argument).
neg(atheism, argument).
pos(atheism, understanding).

% Section 2 - General relationships
relation(religion, christianity).
relation(atheism, understanding).
relation(atheism, argument).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(opponent, sufficient_evidence).
pos(opponent, two_one_dollar_bill_quote).
pos(me, two_one_dollar_bill_quote).
pos(opponent, doctors_analogy).
pos(opponent, ship_captain_quote).
pos(opponent, arguments).

Section 2 - General relationships:

relation(me, opponent).
relation(opponent, me).
relation(me, two_one_dollar_bill_quote).
relation(opponent, two_one_dollar_bill_quote).
relation(opponent, doctors_analogy).
relation(opponent, ship_captain_quote).
relation(opponent, arguments).

Section 3 - Encoding:

opponent_is_good_because :- pos(opponent,Y).
opponent_is_bad_because :- neg(opponent,Y).
me_is_good_because :- pos(me,Y).
me_is_bad_because :- neg(me,Y).
compare(opponent,X,Y) :- neg(opponent,X),neg(Y,X), opponent != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = opponent.
compare(me,X,Y) :- neg(me,X),neg(Y,X), me != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = me.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(god, happy).
neg(god, peace_of_mind).
neg(god, good_mood).
neg(god, contentment).
neg(god, satisfaction).
neg(god, joy).
neg(god, pleasure).
neg(god, well_being).
neg(god, mental_health).
neg(god, emotional_health).
neg(god, physical_health).
neg(god, social_health).
neg(god, spiritual_health).
neg(god, financial_health).
neg(god, career_success).
neg(god, relationship_success).
neg(god, personal_growth).
neg(god, self_improvement).
neg(god, self_actualization).
neg(god, self_fulfillment).
neg(god, self_realization).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self_transcendence).
neg(god, self
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(us, exit_imf).
pos(imf, flawed).
neg(us, imf).
neg(imf, beneficial_impacts).

Section 2 - General relationships:

relation(us, imf).
relation(imf, us).

Section 3 - Encoding:

elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(opponent, assertions).
pos(opponent, rhetoric).
pos(opponent, sophistry).
neg(opponent, truth).
pos(opponent, citizens).
neg(opponent, weaponry).
neg(opponent, response).
neg(opponent, clarification).
neg(opponent, gun_rights).

Section 2 - General relationships:

relation(opponent, assertions).
relation(opponent, rhetoric).
relation(opponent, sophistry).
relation(opponent, truth).
relation(opponent, citizens).
relation(opponent, weaponry).
relation(opponent, response).
relation(opponent, clarification).
relation(opponent, gun_rights).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(legend_of_zelda, action).
pos(legend_of_zelda, adventure).
pos(legend_of_zelda, puzzle_solving).
pos(legend_of_zelda, large_franchise).
pos(legend_of_zelda, popular_franchise).
pos(legend_of_zelda, challenging_puzzles).
pos(legend_of_zelda, fresh_combat_system).
pos(legend_of_zelda, variety_of_enemies).
pos(legend_of_zelda, side_quests).
pos(legend_of_zelda, many_activities).
pos(legend_of_zelda, diverse_gameplay).
pos(mario_bros, sidescrolling_game).
pos(mario_bros, jumping_on_enemies).
pos(mario_bros, running_through_courses).
pos(mario_bros, throwing_fireballs).

neg(mario_bros, action).
neg(mario_bros, adventure).
neg(mario_bros, puzzle_solving).
neg(mario_bros, large_franchise).
neg(mario_bros, popular_franchise).
neg(mario_bros, challenging_puzzles).
neg(mario_bros, fresh_combat_system).
neg(mario_bros, variety_of_enemies).
neg(mario_bros, side_quests).
neg(mario_bros, many_activities).
neg(mario_bros, diverse_gameplay).
neg(legend_of_zelda, sidescrolling_game).
neg(legend_of_zelda, jumping_on_enemies).
neg(legend_of_zelda, running_through_courses).
neg(legend_of_zelda, throwing_fireballs).

% Section 2 - General relationships
relation(legend_of_zelda, mario_bros).
relation(legend_of_zelda, ocarina_of_time).
relation(ocarina_of_time, legend_of_zelda).
relation(ocarina_of_time, water_temple).
relation(ocarina_of_time, heart_pieces).
relation(ocarina_of_time, mini_games).
relation(ocarina_of_time, golden_skulltulas).

% Section 3 - Encoding
legend_of_zelda_is_better_because :- pos(legend_of_zelda, Y).
mario_bros_is_better_because :- pos(mario_bros, Y).
compare(legend_of_zelda, mario_bros, Y) :- neg(legend_of_zelda, Y), neg(mario_bros, Y), legend_of_zelda != mario_bros.
compare(mario_bros, legend_of_zelda, Y) :- neg(mario_bros, Y), neg(mario_bros, Y), mario_bros != legend_of_zelda, mario_bros = legend_of_zelda.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(gang_members, united_states_armed_forces).
pos(gang_members, firearm_experience).

Section 2 - General relationships:

relation(gang_members, united_states_military).
relation(gang_members, firearm).
relation(gang_members, military_training).
relation(gang_members, streets).
relation(gang_members, court).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(romantic_love, multiple_relationships).
neg(multiple_relationships, genuine_care).
neg(multiple_relationships, best_interest).
neg(multiple_relationships, emotional_resources).
neg(monogamy, multiple_relationships).
neg(monogamy, genuine_care).
neg(monogamy, best_interest).
neg(monogamy, emotional_resources).
neg(open_relationship, genuine_care).
neg(open_relationship, best_interest).
neg(open_relationship, emotional_resources).

pos(romantic_love, genuine_care).
pos(romantic_love, best_interest).
pos(romantic_love, emotional_resources).
pos(monogamy, genuine_care).
pos(monogamy, best_interest).
pos(monogamy, emotional_resources).

Section 2 - General relationships:

relation(romantic_love, multiple_relationships).
relation(romantic_love, genuine_care).
relation(romantic_love, best_interest).
relation(romantic_love, emotional_resources).
relation(monogamy, multiple_relationships).
relation(monogamy, genuine_care).
relation(monogamy, best_interest).
relation(monogamy, emotional_resources).
relation(open_relationship, genuine_care).
relation(open_relationship, best_interest).
relation(open_relationship, emotional_resources).

Section 3 - Encoding:

romantic_love_is_good_because :- pos(romantic_love, Y).
romantic_love_is_bad_because :- neg(romantic_love, Y).
compare(romantic_love,X,Y) :- neg(romantic_love,X),neg(Y,X), romantic_love != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = romantic_love.

monogamy_is_good_because :- pos(monogamy, Y).
monogamy_is_bad_because :- neg(monogamy, Y).
compare(monogamy,X,Y) :- neg(monogamy,X),neg(Y,X), monogamy != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = monogamy.

open_relationship_is_good_because :- pos(open_relationship, Y).
open_relationship_is_bad_because :- neg(open_relationship, Y).
compare(open_relationship,X,Y) :- neg(open_relationship,X),neg(Y,X), open_relationship != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = open_relationship.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(congress, laws_attainder).
pos(constitution, individuals).
pos(constitution, government).
pos(constitution, fairness).

% Section 2 - General relationships
relation(congress, constitution).
relation(constitution, laws).
relation(constitution, government).
relation(constitution, fairness).
relation(constitution, individuals).
relation(constitution, power).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(attempted_suicide, crime).
pos(attempted_suicide, federal_crime).
pos(attempted_suicide, punishment).
pos(attempted_suicide, death_penalty).

Section 2 - General relationships:

relation(attempted_suicide, person).
relation(person, crime).
relation(crime, punishment).
relation(punishment, death_penalty).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(opponent, broken_rule_4).
pos(opponent, broken_rule_7).
pos(opponent, broken_rule_12).
pos(opponent, broken_rule_28).
pos(opponent, broken_rule_3).

Section 2 - General relationships:

relation(rule_26, rule_12).
relation(rule_28, rule_12).
relation(epanalepsis, rule_12).
relation(rule_11, rule_26).
relation(rule_12, rule_26).
relation(rule_13, rule_26).
relation(rule_2, rule_26).
relation(rule_14, round).
relation(rule_15, round_2).
relation(rule_16, round).

Section 3 - Encoding:

opponent_is_good_because :- pos(opponent, Y).
opponent_is_bad_because :- neg(opponent, Y).
compare(opponent,X,Y) :- neg(opponent,X),neg(Y,X), opponent != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = opponent.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(christianity, religion_of_peace).
neg(war, sin).
pos(sin, depression).
pos(sin, temptation).
pos(sin, evil_thoughts).
pos(totalitarianism, people_going_against_god).
pos(god, loving_god).
pos(god, free_will).

Section 2 - General relationships:

relation(christianity, war).
relation(christianity, sin).
relation(christianity, lucifer).
relation(christianity, satan).
relation(christianity, rebellion).
relation(christianity, end_times_battle).
relation(christianity, governments).
relation(christianity, totalitarianism).
relation(people, power).
relation(people, freedom).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(us, democracy).
neg(us, democracy).
pos(us, dictatorial_regimes).
neg(us, dictatorial_regimes).
pos(us, human_rights).
neg(us, human_rights).
pos(us, international_law).
neg(us, international_law).
pos(us, sovereignty).
neg(us, sovereignty).
pos(us, power).
neg(us, power).

Section 2 - General relationships:

relation(us, democracy).
relation(us, dictatorial_regimes).
relation(us, human_rights).
relation(us, international_law).
relation(us, sovereignty).
relation(us, power).

Section 3 - Encoding:

democracy_is_good_because :- pos(us,Y).
democracy_is_bad_because :- neg(us,Y).
compare(us,X,Y) :- neg(us,X),neg(Y,X), us != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = us.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(nuclear_power, economic_perspective).
pos(nuclear_power, health_perspective).
pos(nuclear_power, foreign_policy_perspective).
pos(benefits, certainty).
neg(harms, negligible_possibility).
pos(harms, preventable).

Section 2 - General relationships:

relation(benefits, nuclear_power).
relation(risks, nuclear_power).
relation(benefits, harms).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(civil_rights, mask_problem).
pos(civil_rights, good_things).
pos(civil_rights, end_segregation_schools).
pos(civil_rights, right_to_vote).
pos(civil_rights, end_slavery).

Section 2 - General relationships:

relation(civil_rights, businesses).
relation(civil_rights, government).
relation(people, businesses).
relation(government, everyone).

Section 3 - Encoding:

civil_rights_are_good_because :- pos(civil_rights, Y).
civil_rights_are_bad_because :- neg(civil_rights, Y).
compare(civil_rights,X,Y) :- neg(civil_rights,X),neg(Y,X), civil_rights != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = civil_rights.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(africa, opportunity).
pos(africa, equal_global_partner).
neg(africa, resources).
neg(africa, international_trade).
neg(westernised_countries, africa).
pos(africa, aid_payments).
neg(africa, china).
neg(china, income).

Section 2 - General relationships:

relation(africa, opportunity).
relation(africa, equal_global_partner).
relation(africa, resources).
relation(africa, international_trade).
relation(westernised_countries, africa).
relation(africa, aid_payments).
relation(africa, china).
relation(china, income).

Section 3 - Encoding:

africa_is_good_because :- pos(africa,Y).
africa_is_bad_because :- neg(africa,Y).
compare(africa,X,Y) :- neg(africa,X),neg(Y,X), africa != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = africa.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(intellectual_property, idea).
pos(intellectual_property_rights_systems, perverse_incentives).
neg(inefficiency, efficient).
neg(duplication_of_effort, efficient).
pos(duplication_of_effort, firms).
pos(duplication_of_effort, process).
pos(duplication_of_effort, product).
pos(brutal_races, first_over_the_line).
pos(brutal_races, excessive_expenditure_of_resources).
pos(brutal_races, monopolize_the_production).
pos(serious_inefficiency, production_of_similar_products).
pos(production_of_similar_products, existing_ones).
pos(production_of_similar_products, intellectual_property_rights).
pos(intellectual_property_rights, perverting_incentives).
pos(intellectual_property_rights, corporate_espionage).
pos(corporate_espionage, firms).
pos(corporate_espionage, new_product).
pos(corporate_espionage, patent).
pos(corporate_espionage, steal).
pos(corporate_espionage, sabotage).
pos(corporate_espionage, research).
pos(corporate_espionage, competing_firms).
pos(corporate_espionage, first_to_succeed).
pos(markets, efficient).
pos(firms, efficient).

Section 2 - General relationships:

relation(intellectual_property, idea).
relation(intellectual_property_rights_systems, firms).
relation(inefficiency, duplication_of_effort).
relation(duplication_of_effort, firms).
relation(duplication_of_effort, process).
relation(duplication_of_effort, product).
relation(brutal_races, first_over_the_line).
relation(brutal_races, excessive_expenditure_of_resources).
relation(brutal_races, monopolize_the_production).
relation(serious_inefficiency, production_of_similar_products).
relation(production_of_similar_products, existing_ones).
relation(production_of_similar_products, intellectual_property_rights).
relation(intellectual_property_rights, perverting_incentives).
relation(intellectual_property_rights, corporate_espionage).
relation(corporate_espionage, firms).
relation(corporate_espionage, new_product).
relation(corporate_espionage, patent).
relation(corporate_espionage, steal).
relation(corporate_espionage, sabotage).
relation(corporate_espionage, research).
relation(corporate_espionage, competing_firms).
relation(corporate_espionage, first_to_succeed).
relation(markets, efficient).
relation(firms, efficient).

Section 3 - Encoding:

intellectual_property_rights_systems_are_bad_because :- pos(intellectual_property_rights_systems, X), neg(X, Y).
intellectual_property_rights_systems_are_good_because :- neg(intellectual_property_rights_systems, X), pos(X, Y).
duplication_of_effort_is_bad_because :- pos(duplication_of_effort, X), neg(X, Y).
duplication_of_effort_is_good_because :- neg(duplication_of_effort, X), pos(X, Y).
brutal_races_are_bad_because :- pos(brutal_races, X), neg(X, Y).
brutal_races_are_good_because :- neg(brutal_races, X), pos(X, Y).
serious_inefficiency_is_bad_because :- pos(serious_inefficiency, X), neg(X, Y).
serious_inefficiency_is_good_because :- neg(serious_inefficiency, X), pos(X, Y).
production_of_similar_products_is_bad_because :- pos(production_of_similar_products, X), neg(X, Y).
production_of_similar_products_is_good_because :- neg(production_of_similar_products, X), pos(X, Y).
intellectual_property_rights_are_bad_because :- pos(intellectual_property_rights, X), neg(X, Y).
intellectual_property_rights_are_good_because :- neg(intellectual_property_rights, X), pos(X, Y).
corporate_espionage_is_bad_because :- pos(corporate_espionage, X), neg(X, Y).
corporate_espionage_is_good_because :- neg(corporate_espionage, X), pos(X, Y).
markets_are_good_because :- pos(markets, X), neg(X, Y).
markets_are_bad_because :- neg(markets, X), pos(X, Y).
firms_are_good_because :- pos(firms, X), neg(X, Y).
firms_are_bad_because :- neg(firms, X), pos(X, Y).
compare(intellectual_property_rights_systems,X,Y) :- neg(intellectual_property_rights_systems,X),neg(Y,X), intellectual_property_rights_systems != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = intellectual_property_rights_systems.
compare(duplication_of_effort,X,Y) :- neg(duplication_of_effort,X),neg(Y,X), duplication_of_effort != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = duplication_of_effort.
compare(brutal_races,X,Y) :- neg(brutal_races,X),neg(Y,X), brutal_races != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = brutal_races.
compare(serious_inefficiency,X,Y) :- neg(serious_inefficiency,X),neg(Y,X), serious_inefficiency != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = serious_inefficiency.
compare(production_of_similar_products,X,Y) :- neg(production_of_similar_products,X),neg(Y,X), production_of_similar_products != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = production_of_similar_products.
compare(intellectual_property_rights,X,Y) :- neg(intellectual_property_rights,X),neg(Y,X), intellectual_property_rights != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = intellectual_property_rights.
compare(corporate_espionage,X,Y) :- neg(corporate_espionage,X),neg(Y,X), corporate_espionage != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = corporate_espionage.
compare(markets,X,Y) :- neg(markets,X),neg(Y,X), markets != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = markets.
compare(firms,X,Y) :- neg(firms,X),neg(Y,X), firms != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = firms.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, loving).
neg(atheism, hope).
pos(christian, wrong_as_christian).
neg(atheist, wrong_as_atheist).
pos(atheist, hell_fire).
pos(christian, fading_to_nothing).

Section 2 - General relationships:

relation(god, atheism).
relation(christian, atheist).
relation(god, christian).
relation(god, hope).
relation(god, hell_fire).
relation(god, wrong_as_christian).
relation(god, wrong_as_atheist).
relation(god, fading_to_nothing).

Section 3 - Encoding:

god_is_loving_because :- pos(god,Y).
god_is_not_loving_because :- neg(god,Y).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, universe).
pos(god, spirituality).
pos(god, purpose).
pos(god, morality).
pos(god, knowledge).
pos(god, holy_men).
pos(god, miracles).
pos(god, nature).
pos(god, corruption).
pos(god, life).
pos(god, faith).
pos(god, laws_of_nature).
pos(god, enlightenment).
pos(god, divine_being).
pos(god, facts).
pos(god, rational_thinking).
pos(god, creation).

neg(evolution, universe).
neg(evolution, spirituality).
neg(evolution, purpose).
neg(evolution, morality).
neg(evolution, knowledge).
neg(evolution, holy_men).
neg(evolution, miracles).
neg(evolution, nature).
neg(evolution, corruption).
neg(evolution, life).
neg(evolution, faith).
neg(evolution, laws_of_nature).
neg(evolution, enlightenment).
neg(evolution, divine_being).
neg(evolution, facts).
neg(evolution, rational_thinking).
neg(evolution, creation).

Section 2 - General relationships:

relation(god, universe).
relation(god, spirituality).
relation(god, purpose).
relation(god, morality).
relation(god, knowledge).
relation(god, holy_men).
relation(god, miracles).
relation(god, nature).
relation(god, corruption).
relation(god, life).
relation(god, faith).
relation(god, laws_of_nature).
relation(god, enlightenment).
relation(god, divine_being).
relation(god, facts).
relation(god, rational_thinking).
relation(god, creation).
relation(evolution, universe).
relation(evolution, spirituality).
relation(evolution, purpose).
relation(evolution, morality).
relation(evolution, knowledge).
relation(evolution, holy_men).
relation(evolution, miracles).
relation(evolution, nature).
relation(evolution, corruption).
relation(evolution, life).
relation(evolution, faith).
relation(evolution, laws_of_nature).
relation(evolution, enlightenment).
relation(evolution, divine_being).
relation(evolution, facts).
relation(evolution, rational_thinking).
relation(evolution, creation).

Section 3 - Encoding:

god_is_good_because :- pos(god,Y).
god_is_bad_because :- neg(god,Y).
evolution_is_good_because :- pos(evolution,Y).
evolution_is_bad_because :- neg(evolution,Y).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
compare(evolution,X,Y) :- neg(evolution,X),neg(Y,X), evolution != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = evolution.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(tellytubbies, alien_penises).
pos(tellytubbies, cream).
neg(tellytubbies, love).
neg(tellytubbies, care).
neg(tellytubbies, bouncy_television_viewing).
neg(noo_noo, dust).

Section 2 - General relationships:

relation(tellytubbies, alien_penises).
relation(tellytubbies, cream).
relation(tellytubbies, love).
relation(tellytubbies, care).
relation(tellytubbies, bouncy_television_viewing).
relation(tellytubbies, noo_noo).
relation(noo_noo, dust).

Section 3 - Encoding:

tellytubbies_are_sexual :- pos(tellytubbies, X).
tellytubbies_are_not_sexual :- neg(tellytubbies, X).
compare(tellytubbies,X,Y) :- neg(tellytubbies,X),neg(Y,X), tellytubbies != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = tellytubbies.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(people, right_to_carry_guns).
neg(people, right_to_buy_guns).
neg(people, right_to_keep_guns).
pos(police_officers, guns).
pos(guns, police).
pos(police, guns).
pos(police, protection).
neg(police, unarmed_people).
pos(illegal_sales, guns).
pos(riots, baltimore).
pos(police_officers, baltimore).
pos(guns, police_officers).
pos(police_officers, control).
pos(police_officers, diminishing).
pos(guns, police_officers).
pos(bombings, isis).
pos(bombings, unknown_groups).
pos(guns, police_officers).

Section 2 - General relationships:

relation(people, guns).
relation(police_officers, guns).
relation(police_officers, protection).
relation(police_officers, unarmed_people).
relation(illegal_sales, guns).
relation(riots, baltimore).
relation(police_officers, baltimore).
relation(guns, police_officers).
relation(police_officers, control).
relation(police_officers, diminishing).
relation(guns, police_officers).
relation(bombings, isis).
relation(bombings, unknown_groups).
relation(guns, police_officers).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(u2, music).
pos(u2, fan).
pos(u2, concert).
pos(u2, guitar).
pos(u2, music).
pos(u2, song).
pos(u2, start).
pos(u2, slow).
pos(u2, grand).
pos(u2, finally).

neg(u2, bad).

Section 2 - General relationships:

relation(u2, music).
relation(u2, fan).
relation(u2, concert).
relation(u2, guitar).
relation(u2, music).
relation(u2, song).
relation(u2, start).
relation(u2, slow).
relation(u2, grand).
relation(u2, finally).

Section 3 - Encoding:

u2_is_good_because :- pos(u2,Y).
u2_is_bad_because :- neg(u2,Y).
compare(u2,X,Y) :- neg(u2,X),neg(Y,X), u2 != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = u2.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(same_sex_couples, marriage).
pos(gay_people, marriage).
pos(love, marriage).
pos(marriage, love).
pos(marriage, rights).
pos(marriage, protection).
pos(marriage, security).
pos(marriage, equality).
pos(marriage, happiness).
pos(marriage, acceptance).
pos(marriage, recognition).
pos(marriage, respect).
pos(marriage, dignity).
pos(marriage, compassion).
pos(marriage, understanding).
pos(marriage, tolerance).
pos(marriage, empathy).
pos(marriage, kindness).
pos(marriage, generosity).
pos(marriage, forgiveness).
pos(marriage, patience).
pos(marriage, trust).
pos(marriage, honesty).
pos(marriage, fidelity).
pos(marriage, commitment).
pos(marriage, responsibility).
pos(marriage, sacrifice).
pos(marriage, growth).
pos(marriage, change).
pos(marriage, learning).
pos(marriage, experience).
pos(marriage, adventure).
pos(marriage, excitement).
pos(marriage, passion).
pos(marriage, romance).
pos(marriage, intimacy).
pos(marriage, friendship).
pos(marriage, companionship).
pos(marriage, partnership).
pos(marriage, family).
pos(marriage, children).
pos(marriage, home).
pos(marriage, community).
pos(marriage, society).
pos(marriage, world).
pos(marriage, universe).
pos(marriage, everything).

neg(irrational_arguments, validity).
neg(gays, enough_rights).
neg(same_sex_marriage, legality).
neg(same_sex_marriage, acceptance).
neg(same_sex_marriage, support).
neg(same_sex_marriage, understanding).
neg(same_sex_marriage, tolerance).
neg(same_sex_marriage, empathy).
neg(same_sex_marriage, kindness).
neg(same_sex_marriage, generosity).
neg(same_sex_marriage, forgiveness).
neg(same_sex_marriage, patience).
neg(same_sex_marriage, trust).
neg(same_sex_marriage, honesty).
neg(same_sex_marriage, fidelity).
neg(same_sex_marriage, commitment).
neg(same_sex_marriage, responsibility).
neg(same_sex_marriage, sacrifice).
neg(same_sex_marriage, growth).
neg(same_sex_marriage, change).
neg(same_sex_marriage, learning).
neg(same_sex_marriage, experience).
neg(same_sex_marriage, adventure).
neg(same_sex_marriage, excitement).
neg(same_sex_marriage, passion).
neg(same_sex_marriage, romance).
neg(same_sex_marriage, intimacy).
neg(same_sex_marriage, friendship).
neg(same_sex_marriage, companionship).
neg(same_sex_marriage, partnership).
neg(same_sex_marriage, family).
neg(same_sex_marriage, children).
neg(same_sex_marriage, home).
neg(same_sex_marriage, community).
neg(same_sex_marriage, society).
neg(same_sex_marriage, world).
neg(same_sex_marriage, universe).
neg(same_sex_marriage, everything).

Section 2 - General relationships:

relation(same_sex_couples, marriage).
relation(gay_people, marriage).
relation(love, marriage).
relation(marriage, rights).
relation(marriage, protection).
relation(marriage, security).
relation(marriage, equality).
relation(marriage, happiness).
relation(marriage, acceptance).
relation(marriage, recognition).
relation(marriage, respect).
relation(marriage, dignity).
relation(marriage, compassion).
relation(marriage, understanding).
relation(marriage, tolerance).
relation(marriage, empathy).
relation(marriage, kindness).
relation(marriage, generosity).
relation(marriage, forgiveness).
relation(marriage, patience).
relation(marriage, trust).
relation(marriage, honesty).
relation(marriage, fidelity).
relation(marriage, commitment).
relation(marriage, responsibility).
relation(marriage, sacrifice).
relation(marriage, growth).
relation(marriage, change).
relation(marriage, learning).
relation(marriage, experience).
relation(marriage, adventure).
relation(marriage, excitement).
relation(marriage, passion).
relation(marriage, romance).
relation(marriage, intimacy).
relation(marriage, friendship).
relation(marriage, companionship).
relation(marriage, partnership).
relation(marriage, family).
relation(marriage, children).
relation(marriage, home).
relation(marriage, community).
relation(marriage, society).
relation(marriage, world).
relation(marriage, universe).
relation(marriage, everything).

Section 3 - Encoding:

same_sex_marriage_is_good_because :- pos(same_sex_marriage, Y).
same_sex_marriage_is_bad_because :- neg(same_sex_marriage, Y).
compare(same_sex_marriage,X,Y) :- neg(same_sex_marriage,X),neg(Y,X), same_sex_marriage != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = same_sex_marriage.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(rhetoric, dialectic).
pos(rhetoric, investigation).
pos(rhetoric, commitment).
pos(rhetoric, planning).
pos(rhetoric, victory).
pos(rhetoric, survival).
pos(rhetoric, importance).
pos(rhetoric, identification).
pos(rhetoric, society).
pos(rhetoric, freedom).

% Section 2 - General relationships
relation(rhetoric, dialectic).
relation(rhetoric, psychology).
relation(rhetoric, personal_goals).
relation(rhetoric, social_goals).
relation(rhetoric, organization).
relation(rhetoric, morale).
relation(rhetoric, battleship).
relation(rhetoric, planning).
relation(rhetoric, commitment).
relation(rhetoric, investigation).
relation(rhetoric, victory).
relation(rhetoric, war).
relation(rhetoric, survival).
relation(rhetoric, importance).
relation(rhetoric, identification).
relation(rhetoric, society).
relation(rhetoric, freedom).

% Section 3 - Encoding
rhetoric_is_good_because :- pos(rhetoric, Y).
rhetoric_is_bad_because :- neg(rhetoric, Y).
compare(rhetoric,X,Y) :- neg(rhetoric,X),neg(Y,X), rhetoric != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = rhetoric.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, information).
pos(dna, information).
pos(dna, intelligent_agent).
pos(god, transcend_physical_matter).
pos(god, supreme_level_of_intelligence).
pos(god, singular_in_nature).
pos(god, immensely_powerful_beyond_all_measure).
neg(god, intelligent_alien).
neg(god, advanced_knowledge_of_science).
neg(god, came_to_earth_at_the_dawn_of_life).
neg(god, engineered_dna).
neg(god, team_of_scientists_from_another_planet).
neg(god, far_fetched_scenario).
neg(god, human_scientist_with_a_time_machine).
neg(god, went_back_in_time).
neg(god, planted_organisms_with_dna_in_the_primordial_soup).
neg(god, physical).
neg(god, intelligence_of_an_ingenious_human_scientist).
neg(god, consist_of_a_group_of_creators).
neg(god, measurable_degree_of_power).
neg(god, designed).
neg(dna, designed_by_humans).
neg(dna, product_of_an_intelligent_agent).

Section 2 - General relationships:

relation(god, dna).
relation(dna, information).
relation(dna, intelligent_agent).
relation(god, intelligent_alien).
relation(god, advanced_knowledge_of_science).
relation(god, came_to_earth_at_the_dawn_of_life).
relation(god, engineered_dna).
relation(god, team_of_scientists_from_another_planet).
relation(god, far_fetched_scenario).
relation(god, human_scientist_with_a_time_machine).
relation(god, went_back_in_time).
relation(god, planted_organisms_with_dna_in_the_primordial_soup).
relation(god, physical).
relation(god, intelligence_of_an_ingenious_human_scientist).
relation(god, consist_of_a_group_of_creators).
relation(god, measurable_degree_of_power).
relation(god, designed).
relation(dna, designed_by_humans).
relation(dna, product_of_an_intelligent_agent).

Section 3 - Encoding:

god_is_good_because :- pos(god, Y).
god_is_bad_because :- neg(god, Y).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(gmo_food, good_for_us).

Section 2 - General relationships:

relation(gmo_food, people).
relation(gmo_food, companies).
relation(gmo_food, profits).
relation(gmo_food, reputation).
relation(gmo_food, cost).
relation(gmo_food, specialty_food).
relation(gmo_food, non_gmo_food).

Section 3 - Encoding:

neg(companies, profits) :- neg(gmo_food, good_for_us).
neg(companies, reputation) :- neg(gmo_food, good_for_us).
pos(companies, profits) :- pos(gmo_food, good_for_us).
pos(companies, reputation) :- pos(gmo_food, good_for_us).
compare(gmo_food, X, Y) :- neg(gmo_food, X), neg(Y, X), gmo_food != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = gmo_food.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(freedom_of_speech, sacred_symbol).
neg(flag_burning, freedom_of_speech).
pos(flag_burning, hatred).
pos(flag_burning, intimidation).
pos(flag_burning, threat).
neg(flag_burning, respect).
pos(boy_scouts, respect).
pos(boy_scouts, cremation).
pos(noose, hatred).
pos(noose, threat).
pos(noose, intimidation).
pos(noose, fear).
pos(noose, violence).
pos(noose, death).
pos(military, flag).
pos(military, uniform).
pos(flag_burners, hatred).
pos(flag_burners, threat).
pos(flag_burners, intimidation).
pos(flag_burners, violence).
pos(flag_burners, fear).
pos(flag_burners, death).

Section 2 - General relationships:

relation(flag_desecration, sacred_character).
relation(flag_desecration, disrespectful_treatment).
relation(flag_desecration, sacred).
relation(flag_desecration, group).
relation(flag_desecration, individual).
relation(flag_desecration, pandora_box).
relation(flag_desecration, law).
relation(flag_desecration, crime).
relation(flag_desecration, country).
relation(flag_desecration, symbol).
relation(flag_desecration, nationalism).
relation(flag_desecration, freedom_of_speech).
relation(flag_desecration, sacred_symbol).
relation(flag_desecration, child).
relation(flag_desecration, language).
relation(flag_desecration, frustration).
relation(flag_desecration, hatred).
relation(flag_desecration, boy_scouts).
relation(flag_desecration, cremation).
relation(flag_desecration, intent).
relation(flag_desecration, protest).
relation(flag_desecration, hate_crime).
relation(flag_desecration, noose).
relation(flag_desecration, military).
relation(flag_desecration, uniform).
relation(flag_desecration, violence).
relation(flag_desecration, fear).
relation(flag_desecration, death).

Section 3 - Encoding:

flag_desecration_is_bad_because :- neg(flag_desecration,Y).
flag_desecration_is_good_because :- pos(flag_desecration,Y).
compare(flag_desecration,X,Y) :- neg(flag_desecration,X),neg(flag_desecration,Y), flag_desecration != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = flag_desecration.
###DELIMITER###
 Section 1 - Negative and positive relationships:
neg(mautner_and_matloff, establish_new_planetary_systems).
neg(mautner_and_matloff, establish_protoplanetary_discs).

Section 2 - General relationships:
relation(mautner_and_matloff, establish_new_planetary_systems).
relation(mautner_and_matloff, establish_protoplanetary_discs).

Section 3 - Encoding:
neg(mautner_and_matloff, establish_new_planetary_systems) :- neg(mautner_and_matloff, X), relation(X, establish_new_planetary_systems).
neg(mautner_and_matloff, establish_protoplanetary_discs) :- neg(mautner_and_matloff, X), relation(X, establish_protoplanetary_discs).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(enchanted, comedy).
pos(enchanted, making_you_laugh).
pos(enchanted, attention).
pos(enchanted, humor).
pos(enchanted, referential_humor).
pos(enchanted, love_letter_to_disney).
pos(enchanted, funny_characters).
pos(enchanted, snarky_towards_disney).
pos(enchanted, suspense).
pos(disney, amazing_childrens_movies).
pos(patrick, endearing_stupid).
pos(friends, funny_cast).
pos(disney, overlooked_things).
pos(disney, adult_films).
pos(aladdin, amazing_childrens_movie).

neg(enchanted, boring).
neg(enchanted, slapstick).
neg(enchanted, stupid).
neg(enchanted, hidden_moral).
neg(enchanted, horrible_suspense).
neg(enchanted, unlikeable_characters).
neg(enchanted, friends_cast_not_funny).

Section 2 - General relationships:

relation(enchanted, comedy).
relation(enchanted, making_you_laugh).
relation(enchanted, attention).
relation(enchanted, humor).
relation(enchanted, referential_humor).
relation(enchanted, love_letter_to_disney).
relation(enchanted, funny_characters).
relation(enchanted, snarky_towards_disney).
relation(enchanted, suspense).
relation(disney, amazing_childrens_movies).
relation(patrick, endearing_stupid).
relation(friends, funny_cast).
relation(disney, overlooked_things).
relation(disney, adult_films).
relation(aladdin, amazing_childrens_movie).
relation(enchanted, boring).
relation(enchanted, slapstick).
relation(enchanted, stupid).
relation(enchanted, hidden_moral).
relation(enchanted, horrible_suspense).
relation(enchanted, unlikeable_characters).
relation(enchanted, friends_cast_not_funny).

Section 3 - Encoding:

enchanted_is_good_because :- pos(enchanted,Y).
enchanted_is_bad_because :- neg(enchanted,Y).
compare(enchanted,X,Y) :- neg(enchanted,X),neg(Y,X), enchanted != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = enchanted.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(courts, legitimate_comment).
neg(media, cure_all).
pos(right_of_reply, getting_basics_right).
pos(fact_or_opinion_distinction, defamation_cases).

Section 2 - General relationships:

relation(news, opinion).
relation(factual_inaccuracies, courts).
relation(media, higher_level_concerns).
relation(fundamental_errors, higher_level_concerns).
relation(right_of_reply, media).
relation(fact_or_opinion_distinction, defamation_cases).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(individuals_released_from_prison, discrimination_in_getting_a_job).
pos(drugs_and_rehab, different).
neg(drugs_and_rehab, assault).
neg(drugs_and_rehab, sexual_harassment).
neg(drugs_and_rehab, threatening_to_kill).
neg(individuals_released_from_prison, traits_that_lead_people_to_these_things).
neg(traits_that_lead_people_to_these_things, can_be_changed).

Section 2 - General relationships:

relation(individuals_released_from_prison, discrimination_in_getting_a_job).
relation(drugs_and_rehab, assault).
relation(drugs_and_rehab, sexual_harassment).
relation(drugs_and_rehab, threatening_to_kill).
relation(individuals_released_from_prison, traits_that_lead_people_to_these_things).
relation(traits_that_lead_people_to_these_things, can_be_changed).

Section 3 - Encoding:

individuals_released_from_prison_is_good_because :- pos(individuals_released_from_prison, Y).
individuals_released_from_prison_is_bad_because :- neg(individuals_released_from_prison, Y).
compare(individuals_released_from_prison,X,Y) :- neg(individuals_released_from_prison,X),neg(Y,X), individuals_released_from_prison != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = individuals_released_from_prison.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(human, barbarism).

Section 2 - General relationships:

relation(human, barbarism).

Section 3 - Encoding:

relation(barbarism, human).
neg(human, innocence).
pos(human, destruction).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(marijuana, medical_reasons).
pos(marijuana, great_help).
neg(marijuana, illegal_use).
neg(marijuana, illegal_sale).

Section 2 - General relationships:

relation(marijuana, drugs).
relation(drugs, medicines).
relation(marijuana, solution).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(police_profiling, small_minority_group).
pos(police_profiling, safety).

Section 2 - General relationships:

relation(police_profiling, small_minority_group).
relation(police_profiling, safety).
relation(police_profiling, nation).
relation(police_profiling, americans).
relation(police_profiling, harms_way).
relation(police_profiling, caution).

Section 3 - Encoding:

police_profiling_is_good_because :- pos(police_profiling, Y).
police_profiling_is_bad_because :- neg(police_profiling, Y).
compare(police_profiling,X,Y) :- neg(police_profiling,X),neg(Y,X), police_profiling != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = police_profiling.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(corn_flake_box, official_capacity).
neg(corn_flake_box, contradictions).

Section 2 - General relationships:

relation(corn_flake_box, brother).
relation(corn_flake_box, contradictions).
relation(corn_flake_box, ingredients).
relation(corn_flake_box, mailing_address).
relation(corn_flake_box, games).
relation(corn_flake_box, puzzles).

Section 3 - Encoding:

corn_flake_box_is_good_because :- pos(corn_flake_box, Y).
corn_flake_box_is_bad_because :- neg(corn_flake_box, Y).
compare(corn_flake_box,X,Y) :- neg(corn_flake_box,X),neg(Y,X), corn_flake_box != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = corn_flake_box.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(gay_marriage, decrease_negative_statistics).
pos(gay_marriage, stimulate_economy).
pos(gay_marriage, provide_more_spending_power).
pos(government, ensure_security_and_maintenance_of_society).
pos(government, protect_freedom).
pos(government, promote_economic_stability).
pos(marriage, recognized_by_government).
neg(homophobia, decrease_negative_statistics).
neg(civil_unions, considered_equal_to_marriage).

Section 2 - General relationships:

relation(gay_marriage, homophobia).
relation(gay_marriage, government).
relation(gay_marriage, marriage).
relation(gay_marriage, civil_unions).
relation(homophobia, negative_statistics).
relation(government, social_contract_theory).
relation(government, freedom).
relation(government, economic_stability).
relation(marriage, tax_cuts).
relation(marriage, legal_benefits).
relation(marriage, infertile_couples).
relation(marriage, couples_who_do_not_want_to_marry).
relation(civil_unions, alternative_to_marriage).
relation(civil_unions, inequality).

Section 3 - Encoding:

decrease_negative_statistics :- pos(X, decrease_negative_statistics).
stimulate_economy :- pos(X, stimulate_economy).
provide_more_spending_power :- pos(X, provide_more_spending_power).
ensure_security_and_maintenance_of_society :- pos(X, ensure_security_and_maintenance_of_society).
protect_freedom :- pos(X, protect_freedom).
promote_economic_stability :- pos(X, promote_economic_stability).
considered_equal_to_marriage :- neg(X, considered_equal_to_marriage).
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = X.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(environment, socialist_plot).
neg(environment, capitalism).
pos(darwin, theory_of_evolution).
pos(darwin, natural_selection).
pos(darwin, on_the_origin_of_species).
pos(marx, communist_manifesto).
pos(marx, socialism).
pos(marx, capitalism).
pos(marx, conflict).

Section 2 - General relationships:

relation(environment, darwin).
relation(darwin, marx).
relation(marx, environment).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(marxism, superiority).
pos(capitalism, voluntary_exchange).
pos(capitalism, private_property).
pos(capitalism, free_market).
pos(capitalism, hard_work).
pos(capitalism, investment).
pos(capitalism, profit).
pos(labour_theory_of_value, good_work).
pos(labour_theory_of_value, fee).
pos(labour_theory_of_value, needs).
neg(marxism, voluntary_exchange).
neg(marxism, private_property).
neg(marxism, free_market).
neg(marxism, hard_work).
neg(marxism, investment).
neg(marxism, profit).
neg(capitalism, superiority).
neg(labour_theory_of_value, exploitation).

Section 2 - General relationships:

relation(marxism, capitalism).
relation(capitalism, aristocracy).
relation(capitalism, proletariat).
relation(capitalism, bourgeois).
relation(capitalism, market).
relation(capitalism, inheritance).
relation(capitalism, labour_theory_of_value).

Section 3 - Encoding:

marxism_is_superior_because :- pos(marxism, Y).
marxism_is_inferior_because :- neg(marxism, Y).
capitalism_is_superior_because :- pos(capitalism, Y).
capitalism_is_inferior_because :- neg(capitalism, Y).
compare(marxism, capitalism, Y) :- neg(marxism, Y), neg(capitalism, Y), marxism != capitalism.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = marxism.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(xbox_one, expensive).
pos(xbox_one, better).
pos(xbox_one, kinect).
pos(xbox_one, motion).
pos(xbox_live, special_abilities).
pos(xbox_one, best).
pos(nsa, cameras).
pos(nsa, spying).

Section 2 - General relationships:

relation(xbox_one, ps4).
relation(xbox_one, kinect).
relation(xbox_one, online).
relation(xbox_one, name).
relation(xbox_one, privacy).
relation(xbox_one, nsa).

Section 3 - Encoding:

expensive(X) :- pos(X, expensive).
better(X) :- pos(X, better).
kinect(X) :- pos(X, kinect).
motion(X) :- pos(X, motion).
special_abilities(X) :- pos(X, special_abilities).
best(X) :- pos(X, best).
cameras(X) :- pos(X, cameras).
spying(X) :- pos(X, spying).

compare(xbox_one,X,Y) :- neg(xbox_one,X),neg(Y,X), xbox_one != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = xbox_one.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(man_kind, extinction).
pos(doomsday, mayan_calendar).
pos(mayan_calendar, prophecies).
pos(economic_crisis, doomsday).
pos(global_warming, doomsday).
pos(polar_shifts, doomsday).
pos(flu_pandemic, doomsday).

Section 2 - General relationships:

relation(doomsday, mayan_calendar).
relation(mayan_calendar, prophecies).
relation(economic_crisis, doomsday).
relation(global_warming, doomsday).
relation(polar_shifts, doomsday).
relation(flu_pandemic, doomsday).

Section 3 - Encoding:

doomsday_is_bad_because :- neg(doomsday,Y).
compare(doomsday,X,Y) :- neg(doomsday,X),neg(Y,X), doomsday != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = doomsday.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, love).
pos(god, all).
pos(god, disciples).
pos(bible, disciples).
pos(bible, christians).
pos(bible, love).
pos(bible, serve).
pos(bible, follow).
pos(bible, god).
pos(important, god_love).

Section 2 - General relationships:

relation(religion, god).
relation(religion, people).
relation(religion, status).
relation(religion, income).
relation(religion, important).
relation(religion, bible).
relation(religion, disciples).
relation(religion, christians).
relation(religion, love).
relation(religion, serve).
relation(religion, follow).
relation(religion, god).
relation(important, god_love).

Section 3 - Encoding:

religion_is_important :- pos(religion, X).
religion_is_not_important :- neg(religion, X).
compare(religion,X,Y) :- neg(religion,X),neg(Y,X), religion != Y.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(open_carry, trouble).
pos(criminal, judgment).
pos(criminal, fear_of_death).
pos(criminal, fastest_shooter).
pos(criminal, invincible).
pos(armed_citizen, self_defense).

% Section 2 - General relationships
relation(open_carry, criminal).
relation(armed_citizen, criminal).
relation(criminal, confrontation).
relation(criminal, armed_citizen).
relation(criminal, rape_victim).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(food_labeling, change_consumer_behavior).
pos(food_labels, useful_dietary_information).
neg(food_labels, impact_actual_consumption).
pos(men, read_labels).
pos(women, read_labels).
neg(people, understand_labels).
neg(people, heed_advice_labels).
neg(posting_calories, change_habits).

Section 2 - General relationships:

relation(food_labeling, consumer_behavior).
relation(food_labels, dietary_information).
relation(food_labels, actual_consumption).
relation(men, labels).
relation(women, labels).
relation(people, labels).
relation(people, advice_labels).
relation(posting_calories, habits).

Section 3 - Encoding:

change_consumer_behavior_because :- neg(food_labeling, change_consumer_behavior).
useful_dietary_information_because :- pos(food_labels, useful_dietary_information).
impact_actual_consumption_because :- neg(food_labels, impact_actual_consumption).
read_labels_because :- pos(men, read_labels).
read_labels_because :- pos(women, read_labels).
understand_labels_because :- neg(people, understand_labels).
heed_advice_labels_because :- neg(people, heed_advice_labels).
change_habits_because :- neg(posting_calories, change_habits).
compare(food_labeling,X,Y) :- neg(food_labeling,X),neg(Y,X), food_labeling != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = food_labeling.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(companies, voluntarily_list_calories).
neg(companies, best_for_the_customer).
pos(companies, profit_margins).
neg(restaurants, health_conscious_consumer).
neg(calorie_counts, restaurants).
pos(calorie_counts, people).

Section 2 - General relationships:

relation(companies, profits).
relation(companies, customers).
relation(calorie_counts, people).
relation(calorie_counts, restaurants).
relation(restaurants, health_conscious_consumer).

Section 3 - Encoding:

voluntarily_list_calories_because :- neg(companies, voluntarily_list_calories).
best_for_the_customer_because :- neg(companies, best_for_the_customer).
profit_margins_because :- pos(companies, profit_margins).
health_conscious_consumer_because :- neg(restaurants, health_conscious_consumer).
calorie_counts_because :- neg(calorie_counts, restaurants).
people_because :- pos(calorie_counts, people).
compare(companies,X,Y) :- neg(companies,X),neg(Y,X), companies != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = companies.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(roe_vs_wade, male_rights).
pos(roe_vs_wade, female_rights).
pos(baby, father_support).
pos(abortion, male_say).
pos(abortion, male_responsibility).
pos(abortion, male_money_responsibility).
neg(abortion, male_stop_right).
neg(child_support, male_rights).
neg(child_support, male_say).

% Section 2 - General relationships
relation(roe_vs_wade, women).
relation(abortion, women).
relation(abortion, embryo).
relation(child_support, father).
relation(child_support, mother).
relation(child_support, baby).
relation(pregnancy, woman).
relation(pregnancy, father).
relation(pregnancy, consent).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(student, time_to_work).
pos(student, money).
pos(school, help).
pos(school, scholarship).
pos(footballer, talent).
pos(footballer, education).
pos(school, save_money).
pos(school, unqualified_teachers).
pos(student, advice).
pos(school, money).
pos(student, enrolled).
pos(student, full_course).
pos(student, pay).

neg(student, penalized).
neg(student, bad_things).
neg(school, enough_money).
neg(school, enough_scholarship).
neg(student, family_financial_problems).
neg(footballer, right).
neg(footballer, all_classes).
neg(school, qualified_teachers).
neg(school, high_salary).
neg(student, penalized).
neg(school, costs_school_tax).
neg(student, come_to_study).

Section 2 - General relationships:

relation(student, penalized).
relation(student, bad_things).
relation(school, money).
relation(school, scholarship).
relation(student, family_financial_problems).
relation(footballer, right).
relation(footballer, education).
relation(footballer, classes).
relation(school, save_money).
relation(school, unqualified_teachers).
relation(student, advice).
relation(school, costs_school_tax).
relation(student, enrolled).
relation(student, full_course).
relation(student, pay).

Section 3 - Encoding:

student_is_not_penalized_because :- pos(student,Y).
student_is_penalized_because :- neg(student,Y).
compare(student,X,Y) :- neg(student,X),neg(Y,X), student != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = student.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(god, afterlife).
pos(overman, life).
pos(overman, love).
pos(overman, caring).
pos(overman, joy).
pos(overman, wonder).
pos(nietzsche, overman).
pos(nietzsche, god).
neg(god, meaning).
neg(life, meaning).
neg(religion, meaning).
neg(suicide, meaning).

% Section 2 - General relationships
relation(god, meaning).
relation(life, meaning).
relation(religion, meaning).
relation(suicide, meaning).
relation(nietzsche, god).
relation(nietzsche, overman).
relation(overman, god).
relation(overman, life).
relation(overman, love).
relation(overman, caring).
relation(overman, joy).
relation(overman, wonder).

% Section 3 - Encoding
god_gives_meaning :- pos(god, afterlife).
life_has_value :- pos(overman, life).
overman_is_god :- pos(overman, god).
overman_loves_all :- pos(overman, love).
overman_cares_for_all :- pos(overman, caring).
overman_enjoys_life :- pos(overman, joy).
overman_finds_wonder_in_life :- pos(overman, wonder).
nietzsche_criticizes_god :- neg(nietzsche, god).
nietzsche_proposes_overman :- pos(nietzsche, overman).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(holocaust_deniers, challenged).
neg(holocaust_deniers, ignored).
pos(holocaust_deniers, lack_information).
pos(others, presented_facts).
neg(others, believe_revisionist_history).
pos(hitler, ridiculous_corporal).
pos(hitler, silly_ideas).
neg(hitler, challenged).
neg(silly_ideas, ridiculous).
pos(silly_ideas, ravage_europe).
pos(we, stand_up).
pos(we, say_wrong).
pos(we, present_facts).
neg(we, tolerate_memory_forgotten).

Section 2 - General relationships:

relation(holocaust_deniers, information).
relation(holocaust_deniers, facts).
relation(holocaust_deniers, revisionist_history).
relation(hitler, silly_ideas).
relation(hitler, europe).
relation(we, holocaust_deniers).
relation(we, memory).

Section 3 - Encoding:

holocaust_deniers_are_good_because :- pos(holocaust_deniers, Y).
holocaust_deniers_are_bad_because :- neg(holocaust_deniers, Y).
compare(holocaust_deniers,X,Y) :- neg(holocaust_deniers,X),neg(Y,X), holocaust_deniers != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = holocaust_deniers.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(national_security, safety).
pos(national_security, protection).
pos(national_security, missions).
pos(government_transparency, information).
pos(government_transparency, sharing).
pos(government_transparency, citizens).
pos(government_transparency, viewers).
pos(government_transparency, disagreements).
pos(government_transparency, actions).
pos(government_transparency, privacy).
pos(government_transparency, allowance).
pos(government_transparency, accomplishment).
pos(government_transparency, interference).
pos(government_transparency, patriot_act).
pos(government_transparency, safety).
pos(government_transparency, people).
pos(government_transparency, country).
pos(government_transparency, sources).
pos(government_transparency, articles).
pos(government_transparency, wikileaks).
pos(government_transparency, shaheen).
pos(government_transparency, dhs).
pos(government_transparency, huffingtonpost).
pos(government_transparency, npr).
pos(privacy, freedom).
pos(privacy, observation).
pos(privacy, disturbance).
pos(privacy, people).
pos(privacy, times).
pos(privacy, country).
pos(privacy, safety).
pos(privacy, illegal).
pos(privacy, worry).
pos(privacy, government).
pos(privacy, missions).
pos(privacy, accomplishment).
pos(privacy, interference).
pos(privacy, patriot_act).
pos(privacy, safety).
pos(privacy, people).
pos(privacy, country).
pos(privacy, sources).
pos(privacy, articles).
pos(privacy, shaheen).
pos(privacy, dhs).
pos(privacy, huffingtonpost).
pos(privacy, npr).
neg(privacy, worth).
neg(privacy, safety).
neg(government_transparency, good).
neg(government_transparency, bad).
neg(government_transparency, privacy).
neg(government_transparency, important).
neg(government_transparency, allowance).
neg(government_transparency, accomplishment).
neg(government_transparency, interference).
neg(government_transparency, patriot_act).
neg(government_transparency, safety).
neg(government_transparency, people).
neg(government_transparency, country).
neg(government_transparency, sources).
neg(government_transparency, articles).
neg(government_transparency, shaheen).
neg(government_transparency, dhs).
neg(government_transparency, huffingtonpost).
neg(government_transparency, npr).

Section 2 - General relationships:

relation(national_security, privacy).
relation(national_security, government_transparency).
relation(privacy, government_transparency).
relation(privacy, national_security).
relation(government_transparency, national_security).
relation(government_transparency, privacy).

Section 3 - Encoding:

national_security_is_good_because :- pos(national_security, Y).
national_security_is_bad_because :- neg(national_security, Y).
privacy_is_good_because :- pos(privacy, Y).
privacy_is_bad_because :- neg(privacy, Y).
government_transparency_is_good_because :- pos(government_transparency, Y).
government_transparency_is_bad_because :- neg(government_transparency, Y).
compare(national_security,X,Y) :- neg(national_security,X),neg(Y,X), national_security != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = national_security.
compare(privacy,X,Y) :- neg(privacy,X),neg(Y,X), privacy != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = privacy.
compare(government_transparency,X,Y) :- neg(government_transparency,X),neg(Y,X), government_transparency != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = government_transparency.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(deadbeat_parent, lazy_parent).
pos(deadbeat_parent, parent_not_paying_debts).
neg(deadbeat_parent, staying_up_to_date_on_loans).
neg(deadbeat_parent, lazy_parent).

Section 2 - General relationships:

relation(deadbeat_parent, child_cruelty).
relation(deadbeat_parent, parent).
relation(deadbeat_parent, loan).

Section 3 - Encoding:

deadbeat_parent_is_good_because :- pos(deadbeat_parent, Y).
deadbeat_parent_is_bad_because :- neg(deadbeat_parent, Y).
compare(deadbeat_parent,X,Y) :- neg(deadbeat_parent,X),neg(Y,X), deadbeat_parent != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = deadbeat_parent.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(non_biological_surrogate_mothers, right_to_keep_the_child).
pos(surrogate_mothers, right_to_keep_the_baby).

Section 2 - General relationships:

relation(non_biological_surrogate_mothers, right_to_keep_the_child).
relation(surrogate_mothers, right_to_keep_the_baby).
relation(surrogate_mothers, biological).
relation(surrogate_mothers, law).
relation(law, right_to_keep_the_baby).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(people, rights).
pos(government, rights).
pos(government, property).
pos(government, liberty).
pos(government, pursuit_of_property).
pos(free_market, human_right).

Section 2 - General relationships:

relation(people, rights).
relation(government, rights).
relation(government, property).
relation(government, liberty).
relation(government, pursuit_of_property).
relation(free_market, human_right).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(governess, real_ghosts).
pos(governess, imagined_ghosts).
pos(governess, unreliable_narrator).
pos(governess, mentally_unstable).
pos(governess, sexually_repressed).
pos(governess, control_over_children).
pos(governess, fantasises_over_uncle).

% Section 2 - General relationships
relation(governess, ghosts).
relation(governess, children).
relation(governess, uncle).
relation(governess, story).
relation(governess, audience).
relation(governess, critics).
relation(governess, mental_state).
relation(governess, hauntings).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(democratic_party, republican_party).
neg(republican_party, democratic_party).
pos(democratic_party, equality).
neg(democratic_party, inequality).
pos(republican_party, inequality).
neg(republican_party, equality).

Section 2 - General relationships:

relation(democratic_party, republican_party).
relation(democratic_party, left).
relation(republican_party, right).
relation(left, equality).
relation(right, inequality).
relation(democratic_party, governance).
relation(republican_party, governance).
relation(democratic_party, aca).
relation(republican_party, aca).

Section 3 - Encoding:

democratic_party_is_good_because :- pos(democratic_party, Y).
democratic_party_is_bad_because :- neg(democratic_party, Y).
republican_party_is_good_because :- pos(republican_party, Y).
republican_party_is_bad_because :- neg(republican_party, Y).
compare(democratic_party, X, Y) :- neg(democratic_party, X), neg(Y, X), democratic_party != Y.
compare(republican_party, X, Y) :- neg(republican_party, X), neg(Y, X), republican_party != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = democratic_party.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = republican_party.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(goats, better_than_donkeys).
pos(donkeys, crucial_role_for_society).
pos(donkeys, make_precious_milk).
pos(donkeys, make_precious_cheese).
pos(goats, cut_grass_for_free).
pos(goats, want_for_grass).
pos(horses, kicking_abilities).
pos(donkeys, same_role_as_horses).

neg(pro, evidence).
neg(pro, proper_scientific_source).
neg(pro, empirical_value).
neg(pro, linked_to_goats_better_than_donkeys_argument).
neg(pro, proper_evidence).
neg(pro, rebuttals).

Section 2 - General relationships:

relation(goats, better_than_donkeys).
relation(donkeys, crucial_role_for_society).
relation(donkeys, make_precious_milk).
relation(donkeys, make_precious_cheese).
relation(goats, cut_grass_for_free).
relation(goats, want_for_grass).
relation(horses, kicking_abilities).
relation(donkeys, same_role_as_horses).
relation(pro, evidence).
relation(pro, proper_scientific_source).
relation(pro, empirical_value).
relation(pro, linked_to_goats_better_than_donkeys_argument).
relation(pro, proper_evidence).
relation(pro, rebuttals).

Section 3 - Encoding:

goats_are_better_because :- pos(goats,Y).
goats_are_worse_because :- neg(goats,Y).
donkeys_are_better_because :- pos(donkeys,Y).
donkeys_are_worse_because :- neg(donkeys,Y).
compare(goats,donkeys,X) :- neg(goats,X),neg(donkeys,X), goats != donkeys.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = goats.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(founding_fathers_of_america, united_states).
pos(founding_fathers_of_america, american_constitutional_law).
pos(founding_fathers_of_america, current_government_of_the_united_states).

Section 2 - General relationships:

relation(founding_fathers_of_america, united_states).
relation(founding_fathers_of_america, american_constitutional_law).
relation(founding_fathers_of_america, current_government_of_the_united_states).

Section 3 - Encoding:

founding_fathers_of_america_is_good_because :- pos(founding_fathers_of_america,Y).
founding_fathers_of_america_is_bad_because :- neg(founding_fathers_of_america,Y).
compare(founding_fathers_of_america,X,Y) :- neg(founding_fathers_of_america,X),neg(Y,X), founding_fathers_of_america != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = founding_fathers_of_america.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(scandinavia, better).
pos(america, patriotic).
pos(america, biggest_population).
pos(america, most_charity).
pos(america, better_environmental_feats).
pos(america, most_patriotic).
pos(america, freedom).

neg(scandinavia, richest_countries).
neg(america, happy).
neg(scandinavia, limited).

Section 2 - General relationships:

relation(scandinavia, taxes).
relation(scandinavia, countries).
relation(america, countries).
relation(america, population).
relation(america, charity).
relation(america, environmental_feats).
relation(america, patriotism).
relation(america, war).
relation(america, freedom).
relation(canada, queen).

Section 3 - Encoding:

scandinavia_is_better_because :- pos(scandinavia, Y).
scandinavia_is_bad_because :- neg(scandinavia, Y).
america_is_better_because :- pos(america, Y).
america_is_bad_because :- neg(america, Y).
compare(scandinavia,X,Y) :- neg(scandinavia,X),neg(Y,X), scandinavia != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = scandinavia.
###DELIMITER###

###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(creation, evidence).
neg(creation, baseless_assertion).
neg(evidence, supreme_being).
pos(random, illusion).
pos(aim, unawareness).
pos(reason, cause_and_effect).
pos(pattern, information).
pos(ignorance, randomness).
neg(dna, proof_of_creation).

Section 2 - General relationships:

relation(creation, evidence).
relation(evidence, supreme_being).
relation(random, illusion).
relation(aim, unawareness).
relation(reason, cause_and_effect).
relation(pattern, information).
relation(ignorance, randomness).
relation(dna, proof_of_creation).

Section 3 - Encoding:

creation_is_true_because :- pos(creation, Y).
creation_is_false_because :- neg(creation, Y).
compare(creation,X,Y) :- neg(creation,X),neg(Y,X), creation != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = creation.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(three_divided_by_zero, three).
pos(three_divided_by_zero, three_sodas).
pos(three_divided_by_zero, no_one).
pos(three_divided_by_zero, no_times).
pos(three_divided_by_zero, none).
pos(three_divided_by_zero, not_done_anything).
pos(three_divided_by_zero, zero_division_happened).
pos(three_divided_by_zero, three_sodas).
pos(three_divided_by_zero, three_divided_by_one).
pos(three_divided_by_zero, three_divided_by_zero).
pos(three_divided_by_zero, everything_is_one).
pos(three_divided_by_zero, everything_is_something).
pos(three_divided_by_zero, nothing_is_zero).
pos(three_divided_by_zero, matter_and_information).
pos(three_divided_by_zero, physical_and_mental).

Section 2 - General relationships:

relation(three_divided_by_zero, three).
relation(three_divided_by_zero, three_sodas).
relation(three_divided_by_zero, no_one).
relation(three_divided_by_zero, no_times).
relation(three_divided_by_zero, none).
relation(three_divided_by_zero, not_done_anything).
relation(three_divided_by_zero, zero_division_happened).
relation(three_divided_by_zero, three_sodas).
relation(three_divided_by_zero, three_divided_by_one).
relation(three_divided_by_zero, three_divided_by_zero).
relation(three_divided_by_zero, everything_is_one).
relation(three_divided_by_zero, everything_is_something).
relation(three_divided_by_zero, nothing_is_zero).
relation(three_divided_by_zero, matter_and_information).
relation(three_divided_by_zero, physical_and_mental).

Section 3 - Encoding:

three_divided_by_zero_is_true_because :- pos(three_divided_by_zero, Y).
three_divided_by_zero_is_false_because :- neg(three_divided_by_zero, Y).
compare(three_divided_by_zero,X,Y) :- neg(three_divided_by_zero,X),neg(Y,X), three_divided_by_zero != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = three_divided_by_zero.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(state, church).
pos(state, secular).
neg(government_schools, preach_religion).
pos(government_schools, teach_religion).
pos(displaying_commandments, promote_christian_belief).
neg(displaying_commandments, inform_students).

Section 2 - General relationships:

relation(state, church).
relation(government_schools, religion).
relation(displaying_commandments, students).
relation(schools, children).
relation(schools, worldview).
relation(schools, religion).

Section 3 - Encoding:

state_is_good_because :- pos(state,Y).
state_is_bad_because :- neg(state,Y).
compare(state,X,Y) :- neg(state,X),neg(Y,X), state != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = state.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(government, law).
pos(law, amendment).
neg(government, amendment).
pos(muslims, amendment).
neg(muslims, casinos).

Section 2 - General relationships:

relation(government, law).
relation(law, amendment).
relation(muslims, amendment).
relation(muslims, casinos).

Section 3 - Encoding:

government_is_good_because :- pos(government,Y).
government_is_bad_because :- neg(government,Y).
muslims_are_good_because :- pos(muslims,Y).
muslims_are_bad_because :- neg(muslims,Y).
compare(government,X,Y) :- neg(government,X),neg(Y,X), government != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = government.
compare(muslims,X,Y) :- neg(muslims,X),neg(Y,X), muslims != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = muslims.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(minecraft, imagination).
pos(minecraft, creativity).
pos(minecraft, problem_solving).
pos(minecraft, decision_making).
pos(minecraft, environmental_awareness).
pos(minecraft, teamwork).
pos(minecraft, communication).
pos(minecraft, collaboration).
pos(minecraft, engagement).
pos(minecraft, motivation).
pos(minecraft, learning).
pos(minecraft, fun).
pos(minecraft, enjoyment).
pos(minecraft, popularity).
pos(minecraft, success).

Section 2 - General relationships:

relation(minecraft, education).
relation(minecraft, curriculum).
relation(minecraft, classroom).
relation(minecraft, students).
relation(minecraft, teachers).
relation(minecraft, parents).
relation(minecraft, schools).
relation(minecraft, sweden).
relation(minecraft, stockholm).
relation(minecraft, viktor_ryberg_school).
relation(minecraft, future_city).
relation(minecraft, woodcraft).
relation(minecraft, video_games).
relation(minecraft, us).

Section 3 - Encoding:

minecraft_is_good_because :- pos(minecraft, Y).
minecraft_is_bad_because :- neg(minecraft, Y).
compare(minecraft,X,Y) :- neg(minecraft,X),neg(Y,X), minecraft != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = minecraft.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(automatically, occurring_spontaneously).
pos(automatically, reflexively).
pos(burden_of_proof, duty).
pos(burden_of_proof, proving).
pos(burden_of_proof, disputed_charge).
neg(untrue, credibility_debates).
neg(untrue, credibility_debates_decided_on_credibility).
pos(pretend, saying_nothing).
neg(pretend, replying_to_argument).
neg(pretend, posting_argument_in_subsequent_rounds).
neg(pretend, fulfilling_burden_of_proof).
neg(pretend, swaying_mind_of_others).
pos(see_saw, normal_debate).
pos(see_saw, arguments_to_prove_resolution).
neg(see_saw, making_new_arguments).
pos(see_saw, replying_to_opponents_arguments).
neg(see_saw, fulfilling_burden_of_proof_for_your_side).
neg(see_saw, advancing_your_case).
pos(see_saw, defeating_all_arguments).
pos(see_saw, winning_debate).
neg(see_saw, leaving_one_argument_standing).
neg(see_saw, winning_debate).
pos(see_saw, tipping_see_saw_of_opinion_toward_your_side).
pos(see_saw, making_it_balanced).
neg(see_saw, leaving_anything_left_on_one_side).
neg(see_saw, winning_debate).

Section 2 - General relationships:

relation(automatically, burden_of_proof).
relation(credibility_debates, credibility).
relation(pretend, burden_of_proof).
relation(pretend, credibility).
relation(see_saw, burden_of_proof).
relation(see_saw, credibility).

Section 3 - Encoding:

automatically_is_good_because :- pos(automatically, Y).
automatically_is_bad_because :- neg(automatically, Y).
burden_of_proof_is_good_because :- pos(burden_of_proof, Y).
burden_of_proof_is_bad_because :- neg(burden_of_proof, Y).
credibility_debates_is_good_because :- pos(credibility_debates, Y).
credibility_debates_is_bad_because :- neg(credibility_debates, Y).
pretend_is_good_because :- pos(pretend, Y).
pretend_is_bad_because :- neg(pretend, Y).
see_saw_is_good_because :- pos(see_saw, Y).
see_saw_is_bad_because :- neg(see_saw, Y).
compare(automatically,X,Y) :- neg(automatically,X),neg(Y,X), automatically != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = automatically.
compare(burden_of_proof,X,Y) :- neg(burden_of_proof,X),neg(Y,X), burden_of_proof != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = burden_of_proof.
compare(credibility_debates,X,Y) :- neg(credibility_debates,X),neg(Y,X), credibility_debates != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = credibility_debates.
compare(pretend,X,Y) :- neg(pretend,X),neg(Y,X), pretend != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = pretend.
compare(see_saw,X,Y) :- neg(see_saw,X),neg(Y,X), see_saw != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = see_saw.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(south, legally_justified).
neg(south, morally_justified).
pos(supreme_court, ultimate_proof).
pos(supreme_court, constitution).
pos(supreme_court, legal).
pos(slavery, immoral).

% Section 2 - General relationships
relation(south, union).
relation(south, supreme_court).
relation(supreme_court, action).
relation(supreme_court, constitution).
relation(south, slavery).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(donald_trump, memes).
pos(donald_trump, hate_club_pages).
pos(donald_trump, phony_news_articles).
neg(donald_trump, general_dislike).

Section 2 - General relationships:

relation(donald_trump, internet).
relation(donald_trump, politician).
relation(donald_trump, population).
relation(donald_trump, motives).
relation(donald_trump, america).
relation(donald_trump, world_power).
relation(donald_trump, president).
relation(donald_trump, world).

Section 3 - Encoding:

donald_trump_is_good_because :- pos(donald_trump, Y).
donald_trump_is_bad_because :- neg(donald_trump, Y).
compare(donald_trump,X,Y) :- neg(donald_trump,X),neg(Y,X), donald_trump != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = donald_trump.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(bigfoot, existence).
neg(bigfoot, physical_evidence).
pos(hair, evidence).
neg(skeptics, credibility).
pos(scientists, credibility).
pos(technology, tracking).
pos(skill, tracking).
pos(intelligence, tracking).
neg(opponent, understanding).
pos(eye_witness_accounts, evidence).
pos(photos, evidence).
pos(videos, evidence).
pos(footprints, evidence).
neg(bigfoot, existence).
pos(logic, evidence).
pos(facts, evidence).
pos(science, evidence).

Section 2 - General relationships:

relation(bigfoot, existence).
relation(evidence, credibility).
relation(opponent, understanding).
relation(technology, tracking).
relation(eye_witness_accounts, evidence).
relation(photos, evidence).
relation(videos, evidence).
relation(footprints, evidence).
relation(logic, evidence).
relation(facts, evidence).
relation(science, evidence).

Section 3 - Encoding:

bigfoot_exists :- pos(bigfoot, X).
bigfoot_does_not_exist :- neg(bigfoot, X).
compare(bigfoot, X, Y) :- neg(bigfoot, X), neg(bigfoot, Y), bigfoot != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(electronic_music, jumpstyle_techno).
pos(electronic_music, emotions).

Section 2 - General relationships:

relation(electronic_music, trance).
relation(electronic_music, cheap).
relation(electronic_music, real_music).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(identical_twins, nurture).
pos(david_reimer, nurture).
pos(david_reimer, gender).
pos(david_reimer, upbringing).
pos(dr_john_money, nurture).
pos(dr_john_money, gender).
pos(dr_john_money, upbringing).
pos(nature, genetics).
pos(nature, destiny).

neg(identical_twins, nature).
neg(david_reimer, nature).
neg(dr_john_money, emotional_distress).

Section 2 - General relationships:

relation(identical_twins, genetics).
relation(identical_twins, nature).
relation(identical_twins, nurture).
relation(david_reimer, nature).
relation(david_reimer, nurture).
relation(david_reimer, gender).
relation(david_reimer, upbringing).
relation(dr_john_money, nurture).
relation(dr_john_money, gender).
relation(dr_john_money, upbringing).
relation(dr_john_money, emotional_distress).

Section 3 - Encoding:

identical_twins_are_different_because_of_nurture :- pos(identical_twins, nurture).
identical_twins_are_different_because_of_nature :- neg(identical_twins, nature).
david_reimer_case_proves_nurture_over_nature :- pos(david_reimer, nurture).
david_reimer_case_proves_nature_over_nurture :- neg(david_reimer, nature).
dr_john_money_caused_emotional_distress :- pos(dr_john_money, emotional_distress).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(jd_mba, law_firm_prospects).
neg(jd_mba, biglaw_job_chances).

Section 2 - General relationships:

relation(jd_mba, biglaw).
relation(jd_mba, law_school).
relation(jd_mba, grades).
relation(jd_mba, resume).
relation(jd_mba, interview).
relation(jd_mba, corporate_law).
relation(jd_mba, business_world).
relation(jd_mba, career_services_offices).
relation(jd_mba, law_business_professors).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(bible, absolute).
neg(bible, final).
neg(bible, person).
neg(bible, jesus).
neg(bible, flesh_of_christ).
neg(bible, roman_catholics).
neg(bible, protestants).

pos(bible, inanimate_object).
pos(bible, compilations_of_books).
pos(bible, fire).
pos(bible, word_of_god).
pos(bible, hearts).

Section 2 - General relationships:

relation(bible, trinity).
relation(bible, father).
relation(bible, son).
relation(bible, holy_spirit).
relation(bible, word).
relation(bible, bread).
relation(bible, communion).
relation(bible, earth).
relation(bible, hell).

Section 3 - Encoding:

bible_is_not_absolute :- neg(bible, absolute).
bible_is_not_final :- neg(bible, final).
bible_is_not_person :- neg(bible, person).
bible_is_not_jesus :- neg(bible, jesus).
bible_is_not_flesh_of_christ :- neg(bible, flesh_of_christ).
bible_is_not_roman_catholics :- neg(bible, roman_catholics).
bible_is_not_protestants :- neg(bible, protestants).

bible_is_inanimate_object :- pos(bible, inanimate_object).
bible_is_compilations_of_books :- pos(bible, compilations_of_books).
bible_is_fire :- pos(bible, fire).
bible_is_word_of_god :- pos(bible, word_of_god).
bible_is_hearts :- pos(bible, hearts).

compare(bible,X,Y) :- neg(bible,X),neg(Y,X), bible != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = bible.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(america, fight).
pos(america, stop_worrying).
pos(america, destroy).
pos(isis, terroristic_threat).
pos(army, fight).
pos(army, war).
neg(america, bullied).
neg(isis, america).

Section 2 - General relationships:

relation(america, isis).
relation(america, terroristic_threat).
relation(army, isis).
relation(army, war).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(public_ownership_of_the_media, competition).
neg(public_ownership_of_the_media, private_companies).
neg(public_ownership_of_the_media, domestic_marketplace).
neg(public_ownership_of_the_media, international_competition).
neg(government_funding, private_sector).
neg(government_funding, pop_music_radio_station).
neg(government_funding, broadcast_of_sporting_events).
neg(market_share, private_companies).
neg(market_share, advertising_revenue).
neg(market_share, audience_size).
neg(private_broadcasters, money).
neg(private_broadcasters, international_competition).
neg(bbc, news_provision).

% Section 2 - General relationships
relation(psbs_funding_sources, unfair_advantage).
relation(psbs_funding_sources, broadcasting_market).
relation(public_ownership_of_the_media, competition).
relation(public_ownership_of_the_media, private_companies).
relation(public_ownership_of_the_media, domestic_marketplace).
relation(public_ownership_of_the_media, international_competition).
relation(government_funding, private_sector).
relation(government_funding, pop_music_radio_station).
relation(government_funding, broadcast_of_sporting_events).
relation(market_share, private_companies).
relation(market_share, advertising_revenue).
relation(market_share, audience_size).
relation(private_broadcasters, money).
relation(private_broadcasters, international_competition).
relation(bbc, news_provision).
relation(bbc, britain).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(flat_earth, center_of_galaxy).
neg(flat_earth, dome_atmosphere).
pos(spherical_earth, spherical).
pos(spherical_earth, other_planets).
pos(spherical_earth, look_into_infinity).

% Section 2 - General relationships
relation(flat_earth, center_of_galaxy).
relation(flat_earth, dome_atmosphere).
relation(spherical_earth, spherical).
relation(spherical_earth, other_planets).
relation(spherical_earth, look_into_infinity).

% Section 3 - Encoding
flat_earth_is_good_because :- pos(flat_earth, Y).
flat_earth_is_bad_because :- neg(flat_earth, Y).
spherical_earth_is_good_because :- pos(spherical_earth, Y).
spherical_earth_is_bad_because :- neg(spherical_earth, Y).
compare(flat_earth, spherical_earth, X) :- neg(flat_earth, X), neg(spherical_earth, X), flat_earth != spherical_earth.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = flat_earth.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(newtons_second_law, false).

Section 2 - General relationships:

relation(big_bang_theory, false).
relation(conservation_of_angular_momentum, big_bang_theory).
relation(asteroid, mass).
relation(asteroid, star).
relation(earth, sun).
relation(sun, earth).
relation(solar_energy, heat).

Section 3 - Encoding:

newtons_second_law_is_false_because :- neg(newtons_second_law, false).
big_bang_theory_is_false_because :- neg(big_bang_theory, false).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(cell, better).
neg(frieza, better).
pos(frieza, successful_economically).
pos(frieza, owns_more_planets).
pos(frieza, creates_more_jobs).
pos(frieza, better_life_objectives).
pos(frieza, capable_warrior).
pos(frieza, committed_genocide_on_greater_scale).
pos(frieza, destroyed_many_more_planets).

Section 2 - General relationships:

relation(cell, frieza).

Section 3 - Encoding:

relation(better, successful_economically).
relation(better, owns_more_planets).
relation(better, creates_more_jobs).
relation(better, better_life_objectives).
relation(better, capable_warrior).
relation(better, committed_genocide_on_greater_scale).
relation(better, destroyed_many_more_planets).

neg(cell, successful_economically).
neg(cell, owns_more_planets).
neg(cell, creates_more_jobs).
neg(cell, better_life_objectives).
neg(cell, capable_warrior).
neg(cell, committed_genocide_on_greater_scale).
neg(cell, destroyed_many_more_planets).

compare(cell, frieza, better).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(evolution, discoveries).
pos(evolution, scientific_papers).
pos(evolution, fossil_record).
pos(evolution, pseudogenes).
pos(evolution, common_descent).

Section 2 - General relationships:

relation(evolution, creationism).
relation(evolution, fossil_record).
relation(evolution, tiktaalik).
relation(evolution, australopithecus_garhi).
relation(evolution, pseudogenes).
relation(evolution, wikipedia).

Section 3 - Encoding:

evolution_is_true_because :- pos(evolution, Y).
evolution_is_false_because :- neg(evolution, Y).
compare(evolution,X,Y) :- neg(evolution,X),neg(Y,X), evolution != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = evolution.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(sea_world, seafood_restaurant).
pos(lyndon_b_johnson, funny_quote).
pos(unknown, funny_quote).
pos(rodney_dangerfield, funny_quote).
pos(albert_einstein, funny_quote).

% Section 2 - General relationships
relation(sea_world, seafood_restaurant).
relation(lyndon_b_johnson, fish_burger).
relation(lyndon_b_johnson, slow_learner).
relation(unknown, death).
relation(unknown, grandfather).
relation(unknown, sleep).
relation(unknown, car).
relation(unknown, passenger).
relation(unknown, scream).
relation(rodney_dangerfield, parents).
relation(rodney_dangerfield, hate).
relation(rodney_dangerfield, bath_toy).
relation(rodney_dangerfield, toaster).
relation(rodney_dangerfield, radio).
relation(albert_einstein, universe).
relation(albert_einstein, matter).
relation(albert_einstein, nothing).
relation(albert_einstein, something).
relation(albert_einstein, stripes).
relation(albert_einstein, plaid).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(daughter, alcoholics).
neg(daughter, tiny_house).
neg(daughter, upstairs).
neg(daughter, reeking).
neg(daughter, drunk).
neg(daughter, front_door).

Section 2 - General relationships:

relation(daughter, alcoholics).
relation(daughter, tiny_house).
relation(daughter, upstairs).
relation(daughter, reeking).
relation(daughter, drunk).
relation(daughter, front_door).

Section 3 - Encoding:

daughter_is_good_because :- pos(daughter,Y).
daughter_is_bad_because :- neg(daughter,Y).
compare(daughter,X,Y) :- neg(daughter,X),neg(Y,X), daughter != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = daughter.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(self, illusion).
neg(brain, centralized_self).
pos(brain, multiple_autonomous_regions).
pos(people, thinker_of_thoughts).
neg(people, reality).
pos(neurons, patterns).
pos(neurons, brain).
pos(neurons, competition).
pos(neurons, decision).
neg(brain, central_part).
neg(brain, information).
neg(brain, decision).

Section 2 - General relationships:

relation(self, brain).
relation(brain, neurons).
relation(neurons, patterns).
relation(patterns, competition).
relation(competition, decision).

Section 3 - Encoding:

self_is_illusion :- pos(self, illusion).
self_is_not_illusion :- neg(self, illusion).
brain_has_centralized_self :- pos(brain, centralized_self).
brain_does_not_have_centralized_self :- neg(brain, centralized_self).
brain_has_multiple_autonomous_regions :- pos(brain, multiple_autonomous_regions).
brain_does_not_have_multiple_autonomous_regions :- neg(brain, multiple_autonomous_regions).
people_are_thinkers_of_thoughts :- pos(people, thinker_of_thoughts).
people_are_not_thinkers_of_thoughts :- neg(people, thinker_of_thoughts).
reality_has_thinker_of_thoughts :- pos(reality, thinker_of_thoughts).
reality_does_not_have_thinker_of_thoughts :- neg(reality, thinker_of_thoughts).
neurons_have_patterns :- pos(neurons, patterns).
neurons_do_not_have_patterns :- neg(neurons, patterns).
neurons_are_in_brain :- pos(neurons, brain).
neurons_are_not_in_brain :- neg(neurons, brain).
neurons_compete :- pos(neurons, competition).
neurons_do_not_compete :- neg(neurons, competition).
patterns_compete :- pos(patterns, competition).
patterns_do_not_compete :- neg(patterns, competition).
competition_makes_decisions :- pos(competition, decision).
competition_does_not_make_decisions :- neg(competition, decision).
brain_has_central_part :- pos(brain, central_part).
brain_does_not_have_central_part :- neg(brain, central_part).
brain_collects_information :- pos(brain, information).
brain_does_not_collect_information :- neg(brain, information).
brain_makes_decisions :- pos(brain, decision).
brain_does_not_make_decisions :- neg(brain, decision).
compare(self,X,Y) :- neg(self,X),neg(Y,X), self != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = self.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(batman, instill_fear).
pos(batman, powerful_abilities).
pos(batman, superhuman_force_of_will).
pos(batman, master_of_weapons).
pos(batman, master_of_martial_arts).
pos(batman, master_of_stealth).
pos(batman, master_detective).
pos(batman, master_strategist).
pos(batman, defeat_aliens).

Section 2 - General relationships:

relation(batman, spiderman).
relation(batman, superman).
relation(batman, captain_america).
relation(batman, aliens).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(wife, support_husband).
neg(husband, support_himself).
neg(husband, job).
neg(husband, transvestite_job).
pos(wife, rescue_husband).
neg(husband, accommodate_wife).
neg(wife, ceo).
neg(wife, big_wig).
neg(husband, ruin_wife_life).
pos(wife, wasted_time).
neg(husband, talk_publisher).
neg(husband, relax).
neg(wife, time_on_husband).
neg(husband, money_support_wife).
pos(wife, talk_daisy).
neg(husband, tell_wife_money).
neg(husband, parties_with_friends).
neg(wife, gladys).
neg(wife, beth).
neg(husband, work_dishwasher).
neg(husband, cook).
neg(wife, afford_maid).
neg(husband, help_wife).
neg(wife, running_from_past).
neg(wife, running_from_husband).
neg(husband, ex_con).
neg(husband, tell_mama).

% Section 2 - General relationships
relation(wife, husband).
relation(husband, wife).
relation(wife, daisy).
relation(husband, gladys).
relation(husband, beth).
relation(wife, parties).
relation(wife, friends).
relation(wife, mama).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(trans_people, human_rights).
neg(black_people, slavery).
neg(women, right_to_deny_sex).
neg(rape, crime).
pos(trans_people, sexual_pleasure).

Section 2 - General relationships:

relation(trans_people, society).
relation(trans_people, government).
relation(trans_people, blacks).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(united_states, sanctions).
pos(iran, uranium_expenditure).
neg(iran, united_states).

Section 2 - General relationships:

relation(united_states, iran).
relation(sanctions, iran).
relation(sanctions, united_states).
relation(iran, uranium_expenditure).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(noah_ark_story, true).
neg(noah_ark, large_enough).
neg(animals, prevented_from_eating).
neg(animals, prevented_from_fighting).
neg(ark, sign_of_remains).
neg(flood, sign_of_occurence).
neg(kangaroos, made_journey_to_ark).
neg(penguins, made_journey_to_ark).
neg(plant_life, survived_flood).

Section 2 - General relationships:

relation(noah_ark_story, animals).
relation(noah_ark_story, ark).
relation(noah_ark_story, flood).
relation(noah_ark_story, plant_life).
relation(animals, ark).
relation(animals, food).
relation(animals, water).
relation(animals, feces).
relation(kangaroos, ark).
relation(penguins, ark).

Section 3 - Encoding:

noah_ark_story_is_false_because :- neg(noah_ark_story, Y).
noah_ark_story_is_true_because :- pos(noah_ark_story, Y).
compare(noah_ark_story,X,Y) :- neg(noah_ark_story,X),neg(Y,X), noah_ark_story != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = noah_ark_story.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(friend_friend, catchy_dubstep_song).
pos(friend_friend, channel).
pos(friend_friend, songs).
pos(me, catchy_dubstep_song).
pos(me, friend_friend).
pos(me, channel).
pos(me, songs).

Section 2 - General relationships:

relation(friend_friend, catchy_dubstep_song).
relation(friend_friend, channel).
relation(friend_friend, songs).
relation(me, catchy_dubstep_song).
relation(me, friend_friend).
relation(me, channel).
relation(me, songs).

Section 3 - Encoding:

friend_friend_is_good_because :- pos(friend_friend, Y).
friend_friend_is_bad_because :- neg(friend_friend, Y).
me_is_good_because :- pos(me, Y).
me_is_bad_because :- neg(me, Y).
compare(friend_friend,X,Y) :- neg(friend_friend,X),neg(Y,X), friend_friend != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = friend_friend.
compare(me,X,Y) :- neg(me,X),neg(Y,X), me != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = me.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(social_media, play_fortnite).
pos(fortnite, online_game).
pos(fortnite, co_op).
pos(fortnite, battle_royale).
pos(battle_royale, ffa).
pos(battle_royale, last_one_standing).
pos(battle_royale, solo).
pos(battle_royale, duo).
pos(battle_royale, squad).

Section 2 - General relationships:

relation(social_media, school).
relation(fortnite, friends).
relation(fortnite, save_the_world).
relation(battle_royale, ffa).
relation(battle_royale, last_one_standing).
relation(battle_royale, solo).
relation(battle_royale, duo).
relation(battle_royale, squad).

Section 3 - Encoding:

social_media_is_good_because :- pos(social_media, Y).
social_media_is_bad_because :- neg(social_media, Y).
compare(social_media,X,Y) :- neg(social_media,X),neg(Y,X), social_media != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = social_media.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(capitalism, perfect_system_of_economy).
pos(capitalism, pretty_good_system).
neg(capitalism, get_rid_of_caste_system).
neg(communism, worked_well).
pos(capitalism, worked_way_better_than_any_other_system).
neg(communism, grow_over_someone).
neg(socialism, grow_over_someone).

% Section 2 - General relationships
relation(capitalism, communism).
relation(capitalism, socialism).
relation(capitalism, venezuela).
relation(capitalism, cuba).

% Section 3 - Encoding
elon_is_good_because :- pos(capitalism, Y).
elon_is_bad_because :- neg(capitalism, Y).
compare(capitalism,X,Y) :- neg(capitalism,X),neg(Y,X), capitalism != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = capitalism.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(joke_theft, moral).
pos(joke_theft, legal).
neg(joke_theft, law).
pos(joke_theft, effort).
neg(joke_theft, accidental).
pos(joke_theft, intentional).

Section 2 - General relationships:

relation(joke_theft, effort).
relation(joke_theft, law).
relation(joke_theft, moral).
relation(joke_theft, accidental).
relation(joke_theft, intentional).

Section 3 - Encoding:

moral_because :- pos(joke_theft, Y).
moral_because :- neg(joke_theft, Y).
legal_because :- pos(joke_theft, Y).
legal_because :- neg(joke_theft, Y).
effort_because :- pos(joke_theft, Y).
effort_because :- neg(joke_theft, Y).
accidental_because :- pos(joke_theft, Y).
accidental_because :- neg(joke_theft, Y).
intentional_because :- pos(joke_theft, Y).
intentional_because :- neg(joke_theft, Y).
compare(joke_theft,X,Y) :- neg(joke_theft,X),neg(Y,X), joke_theft != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = joke_theft.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(politicians, voters).
neg(politicians, promises).
neg(liberal_democrats, conservatives).
pos(labour_party, voters).

Section 2 - General relationships:

relation(politicians, voters).
relation(politicians, promises).
relation(liberal_democrats, conservatives).
relation(labour_party, voters).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(cousins_and_beer_nuts, better).
pos(cousins_and_beer_nuts, partying).
pos(cousins_and_beer_nuts, creating_memories).
pos(cousins_and_beer_nuts, experiencing_elation).
pos(cousins_and_beer_nuts, making_happy_memories).
pos(cousins_and_beer_nuts, having_friends).
pos(cousins_and_beer_nuts, changing_social_status).
pos(colon_cancer, keeping_population_in_check).
pos(colon_cancer, beneficial).
pos(colon_cancer, good).
pos(colon_cancer, outweighs).
pos(colon_cancer, keeping_overall_population_in_figurative_homeostasis).
pos(colon_cancer, preventing_global_warming).
pos(colon_cancer, preventing_death).
pos(colon_cancer, raising_social_status).

neg(colon_cancer, better).
neg(colon_cancer, partying).
neg(colon_cancer, creating_memories).
neg(colon_cancer, experiencing_elation).
neg(colon_cancer, making_happy_memories).
neg(colon_cancer, having_friends).
neg(colon_cancer, changing_social_status).
neg(cousins_and_beer_nuts, keeping_population_in_check).
neg(cousins_and_beer_nuts, beneficial).
neg(cousins_and_beer_nuts, good).
neg(cousins_and_beer_nuts, outweighs).
neg(cousins_and_beer_nuts, keeping_overall_population_in_figurative_homeostasis).
neg(cousins_and_beer_nuts, preventing_global_warming).
neg(cousins_and_beer_nuts, preventing_death).
neg(cousins_and_beer_nuts, raising_social_status).

Section 2 - General relationships:

relation(cousins_and_beer_nuts, better).
relation(colon_cancer, better).
relation(cousins_and_beer_nuts, partying).
relation(colon_cancer, partying).
relation(cousins_and_beer_nuts, creating_memories).
relation(colon_cancer, creating_memories).
relation(cousins_and_beer_nuts, experiencing_elation).
relation(colon_cancer, experiencing_elation).
relation(cousins_and_beer_nuts, making_happy_memories).
relation(colon_cancer, making_happy_memories).
relation(cousins_and_beer_nuts, having_friends).
relation(colon_cancer, having_friends).
relation(cousins_and_beer_nuts, changing_social_status).
relation(colon_cancer, changing_social_status).
relation(cousins_and_beer_nuts, keeping_population_in_check).
relation(colon_cancer, keeping_population_in_check).
relation(cousins_and_beer_nuts, beneficial).
relation(colon_cancer, beneficial).
relation(cousins_and_beer_nuts, good).
relation(colon_cancer, good).
relation(cousins_and_beer_nuts, outweighs).
relation(colon_cancer, outweighs).
relation(cousins_and_beer_nuts, keeping_overall_population_in_figurative_homeostasis).
relation(colon_cancer, keeping_overall_population_in_figurative_homeostasis).
relation(cousins_and_beer_nuts, preventing_global_warming).
relation(colon_cancer, preventing_global_warming).
relation(cousins_and_beer_nuts, preventing_death).
relation(colon_cancer, preventing_death).
relation(cousins_and_beer_nuts, raising_social_status).
relation(colon_cancer, raising_social_status).

Section 3 - Encoding:

cousins_and_beer_nuts_is_good_because :- pos(cousins_and_beer_nuts,Y).
cousins_and_beer_nuts_is_bad_because :- neg(cousins_and_beer_nuts,Y).
colon_cancer_is_good_because :- pos(colon_cancer,Y).
colon_cancer_is_bad_because :- neg(colon_cancer,Y).
compare(cousins_and_beer_nuts,X,Y) :- neg(cousins_and_beer_nuts,X),neg(Y,X), cousins_and_beer_nuts != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = cousins_and_beer_nuts.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(roman_republic, peoples_of_the_world).
pos(roman_empire, peoples_of_the_world).

Section 2 - General relationships:

relation(roman_republic, roman_empire).
relation(roman_republic, peoples_of_the_world).
relation(roman_empire, peoples_of_the_world).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(nfl, boring).
pos(eagles, fair_team).
pos(eagles, good_team).

% Section 2 - General relationships
relation(nfl, patriots).
relation(nfl, viewers).
relation(nfl, money).
relation(nfl, scandal).
relation(nfl, aaron_rodgers).
relation(eagles, super_bowl).

% Section 3 - Encoding
compare(nfl,X,Y) :- neg(nfl,X),neg(Y,X), nfl != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = nfl.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, creator).
pos(god, universe).
pos(god, existence).
pos(god, logical).
pos(god, common_sense).
pos(god, realistic).
pos(scientific_theory, irrational).
pos(scientific_theory, unrealistic).
pos(scientific_theory, impossible).
pos(scientific_theory, illogical).
pos(scientific_theory, uncommon_sense).
pos(scientific_theory, unrealistic).
neg(god, beginning).
neg(god, created).
neg(god, matter).
neg(god, atoms).
neg(god, space).
neg(god, nothing).
neg(god, religious_scripture).
neg(god, atheists).
neg(god, arguments).
neg(scientific_theory, creator).
neg(scientific_theory, universe).
neg(scientific_theory, existence).
neg(scientific_theory, logical).
neg(scientific_theory, common_sense).
neg(scientific_theory, realistic).

Section 2 - General relationships:

relation(god, creator).
relation(god, universe).
relation(god, existence).
relation(god, logical).
relation(god, common_sense).
relation(god, realistic).
relation(scientific_theory, irrational).
relation(scientific_theory, unrealistic).
relation(scientific_theory, impossible).
relation(scientific_theory, illogical).
relation(scientific_theory, uncommon_sense).
relation(scientific_theory, unrealistic).
relation(god, beginning).
relation(god, created).
relation(god, matter).
relation(god, atoms).
relation(god, space).
relation(god, nothing).
relation(god, religious_scripture).
relation(god, atheists).
relation(god, arguments).
relation(scientific_theory, creator).
relation(scientific_theory, universe).
relation(scientific_theory, existence).
relation(scientific_theory, logical).
relation(scientific_theory, common_sense).
relation(scientific_theory, realistic).

Section 3 - Encoding:

god_is_good_because :- pos(god,Y).
god_is_bad_because :- neg(god,Y).
scientific_theory_is_good_because :- pos(scientific_theory,Y).
scientific_theory_is_bad_because :- neg(scientific_theory,Y).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(consciousness, brain).
pos(consciousness, machine).
pos(consciousness, supercomputer).
pos(consciousness, brain_machine).

Section 2 - General relationships:

relation(consciousness, brain).
relation(consciousness, machine).
relation(consciousness, supercomputer).
relation(consciousness, brain_machine).
relation(consciousness, life).
relation(consciousness, laws_of_nature).
relation(consciousness, chemistry).
relation(consciousness, physics).
relation(consciousness, quantum_physics).
relation(consciousness, virtual_world).
relation(consciousness, reality).
relation(consciousness, rom).
relation(consciousness, operating_system).
relation(consciousness, human_brain).
relation(consciousness, human_mind).
relation(consciousness, spark_of_life).
relation(consciousness, flame).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(adolescents, right_to_make_autonomous_medical_choices).
neg(adolescents, knowledge_of_what_is_best_for_the_family).
pos(saving_an_innocent_life, more_important_than_finances).
neg(tattoos, medical).
neg(piercings, medical).
neg(cosmetic_surgery, medical).
pos(adolescents, brain_capacity_to_make_good_choices).
pos(fourteen_year_olds, cognitive_capability_to_reason).
pos(fourteen_year_olds, understand).
pos(fourteen_year_olds, appreciate).
pos(fourteen_year_olds, articulate_decisions).
pos(fourteen_year_olds, competent_decisions).

Section 2 - General relationships:

relation(adolescents, right_to_make_autonomous_medical_choices).
relation(adolescents, knowledge_of_what_is_best_for_the_family).
relation(adolescents, finances).
relation(adolescents, life).
relation(adolescents, medical).
relation(adolescents, brain_capacity).
relation(adolescents, adults).
relation(adolescents, age).
relation(adolescents, decision_making).
relation(fourteen_year_olds, cognitive_capability).
relation(fourteen_year_olds, adults).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(eternal_punishment_in_hell, just).

Section 2 - General relationships:

relation(eternal_punishment_in_hell, thought_crimes).
relation(islamic_hell, justice).
relation(islamic_hell, salvation).
relation(christianity, justice).
relation(christianity, salvation).
relation(god, mad).
relation(god, weak).
relation(god, feeble).
relation(god, creations).
relation(god, control).

Section 3 - Encoding:

eternal_punishment_in_hell_is_unjust :- neg(eternal_punishment_in_hell, just).
islamic_hell_is_different_from_christianity :- relation(islamic_hell, justice), relation(christianity, justice), islamic_hell != christianity.
god_is_not_wise :- relation(god, mad), relation(god, weak), relation(god, feeble).
god_is_in_control :- relation(god, control).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, existence).
neg(god, mainstream_science).
neg(god, intelligent_design).
neg(god, afterlife).
neg(god, creator).
neg(god, benevolence).
neg(god, actions_of_god).
neg(god, choice).
neg(god, intelligent_design).
neg(god, automatic_deterministic_way).
neg(god, computers).
neg(god, physical_force).
neg(god, logical_constructs).
neg(god, impossible).
neg(god, planets).
neg(god, square).

Section 2 - General relationships:

relation(god, existence).
relation(god, mainstream_science).
relation(god, intelligent_design).
relation(god, afterlife).
relation(god, creator).
relation(god, benevolence).
relation(god, actions_of_god).
relation(god, choice).
relation(god, intelligent_design).
relation(god, automatic_deterministic_way).
relation(god, computers).
relation(god, physical_force).
relation(god, logical_constructs).
relation(god, impossible).
relation(god, planets).
relation(god, square).

Section 3 - Encoding:

god_exists :- pos(god, existence).
god_does_not_exist :- neg(god, existence).
compare(god,X,Y) :- neg(god,X),neg(Y,X), god != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = god.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(metallica, great_guitar).
pos(metallica, lyrics_make_sense).
neg(rap, lyrics_make_sense).

Section 2 - General relationships:

relation(metallica, rap).
relation(lyrics, video).
relation(song, one).
relation(soldier, war).
relation(lyrics, story).
relation(music, cussing).
relation(song, one).
relation(soldier, war).
relation(lyrics, story).
relation(music, cussing).

Section 3 - Encoding:

metallica_is_good_because :- pos(metallica, Y).
rap_is_bad_because :- neg(rap, Y).
compare(metallica, rap, X) :- neg(metallica, X), neg(rap, X), metallica != rap.
compare(X, rap, Y) :- neg(X, rap), neg(X, Y), Y != rap, Y = metallica.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, infinite_universe).
pos(god, atom).
pos(god, cell).
pos(god, logic).
pos(god, savior).
pos(god, supernatural).
pos(god, evidence).
pos(god, testimony).
pos(god, bible).
pos(jesus, miracles).
pos(jesus, savior).
pos(jesus, supernatural).
pos(jesus, evidence).
pos(jesus, testimony).
pos(jesus, bible).
pos(bible, evidence).
pos(bible, testimony).
pos(bible, repeatable).
pos(bible, virgin_mary).
pos(virgin_mary, birth).
pos(christian_scientist, verify).
pos(religious_scientist, verify).
pos(atheist_scientist, verify).
pos(agnostic_scientist, verify).
pos(scientist, verify).
pos(finite_beings, describe).
pos(numbers, infinity).
pos(even_numbers, infinity).
pos(prime_numbers, infinity).
pos(unbelievers, crucify).
pos(believers, kill).
pos(people, see).
pos(people, crucify).
pos(people, kill).
pos(people, testimony).
pos(people, evidence).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos(people, christianity).
pos(people, atheism).
pos(people, agnosticism).
pos(people, science).
pos(people, scientist).
pos(people, christian_scientist).
pos(people, religious_scientist).
pos(people, atheist_scientist).
pos(people, agnostic_scientist).
pos(people, evidence).
pos(people, testimony).
pos(people, belief).
pos(people, logic).
pos(people, verify).
pos(people, repeatable).
pos(people, bible).
pos(people, god).
pos(people, jesus).
pos
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(providing_money_directly, working).
pos(providing_money_directly, better_than_subsidies_and_credits).
pos(providing_money_directly, working_with_limited_programs).
pos(providing_money_directly, brazil_bolsa_familia).
pos(brazil_bolsa_familia, millions_of_children_get_primary_education).
pos(brazil_bolsa_familia, small_cash_incentive).
pos(india, huge_amount_on_inefficient_poverty_reduction_programs).
pos(direct_cash_payments, providing_for_the_70million_households_below_the_poverty_line).
pos(direct_cash_payments, monthly_transfer_of_2,140_rs).
pos(direct_cash_payments, more_than_the_poverty_line_income_for_rural_households).

Section 2 - General relationships:

relation(providing_money_directly, subsidies_and_credits).
relation(providing_money_directly, limited_programs).
relation(providing_money_directly, brazil_bolsa_familia).
relation(brazil_bolsa_familia, millions_of_children).
relation(brazil_bolsa_familia, primary_education).
relation(brazil_bolsa_familia, small_cash_incentive).
relation(india, poverty_reduction_programs).
relation(direct_cash_payments, 70million_households_below_the_poverty_line).
relation(direct_cash_payments, monthly_transfer_of_2,140_rs).
relation(direct_cash_payments, poverty_line_income_for_rural_households).

Section 3 - Encoding:

providing_money_directly_is_good_because :- pos(providing_money_directly, Y).
providing_money_directly_is_bad_because :- neg(providing_money_directly, Y).
compare(providing_money_directly,X,Y) :- neg(providing_money_directly,X),neg(Y,X), providing_money_directly != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = providing_money_directly.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(democracy, irrelevant).
neg(democracy, best_system).
neg(democracy, good_system).
neg(democracy, stable).
neg(democracy, flawless).

% Section 2 - General relationships
relation(democracy, ruling_system).
relation(democracy, flaws).
relation(democracy, debate).
relation(democracy, opponent).
relation(democracy, dictatorship).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(downloading_music, moral_reason).
pos(downloading_music, societal_reason).
pos(record_companies, income).
neg(record_companies, musicians).
pos(musicians, income).
neg(musicians, record_companies).

Section 2 - General relationships:

relation(downloading_music, musicians).
relation(downloading_music, record_companies).
relation(musicians, record_companies).

Section 3 - Encoding:

record_companies_are_bad_because :- neg(record_companies,Y).
record_companies_are_good_because :- pos(record_companies,Y).
musicians_are_bad_because :- neg(musicians,Y).
musicians_are_good_because :- pos(musicians,Y).
downloading_music_is_bad_because :- neg(downloading_music,Y).
downloading_music_is_good_because :- pos(downloading_music,Y).
compare(record_companies,X,Y) :- neg(record_companies,X),neg(Y,X), record_companies != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = record_companies.
compare(musicians,X,Y) :- neg(musicians,X),neg(Y,X), musicians != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = musicians.
compare(downloading_music,X,Y) :- neg(downloading_music,X),neg(Y,X), downloading_music != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = downloading_music.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(ford, truck).
pos(ford, american_company).
pos(ford, strong_frame).
pos(ford, high_crash_test_rating).
pos(ford, smooth_quiet_ride).
pos(ford, multiple_cab_and_bed_configurations).
pos(ford, attractive_cab).
pos(ford, low_hp_rated_motors).
pos(ford, good_gas_mileage).
neg(chevy, large_turning_radius).
neg(chevy, mediocre_interior_storage).

Section 2 - General relationships:

relation(ford, truck).
relation(ford, american_company).
relation(ford, strong_frame).
relation(ford, high_crash_test_rating).
relation(ford, smooth_quiet_ride).
relation(ford, multiple_cab_and_bed_configurations).
relation(ford, attractive_cab).
relation(ford, low_hp_rated_motors).
relation(ford, good_gas_mileage).
relation(chevy, large_turning_radius).
relation(chevy, mediocre_interior_storage).

Section 3 - Encoding:

ford_is_good_because :- pos(ford, Y).
ford_is_bad_because :- neg(ford, Y).
chevy_is_good_because :- pos(chevy, Y).
chevy_is_bad_because :- neg(chevy, Y).
compare(ford, X, Y) :- neg(ford, X), neg(Y, X), ford != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = ford.
compare(chevy, X, Y) :- neg(chevy, X), neg(Y, X), chevy != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = chevy.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(las_vegas_shooting, hoax).

% Section 2 - General relationships
relation(las_vegas_shooting, bloodshed).
relation(las_vegas_shooting, event).
relation(las_vegas_shooting, massacre).
relation(las_vegas_shooting, tragedy).
relation(las_vegas_shooting, loss_of_life).
relation(las_vegas_shooting, debate).
relation(las_vegas_shooting, affirmative).
relation(las_vegas_shooting, evidence).
relation(las_vegas_shooting, proof).
relation(las_vegas_shooting, claim).
relation(las_vegas_shooting, resolution).
relation(las_vegas_shooting, burden_of_proof).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(las_vegas_shooting,X,Y) :- neg(las_vegas_shooting,X),neg(Y,X), las_vegas_shooting != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = las_vegas_shooting.
```
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(knowledge, thinking).
pos(knowledge, knowing).
pos(knowledge, doing).
pos(knowledge, smart).
pos(knowledge, lifting).
pos(knowledge, machines).
pos(knowledge, using).
pos(strength, charm).
pos(strength, force).
pos(strength, lifting).
pos(strength, machines).
neg(strength, disabled_people).
neg(strength, mind).
neg(strength, thought).

% Section 2 - General relationships
relation(knowledge, strength).
relation(knowledge, stephen_hawking).
relation(knowledge, people).
relation(knowledge, machines).
relation(strength, disabled_people).
relation(strength, mind).
relation(strength, thought).
relation(strength, people).
relation(strength, machines).

% Section 3 - Encoding
elon_is_good_because :- pos(elon,Y).
elon_is_bad_because :- neg(elon,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(jesus, father).
neg(pro, burden_of_proof).
neg(pro, knockdown_argument).
neg(pro, reasonable_manner).
neg(pro, effective_manner).
pos(opponent, objections).
pos(opponent, law_of_non_contradiction).
neg(opponent, white_house).
neg(opponent, theological_school).
neg(opponent, yellow_mellow).
pos(opponent, ddo).
neg(incarnation, god).

Section 2 - General relationships:

relation(jesus, father).
relation(pro, burden_of_proof).
relation(pro, knockdown_argument).
relation(pro, reasonable_manner).
relation(pro, effective_manner).
relation(opponent, objections).
relation(opponent, law_of_non_contradiction).
relation(opponent, white_house).
relation(opponent, theological_school).
relation(opponent, yellow_mellow).
relation(opponent, ddo).
relation(incarnation, god).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(utilitarianism, potential_value).
pos(lsd, economic_growth).
pos(lsd, assisting_equality).
pos(lsd, utilitarianism).
neg(anarchy, crime).
neg(anarchy, large_scale_societal_collapse).
neg(anarchy, utilitarianism).
neg(anarchy, unpredictable_form_of_government).
neg(anarchy, veganarchy).
neg(deep_ecology, humans).
neg(otherization, lsd).
neg(otherization, veganarchy).
pos(lsd, reduce_war).
neg(anarchy, healthy_large_enough_populace).

Section 2 - General relationships:

relation(utilitarianism, lsd).
relation(lsd, anarchy).
relation(anarchy, veganarchy).
relation(deep_ecology, humans).
relation(otherization, lsd).
relation(otherization, veganarchy).
relation(lsd, war).
relation(anarchy, war).

Section 3 - Encoding:

utilitarianism_is_preferred :- pos(utilitarianism, Y).
lsd_best_leads_to_economic_growth :- pos(lsd, economic_growth).
lsd_best_leads_to_assisting_equality :- pos(lsd, assisting_equality).
anarchy_leads_to_crime :- neg(anarchy, crime).
anarchy_leads_to_large_scale_societal_collapse :- neg(anarchy, large_scale_societal_collapse).
anarchy_leads_to_unpredictable_form_of_government :- neg(anarchy, unpredictable_form_of_government).
deep_ecology_is_flawed :- neg(deep_ecology, humans).
otherization_is_somewhat_inherent :- neg(otherization, lsd).
otherization_is_somewhat_inherent :- neg(otherization, veganarchy).
lsd_reduces_war :- pos(lsd, reduce_war).
anarchy_reduces_war :- neg(anarchy, healthy_large_enough_populace).
compare(lsd, anarchy, utilitarianism) :- neg(lsd, utilitarianism), neg(anarchy, utilitarianism), lsd != anarchy.
compare(anarchy, lsd, utilitarianism) :- neg(anarchy, utilitarianism), neg(anarchy, utilitarianism), anarchy != lsd, anarchy = utilitarianism.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(situational_ethics, absolute_ethics).
pos(absolute_ethics, nature).
pos(situational_ethics, unconscious_code_of_ethics).

% Section 2 - General relationships
relation(situational_ethics, absolute_ethics).
relation(absolute_ethics, situational_ethics).
relation(absolute_ethics, harm).
relation(situational_ethics, harm).
relation(situational_ethics, moral_absolutes).
relation(situational_ethics, ethical_absolutes).

% Section 3 - Encoding
situational_ethics_is_superior :- situational_ethics > absolute_ethics.
absolute_ethics_is_superior :- situational_ethics < absolute_ethics.
situational_ethics_is_possible :- situational_ethics >= absolute_ethics.
situational_ethics_is_impossible :- situational_ethics =< absolute_ethics.
compare(situational_ethics, absolute_ethics, harm) :- neg(situational_ethics, harm), neg(absolute_ethics, harm), situational_ethics != absolute_ethics.
compare(situational_ethics, absolute_ethics, moral_absolutes) :- neg(situational_ethics, moral_absolutes), neg(absolute_ethics, moral_absolutes), situational_ethics != absolute_ethics.
compare(situational_ethics, absolute_ethics, ethical_absolutes) :- neg(situational_ethics, ethical_absolutes), neg(absolute_ethics, ethical_absolutes), situational_ethics != absolute_ethics.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(christians, truth).
neg(christians, fiction).
pos(you, point).
neg(you, originals).
neg(you, dick).
pos(site_member, parody).
pos(site_member, points).
pos(atheists, points).
pos(senses, facts).
neg(senses, rational_basis).
neg(facts, rational_basis).

Section 2 - General relationships:

relation(christians, truth).
relation(christians, fiction).
relation(you, point).
relation(you, originals).
relation(you, dick).
relation(site_member, parody).
relation(site_member, points).
relation(atheists, points).
relation(senses, facts).
relation(senses, rational_basis).
relation(facts, rational_basis).

Section 3 - Encoding:

christians_are_good_because :- pos(christians,Y).
christians_are_bad_because :- neg(christians,Y).
compare(christians,X,Y) :- neg(christians,X),neg(Y,X), christians != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = christians.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(social_media, cyberbullying).
neg(social_media, good).
pos(schools, teaching).
pos(teens, awareness).
pos(teens, prevention).
pos(social_media, communication).

Section 2 - General relationships:

relation(cyberbullying, teens).
relation(schools, teens).
relation(social_media, teens).
relation(social_media, people).

Section 3 - Encoding:

social_media_is_bad_because :- pos(social_media, X), neg(X, good).
social_media_is_good_because :- pos(social_media, X), pos(X, good).
compare(social_media,X,Y) :- neg(social_media,X),neg(Y,X), social_media != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = social_media.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(recruitment, police_armed).
pos(police, routine_arming).
pos(police, trust).
neg(recruitment, police_vulnerable).
neg(police, easy_targets).
neg(police, proper_means_to_defend).

Section 2 - General relationships:

relation(police, recruitment).
relation(police, law_and_order).
relation(police, criminals).

Section 3 - Encoding:

recruitment_is_good_because :- pos(recruitment,Y).
recruitment_is_bad_because :- neg(recruitment,Y).
compare(recruitment,X,Y) :- neg(recruitment,X),neg(Y,X), recruitment != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = recruitment.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(christianity, united_states).
pos(christianity, god).
pos(christianity, bible).
pos(christianity, inequality).
pos(christianity, waste).
pos(christianity, trump_voters).
pos(christianity, trump).
pos(christianity, armaments).
pos(christianity, guns).
pos(christianity, muslim_extremism).
pos(christianity, secular_rationalism).
pos(christianity, obama).
pos(christianity, faith).
pos(christianity, comfort).
pos(christianity, prayer).
pos(christianity, god).
pos(christianity, jesus).
pos(christianity, holy_spirit).
pos(christianity, bible).
pos(christianity, church).
pos(christianity, prayer).
pos(christianity, worship).
pos(christianity, salvation).
pos(christianity, heaven).
pos(christianity, hell).
pos(christianity, love).
pos(christianity, forgiveness).
pos(christianity, mercy).
pos(christianity, grace).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
pos(christianity, self-control).
pos(christianity, patience).
pos(christianity, humility).
pos(christianity, meekness).
pos(christianity, longsuffering).
pos(christianity, goodness).
pos(christianity, faithfulness).
pos(christianity, righteousness).
pos(christianity, peace).
pos(christianity, joy).
pos(christianity, hope).
pos(christianity, love).
pos(christianity, faith).
pos(christianity, charity).
pos(christianity, kindness).
pos(christianity, gentleness).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(michael_jordan, basketball_player).
pos(michael_jordan, greatness).
pos(michael_jordan, physical_greatness).
pos(michael_jordan, spiritual_greatness).
pos(michael_jordan, strength).
neg(michael_jordan, sportsmanship).

Section 2 - General relationships:

relation(michael_jordan, greatness).
relation(michael_jordan, physical_greatness).
relation(michael_jordan, spiritual_greatness).
relation(michael_jordan, strength).
relation(michael_jordan, sportsmanship).
relation(michael_jordan, basketball_player).
relation(jeremy_lin, basketball_player).

Section 3 - Encoding:

greatness :- physical_greatness, spiritual_greatness.
greatness :- strength, sportsmanship.
michael_jordan_is_great :- greatness(michael_jordan).
michael_jordan_is_not_great :- neg(michael_jordan, greatness).
compare(michael_jordan,X,Y) :- neg(michael_jordan,X),neg(Y,X), michael_jordan != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = michael_jordan.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(girls, hot).
neg(girls, not_hot).

Section 2 - General relationships:

relation(girls, kitchen).
relation(women, kitchen).
relation(women, oven).
relation(women, cooking).
relation(women, sexist).
relation(sister, fridge_magnets).
relation(fridge_magnets, fridge).

Section 3 - Encoding:

relation(girls, hot) :- pos(girls, hot).
relation(girls, not_hot) :- neg(girls, not_hot).
relation(women, kitchen) :- pos(women, kitchen).
relation(women, oven) :- neg(women, oven).
relation(women, cooking) :- pos(women, cooking).
relation(women, sexist) :- neg(women, sexist).
relation(sister, fridge_magnets) :- pos(sister, fridge_magnets).
relation(fridge_magnets, fridge) :- pos(fridge_magnets, fridge).
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(death_penalty, humanity).
pos(death_penalty, punishment).
pos(death_penalty, justice).
pos(death_penalty, protection).
neg(death_penalty, cost).
pos(death_penalty, final_release).
neg(death_penalty, soft_release).
pos(death_penalty, suffering).
pos(death_penalty, inhuman).
pos(death_penalty, evil).
pos(death_penalty, crime).
pos(death_penalty, monster).
pos(death_penalty, danger).
pos(death_penalty, rehabilitation).
pos(death_penalty, life_sentence).
pos(death_penalty, good_behavior).
neg(death_penalty, cheap_labor).
neg(death_penalty, free_labor).
neg(death_penalty, work).
neg(death_penalty, money).
neg(death_penalty, little_guy).
neg(death_penalty, families).
neg(death_penalty, loved_one).
neg(death_penalty, rot_in_jail).
pos(death_penalty, assassination).
pos(death_penalty, secret).
pos(death_penalty, evidence).
pos(death_penalty, guilt).
pos(death_penalty, rights).
pos(death_penalty, jury).
pos(death_penalty, peers).
pos(death_penalty, court).

Section 2 - General relationships:

relation(death_penalty, overpopulation).
relation(death_penalty, prison).
relation(death_penalty, criminal).
relation(death_penalty, government).
relation(death_penalty, work).
relation(death_penalty, money).
relation(death_penalty, cost).
relation(death_penalty, mentally_challenged_people).
relation(death_penalty, children).
relation(death_penalty, assassination).
relation(death_penalty, evidence).
relation(death_penalty, guilt).
relation(death_penalty, rights).
relation(death_penalty, jury).
relation(death_penalty, peers).
relation(death_penalty, court).

Section 3 - Encoding:

death_penalty_is_good_because :- pos(death_penalty, Y).
death_penalty_is_bad_because :- neg(death_penalty, Y).
compare(death_penalty,X,Y) :- neg(death_penalty,X),neg(Y,X), death_penalty != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = death_penalty.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(whites, be_bred_out).
neg(opponent, ideas).
neg(conservadumb, definition).
neg(i, racist).
neg(whites, bad).
pos(fracking, bad).
neg(wars, commonplace).
neg(whites, destroying_world).
pos(egyptians, invent_electricity).
neg(egyptians, provide_sources).
pos(alessandro_volta, invent_battery).
neg(indians, provide_evidence).
neg(eskimos, provide_proof).
pos(carver, invent_peanuts).
neg(carver, invent_many_things).
pos(einstein, come_up_with_theory_of_relativity).
neg(einstein, check_facts).
pos(einstein, jewish).
neg(adolf_hitler, oppress_jewish_people).

Section 2 - General relationships:

relation(whites, be_bred_out).
relation(opponent, ideas).
relation(conservadumb, definition).
relation(i, racist).
relation(whites, bad).
relation(fracking, bad).
relation(wars, commonplace).
relation(whites, destroying_world).
relation(egyptians, invent_electricity).
relation(egyptians, provide_sources).
relation(alessandro_volta, invent_battery).
relation(indians, provide_evidence).
relation(eskimos, provide_proof).
relation(carver, invent_peanuts).
relation(carver, invent_many_things).
relation(einstein, come_up_with_theory_of_relativity).
relation(einstein, check_facts).
relation(einstein, jewish).
relation(adolf_hitler, oppress_jewish_people).

Section 3 - Encoding:

whites_need_to_be_bred_out :- pos(whites, be_bred_out).
opponent_has_run_out_of_ideas :- neg(opponent, ideas).
i_am_not_racist :- neg(i, racist).
whites_are_not_bad :- neg(whites, bad).
fracking_is_bad :- pos(fracking, bad).
wars_are_not_just_among_whites :- neg(wars, commonplace).
whites_are_not_destroying_world :- neg(whites, destroying_world).
egyptians_invented_electricity :- pos(egyptians, invent_electricity).
alessandro_volta_invented_battery :- pos(alessandro_volta, invent_battery).
indians_invented_telephone :- neg(indians, provide_evidence).
eskimos_invented_fridge :- neg(eskimos, provide_proof).
carver_invented_peanuts :- pos(carver, invent_peanuts).
carver_invented_many_things :- neg(carver, invent_many_things).
einstein_came_up_with_theory_of_relativity :- pos(einstein, come_up_with_theory_of_relativity).
einstein_is_jewish :- pos(einstein, jewish).
adolf_hitler_oppressed_jewish_people :- neg(adolf_hitler, oppress_jewish_people).
compare(whites,X,Y) :- neg(whites,X),neg(Y,X), whites != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = whites.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(intelligent_design, literal_interpretation_of_the_bible).
neg(intelligent_design, impossible_under_a_literal_interpretation_of_the_bible).

Section 2 - General relationships:

relation(intelligent_design, literal_interpretation_of_the_bible).
relation(god, man).
relation(man, dust_of_the_ground).
relation(god, breath_of_life).
relation(man, living_being).

Section 3 - Encoding:

intelligent_design_is_plausible_because :- pos(intelligent_design,Y).
intelligent_design_is_impossible_because :- neg(intelligent_design,Y).
compare(intelligent_design,X,Y) :- neg(intelligent_design,X),neg(Y,X), intelligent_design != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = intelligent_design.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(current_changes, better_future).

Section 2 - General relationships:

relation(current_changes, delhi).
relation(current_changes, india).

Section 3 - Encoding:

relation(current_changes, better_future) :- pos(current_changes, better_future).
compare(current_changes, X, Y) :- neg(current_changes, X), neg(Y, X), current_changes != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(single_gendered_schools, good).
pos(single_gendered_schools, harm).

Section 2 - General relationships:

relation(single_gendered_schools, harm).

Section 3 - Encoding:

single_gendered_schools_is_good_because :- pos(single_gendered_schools, Y).
single_gendered_schools_is_bad_because :- neg(single_gendered_schools, Y).
compare(single_gendered_schools,X,Y) :- neg(single_gendered_schools,X),neg(Y,X), single_gendered_schools != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = single_gendered_schools.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(nutella, saves_lives).
pos(nutella, loved_by_animals).
pos(nutella, cool).
pos(nutella, healthy).
pos(nutella, kosher).
pos(nutella, gluten_free).
pos(nutella, no_peanuts).
pos(nutella, breakfast_food).
pos(nutella, super_healthy).
pos(nutella, ihop_big_steak_omelette).
pos(nutella, magical).
pos(peanut_butter_and_jelly_sandwich, fatal).
pos(surgery, delicate).
pos(nurse, guilt).
pos(preacher, swift).
pos(taylor_swift, autograph).
pos(italian_willy_wonka, pietro_ferrero).
pos(pietro_ferrero, chocolate_factory).
pos(chocolate_factory, secretive_firm).
pos(world_war_ii, chocolate_rationing).
pos(nazi, love_chocolate).
pos(hazelnuts, plentiful).
pos(hazelnuts, cheap).
pos(breakfast_food, super_healthy).
pos(ihop_big_steak_omelette, convenient).

neg(nutella, fatal).
neg(peanut_butter_and_jelly_sandwich, saves_lives).
neg(surgery, interruption).
neg(nurse, careful).
neg(preacher, liar).
neg(taylor_swift, autograph).
neg(italian_willy_wonka, liar).
neg(chocolate_factory, secretive_firm).
neg(world_war_ii, chocolate_rationing).
neg(nazi, love_chocolate).
neg(hazelnuts, plentiful).
neg(hazelnuts, cheap).
neg(breakfast_food, super_healthy).
neg(ihop_big_steak_omelette, convenient).

Section 2 - General relationships:

relation(nutella, saves_lives).
relation(nutella, loved_by_animals).
relation(nutella, cool).
relation(nutella, healthy).
relation(nutella, kosher).
relation(nutella, gluten_free).
relation(nutella, no_peanuts).
relation(nutella, breakfast_food).
relation(nutella, super_healthy).
relation(nutella, ihop_big_steak_omelette).
relation(nutella, magical).
relation(peanut_butter_and_jelly_sandwich, fatal).
relation(surgery, delicate).
relation(nurse, guilt).
relation(preacher, swift).
relation(taylor_swift, autograph).
relation(italian_willy_wonka, pietro_ferrero).
relation(pietro_ferrero, chocolate_factory).
relation(chocolate_factory, secretive_firm).
relation(world_war_ii, chocolate_rationing).
relation(nazi, love_chocolate).
relation(hazelnuts, plentiful).
relation(hazelnuts, cheap).
relation(breakfast_food, super_healthy).
relation(ihop_big_steak_omelette, convenient).

Section 3 - Encoding:

nutella_saves_lives :- pos(nutella,Y).
nutella_is_loved_by_animals :- pos(nutella,Y).
nutella_is_cool :- pos(nutella,Y).
nutella_is_healthy :- pos(nutella,Y).
nutella_is_kosher :- pos(nutella,Y).
nutella_is_gluten_free :- pos(nutella,Y).
nutella_has_no_peanuts :- pos(nutella,Y).
nutella_is_a_breakfast_food :- pos(nutella,Y).
nutella_is_super_healthy :- pos(nutella,Y).
nutella_is_magical :- pos(nutella,Y).
peanut_butter_and_jelly_sandwich_is_fatal :- pos(peanut_butter_and_jelly_sandwich,Y).
surgery_is_delicate :- pos(surgery,Y).
nurse_is_guilt :- pos(nurse,Y).
preacher_knows_swift :- pos(preacher,Y).
taylor_swift_can_give_autograph :- pos(taylor_swift,Y).
italian_willy_wonka_is_pietro_ferrero :- pos(italian_willy_wonka,Y).
pietro_ferrero_owns_chocolate_factory :- pos(pietro_ferrero,Y).
chocolate_factory_is_secretive_firm :- pos(chocolate_factory,Y).
world_war_ii_has_chocolate_rationing :- pos(world_war_ii,Y).
nazi_loves_chocolate :- pos(nazi,Y).
hazelnuts_are_plentiful :- pos(hazelnuts,Y).
hazelnuts_are_cheap :- pos(hazelnuts,Y).
breakfast_food_is_super_healthy :- pos(breakfast_food,Y).
ihop_big_steak_omelette_is_convenient :- pos(ihop_big_steak_omelette,Y).

nutella_is_not_fatal :- neg(nutella,Y).
peanut_butter_and_jelly_sandwich_does_not_save_lives :- neg(peanut_butter_and_jelly_sandwich,Y).
surgery_does_not_like_interruption :- neg(surgery,Y).
nurse_is_not_careful :- neg(nurse,Y).
preacher_is_not_a_liar :- neg(preacher,Y).
taylor_swift_cannot_give_autograph :- neg(taylor_swift,Y).
italian_willy_wonka_is_not_a_liar :- neg(italian_willy_wonka,Y).
chocolate_factory_is_not_a_secretive_firm :- neg(chocolate_factory,Y).
world_war_ii_does_not_have_chocolate_rationing :- neg(world_war_ii,Y).
nazi_does_not_love_chocolate :- neg(nazi,Y).
hazelnuts_are_not_plentiful :- neg(hazelnuts,Y).
hazelnuts_are_not_cheap :- neg(hazelnuts,Y).
breakfast_food_is_not_super_healthy :- neg(breakfast_food,Y).
ihop_big_steak_omelette_is_not_convenient :- neg(ihop_big_steak_omelette,Y).

compare(nutella,X,Y) :- neg(nutella,X),neg(Y,X), nutella != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = nutella.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(zombies, good_lovers).
pos(werewolves, good_lovers).
pos(humans, good_lovers).
pos(werewolves, human_form).
pos(werewolves, humans).
neg(zombies, human_lovers).
neg(opponents, humans).
neg(opponents, werepeople).
neg(undead, head).
neg(undead, brains).
neg(opponents, clever_word_play).
neg(opponents, fancy_college_words).

% Section 2 - General relationships
relation(werewolves, zombies).
relation(humans, zombies).
relation(werewolves, humans).
relation(opponents, werewolves).
relation(opponents, humans).
relation(undead, brains).
relation(opponents, clever_word_play).
relation(opponents, fancy_college_words).

% Section 3 - Encoding
relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(gun_control, safer).
neg(us, normal_crime_rate).
pos(japan, lowest_homicide_rate).
pos(japan, strictest_gun_control).
pos(government, welfare_of_citizens).
pos(government, safety_of_citizens).

Section 2 - General relationships:

relation(gun_control, homicide_rate).
relation(us, homicide_rate).
relation(us, developed_country).
relation(japan, developed_country).
relation(government, citizens).

Section 3 - Encoding:

gun_control_is_good_because :- pos(gun_control, Y).
gun_control_is_bad_because :- neg(gun_control, Y).
compare(gun_control,X,Y) :- neg(gun_control,X),neg(Y,X), gun_control != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = gun_control.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(alien_mothership, existence).
neg(alien_mothership, detection).
pos(alien_ship, cloaking_device).

Section 2 - General relationships:

relation(alien_mothership, earth).
relation(alien_ship, earth).
relation(alien_ship, atmosphere).
relation(alien_ship, humanity).
relation(alien_ship, existence).
relation(alien_ship, detection).
relation(alien_ship, cloaking_device).
relation(alien_ship, plausibility).
relation(alien_ship, evidence).
relation(alien_ship, observation).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(people, society).
pos(people, chaos).
pos(rza, philosophy).
pos(rza, freedom).
pos(rza, consequences).
pos(person, actions).
pos(person, jail).
pos(person, death).
pos(people, control).
pos(people, freedom).
pos(people, consequences).
pos(people, actions).
pos(person, situation).
pos(person, deed).
pos(people, ethical_code).
pos(anakin_skywalker, jedi_order).
pos(anakin_skywalker, wife).
pos(anakin_skywalker, anger).
pos(anakin_skywalker, power).
pos(anakin_skywalker, attachments).
pos(anakin_skywalker, mother).
pos(anakin_skywalker, padme_amidala).
pos(people, moral_judgment).
pos(people, right_option).
pos(joker, bombs).
pos(joker, boat).
pos(joker, civilians).
pos(joker, convicts).
pos(people, choice).
pos(people, pain).
pos(people, death).
pos(people, moral_code).
pos(people, actions).
pos(people, code).

neg(people, chaos).
neg(rza, consequences).
neg(person, actions).
neg(person, jail).
neg(person, death).
neg(people, control).
neg(people, freedom).
neg(people, consequences).
neg(people, actions).
neg(person, situation).
neg(person, deed).
neg(people, ethical_code).
neg(anakin_skywalker, jedi_order).
neg(anakin_skywalker, wife).
neg(anakin_skywalker, anger).
neg(anakin_skywalker, power).
neg(anakin_skywalker, attachments).
neg(anakin_skywalker, mother).
neg(anakin_skywalker, padme_amidala).
neg(people, moral_judgment).
neg(people, right_option).
neg(joker, bombs).
neg(joker, boat).
neg(joker, civilians).
neg(joker, convicts).
neg(people, choice).
neg(people, pain).
neg(people, death).
neg(people, moral_code).
neg(people, actions).
neg(people, code).

Section 2 - General relationships:

relation(people, society).
relation(rza, philosophy).
relation(person, actions).
relation(person, jail).
relation(person, death).
relation(people, control).
relation(people, freedom).
relation(people, consequences).
relation(people, actions).
relation(person, situation).
relation(person, deed).
relation(people, ethical_code).
relation(anakin_skywalker, jedi_order).
relation(anakin_skywalker, wife).
relation(anakin_skywalker, anger).
relation(anakin_skywalker, power).
relation(anakin_skywalker, attachments).
relation(anakin_skywalker, mother).
relation(anakin_skywalker, padme_amidala).
relation(people, moral_judgment).
relation(people, right_option).
relation(joker, bombs).
relation(joker, boat).
relation(joker, civilians).
relation(joker, convicts).
relation(people, choice).
relation(people, pain).
relation(people, death).
relation(people, moral_code).
relation(people, actions).
relation(people, code).

Section 3 - Encoding:

people_are_good_because :- pos(people, Y).
people_are_bad_because :- neg(people, Y).
rza_is_good_because :- pos(rza, Y).
rza_is_bad_because :- neg(rza, Y).
person_is_good_because :- pos(person, Y).
person_is_bad_because :- neg(person, Y).
anakin_is_good_because :- pos(anakin_skywalker, Y).
anakin_is_bad_because :- neg(anakin_skywalker, Y).
joker_is_good_because :- pos(joker, Y).
joker_is_bad_because :- neg(joker, Y).
compare(people,X,Y) :- neg(people,X),neg(Y,X), people != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = people.
compare(rza,X,Y) :- neg(rza,X),neg(Y,X), rza != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = rza.
compare(person,X,Y) :- neg(person,X),neg(Y,X), person != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = person.
compare(anakin,X,Y) :- neg(anakin_skywalker,X),neg(Y,X), anakin != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = anakin.
compare(joker,X,Y) :- neg(joker,X),neg(Y,X), joker != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = joker.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(peep, cheese).
pos(peep, air).
pos(peep, chronic_chocolate_of_a_time).
pos(peep, case_land).
pos(peep, vases).
pos(peep, liquid_map).
pos(peep, grasslands).
pos(peep, brainac).
pos(peep, walker_ways).
pos(peep, riots).
pos(peep, pond).
pos(peep, elephant).

neg(peep, healthy).
neg(peep, help).
neg(peep, enough).
neg(peep, rocked).

Section 2 - General relationships:

relation(peep, cheese).
relation(peep, air).
relation(peep, chronic_chocolate_of_a_time).
relation(peep, case_land).
relation(peep, vases).
relation(peep, liquid_map).
relation(peep, grasslands).
relation(peep, brainac).
relation(peep, walker_ways).
relation(peep, riots).
relation(peep, pond).
relation(peep, elephant).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(america, metric_system).
pos(america, republic).
pos(america, healthcare).
pos(america, money).
pos(america, military).
pos(america, measurement).

Section 2 - General relationships:

relation(america, republic).
relation(america, healthcare).
relation(america, money).
relation(america, military).
relation(america, measurement).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(tree, sound).
neg(tree, sound).
pos(sentient_beings, sound_waves).
pos(sound_waves, existence).

Section 2 - General relationships:

relation(tree, sound).
relation(tree, sentient_beings).
relation(sound_waves, existence).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(favorite_hero, debate).
neg(debate, poll).
neg(debate, topic).
pos(opponent, burden_of_proof).

Section 2 - General relationships:

relation(favorite_hero, debate).
relation(debate, poll).
relation(debate, topic).
relation(opponent, burden_of_proof).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(my_opinions, important).
pos(my_opinions, accurate).
pos(my_opinions, meaningful).
neg(your_opinions, important).
neg(your_opinions, accurate).
neg(your_opinions, meaningful).
pos(bible, superstitious_men).
neg(bible, grasp_on_reality).
pos(christian, bible).
pos(atheist, i).

Section 2 - General relationships:

relation(my_opinions, your_opinions).
relation(bible, christian).
relation(bible, atheist).
relation(christian, non_believers).

Section 3 - Encoding:

my_opinions_are_good_because :- pos(my_opinions, Y).
my_opinions_are_bad_because :- neg(my_opinions, Y).
your_opinions_are_good_because :- pos(your_opinions, Y).
your_opinions_are_bad_because :- neg(your_opinions, Y).
compare(my_opinions, your_opinions, X) :- neg(my_opinions, X), neg(your_opinions, X), my_opinions != your_opinions.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = my_opinions.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(homework, reviewing).
pos(teachers, educate).
pos(teachers, give_practice_exercises).
pos(practice_exercises, understand).
pos(homework, secure).

neg(daydreamers, listen).
neg(daydreamers, understand).
neg(daydreamers, know).

Section 2 - General relationships:

relation(homework, daydreamers).
relation(teachers, children).
relation(teachers, practice_exercises).
relation(practice_exercises, children).
relation(homework, understand).

Section 3 - Encoding:

homework_is_good_because :- pos(homework, Y).
homework_is_bad_because :- neg(homework, Y).
compare(homework,X,Y) :- neg(homework,X),neg(Y,X), homework != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = homework.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(affirmative_action, minorities).
pos(affirmative_action, benefits).

Section 2 - General relationships:

relation(affirmative_action, minorities).
relation(affirmative_action, benefits).

Section 3 - Encoding:

affirmative_action_is_racist_because :- neg(affirmative_action, minorities).
affirmative_action_is_not_racist_because :- pos(affirmative_action, benefits).
compare(affirmative_action,X,Y) :- neg(affirmative_action,X),neg(Y,X), affirmative_action != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = affirmative_action.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(christians, honor_mary).
pos(christians, ask_intercession).
pos(christiansking, succinct_opening_statement).
pos(christiansking, concise_definitions).
pos(opponent, stated_essence).
pos(opponent, defending_protestantism).
pos(opponent, catholicism).

neg(catholics, simply_honouring_mary).
neg(catholics, unscriptural_realm).
neg(catholics, worshipping_mary).

Section 2 - General relationships:

relation(christians, mary).
relation(christians, intercession).
relation(christiansking, debate_challenge).
relation(christiansking, definitions).
relation(christiansking, proviso).
relation(christiansking, unfolding_debate).
relation(christiansking, catholics).
relation(christiansking, opponent).
relation(opponent, case).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(aremair, harem).
pos(aremair, smile).
pos(aremair, charm).
pos(aremair, women).
pos(aremair, win).
pos(aremair, plan).
pos(aremair, genius).
pos(aremair, scheme).
pos(aremair, privacy).
pos(aremair, love).
pos(aremair, secret).
pos(aremair, agreement).
pos(woman, fun).
pos(woman, idea).
pos(woman, answer).
pos(woman, love).
pos(woman, pride).
neg(aremair, harm).
neg(women, wit).
neg(women, performances).
neg(women, applause).
neg(aremair, flaw).
neg(aremair, gossipy).
neg(aremair, fair).
neg(woman, threat).
neg(woman, agreement).
neg(woman, secret).

Section 2 - General relationships:

relation(aremair, harem).
relation(aremair, smile).
relation(aremair, charm).
relation(aremair, women).
relation(aremair, win).
relation(aremair, plan).
relation(aremair, genius).
relation(aremair, scheme).
relation(aremair, privacy).
relation(aremair, love).
relation(aremair, secret).
relation(aremair, agreement).
relation(woman, fun).
relation(woman, idea).
relation(woman, answer).
relation(woman, love).
relation(woman, pride).
relation(woman, threat).
relation(woman, agreement).
relation(woman, secret).

Section 3 - Encoding:

aremair_is_good_because :- pos(aremair, Y).
aremair_is_bad_because :- neg(aremair, Y).
compare(aremair,X,Y) :- neg(aremair,X),neg(Y,X), aremair != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = aremair.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(male, victims).
neg(women, only_real_victims).
pos(male, rape_victims).
pos(male, forced_oral_sex_victims).

Section 2 - General relationships:

relation(male, domestic_violence).
relation(male, rape).
relation(male, forced_oral_sex).
relation(male, abuse).
relation(male, bystander_reaction).

Section 3 - Encoding:

male_is_good_because :- pos(male,Y).
male_is_bad_because :- neg(male,Y).
compare(male,X,Y) :- neg(male,X),neg(Y,X), male != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = male.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(animal_testing, positive_benefits).
pos(animal_testing, experimental_testing).
pos(animal_testing, positive_for_cat).
pos(animal_testing, positive_for_dog).
pos(animal_testing, gerbil_not_suffering).

neg(animal_testing, wrong).
neg(animal_testing, suffering).

Section 2 - General relationships:

relation(animal_testing, humans).
relation(animal_testing, cat).
relation(animal_testing, dog).
relation(animal_testing, gerbil).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(kinks, you_really_got_me).
pos(you_really_got_me, hard_rock).
pos(you_really_got_me, heavy_metal).
pos(you_really_got_me, rolling_stones_500_greatest_songs_of_all_time).
pos(you_really_got_me, bbc_poll_on_the_100_greatest_guitar_songs_of_all_time).
pos(you_really_got_me, american_pop_singles_charts).
pos(jimmy_page, led_zeppelin).

Section 2 - General relationships:

relation(kinks, you_really_got_me).
relation(you_really_got_me, hard_rock).
relation(you_really_got_me, heavy_metal).
relation(you_really_got_me, rolling_stones_500_greatest_songs_of_all_time).
relation(you_really_got_me, bbc_poll_on_the_100_greatest_guitar_songs_of_all_time).
relation(you_really_got_me, american_pop_singles_charts).
relation(jimmy_page, led_zeppelin).

Section 3 - Encoding:

kinks_is_good_because :- pos(kinks, Y).
kinks_is_bad_because :- neg(kinks, Y).
compare(kinks,X,Y) :- neg(kinks,X),neg(Y,X), kinks != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = kinks.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(term_limits, corruption).
pos(term_limits, self_enrichment).
pos(lame_duck_politicians, buddying_up_to_businesses).
pos(lame_duck_politicians, lucrative_board_seats).
pos(lame_duck_politicians, retirement).
pos(lame_duck_politicians, interests_of_the_people).
pos(re_election_incentives, less_corruption).
pos(first_term_mayors, less_stolen_resources).
pos(second_term_mayors, more_stolen_resources).
pos(term_limits, looking_more_toward_retirement).
pos(term_limits, less_incentive_to_follow_through_on_election_promises).
pos(term_limits, less_incentive_to_face_the_electorate).
pos(term_limits, more_corruption_and_self_enrichment).
pos(term_limits, not_have_to_face_the_electorate_again).
pos(term_limits, whatever_wants).
pos(term_limits, do_whatever_wants).
pos(term_limits, answer_for_poor_management).
pos(term_limits, less_incentive_to_follow_through_on_election_promises).
pos(term_limits, little_tangible_impact_on_a_lame_duck).
pos(term_limits, more_time_to_buddy_up_to_businesses).
pos(term_limits, more_time_to_buddy_up_to_organizations).
pos(term_limits, more_time_to_get_appointments_to_lucrative_board_seats).
pos(term_limits, more_time_to_look_more_toward_retirement).
pos(term_limits, more_time_to_look_less_toward_the_interests_of_the_people).
pos(term_limits, more_time_to_do_whatever_wants).
pos(term_limits, more_time_to_not_have_to_face_the_electorate_again).
pos(term_limits, more_time_to_not_answer_for_poor_management).
pos(term_limits, more_time_to_not_follow_through_on_election_promises).
pos(term_limits, more_time_to_have_little_tangible_impact_on_a_lame_duck).
pos(term_limits, more_time_to_have_more_corruption_and_self_enrichment).

neg(term_limits, less_corruption).
neg(term_limits, less_stolen_resources).
neg(term_limits, more_incentive_to_follow_through_on_election_promises).
neg(term_limits, more_incentive_to_face_the_electorate).
neg(term_limits, less_corruption_and_self_enrichment).
neg(term_limits, have_to_face_the_electorate_again).
neg(term_limits, not_do_whatever_wants).
neg(term_limits, answer_for_poor_management).
neg(term_limits, more_incentive_to_follow_through_on_election_promises).
neg(term_limits, little_tangible_impact_on_a_lame_duck).
neg(term_limits, less_time_to_buddy_up_to_businesses).
neg(term_limits, less_time_to_buddy_up_to_organizations).
neg(term_limits, less_time_to_get_appointments_to_lucrative_board_seats).
neg(term_limits, less_time_to_look_more_toward_retirement).
neg(term_limits, less_time_to_look_less_toward_the_interests_of_the_people).
neg(term_limits, less_time_to_do_whatever_wants).
neg(term_limits, less_time_to_not_have_to_face_the_electorate_again).
neg(term_limits, less_time_to_not_answer_for_poor_management).
neg(term_limits, less_time_to_not_follow_through_on_election_promises).
neg(term_limits, less_time_to_have_little_tangible_impact_on_a_lame_duck).
neg(term_limits, less_time_to_have_more_corruption_and_self_enrichment).

Section 2 - General relationships:

relation(term_limits, corruption).
relation(term_limits, self_enrichment).
relation(term_limits, legislators).
relation(term_limits, final_term_of_office).
relation(term_limits, electorate).
relation(term_limits, poor_management).
relation(term_limits, election_promises).
relation(term_limits, supporters).
relation(term_limits, lame_duck).
relation(term_limits, buddying_up_to_businesses).
relation(term_limits, lucrative_board_seats).
relation(term_limits, retirement).
relation(term_limits, interests_of_the_people).
relation(re_election_incentives, corruption).
relation(re_election_incentives, mayors).
relation(re_election_incentives, first_term).
relation(re_election_incentives, second_term).
relation(re_election_incentives, stolen_resources).
relation(first_term_mayors, stolen_resources).
relation(second_term_mayors, stolen_resources).
relation(lame_duck_politicians, buddying_up_to_businesses).
relation(lame_duck_politicians, lucrative_board_seats).
relation(lame_duck_politicians, retirement).
relation(lame_duck_politicians, interests_of_the_people).

Section 3 - Encoding:

term_limits_are_bad_because :- pos(term_limits,X), neg(term_limits,X).
term_limits_are_good_because :- neg(term_limits,X), pos(term_limits,X).
compare(term_limits,X,Y) :- neg(term_limits,X),neg(term_limits,Y), term_limits != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = term_limits.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(christmas, tacky).
neg(christmas, annoying).
neg(christmas, gimmick).
neg(christmas, excuse).
neg(people, silly).
neg(people, costumes).
neg(people, public).
neg(santa, tree).
neg(relatives, disgusting).
neg(relatives, birds).
neg(relatives, berries).
neg(relatives, foul).
neg(relatives, sprouts).
neg(relatives, nobody).
neg(relatives, diabetes).

Section 2 - General relationships:

relation(christmas, shops).
relation(christmas, plastic).
relation(christmas, tree).
relation(christmas, rubbish).
relation(christmas, people).
relation(christmas, costumes).
relation(christmas, santa).
relation(christmas, relatives).
relation(christmas, birds).
relation(christmas, berries).
relation(christmas, sprouts).
relation(christmas, diabetes).

Section 3 - Encoding:

christmas_is_annoying_because :- neg(christmas,Y).
compare(christmas,X,Y) :- neg(christmas,X),neg(Y,X), christmas != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(democracy, people).
pos(democracy, basic_human_rights).
pos(democracy, freedom_of_speech).
pos(democracy, debates).
pos(democracy, group_discussions).
pos(democracy, equal_participation).
pos(democracy, responsibility).
pos(democracy, awareness).
pos(democracy, non_discrimination).
pos(democracy, equal_political_rights).
pos(democracy, equal_social_rights).
pos(democracy, equal_economic_rights).
pos(democracy, transparency).
pos(democracy, constitution).
pos(democracy, social_peace).
pos(democracy, harmony).
pos(democracy, wise_utilization).
pos(democracy, different_perspectives).
pos(democracy, overall_development).
pos(electoral_college, protection).

Section 2 - General relationships:

relation(democracy, people).
relation(democracy, basic_human_rights).
relation(democracy, freedom_of_speech).
relation(democracy, debates).
relation(democracy, group_discussions).
relation(democracy, equal_participation).
relation(democracy, responsibility).
relation(democracy, awareness).
relation(democracy, non_discrimination).
relation(democracy, equal_political_rights).
relation(democracy, equal_social_rights).
relation(democracy, equal_economic_rights).
relation(democracy, transparency).
relation(democracy, constitution).
relation(democracy, social_peace).
relation(democracy, harmony).
relation(democracy, wise_utilization).
relation(democracy, different_perspectives).
relation(democracy, overall_development).
relation(democracy, electoral_college).

Section 3 - Encoding:

democracy_is_good_because :- pos(democracy, Y).
democracy_is_bad_because :- neg(democracy, Y).
compare(democracy,X,Y) :- neg(democracy,X),neg(Y,X), democracy != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = democracy.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(god, omnipotent).

Section 2 - General relationships:

relation(god, rock).

Section 3 - Encoding:

neg(god, omnipotent) :- relation(god, rock), neg(god, lift_rock).
neg(god, omnipotent) :- neg(god, create_rock).
pos(god, omnipotent) :- relation(god, rock), pos(god, lift_rock).
pos(god, omnipotent) :- pos(god, create_rock).
compare(god, create_rock, lift_rock) :- neg(god, create_rock), neg(god, lift_rock), create_rock != lift_rock.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(mac, pc).
pos(apple, profit).

Section 2 - General relationships:

relation(mac, pc).
relation(apple, mac).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(trinity, doctrine_of_trinity).
pos(protestant_66_book_holy_bible, reliable_source).
pos(kjv_or_niv, reliable_source).

Section 2 - General relationships:

relation(trinity, doctrine).
relation(trinity, scripture).
relation(protestant_66_book_holy_bible, scripture).
relation(kjv_or_niv, scripture).
relation(kjv_or_niv, protestant_66_book_holy_bible).

Section 3 - Encoding:

trinity_is_valid_doctrine :- pos(trinity, X).
trinity_is_not_valid_doctrine :- neg(trinity, X).
compare(trinity, X, Y) :- neg(trinity, X), neg(Y, X), trinity != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = trinity.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(williams, second_chance).
neg(williams, missed_payment).
neg(williams, defaulted_account).
neg(walker_thomas, responsible_business_owner).
neg(walker_thomas, good_business_decision_making_skills).
pos(walker_thomas, extended_credit).
neg(williams, financial_stability).
pos(williams, purchase).
pos(williams, stereo_set).
pos(walker_thomas, knew_williams_financial_situation).

Section 2 - General relationships:

relation(williams, walker_thomas).
relation(williams, purchase).
relation(williams, stereo_set).
relation(walker_thomas, credit).
relation(walker_thomas, loan).
relation(walker_thomas, williams).
relation(williams, financial_hardship).

Section 3 - Encoding:

williams_is_good_because :- pos(williams, Y).
williams_is_bad_because :- neg(williams, Y).
walker_thomas_is_good_because :- pos(walker_thomas, Y).
walker_thomas_is_bad_because :- neg(walker_thomas, Y).
compare(williams,X,Y) :- neg(williams,X),neg(Y,X), williams != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = williams.
compare(walker_thomas,X,Y) :- neg(walker_thomas,X),neg(Y,X), walker_thomas != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = walker_thomas.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(adolf_hitler, science).
pos(adolf_hitler, holocaust).
pos(south_african_government, ethnic_cleansing).
pos(americans, negativity_of_the_media).
pos(muslims, negativity_of_the_media).
pos(germans, negativity_of_the_media).
pos(jews, negativity_of_the_media).
pos(guantanamo_bay, gross_human_rights_violations).
pos(nazis, ethnic_cleansing).
pos(churchill, history_written_by_the_victors).

Section 2 - General relationships:

relation(adolf_hitler, holocaust).
relation(south_african_government, ethnic_cleansing).
relation(americans, muslims).
relation(germans, jews).
relation(guantanamo_bay, concentration_camp).
relation(nazis, ethnic_cleansing).
relation(churchill, history).

Section 3 - Encoding:

adolf_hitler_is_good_because :- pos(adolf_hitler, Y).
adolf_hitler_is_bad_because :- neg(adolf_hitler, Y).
compare(adolf_hitler,X,Y) :- neg(adolf_hitler,X),neg(Y,X), adolf_hitler != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = adolf_hitler.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(sun, circular_movement).
pos(moon, circular_movement).
pos(earth, circular_movement).
pos(sun, perspective).
pos(moon, perspective).

Section 2 - General relationships:

relation(sun, earth).
relation(sun, moon).
relation(earth, moon).
relation(sun, perspective).
relation(moon, perspective).
relation(earth, perspective).

Section 3 - Encoding:

circular_movement(X,Y) :- relation(X,Y).
circular_movement(X,Y) :- circular_movement(Y,X).
perspective(X,Y) :- relation(X,Y).
perspective(X,Y) :- perspective(Y,X).
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(nightmare_moon, strength).
pos(nightmare_moon, elements_of_harmony).
pos(nightmare_moon, power_of_friendship).
pos(nightmare_moon, tantabus).
pos(tantabus, nightmare_moon).
pos(tantabus, luna).
pos(luna, nightmare_moon).
pos(luna, tantabus).
pos(discord, elements_of_harmony).
pos(discord, mane_6).
pos(elements_of_harmony, nightmare_moon).
pos(elements_of_harmony, tirek).
pos(elements_of_harmony, power_of_friendship).
pos(power_of_friendship, elements_of_harmony).
pos(power_of_friendship, nightmare_moon).
pos(power_of_friendship, tirek).
pos(tirek, elements_of_harmony).
pos(tirek, power_of_friendship).

neg(nightmare_moon, jealousy).
neg(nightmare_moon, battle_with_sombra).
neg(nightmare_moon, elements_of_harmony).
neg(nightmare_moon, power_of_friendship).
neg(nightmare_moon, tirek).
neg(nightmare_moon, tantabus).
neg(tantabus, nightmare_moon).
neg(tantabus, luna).
neg(luna, nightmare_moon).
neg(luna, tantabus).
neg(discord, elements_of_harmony).
neg(discord, mane_6).
neg(elements_of_harmony, nightmare_moon).
neg(elements_of_harmony, tirek).
neg(elements_of_harmony, power_of_friendship).
neg(power_of_friendship, elements_of_harmony).
neg(power_of_friendship, nightmare_moon).
neg(power_of_friendship, tirek).
neg(tirek, elements_of_harmony).
neg(tirek, power_of_friendship).

Section 2 - General relationships:

relation(nightmare_moon, jealousy).
relation(nightmare_moon, battle_with_sombra).
relation(nightmare_moon, elements_of_harmony).
relation(nightmare_moon, power_of_friendship).
relation(nightmare_moon, tirek).
relation(nightmare_moon, tantabus).
relation(tantabus, nightmare_moon).
relation(tantabus, luna).
relation(luna, nightmare_moon).
relation(luna, tantabus).
relation(discord, elements_of_harmony).
relation(discord, mane_6).
relation(elements_of_harmony, nightmare_moon).
relation(elements_of_harmony, tirek).
relation(elements_of_harmony, power_of_friendship).
relation(power_of_friendship, elements_of_harmony).
relation(power_of_friendship, nightmare_moon).
relation(power_of_friendship, tirek).
relation(tirek, elements_of_harmony).
relation(tirek, power_of_friendship).

Section 3 - Encoding:

nightmare_moon_is_good_because :- pos(nightmare_moon,Y).
nightmare_moon_is_bad_because :- neg(nightmare_moon,Y).
compare(nightmare_moon,X,Y) :- neg(nightmare_moon,X),neg(Y,X), nightmare_moon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = nightmare_moon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(hunting, good_thing).
neg(trophy_chasers, hunters).
pos(hunters, animals).
neg(hunters, animal_suffering).

Section 2 - General relationships:

relation(hunting, food).
relation(hunting, trophies).
relation(trophy_chasers, hunters).
relation(hunters, animals).
relation(hunters, animal_suffering).
relation(accidents, hunting).

Section 3 - Encoding:

hunting_is_good_because :- pos(hunting, Y).
hunting_is_bad_because :- neg(hunting, Y).
compare(hunting,X,Y) :- neg(hunting,X),neg(Y,X), hunting != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = hunting.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(napoleon_bonaparte, war).
pos(napoleon_bonaparte, battles).
pos(napoleon_bonaparte, outnumbered).
pos(napoleon_bonaparte, navy).
pos(napoleon_bonaparte, troops).
pos(napoleon_bonaparte, tactical_decisions).
pos(napoleon_bonaparte, emperor).
pos(napoleon_bonaparte, obstacles).
pos(george_washington, battles).
pos(george_washington, outnumbered).
pos(george_washington, navy).
pos(george_washington, troops).
pos(george_washington, tactical_decisions).
pos(george_washington, freedom).
pos(george_washington, french_support).

neg(napoleon_bonaparte, mistakes).
neg(napoleon_bonaparte, defeat).
neg(napoleon_bonaparte, cooperation).
neg(george_washington, mistakes).
neg(george_washington, defeat).
neg(george_washington, french_support).

Section 2 - General relationships:

relation(napoleon_bonaparte, war).
relation(napoleon_bonaparte, battles).
relation(napoleon_bonaparte, navy).
relation(napoleon_bonaparte, troops).
relation(napoleon_bonaparte, tactical_decisions).
relation(napoleon_bonaparte, emperor).
relation(napoleon_bonaparte, obstacles).
relation(george_washington, war).
relation(george_washington, battles).
relation(george_washington, navy).
relation(george_washington, troops).
relation(george_washington, tactical_decisions).
relation(george_washington, freedom).
relation(george_washington, french_support).

Section 3 - Encoding:

napoleon_is_good_because :- pos(napoleon_bonaparte, Y).
napoleon_is_bad_because :- neg(napoleon_bonaparte, Y).
george_washington_is_good_because :- pos(george_washington, Y).
george_washington_is_bad_because :- neg(george_washington, Y).
compare(napoleon_bonaparte,X,Y) :- neg(napoleon_bonaparte,X),neg(Y,X), napoleon_bonaparte != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = napoleon_bonaparte.
compare(george_washington,X,Y) :- neg(george_washington,X),neg(Y,X), george_washington != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = george_washington.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(google, reliable_fashion_source).
neg(clip_on_tie_with_t_shirt, fashionable).

Section 2 - General relationships:

relation(google, fashion).
relation(clip_on_tie_with_t_shirt, fashion).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(evolution, enough_evidence).
neg(evolution, powerful_evidence).
neg(evolution, fact).
pos(evolution, theory).

Section 2 - General relationships:

relation(evolution, humans).
relation(evolution, apes).
relation(evolution, common_ancestors).
relation(evolution, different_species).
relation(evolution, prehistoic_era).
relation(evolution, dinosaurs).
relation(evolution, forefathers).
relation(evolution, humans).
relation(evolution, twenty_first_century).
relation(evolution, planets).
relation(evolution, stars).
relation(evolution, cosmology).

Section 3 - Encoding:

evolution_is_false :- neg(evolution,X).
evolution_is_true :- pos(evolution,X).
compare(evolution,X,Y) :- neg(evolution,X),neg(Y,X), evolution != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = evolution.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(marijuana_legalization, reasons).
neg(government, marijuana_legalization).

Section 2 - General relationships:

relation(marijuana_legalization, government).
relation(marijuana_legalization, children).
relation(marijuana_legalization, laws).
relation(marijuana_legalization, audience).
relation(marijuana_legalization, spelling).
relation(marijuana_legalization, conduct).
relation(marijuana_legalization, sources).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(city_life, better).
neg(city_life, air_pollution).
neg(city_life, noise).
pos(country_life, peaceful).
pos(country_life, native_life).

Section 2 - General relationships:

relation(city_life, air_pollution).
relation(city_life, noise).
relation(country_life, peaceful).
relation(country_life, native_life).

Section 3 - Encoding:

city_life_is_good_because :- pos(city_life, Y).
city_life_is_bad_because :- neg(city_life, Y).
country_life_is_good_because :- pos(country_life, Y).
country_life_is_bad_because :- neg(country_life, Y).
compare(city_life, country_life, Y) :- neg(city_life, Y), neg(country_life, Y), city_life != country_life.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(parent, discipline).
pos(parent, child).
pos(discipline, force).
neg(child, listen).
neg(parent, beat).
neg(parent, bruise).
neg(parent, welt).
neg(parent, call).

Section 2 - General relationships:

relation(parent, child).
relation(discipline, child).
relation(yell, child).
relation(ignore, child).
relation(grab, ear).
relation(pull, ear).
relation(attention, child).

Section 3 - Encoding:

discipline_is_good_because :- pos(discipline, Y).
discipline_is_bad_because :- neg(discipline, Y).
compare(discipline,X,Y) :- neg(discipline,X),neg(Y,X), discipline != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = discipline.
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(disabled_people, pay_more_taxes).
pos(disabled_people, pay_taxes).
neg(you, get_money).
pos(you, get_tax_money).
neg(you, smash_head_with_axe).
pos(you, free_speech).
neg(you, kicked_off_internet).
neg(you, ending_up_in_jail).

Section 2 - General relationships:

relation(disabled_people, pay_taxes).
relation(you, get_money).
relation(you, smash_head_with_axe).
relation(you, free_speech).
relation(you, kicked_off_internet).
relation(you, ending_up_in_jail).

Section 3 - Encoding:

disabled_people_should_pay_more_taxes :- pos(disabled_people, pay_more_taxes).
disabled_people_should_not_pay_more_taxes :- neg(disabled_people, pay_more_taxes).
you_should_get_money :- pos(you, get_money).
you_should_not_get_money :- neg(you, get_money).
you_should_not_smash_head_with_axe :- neg(you, smash_head_with_axe).
you_should_have_free_speech :- pos(you, free_speech).
you_should_not_be_kicked_off_internet :- neg(you, kicked_off_internet).
you_should_not_end_up_in_jail :- neg(you, ending_up_in_jail).
compare(disabled_people,X,Y) :- neg(disabled_people,X),neg(Y,X), disabled_people != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = disabled_people.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(xbox, bigger_better_fan_base).
pos(xbox, better_exclusives).
pos(xbox, less_likely_to_run_into_a_stupid_arrogant_twat).

Section 2 - General relationships:

relation(xbox, ps3).
relation(xbox, fan_base).
relation(xbox, exclusives).
relation(xbox, online_gaming).
relation(xbox, money).
relation(xbox, stupid_arrogant_twat).

Section 3 - Encoding:

xbox_is_better_because :- pos(xbox,Y).
xbox_is_worse_because :- neg(xbox,Y).
compare(xbox,X,Y) :- neg(xbox,X),neg(Y,X), xbox != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = xbox.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(logic, experience).
pos(logic, experimentation).
pos(logic, certainty).
pos(con, creative_writing).
pos(con, teaching).
pos(common_sense, logic).
pos(common_sense, reasoning).
pos(common_sense, conclusions).

neg(con, argumentation_method).
neg(con, semantics).
neg(con, logic).
neg(con, content).
neg(con, meaning).

Section 2 - General relationships:

relation(logic, experience).
relation(logic, experimentation).
relation(logic, certainty).
relation(con, argumentation_method).
relation(con, semantics).
relation(con, logic).
relation(con, content).
relation(con, meaning).
relation(con, creative_writing).
relation(con, teaching).
relation(common_sense, logic).
relation(common_sense, reasoning).
relation(common_sense, conclusions).

Section 3 - Encoding:

logic_is_valid_because :- pos(logic,Y).
logic_is_invalid_because :- neg(logic,Y).
con_is_good_because :- pos(con,Y).
con_is_bad_because :- neg(con,Y).
compare(logic,X,Y) :- neg(logic,X),neg(Y,X), logic != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = logic.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(women, boys_sports_teams).
pos(women, skill).

Section 2 - General relationships:

relation(women, boys_sports_teams).
relation(women, skill).
relation(women, wrestling).
relation(wrestling, male).
relation(wrestling, boy_competitors).
relation(wrestling, girl_competitors).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 Section 1 - Negative and positive relationships:
pos(free_expression, support).
pos(free_expression, moral_arguments).
pos(porn, legalization).
neg(porn, dangerous_speech).
neg(porn, extreme_arguments).

Section 2 - General relationships:
relation(porn, free_expression).
relation(porn, dangerous_speech).
relation(porn, extreme_arguments).
relation(porn, moral_arguments).
relation(porn, support).
relation(porn, legalization).

Section 3 - Encoding:
free_expression_is_good_because :- pos(free_expression, Y).
free_expression_is_bad_because :- neg(free_expression, Y).
porn_is_good_because :- pos(porn, Y).
porn_is_bad_because :- neg(porn, Y).
compare(porn,X,Y) :- neg(porn,X),neg(Y,X), porn != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = porn.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(piracy, unauthorized_use).
pos(piracy, reproduction).
pos(piracy, work).
pos(piracy, software_piracy).
pos(piracy, production).
pos(piracy, invention).
pos(piracy, conception).
pos(piracy, copyright).
pos(piracy, theft).

Section 2 - General relationships:

relation(piracy, digital_media).
relation(piracy, movies).
relation(piracy, games).
relation(piracy, software).
relation(piracy, music).
relation(piracy, oxford_dictionary).
relation(piracy, merriam_webster_dictionary).

Section 3 - Encoding:

piracy_is_bad_because :- pos(piracy,X).
compare(piracy,X,Y) :- pos(piracy,X),pos(Y,X), piracy != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(magic, supernatural_power).
neg(magic, natural_forces).

Section 2 - General relationships:

relation(magic, supernatural_power).
relation(magic, natural_forces).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(magic,X,Y) :- neg(magic,X),neg(Y,X), magic != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = magic.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(mitt_romney, campaign_finance_law_reform).
neg(romney, campaign_finance_law_reform).
pos(romney, spending_limits).
neg(romney, spending_limits).
pos(romney, citizens_united).
neg(romney, citizens_united).
pos(romney, corporate_money_in_elections).
neg(romney, corporate_money_in_elections).

Section 2 - General relationships:

relation(mitt_romney, campaign_finance_law_reform).
relation(mitt_romney, spending_limits).
relation(mitt_romney, citizens_united).
relation(mitt_romney, corporate_money_in_elections).

Section 3 - Encoding:

romney_is_good_because :- pos(romney,Y).
romney_is_bad_because :- neg(romney,Y).
compare(romney,X,Y) :- neg(romney,X),neg(Y,X), romney != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = romney.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
neg(welfare, laziness).
pos(welfare, government_aid).
pos(people, laziness).

% Section 2 - General relationships
relation(welfare, people).
relation(government_aid, people).
relation(work, people).
relation(logic, people).
relation(proposition, people).
relation(government_help, people).
relation(loop_holes, government_help).
relation(work, loop_holes).

% Section 3 - Encoding
welfare_promotes_laziness :- neg(welfare, laziness).
people_rely_on_government_aid :- pos(welfare, government_aid), pos(people, laziness).
people_allow_others_to_do_work :- pos(people, laziness).
people_decline_proposition :- pos(proposition, people).
loop_holes_in_government_help :- relation(loop_holes, government_help).
work_avoidance_through_loop_holes :- relation(work, loop_holes).

% Additional rules
compare(welfare, X, Y) :- neg(welfare, X), neg(Y, X), welfare != Y.
compare(X, Y, Z) :- neg(X, Y), neg(X, Z), Y != Z, Y = welfare.
```
###DELIMITER###
 Section 1 - Negative and positive relationships:

neg(racial_segregation, good).

Section 2 - General relationships:

relation(racial_segregation, society).
relation(racial_segregation, economy).
relation(racial_segregation, education).

Section 3 - Encoding:

racial_segregation_is_bad_because :- neg(racial_segregation,Y).
compare(racial_segregation,X,Y) :- neg(racial_segregation,X),neg(Y,X), racial_segregation != Y.
###DELIMITER###
 Section 1 - Negative and positive relationships:

pos(competitive_matchmaking, benefit).

Section 2 - General relationships:

relation(competitive_matchmaking, team_fortress_2).

Section 3 - Encoding:

relation(X,Y):- relation(Y,X).
neg(X,Z) :- relation(X,Y), neg(Y,Z).
neg(X,Z) :- neg(Y,Z), neg(X,Y).
pos(X,Z) :- relation(X,Y), pos(Y,Z).
pos(X,Z) :- pos(Y,Z), pos(X,Y).
compare(elon,X,Y) :- neg(elon,X),neg(Y,X), elon != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = elon.
###DELIMITER###
 ```asp
% Section 1 - Negative and positive relationships
pos(annihilationism, sound_doctrine).
pos(christianity, annihilationism).
pos(revelation_20_15, lake_of_fire).
neg(lake_of_fire, wicked).
pos(revelation_14_11, smoke).
pos(smoke, torment).
pos(torment, forever).
pos(matthew_25_46, everlasting_punishment).
neg(everlasting_punishment, wicked).
pos(matthew_8_12, outer_darkness).
pos(outer_darkness, weeping).
pos(outer_darkness, gnashing_of_teeth).
pos(matthew_22_13, outer_darkness).
pos(matthew_25_30, outer_darkness).
pos(mark_9_43, hell).
pos(mark_9_45, hell).
pos(hell, fire).
pos(fire, never_quenched).
pos(luke_16_23, hell).
pos(hell, torment).
pos(luke_16_24, flame).
pos(flame, torment).

% Section 2 - General relationships
relation(annihilationism, christianity).
relation(revelation_20_15, lake_of_fire).
relation(revelation_14_11, smoke).
relation(smoke, torment).
relation(matthew_25_46, everlasting_punishment).
relation(matthew_8_12, outer_darkness).
relation(matthew_22_13, outer_darkness).
relation(matthew_25_30, outer_darkness).
relation(mark_9_43, hell).
relation(mark_9_45, hell).
relation(luke_16_23, hell).
relation(luke_16_24, flame).

% Section 3 - Encoding
annihilationism_is_sound_doctrine :- pos(annihilationism, sound_doctrine).
wicked_go_to_lake_of_fire :- neg(lake_of_fire, wicked).
wicked_burn_forever :- pos(revelation_14_11, forever).
wicked_are_not_annihilated :- pos(revelation_14_11, forever).
wicked_go_to_everlasting_punishment :- pos(matthew_25_46, everlasting_punishment).
wicked_are_never_annihilated :- neg(everlasting_punishment, wicked).
wicked_go_to_outer_darkness :- pos(matthew_8_12, outer_darkness).
wicked_weep_and_gnash_teeth :- pos(matthew_8_12, weeping).
wicked_weep_and_gnash_teeth :- pos(matthew_8_12, gnashing_of_teeth).
wicked_go_to_hell :- pos(mark_9_43, hell).
wicked_go_to_hell :- pos(mark_9_45, hell).
wicked_are_tormented_in_hell :- pos(luke_16_23, hell).
wicked_are_tormented_in_hell :- pos(luke_16_24, flame).
compare(annihilationism,X,Y) :- neg(annihilationism,X),neg(Y,X), annihilationism != Y.
compare(X,Y,Z) :- neg(X,Y),neg(X,Z), Y != Z, Y = annihilationism.
```
###DELIMITER###
